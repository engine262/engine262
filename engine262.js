/*!
 * engine262 0.0.1 dd05c163162914b12baca4fbabb6e9ce99a217bc
 *
 * Copyright (c) 2018 engine262 Contributors
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["@engine262/engine262"] = {}));
})(this, (function (exports) { 'use strict';

  function applyDecs2203RFactory() {
    function createAddInitializerMethod(e, t) {
      return function (r) {
        !function (e, t) {
          if (e.v) throw new Error("attempted to call addInitializer after decoration was finished");
        }(t), assertCallable(r, "An initializer"), e.push(r);
      };
    }
    function memberDec(e, t, r, n, a, i, o, s) {
      var c;
      switch (a) {
        case 1:
          c = "accessor";
          break;
        case 2:
          c = "method";
          break;
        case 3:
          c = "getter";
          break;
        case 4:
          c = "setter";
          break;
        default:
          c = "field";
      }
      var l,
        u,
        f = {
          kind: c,
          name: o ? "#" + t : _toPropertyKey(t),
          static: i,
          private: o
        },
        p = {
          v: !1
        };
      0 !== a && (f.addInitializer = createAddInitializerMethod(n, p)), 0 === a ? o ? (l = r.get, u = r.set) : (l = function () {
        return this[t];
      }, u = function (e) {
        this[t] = e;
      }) : 2 === a ? l = function () {
        return r.value;
      } : (1 !== a && 3 !== a || (l = function () {
        return r.get.call(this);
      }), 1 !== a && 4 !== a || (u = function (e) {
        r.set.call(this, e);
      })), f.access = l && u ? {
        get: l,
        set: u
      } : l ? {
        get: l
      } : {
        set: u
      };
      try {
        return e(s, f);
      } finally {
        p.v = !0;
      }
    }
    function assertCallable(e, t) {
      if ("function" != typeof e) throw new TypeError(t + " must be a function");
    }
    function assertValidReturnValue(e, t) {
      var r = typeof t;
      if (1 === e) {
        if ("object" !== r || null === t) throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");
        void 0 !== t.get && assertCallable(t.get, "accessor.get"), void 0 !== t.set && assertCallable(t.set, "accessor.set"), void 0 !== t.init && assertCallable(t.init, "accessor.init");
      } else if ("function" !== r) throw new TypeError((0 === e ? "field" : 10 === e ? "class" : "method") + " decorators must return a function or void 0");
    }
    function applyMemberDec(e, t, r, n, a, i, o, s) {
      var c,
        l,
        u,
        f,
        p,
        d,
        h,
        v = r[0];
      if (o ? (0 === a || 1 === a ? (c = {
        get: r[3],
        set: r[4]
      }, u = "get") : 3 === a ? (c = {
        get: r[3]
      }, u = "get") : 4 === a ? (c = {
        set: r[3]
      }, u = "set") : c = {
        value: r[3]
      }, 0 !== a && (1 === a && _setFunctionName(r[4], "#" + n, "set"), _setFunctionName(r[3], "#" + n, u))) : 0 !== a && (c = Object.getOwnPropertyDescriptor(t, n)), 1 === a ? f = {
        get: c.get,
        set: c.set
      } : 2 === a ? f = c.value : 3 === a ? f = c.get : 4 === a && (f = c.set), "function" == typeof v) void 0 !== (p = memberDec(v, n, c, s, a, i, o, f)) && (assertValidReturnValue(a, p), 0 === a ? l = p : 1 === a ? (l = p.init, d = p.get || f.get, h = p.set || f.set, f = {
        get: d,
        set: h
      }) : f = p);else for (var g = v.length - 1; g >= 0; g--) {
        var y;
        void 0 !== (p = memberDec(v[g], n, c, s, a, i, o, f)) && (assertValidReturnValue(a, p), 0 === a ? y = p : 1 === a ? (y = p.init, d = p.get || f.get, h = p.set || f.set, f = {
          get: d,
          set: h
        }) : f = p, void 0 !== y && (void 0 === l ? l = y : "function" == typeof l ? l = [l, y] : l.push(y)));
      }
      if (0 === a || 1 === a) {
        if (void 0 === l) l = function (e, t) {
          return t;
        };else if ("function" != typeof l) {
          var m = l;
          l = function (e, t) {
            for (var r = t, n = 0; n < m.length; n++) r = m[n].call(e, r);
            return r;
          };
        } else {
          var b = l;
          l = function (e, t) {
            return b.call(e, t);
          };
        }
        e.push(l);
      }
      0 !== a && (1 === a ? (c.get = f.get, c.set = f.set) : 2 === a ? c.value = f : 3 === a ? c.get = f : 4 === a && (c.set = f), o ? 1 === a ? (e.push(function (e, t) {
        return f.get.call(e, t);
      }), e.push(function (e, t) {
        return f.set.call(e, t);
      })) : 2 === a ? e.push(f) : e.push(function (e, t) {
        return f.call(e, t);
      }) : Object.defineProperty(t, n, c));
    }
    function applyMemberDecs(e, t) {
      for (var r, n, a = [], i = new Map(), o = new Map(), s = 0; s < t.length; s++) {
        var c = t[s];
        if (Array.isArray(c)) {
          var l,
            u,
            f = c[1],
            p = c[2],
            d = c.length > 3,
            h = f >= 5;
          if (h ? (l = e, 0 != (f -= 5) && (u = n = n || [])) : (l = e.prototype, 0 !== f && (u = r = r || [])), 0 !== f && !d) {
            var v = h ? o : i,
              g = v.get(p) || 0;
            if (!0 === g || 3 === g && 4 !== f || 4 === g && 3 !== f) throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: " + p);
            !g && f > 2 ? v.set(p, f) : v.set(p, !0);
          }
          applyMemberDec(a, l, c, p, f, h, d, u);
        }
      }
      return pushInitializers(a, r), pushInitializers(a, n), a;
    }
    function pushInitializers(e, t) {
      t && e.push(function (e) {
        for (var r = 0; r < t.length; r++) t[r].call(e);
        return e;
      });
    }
    return function (e, t, r) {
      return {
        e: applyMemberDecs(e, t),
        get c() {
          return function (e, t) {
            if (t.length > 0) {
              for (var r = [], n = e, a = e.name, i = t.length - 1; i >= 0; i--) {
                var o = {
                  v: !1
                };
                try {
                  var s = t[i](n, {
                    kind: "class",
                    name: a,
                    addInitializer: createAddInitializerMethod(r, o)
                  });
                } finally {
                  o.v = !0;
                }
                void 0 !== s && (assertValidReturnValue(10, s), n = s);
              }
              return [n, function () {
                for (var e = 0; e < r.length; e++) r[e].call(n);
              }];
            }
          }(e, r);
        }
      };
    };
  }
  function _applyDecs2203R(e, t, r) {
    return (_applyDecs2203R = applyDecs2203RFactory())(e, t, r);
  }
  function _setFunctionName(e, t, n) {
    "symbol" == typeof t && (t = (t = t.description) ? "[" + t + "]" : "");
    try {
      Object.defineProperty(e, "name", {
        configurable: !0,
        value: n ? n + " " + t : t
      });
    } catch (e) {}
    return e;
  }
  function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : String(i);
  }
  function _identity(x) {
    return x;
  }

  const kInternal = Symbol('kInternal');
  function convertValueForKey(key) {
    if (key instanceof JSStringValue) {
      return key.stringValue();
    } else if (key instanceof NumberValue) {
      return R(key);
    }
    return key;
  }
  class ValueMap {
    map;
    constructor() {
      this.map = new Map();
    }
    get size() {
      return this.map.size;
    }
    get(key) {
      return this.map.get(convertValueForKey(key));
    }
    set(key, value) {
      this.map.set(convertValueForKey(key), value);
      return this;
    }
    has(key) {
      return this.map.has(convertValueForKey(key));
    }
    delete(key) {
      return this.map.delete(convertValueForKey(key));
    }
    *keys() {
      for (const [key] of this.entries()) {
        yield key;
      }
    }
    entries() {
      return this[Symbol.iterator]();
    }
    forEach(cb) {
      for (const [key, value] of this.entries()) {
        cb(value, key, this);
      }
    }
    *[Symbol.iterator]() {
      for (const [key, value] of this.map.entries()) {
        if (typeof key === 'string' || typeof key === 'number') {
          yield [Value(key), value];
        } else {
          yield [key, value];
        }
      }
    }
    mark(m) {
      for (const [k, v] of this.entries()) {
        m(k);
        m(v);
      }
    }
  }
  class ValueSet {
    set;
    constructor(init) {
      this.set = new Set();
      if (init !== undefined && init !== null) {
        for (const item of init) {
          this.add(item);
        }
      }
    }
    get size() {
      return this.set.size;
    }
    add(item) {
      this.set.add(convertValueForKey(item));
      return this;
    }
    has(item) {
      return this.set.has(convertValueForKey(item));
    }
    delete(item) {
      return this.set.delete(convertValueForKey(item));
    }
    values() {
      return this[Symbol.iterator]();
    }
    *[Symbol.iterator]() {
      for (const key of this.set.values()) {
        if (typeof key === 'string' || typeof key === 'number') {
          yield Value(key);
        } else {
          yield key;
        }
      }
    }
    mark(m) {
      for (const v of this.values()) {
        m(v);
      }
    }
  }
  let OutOfRange$1 = class OutOfRange extends RangeError {
    detail;
    /* c8 ignore next */
    constructor(fn, detail) {
      super(`${fn}() argument out of range`);
      this.detail = detail;
    }
  };
  function unwind(iterator, maxSteps = 1) {
    let steps = 0;
    while (true) {
      const {
        done,
        value
      } = iterator.next('Unwind');
      if (done) {
        return value;
      }
      /* c8 ignore next */
      steps += 1;
      if (steps > maxSteps) {
        throw new RangeError('Max steps exceeded');
      }
    }
  }
  const kSafeToResume = Symbol('kSameToResume');
  function handleInResume(fn, ...args) {
    const bound = () => fn(...args);
    Reflect.set(bound, kSafeToResume, true);
    return bound;
  }
  function resume(context, completion) {
    const {
      value
    } = context.codeEvaluationState.next(completion);
    if (typeof value === 'function' && value[kSafeToResume] === true) {
      let _temp = value();
      Assert(!(_temp instanceof AbruptCompletion), "value()" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      return _temp;
    }
    return value;
  }
  class CallSite {
    context;
    lastNode = null;
    lastCallNode = null;
    inheritedLastCallNode = null;
    constructCall = false;
    constructor(context) {
      this.context = context;
    }
    clone(context = this.context) {
      const c = new CallSite(context);
      c.lastNode = this.lastNode;
      c.lastCallNode = this.lastCallNode;
      c.inheritedLastCallNode = this.inheritedLastCallNode;
      c.constructCall = this.constructCall;
      return c;
    }
    isTopLevel() {
      return this.context.Function === Value.null;
    }
    isConstructCall() {
      return this.constructCall;
    }
    isAsync() {
      if (!(this.context.Function instanceof NullValue) && this.context.Function.ECMAScriptCode) {
        const code = this.context.Function.ECMAScriptCode;
        return code.type === 'AsyncBody' || code.type === 'AsyncGeneratorBody';
      }
      return false;
    }
    isNative() {
      return !!this.context.Function.nativeFunction;
    }
    getFunctionName() {
      if (!(this.context.Function instanceof NullValue)) {
        const name = this.context.Function.properties.get(Value('name'));
        if (name) {
          let _temp2 = ToString(name.Value);
          Assert(!(_temp2 instanceof AbruptCompletion), "ToString(name.Value)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp2 instanceof Completion) {
            _temp2 = _temp2.Value;
          }
          return _temp2.stringValue();
        }
      }
      return null;
    }
    getSpecifier() {
      if (!(this.context.Function instanceof NullValue)) {
        return this.context.ScriptOrModule.HostDefined.specifier;
      }
      return null;
    }
    setLocation(node) {
      this.lastNode = node;
    }
    setCallLocation(node) {
      this.lastCallNode = node;
    }
    get lineNumber() {
      if (this.lastNode) {
        return this.lastNode.location.start.line;
      }
      return null;
    }
    get columnNumber() {
      if (this.lastNode) {
        return this.lastNode.location.start.column;
      }
      return null;
    }
    loc() {
      if (this.isNative()) {
        return 'native';
      }
      let out = '';
      const specifier = this.getSpecifier();
      if (specifier) {
        out += specifier;
      } else {
        out += '<anonymous>';
      }
      if (this.lineNumber !== null) {
        out += `:${this.lineNumber}`;
        if (this.columnNumber !== null) {
          out += `:${this.columnNumber}`;
        }
      }
      return out.trim();
    }
    toString() {
      const isAsync = this.isAsync();
      const functionName = this.getFunctionName();
      const isConstructCall = this.isConstructCall();
      const isMethodCall = !isConstructCall && !this.isTopLevel();
      let visualFunctionName;
      if (this.inheritedLastCallNode?.CallExpression.type === 'IdentifierReference') {
        visualFunctionName = this.inheritedLastCallNode.CallExpression.name;
      }
      if (visualFunctionName === functionName) {
        visualFunctionName = undefined;
      }
      let string = isAsync ? 'async ' : '';
      if (isConstructCall) {
        string += 'new ';
      }
      if (isMethodCall || isConstructCall) {
        if (functionName) {
          string += functionName;
        } else {
          string += '<anonymous>';
        }
        if (visualFunctionName) {
          string += ` (as ${visualFunctionName})`;
        }
      } else if (functionName) {
        string += functionName;
        if (visualFunctionName) {
          string += ` (as ${visualFunctionName})`;
        }
      } else {
        return `${string}${this.loc()}`;
      }
      return `${string} (${this.loc()})`;
    }
  }
  const kAsyncContext = Symbol('kAsyncContext');
  function captureAsyncStack(stack) {
    let promise = stack[0].context.promiseCapability.Promise;
    for (let i = 0; i < 10; i += 1) {
      if (promise.PromiseFulfillReactions.length !== 1) {
        return;
      }
      const [reaction] = promise.PromiseFulfillReactions;
      if (reaction.Handler && reaction.Handler.Callback[kAsyncContext]) {
        const asyncContext = reaction.Handler.Callback[kAsyncContext];
        stack.push(asyncContext.callSite.clone());
        if ('PromiseState' in asyncContext.promiseCapability.Promise) {
          promise = asyncContext.promiseCapability.Promise;
        } else {
          return;
        }
      } else if (reaction.Capability !== Value.undefined) {
        if ('PromiseState' in reaction.Capability.Promise) {
          promise = reaction.Capability.Promise;
        } else {
          return;
        }
      }
    }
  }
  function captureStack(O) {
    const stack = [];
    for (let i = exports.surroundingAgent.executionContextStack.length - 2; i >= 0; i -= 1) {
      const e = exports.surroundingAgent.executionContextStack[i];
      if (e.VariableEnvironment === undefined && e.Function === Value.null) {
        break;
      }
      const clone = e.callSite.clone();
      const parent = stack[stack.length - 1];
      if (parent && !parent.context.poppedForTailCall) {
        parent.inheritedLastCallNode = clone.lastCallNode;
      }
      stack.push(clone);
      if (e.callSite.isAsync()) {
        i -= 1; // skip original execution context which has no useful information.
      }
    }
    if (stack.length > 0 && stack[0].context.promiseCapability) {
      captureAsyncStack(stack);
    }
    let cache = null;
    const name = Value('stack');
    let _temp3 = DefinePropertyOrThrow(O, name, exports.Descriptor({
      Get: CreateBuiltinFunction(() => {
        if (cache === null) {
          let _temp4 = ToString(O);
          Assert(!(_temp4 instanceof AbruptCompletion), "ToString(O)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp4 instanceof Completion) {
            _temp4 = _temp4.Value;
          }
          let errorString = _temp4.stringValue();
          stack.forEach(s => {
            errorString = `${errorString}\n    at ${s.toString()}`;
          });
          cache = Value(errorString);
        }
        return cache;
      }, 0, name, [], undefined, undefined, Value('get')),
      Set: CreateBuiltinFunction(([value = Value.undefined]) => {
        cache = value;
        return Value.undefined;
      }, 1, name, [], undefined, undefined, Value('set')),
      Enumerable: Value.false,
      Configurable: Value.true
    }));
    Assert(!(_temp3 instanceof AbruptCompletion), "DefinePropertyOrThrow(O, name, Descriptor({\n    Get: CreateBuiltinFunction(() => {\n      if (cache === null) {\n        let errorString = X(ToString(O)).stringValue();\n        stack.forEach((s) => {\n          errorString = `${errorString}\\n    at ${s.toString()}`;\n        });\n        cache = Value(errorString);\n      }\n      return cache;\n    }, 0, name, [], undefined, undefined, Value('get')),\n    Set: CreateBuiltinFunction(([value = Value.undefined]) => {\n      cache = value;\n      return Value.undefined;\n    }, 1, name, [], undefined, undefined, Value('set')),\n    Enumerable: Value.false,\n    Configurable: Value.true,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
  }
  function callable(onCalled = (target, _thisArg, args) => Reflect.construct(target, args)) {
    return function decoartor(classValue, _classContext) {
      return new Proxy(classValue, {
        apply: onCalled
      });
    };
  }
  const isArray = Array.isArray;

  function StringValue(node) {
    switch (node.type) {
      case 'IdentifierName':
      case 'BindingIdentifier':
      case 'IdentifierReference':
      case 'LabelIdentifier':
        return Value(node.name);
      case 'PrivateIdentifier':
        return Value(`#${node.name}`);
      case 'StringLiteral':
        return Value(node.value);
      /*c8 ignore next*/default:
        throw new OutOfRange$1('StringValue', node);
    }
  }

  /** https://tc39.es/ecma262/#sec-static-semantics-isstatic */
  // ClassElement :
  //   MethodDefinition
  //   `static` MethodDefinition
  //   `;`
  function IsStatic(ClassElement) {
    return ClassElement.static;
  }

  /** https://tc39.es/ecma262/#sec-static-semantics-nonconstructorelements */
  // ClassElementList :
  //   ClassElement
  //   ClassElementList ClassElement
  function NonConstructorElements(ClassElementList) {
    return ClassElementList.filter(ClassElement => {
      if (ClassElement.static === false && PropName(ClassElement) === 'constructor') {
        return false;
      }
      return true;
    });
  }

  /** https://tc39.es/ecma262/#sec-static-semantics-constructormethod */
  // ClassElementList :
  //   ClassElement
  //   ClassElementList ClassElement
  function ConstructorMethod(ClassElementList) {
    return ClassElementList.find(ClassElement => ClassElement.static === false && PropName(ClassElement) === 'constructor');
  }

  function PropName(node) {
    switch (node.type) {
      case 'IdentifierName':
        return node.name;
      case 'StringLiteral':
        return node.value;
      case 'MethodDefinition':
      case 'GeneratorMethod':
      case 'AsyncGeneratorMethod':
      case 'AsyncMethod':
      case 'FieldDefinition':
        return PropName(node.ClassElementName);
      default:
        return undefined;
    }
  }

  /** https://tc39.es/ecma262/#sec-numericvalue */

  function NumericValue(node) {
    return Value(node.value);
  }

  /** https://tc39.es/ecma262/#sec-isanonymousfunctiondefinition */
  function IsAnonymousFunctionDefinition(expr) {
    // 1. If IsFunctionDefinition of expr is false, return false.
    if (!IsFunctionDefinition(expr)) {
      return false;
    }
    // 1. Let hasName be HasName of expr.
    const hasName = HasName(expr);
    // 1. If hasName is true, return false.
    if (hasName) {
      return false;
    }
    // 1. Return true.
    return true;
  }

  function IsFunctionDefinition(node) {
    if (node.type === 'ParenthesizedExpression') {
      return IsFunctionDefinition(node.Expression);
    }
    return node.type === 'FunctionExpression' || node.type === 'GeneratorExpression' || node.type === 'AsyncGeneratorExpression' || node.type === 'AsyncFunctionExpression' || node.type === 'ClassExpression' || node.type === 'ArrowFunction' || node.type === 'AsyncArrowFunction';
  }

  function HasName(node) {
    if (node.type === 'ParenthesizedExpression') {
      return HasName(node.Expression);
    }
    return 'BindingIdentifier' in node && !!node.BindingIdentifier;
  }

  function IsIdentifierRef(node) {
    return node.type === 'IdentifierReference';
  }

  function LexicallyDeclaredNames(node) {
    switch (node.type) {
      case 'Script':
        if (node.ScriptBody) {
          return LexicallyDeclaredNames(node.ScriptBody);
        }
        return [];
      case 'ScriptBody':
        return TopLevelLexicallyDeclaredNames(node.StatementList);
      case 'FunctionBody':
      case 'GeneratorBody':
      case 'AsyncBody':
      case 'AsyncGeneratorBody':
        return TopLevelLexicallyDeclaredNames(node.FunctionStatementList);
      case 'ClassStaticBlockBody':
        return TopLevelLexicallyDeclaredNames(node.ClassStaticBlockStatementList);
      default:
        return [];
    }
  }

  function TopLevelLexicallyDeclaredNames(node) {
    if (isArray(node)) {
      const names = [];
      for (const StatementListItem of node) {
        names.push(...TopLevelLexicallyDeclaredNames(StatementListItem));
      }
      return names;
    }
    switch (node.type) {
      case 'ClassDeclaration':
      case 'LexicalDeclaration':
        return BoundNames(node);
      default:
        return [];
    }
  }

  function BoundNames(node) {
    if (isArray(node)) {
      const names = [];
      for (const item of node) {
        names.push(...BoundNames(item));
      }
      return names;
    }
    switch (node.type) {
      case 'BindingIdentifier':
        return [StringValue(node)];
      case 'LexicalDeclaration':
        return BoundNames(node.BindingList);
      case 'LexicalBinding':
        if (node.BindingIdentifier) {
          return BoundNames(node.BindingIdentifier);
        }
        return BoundNames(node.BindingPattern);
      case 'VariableStatement':
        return BoundNames(node.VariableDeclarationList);
      case 'VariableDeclaration':
        if (node.BindingIdentifier) {
          return BoundNames(node.BindingIdentifier);
        }
        return BoundNames(node.BindingPattern);
      case 'ForDeclaration':
        return BoundNames(node.ForBinding);
      case 'ForBinding':
        if (node.BindingIdentifier) {
          return BoundNames(node.BindingIdentifier);
        }
        return BoundNames(node.BindingPattern);
      case 'FunctionDeclaration':
      case 'GeneratorDeclaration':
      case 'AsyncFunctionDeclaration':
      case 'AsyncGeneratorDeclaration':
      case 'ClassDeclaration':
        if (node.BindingIdentifier) {
          return BoundNames(node.BindingIdentifier);
        }
        return [Value('*default*')];
      case 'ImportSpecifier':
        return BoundNames(node.ImportedBinding);
      case 'ExportDeclaration':
        if (node.FromClause || node.NamedExports) {
          return [];
        }
        if (node.VariableStatement) {
          return BoundNames(node.VariableStatement);
        }
        if (node.Declaration) {
          return BoundNames(node.Declaration);
        }
        if (node.HoistableDeclaration) {
          const declarationNames = BoundNames(node.HoistableDeclaration);
          return declarationNames;
        }
        if (node.ClassDeclaration) {
          const declarationNames = BoundNames(node.ClassDeclaration);
          return declarationNames;
        }
        if (node.AssignmentExpression) {
          return [Value('*default*')];
        }
        throw new OutOfRange$1('BoundNames', node);
      case 'SingleNameBinding':
        return BoundNames(node.BindingIdentifier);
      case 'BindingRestElement':
        if (node.BindingIdentifier) {
          return BoundNames(node.BindingIdentifier);
        }
        return BoundNames(node.BindingPattern);
      case 'BindingRestProperty':
        return BoundNames(node.BindingIdentifier);
      case 'BindingElement':
        return BoundNames(node.BindingPattern);
      case 'BindingProperty':
        return BoundNames(node.BindingElement);
      case 'ObjectBindingPattern':
        {
          const names = BoundNames(node.BindingPropertyList);
          if (node.BindingRestProperty) {
            names.push(...BoundNames(node.BindingRestProperty));
          }
          return names;
        }
      case 'ArrayBindingPattern':
        {
          const names = BoundNames(node.BindingElementList);
          if (node.BindingRestElement) {
            names.push(...BoundNames(node.BindingRestElement));
          }
          return names;
        }
      default:
        return [];
    }
  }

  function VarDeclaredNames(node) {
    if (isArray(node)) {
      const names = [];
      for (const item of node) {
        names.push(...VarDeclaredNames(item));
      }
      return names;
    }
    switch (node.type) {
      case 'VariableStatement':
        return BoundNames(node.VariableDeclarationList);
      case 'VariableDeclaration':
        return BoundNames(node);
      case 'IfStatement':
        {
          const names = VarDeclaredNames(node.Statement_a);
          if (node.Statement_b) {
            names.push(...VarDeclaredNames(node.Statement_b));
          }
          return names;
        }
      case 'Block':
        return VarDeclaredNames(node.StatementList);
      case 'WhileStatement':
        return VarDeclaredNames(node.Statement);
      case 'DoWhileStatement':
        return VarDeclaredNames(node.Statement);
      case 'ForStatement':
        {
          const names = [];
          if (node.VariableDeclarationList) {
            names.push(...VarDeclaredNames(node.VariableDeclarationList));
          }
          names.push(...VarDeclaredNames(node.Statement));
          return names;
        }
      case 'ForInStatement':
      case 'ForOfStatement':
      case 'ForAwaitStatement':
        {
          const names = [];
          if (node.ForBinding) {
            names.push(...BoundNames(node.ForBinding));
          }
          names.push(...VarDeclaredNames(node.Statement));
          return names;
        }
      case 'WithStatement':
        return VarDeclaredNames(node.Statement);
      case 'SwitchStatement':
        return VarDeclaredNames(node.CaseBlock);
      case 'CaseBlock':
        {
          const names = [];
          if (node.CaseClauses_a) {
            names.push(...VarDeclaredNames(node.CaseClauses_a));
          }
          if (node.DefaultClause) {
            names.push(...VarDeclaredNames(node.DefaultClause));
          }
          if (node.CaseClauses_b) {
            names.push(...VarDeclaredNames(node.CaseClauses_b));
          }
          return names;
        }
      case 'CaseClause':
      case 'DefaultClause':
        if (node.StatementList) {
          return VarDeclaredNames(node.StatementList);
        }
        return [];
      case 'LabelledStatement':
        return VarDeclaredNames(node.LabelledItem);
      case 'TryStatement':
        {
          const names = VarDeclaredNames(node.Block);
          if (node.Catch) {
            names.push(...VarDeclaredNames(node.Catch));
          }
          if (node.Finally) {
            names.push(...VarDeclaredNames(node.Finally));
          }
          return names;
        }
      case 'Catch':
        return VarDeclaredNames(node.Block);
      case 'Script':
        if (node.ScriptBody) {
          return VarDeclaredNames(node.ScriptBody);
        }
        return [];
      case 'ScriptBody':
        return TopLevelVarDeclaredNames(node.StatementList);
      case 'FunctionBody':
      case 'GeneratorBody':
      case 'AsyncBody':
      case 'AsyncGeneratorBody':
        return TopLevelVarDeclaredNames(node.FunctionStatementList);
      case 'ClassStaticBlockBody':
        return TopLevelVarDeclaredNames(node.ClassStaticBlockStatementList);
      case 'ExportDeclaration':
        if (node.VariableStatement) {
          return BoundNames(node);
        }
        return [];
      default:
        return [];
    }
  }

  function TopLevelVarDeclaredNames(node) {
    if (isArray(node)) {
      const names = [];
      for (const item of node) {
        names.push(...TopLevelVarDeclaredNames(item));
      }
      return names;
    }
    switch (node.type) {
      case 'ClassDeclaration':
      case 'LexicalDeclaration':
        return [];
      case 'FunctionDeclaration':
      case 'GeneratorDeclaration':
      case 'AsyncFunctionDeclaration':
      case 'AsyncGeneratorDeclaration':
        return BoundNames(node);
      default:
        return VarDeclaredNames(node);
    }
  }

  function VarScopedDeclarations(node) {
    if (isArray(node)) {
      const declarations = [];
      for (const item of node) {
        declarations.push(...VarScopedDeclarations(item));
      }
      return declarations;
    }
    switch (node.type) {
      case 'VariableStatement':
        return VarScopedDeclarations(node.VariableDeclarationList);
      case 'VariableDeclaration':
        return [node];
      case 'Block':
        return VarScopedDeclarations(node.StatementList);
      case 'IfStatement':
        {
          const declarations = VarScopedDeclarations(node.Statement_a);
          if (node.Statement_b) {
            declarations.push(...VarScopedDeclarations(node.Statement_b));
          }
          return declarations;
        }
      case 'WhileStatement':
        return VarScopedDeclarations(node.Statement);
      case 'DoWhileStatement':
        return VarScopedDeclarations(node.Statement);
      case 'ForStatement':
        {
          const names = [];
          if (node.VariableDeclarationList) {
            names.push(...VarScopedDeclarations(node.VariableDeclarationList));
          }
          names.push(...VarScopedDeclarations(node.Statement));
          return names;
        }
      case 'ForInStatement':
      case 'ForOfStatement':
      case 'ForAwaitStatement':
        {
          const declarations = [];
          if (node.ForBinding) {
            declarations.push(node.ForBinding);
          }
          declarations.push(...VarScopedDeclarations(node.Statement));
          return declarations;
        }
      case 'WithStatement':
        return VarScopedDeclarations(node.Statement);
      case 'SwitchStatement':
        return VarScopedDeclarations(node.CaseBlock);
      case 'CaseBlock':
        {
          const names = [];
          if (node.CaseClauses_a) {
            names.push(...VarScopedDeclarations(node.CaseClauses_a));
          }
          if (node.DefaultClause) {
            names.push(...VarScopedDeclarations(node.DefaultClause));
          }
          if (node.CaseClauses_b) {
            names.push(...VarScopedDeclarations(node.CaseClauses_b));
          }
          return names;
        }
      case 'CaseClause':
      case 'DefaultClause':
        if (node.StatementList) {
          return VarScopedDeclarations(node.StatementList);
        }
        return [];
      case 'LabelledStatement':
        return VarScopedDeclarations(node.LabelledItem);
      case 'TryStatement':
        {
          const declarations = VarScopedDeclarations(node.Block);
          if (node.Catch) {
            declarations.push(...VarScopedDeclarations(node.Catch));
          }
          if (node.Finally) {
            declarations.push(...VarScopedDeclarations(node.Finally));
          }
          return declarations;
        }
      case 'Catch':
        return VarScopedDeclarations(node.Block);
      case 'ExportDeclaration':
        if (node.VariableStatement) {
          return VarScopedDeclarations(node.VariableStatement);
        }
        return [];
      case 'Script':
        if (node.ScriptBody) {
          return VarScopedDeclarations(node.ScriptBody);
        }
        return [];
      case 'ScriptBody':
        return TopLevelVarScopedDeclarations(node.StatementList);
      case 'Module':
        if (node.ModuleBody) {
          return VarScopedDeclarations(node.ModuleBody);
        }
        return [];
      case 'ModuleBody':
        return VarScopedDeclarations(node.ModuleItemList);
      case 'FunctionBody':
      case 'GeneratorBody':
      case 'AsyncBody':
      case 'AsyncGeneratorBody':
        return TopLevelVarScopedDeclarations(node.FunctionStatementList);
      case 'ClassStaticBlockBody':
        return TopLevelVarScopedDeclarations(node.ClassStaticBlockStatementList);
      default:
        return [];
    }
  }

  function TopLevelVarScopedDeclarations(node) {
    if (isArray(node)) {
      const declarations = [];
      for (const item of node) {
        declarations.push(...TopLevelVarScopedDeclarations(item));
      }
      return declarations;
    }
    switch (node.type) {
      case 'ClassDeclaration':
      case 'LexicalDeclaration':
        return [];
      case 'FunctionDeclaration':
      case 'GeneratorDeclaration':
      case 'AsyncFunctionDeclaration':
      case 'AsyncGeneratorDeclaration':
        return [DeclarationPart(node)];
      default:
        return VarScopedDeclarations(node);
    }
  }

  function DeclarationPart(node) {
    return node;
  }

  function LexicallyScopedDeclarations(node) {
    if (isArray(node)) {
      const declarations = [];
      for (const item of node) {
        declarations.push(...LexicallyScopedDeclarations(item));
      }
      return declarations;
    }
    switch (node.type) {
      case 'LabelledStatement':
        return LexicallyScopedDeclarations(node.LabelledItem);
      case 'Script':
        if (node.ScriptBody) {
          return LexicallyScopedDeclarations(node.ScriptBody);
        }
        return [];
      case 'ScriptBody':
        return TopLevelLexicallyScopedDeclarations(node.StatementList);
      case 'Module':
        if (node.ModuleBody) {
          return LexicallyScopedDeclarations(node.ModuleBody);
        }
        return [];
      case 'ModuleBody':
        return LexicallyScopedDeclarations(node.ModuleItemList);
      case 'FunctionBody':
      case 'GeneratorBody':
      case 'AsyncBody':
      case 'AsyncGeneratorBody':
        return TopLevelLexicallyScopedDeclarations(node.FunctionStatementList);
      case 'ClassStaticBlockBody':
        return TopLevelLexicallyScopedDeclarations(node.ClassStaticBlockStatementList);
      case 'ImportDeclaration':
        return [];
      case 'ClassDeclaration':
      case 'LexicalDeclaration':
      case 'FunctionDeclaration':
      case 'GeneratorDeclaration':
      case 'AsyncFunctionDeclaration':
      case 'AsyncGeneratorDeclaration':
        return [DeclarationPart(node)];
      case 'CaseBlock':
        {
          const names = [];
          if (node.CaseClauses_a) {
            names.push(...LexicallyScopedDeclarations(node.CaseClauses_a));
          }
          if (node.DefaultClause) {
            names.push(...LexicallyScopedDeclarations(node.DefaultClause));
          }
          if (node.CaseClauses_b) {
            names.push(...LexicallyScopedDeclarations(node.CaseClauses_b));
          }
          return names;
        }
      case 'CaseClause':
      case 'DefaultClause':
        if (node.StatementList) {
          return LexicallyScopedDeclarations(node.StatementList);
        }
        return [];
      case 'ExportDeclaration':
        if (node.Declaration) {
          return [DeclarationPart(node.Declaration)];
        }
        if (node.HoistableDeclaration) {
          return [DeclarationPart(node.HoistableDeclaration)];
        }
        if (node.ClassDeclaration) {
          return [node.ClassDeclaration];
        }
        if (node.AssignmentExpression) {
          return [node];
        }
        return [];
      default:
        return [];
    }
  }

  function TopLevelLexicallyScopedDeclarations(node) {
    if (isArray(node)) {
      const declarations = [];
      for (const item of node) {
        declarations.push(...TopLevelLexicallyScopedDeclarations(item));
      }
      return declarations;
    }
    switch (node.type) {
      case 'ClassDeclaration':
      case 'LexicalDeclaration':
        return [node];
      default:
        return [];
    }
  }

  function IsConstantDeclaration(node) {
    // TODO(ts): node === 'const' looks like a typo?
    return node === 'const' || node.LetOrConst === 'const';
  }

  function IsInTailPosition(_node) {
    return false;
  }

  function ExpectedArgumentCount(FormalParameterList) {
    if (FormalParameterList.length === 0) {
      return 0;
    }
    let count = 0;
    for (const FormalParameter of FormalParameterList.slice(0, -1)) {
      const BindingElement = FormalParameter;
      if (HasInitializer(BindingElement)) {
        return count;
      }
      count += 1;
    }
    const last = FormalParameterList[FormalParameterList.length - 1];
    if (last.type === 'BindingRestElement') {
      return count;
    }
    if (HasInitializer(last)) {
      return count;
    }
    return count + 1;
  }

  function HasInitializer(node) {
    return 'Initializer' in node && !!node.Initializer;
  }

  function IsSimpleParameterList(node) {
    if (isArray(node)) {
      for (const n of node) {
        if (!IsSimpleParameterList(n)) {
          return false;
        }
      }
      return true;
    }
    switch (node.type) {
      case 'SingleNameBinding':
        return node.Initializer === null;
      case 'BindingElement':
        return false;
      case 'BindingRestElement':
        return false;
      /*c8 ignore next*/default:
        throw new OutOfRange$1('IsSimpleParameterList', node);
    }
  }

  function ContainsExpression(node) {
    if (isArray(node)) {
      for (const n of node) {
        if (ContainsExpression(n)) {
          return true;
        }
      }
      return false;
    }
    switch (node.type) {
      case 'SingleNameBinding':
        return !!node.Initializer;
      case 'BindingElement':
        if (ContainsExpression(node.BindingPattern)) {
          return true;
        }
        return !!node.Initializer;
      case 'ObjectBindingPattern':
        if (ContainsExpression(node.BindingPropertyList)) {
          return true;
        }
        if (node.BindingRestProperty) {
          return ContainsExpression(node.BindingRestProperty);
        }
        return false;
      case 'BindingProperty':
        if (node.PropertyName && 'ComputedPropertyName' in node.PropertyName && node.PropertyName.ComputedPropertyName) {
          return true;
        }
        return ContainsExpression(node.BindingElement);
      case 'BindingRestProperty':
        if (node.BindingIdentifier) {
          return false;
        }
        // TODO(ts): BindingRestProperty and BindingElement is different. Is there missing a case?
        // @ts-expect-error
        return ContainsExpression(node.BindingPattern);
      case 'ArrayBindingPattern':
        if (ContainsExpression(node.BindingElementList)) {
          return true;
        }
        if (node.BindingRestElement) {
          return ContainsExpression(node.BindingRestElement);
        }
        return false;
      case 'BindingRestElement':
        if (node.BindingIdentifier) {
          return false;
        }
        return ContainsExpression(node.BindingPattern);
      case 'Elision':
        return false;
      /*c8 ignore next*/default:
        throw new OutOfRange$1('ContainsExpression', node);
    }
  }

  /** https://tc39.es/ecma262/#sec-static-semantics-isstrict */
  function IsStrict({
    ScriptBody
  }) {
    // 1. If ScriptBody is present and the Directive Prologue of ScriptBody contains a Use Strict Directive, return true; otherwise, return false.
    return ScriptBody.strict;
  }

  /** https://tc39.es/ecma262/#sec-static-semantics-bodytext */
  //  RegularExpressionLiteral :: `/` RegularExpressionBody `/` RegularExpressionFlags
  function BodyText(RegularExpressionLiteral) {
    return RegularExpressionLiteral.RegularExpressionBody;
  }

  /** https://tc39.es/ecma262/#sec-static-semantics-flagtext */
  //   RegularExpressionLiteral :: `/` RegularExpressionBody `/` RegularExpressionFlags
  function FlagText(RegularExpressionLiteral) {
    return RegularExpressionLiteral.RegularExpressionFlags;
  }

  function ModuleRequests(node) {
    switch (node.type) {
      case 'Module':
        if (node.ModuleBody) {
          return ModuleRequests(node.ModuleBody);
        }
        return [];
      case 'ModuleBody':
        {
          const moduleNames = [];
          for (const item of node.ModuleItemList) {
            moduleNames.push(...ModuleRequests(item));
          }
          return moduleNames;
        }
      case 'ImportDeclaration':
        if (node.FromClause) {
          return ModuleRequests(node.FromClause);
        }
        return [StringValue(node.ModuleSpecifier)];
      case 'ExportDeclaration':
        if (node.FromClause) {
          return ModuleRequests(node.FromClause);
        }
        return [];
      case 'StringLiteral':
        return [StringValue(node)];
      default:
        return [];
    }
  }

  function ImportEntries(node) {
    switch (node.type) {
      case 'Module':
        if (node.ModuleBody) {
          return ImportEntries(node.ModuleBody);
        }
        return [];
      case 'ModuleBody':
        {
          const entries = [];
          for (const item of node.ModuleItemList) {
            entries.push(...ImportEntries(item));
          }
          return entries;
        }
      case 'ImportDeclaration':
        if (node.FromClause) {
          // 1. Let module be the sole element of ModuleRequests of FromClause.
          const module = ModuleRequests(node.FromClause)[0];
          // 2. Return ImportEntriesForModule of ImportClause with argument module.
          return ImportEntriesForModule(node.ImportClause, module);
        }
        return [];
      default:
        return [];
    }
  }

  function ExportEntries(node) {
    if (isArray(node)) {
      const entries = [];
      node.forEach(n => {
        entries.push(...ExportEntries(n));
      });
      return entries;
    }
    switch (node.type) {
      case 'Module':
        if (!node.ModuleBody) {
          return [];
        }
        return ExportEntries(node.ModuleBody);
      case 'ModuleBody':
        return ExportEntries(node.ModuleItemList);
      case 'ExportDeclaration':
        switch (true) {
          case !!node.ExportFromClause && !!node.FromClause:
            {
              // `export` ExportFromClause FromClause `;`
              // 1. Let module be the sole element of ModuleRequests of FromClause.
              const module = ModuleRequests(node.FromClause)[0];
              // 2. Return ExportEntriesForModule(ExportFromClause, module).
              return ExportEntriesForModule(node.ExportFromClause, module);
            }
          case !!node.NamedExports:
            {
              // `export` NamedExports `;`
              // 1. Return ExportEntriesForModule(NamedExports, null).
              return ExportEntriesForModule(node.NamedExports, Value.null);
            }
          case !!node.VariableStatement:
            {
              // `export` VariableStatement
              // 1. Let entries be a new empty List.
              const entries = [];
              // 2. Let names be the BoundNames of VariableStatement.
              const names = BoundNames(node.VariableStatement);
              // 3. For each name in names, do
              for (const name of names) {
                // a. Append the ExportEntry Record { [[ModuleRequest]]: null, [[ImportName]]: null, [[LocalName]]: name, [[ExportName]]: name } to entries.
                entries.push({
                  ModuleRequest: Value.null,
                  ImportName: Value.null,
                  LocalName: name,
                  ExportName: name
                });
              }
              // 4. Return entries.
              return entries;
            }
          case !!node.Declaration:
            {
              // `export` Declaration
              // 1. Let entries be a new empty List.
              const entries = [];
              // 2. Let names be the BoundNames of Declaration.
              const names = BoundNames(node.Declaration);
              // 3. For each name in names, do
              for (const name of names) {
                // a. Append the ExportEntry Record { [[ModuleRequest]]: null, [[ImportName]]: null, [[LocalName]]: name, [[ExportName]]: name } to entries.
                entries.push({
                  ModuleRequest: Value.null,
                  ImportName: Value.null,
                  LocalName: name,
                  ExportName: name
                });
              }
              // 4. Return entries.
              return entries;
            }
          case node.default && !!node.HoistableDeclaration:
            {
              // `export` `default` HoistableDeclaration
              // 1. Let names be BoundNames of HoistableDeclaration.
              const names = BoundNames(node.HoistableDeclaration);
              // 2. Let localName be the sole element of names.
              const localName = names[0];
              // 3. Return a new List containing the ExportEntry Record { [[ModuleRequest]]: null, [[ImportName]]: null, [[LocalName]]: localName, [[ExportName]]: "default" }.
              return [{
                ModuleRequest: Value.null,
                ImportName: Value.null,
                LocalName: localName,
                ExportName: Value('default')
              }];
            }
          case node.default && !!node.ClassDeclaration:
            {
              // `export` `default` ClassDeclaration
              // 1. Let names be BoundNames of ClassDeclaration.
              const names = BoundNames(node.ClassDeclaration);
              // 2. Let localName be the sole element of names.
              const localName = names[0];
              // 3. Return a new List containing the ExportEntry Record { [[ModuleRequest]]: null, [[ImportName]]: null, [[LocalName]]: localName, [[ExportName]]: "default" }.
              return [{
                ModuleRequest: Value.null,
                ImportName: Value.null,
                LocalName: localName,
                ExportName: Value('default')
              }];
            }
          case node.default && !!node.AssignmentExpression:
            {
              // `export` `default` AssignmentExpression `;`
              // 1. Let entry be the ExportEntry Record { [[ModuleRequest]]: null, [[ImportName]]: null, [[LocalName]]: "*default*", [[ExportName]]: "default" }.
              const entry = {
                ModuleRequest: Value.null,
                ImportName: Value.null,
                LocalName: Value('*default*'),
                ExportName: Value('default')
              };
              // 2. Return a new List containing entry.
              return [entry];
            }
          /*c8 ignore next*/default:
            throw new OutOfRange$1('ExportEntries', node);
        }
      default:
        return [];
    }
  }

  /** https://tc39.es/ecma262/#sec-importedlocalnames */
  function ImportedLocalNames(importEntries) {
    // 1. Let localNames be a new empty List.
    const localNames = [];
    // 2. For each ImportEntry Record i in importEntries, do
    for (const i of importEntries) {
      // a. Append i.[[LocalName]] to localNames.
      localNames.push(i.LocalName);
    }
    // 3. Return localNames.
    return localNames;
  }

  function IsDestructuring(node) {
    switch (node.type) {
      case 'ObjectBindingPattern':
      case 'ArrayBindingPattern':
      case 'ObjectLiteral':
      case 'ArrayLiteral':
        return true;
      case 'ForDeclaration':
        return IsDestructuring(node.ForBinding);
      case 'ForBinding':
        if (node.BindingIdentifier) {
          return false;
        }
        return true;
      default:
        return false;
    }
  }

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  var regex$2=/[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF]/;

  var isUnicodeIDStartRegex = /*@__PURE__*/getDefaultExportFromCjs(regex$2);

  var regex$1=/[0-9A-Z_a-z\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u07FD\u0800-\u082D\u0840-\u085B\u0860-\u086A\u0870-\u0887\u0889-\u088E\u0898-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u09FE\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3C-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C5D\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDD\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1-\u0CF3\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECE\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1715\u171F-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B4C\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CD0-\u1CD2\u1CD4-\u1CFA\u1D00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA827\uA82C\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD27\uDD30-\uDD39\uDE80-\uDEA9\uDEAB\uDEAC\uDEB0\uDEB1\uDEFD-\uDF1C\uDF27\uDF30-\uDF50\uDF70-\uDF85\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC00-\uDC46\uDC66-\uDC75\uDC7F-\uDCBA\uDCC2\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD44-\uDD47\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDC9-\uDDCC\uDDCE-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E-\uDE41\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3B-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC5E-\uDC61\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF1D-\uDF2B\uDF30-\uDF39\uDF40-\uDF46]|\uD806[\uDC00-\uDC3A\uDCA0-\uDCE9\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B-\uDD43\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDE1\uDDE3\uDDE4\uDE00-\uDE3E\uDE47\uDE50-\uDE99\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF6\uDF00-\uDF10\uDF12-\uDF3A\uDF3E-\uDF42\uDF50-\uDF59\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC40-\uDC55]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDE70-\uDEBE\uDEC0-\uDEC9\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F\uDFE0\uDFE1\uDFE3\uDFE4\uDFF0\uDFF1]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDC30-\uDC6D\uDC8F\uDD00-\uDD2C\uDD30-\uDD3D\uDD40-\uDD49\uDD4E\uDE90-\uDEAE\uDEC0-\uDEF9]|\uD839[\uDCD0-\uDCF9\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4B\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF]|\uDB40[\uDD00-\uDDEF]/;

  var isUnicodeIDContinueRegex = /*@__PURE__*/getDefaultExportFromCjs(regex$1);

  var regex=/[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;

  var isSpaceSeparatorRegex = /*@__PURE__*/getDefaultExportFromCjs(regex);

  /** Coerces a property key into a numeric index */

  const MaybeAssignTokens = [
  // Logical
  ['NULLISH', '??', 3], ['OR', '||', 4], ['AND', '&&', 5],
  // Binop
  ['BIT_OR', '|', 6], ['BIT_XOR', '^', 7], ['BIT_AND', '&', 8], ['SHL', '<<', 11], ['SAR', '>>', 11], ['SHR', '>>>', 11], ['MUL', '*', 13], ['DIV', '/', 13], ['MOD', '%', 13], ['EXP', '**', 14],
  // Unop
  ['ADD', '+', 12], ['SUB', '-', 12]];
  const RawTokens = [
  // BEGIN PropertyOrCall
  // BEGIN Member
  // BEGIN Template
  ['TEMPLATE', '`'],
  // END Template

  // BEGIN Property
  ['PERIOD', '.'], ['LBRACK', '['],
  // END Property
  // END Member
  ['OPTIONAL', '?.'], ['LPAREN', '('],
  // END PropertyOrCall
  ['RPAREN', ')'], ['RBRACK', ']'], ['LBRACE', '{'], ['COLON', ':'], ['ELLIPSIS', '...'], ['CONDITIONAL', '?'],
  // BEGIN AutoSemicolon
  ['SEMICOLON', ';'], ['RBRACE', '}'], ['EOS', 'EOS'],
  // END AutoSemicolon

  // BEGIN ArrowOrAssign
  ['ARROW', '=>'],
  // BEGIN Assign
  ['ASSIGN', '=', 2], ...MaybeAssignTokens.map(t => [`ASSIGN_${t[0]}`, `${t[1]}=`, 2]),
  // END Assign
  // END ArrowOrAssign

  // Binary operators by precidence
  ['COMMA', ',', 1], ...MaybeAssignTokens, ['NOT', '!'], ['BIT_NOT', '~'], ['DELETE', 'delete'], ['TYPEOF', 'typeof'], ['VOID', 'void'],
  // BEGIN IsCountOp
  ['INC', '++'], ['DEC', '--'],
  // END IsCountOp
  // END IsUnaryOrCountOp

  ['EQ', '==', 9], ['EQ_STRICT', '===', 9], ['NE', '!=', 9], ['NE_STRICT', '!==', 9], ['LT', '<', 10], ['GT', '>', 10], ['LTE', '<=', 10], ['GTE', '>=', 10], ['INSTANCEOF', 'instanceof', 10], ['IN', 'in', 10], ['BREAK', 'break'], ['CASE', 'case'], ['CATCH', 'catch'], ['CONTINUE', 'continue'], ['DEBUGGER', 'debugger'], ['DEFAULT', 'default'],
  // DELETE
  ['DO', 'do'], ['ELSE', 'else'], ['FINALLY', 'finally'], ['FOR', 'for'], ['FUNCTION', 'function'], ['IF', 'if'],
  // IN
  // INSTANCEOF
  ['NEW', 'new'], ['RETURN', 'return'], ['SWITCH', 'switch'], ['THROW', 'throw'], ['TRY', 'try'],
  // TYPEOF
  ['VAR', 'var'],
  // VOID
  ['WHILE', 'while'], ['WITH', 'with'], ['THIS', 'this'], ['NULL', 'null'], ['TRUE', 'true'], ['FALSE', 'false'], ['NUMBER', null], ['STRING', null], ['BIGINT', null],
  // BEGIN Callable
  ['SUPER', 'super'],
  // BEGIN AnyIdentifier
  ['IDENTIFIER', null], ['AWAIT', 'await'], ['YIELD', 'yield'],
  // END AnyIdentifier
  // END Callable
  ['CLASS', 'class'], ['CONST', 'const'], ['EXPORT', 'export'], ['EXTENDS', 'extends'], ['IMPORT', 'import'], ['PRIVATE_IDENTIFIER', null], ['ENUM', 'enum'], ['ESCAPED_KEYWORD', null]];
  const Token = RawTokens.reduce((obj, [name], i) => {
    obj[name] = i;
    return obj;
  }, Object.create(null));
  const TokenNames = RawTokens.map(r => r[0]);
  const TokenValues = RawTokens.map(r => r[1]);
  const TokenPrecedence = RawTokens.map(r => r[2] || 0);
  const Keywords = RawTokens.filter(([name, raw]) => name.toLowerCase() === raw).map(([, raw]) => raw);
  const KeywordLookup = Keywords.reduce((obj, kw) => {
    obj[kw] = Token[kw.toUpperCase()];
    return obj;
  }, Object.create(null));
  const KeywordRaw = new Set(Object.keys(KeywordLookup));
  const KeywordTokens = new Set(Object.values(KeywordLookup));
  const isInRange = (t, l, h) => t >= l && t <= h;
  const isAutomaticSemicolon = t => isInRange(t, Token.SEMICOLON, Token.EOS);
  const isMember = t => isInRange(t, Token.TEMPLATE, Token.LBRACK);
  const isPropertyOrCall = t => isInRange(t, Token.TEMPLATE, Token.LPAREN);
  const isKeyword = t => KeywordTokens.has(t);
  const isKeywordRaw = s => KeywordRaw.has(s);
  const ReservedWordsStrict = new Set(['implements', 'interface', 'let', 'package', 'private', 'protected', 'public', 'static', 'yield']);
  const isReservedWordStrict = s => ReservedWordsStrict.has(s);

  const isUnicodeIDStart = c => c && isUnicodeIDStartRegex.test(c);
  const isUnicodeIDContinue = c => c && isUnicodeIDContinueRegex.test(c);
  const isDecimalDigit$1 = c => c && /\d/u.test(c);
  const isHexDigit = c => c && /[\da-f]/ui.test(c);
  const isOctalDigit = c => c && /[0-7]/u.test(c);
  const isBinaryDigit = c => c === '0' || c === '1';
  const isWhitespace = c => c && (/[\u0009\u000B\u000C\u0020\u00A0\uFEFF]/u.test(c) || isSpaceSeparatorRegex.test(c)); // eslint-disable-line no-control-regex
  const isLineTerminator = c => c && /[\r\n\u2028\u2029]/u.test(c);
  const isRegularExpressionFlagPart = c => c && (isUnicodeIDContinue(c) || c === '$');
  const isIdentifierStart = c => SingleCharTokens[c] === Token.IDENTIFIER || isUnicodeIDStart(c);
  const isIdentifierPart = c => SingleCharTokens[c] === Token.IDENTIFIER || c === '\u{200C}' || c === '\u{200D}' || isUnicodeIDContinue(c);
  const isLeadingSurrogate = cp => cp >= 0xD800 && cp <= 0xDBFF;
  const isTrailingSurrogate = cp => cp >= 0xDC00 && cp <= 0xDFFF;
  const SingleCharTokens = {
    '__proto__': null,
    '0': Token.NUMBER,
    '1': Token.NUMBER,
    '2': Token.NUMBER,
    '3': Token.NUMBER,
    '4': Token.NUMBER,
    '5': Token.NUMBER,
    '6': Token.NUMBER,
    '7': Token.NUMBER,
    '8': Token.NUMBER,
    '9': Token.NUMBER,
    'a': Token.IDENTIFIER,
    'b': Token.IDENTIFIER,
    'c': Token.IDENTIFIER,
    'd': Token.IDENTIFIER,
    'e': Token.IDENTIFIER,
    'f': Token.IDENTIFIER,
    'g': Token.IDENTIFIER,
    'h': Token.IDENTIFIER,
    'i': Token.IDENTIFIER,
    'j': Token.IDENTIFIER,
    'k': Token.IDENTIFIER,
    'l': Token.IDENTIFIER,
    'm': Token.IDENTIFIER,
    'n': Token.IDENTIFIER,
    'o': Token.IDENTIFIER,
    'p': Token.IDENTIFIER,
    'q': Token.IDENTIFIER,
    'r': Token.IDENTIFIER,
    's': Token.IDENTIFIER,
    't': Token.IDENTIFIER,
    'u': Token.IDENTIFIER,
    'v': Token.IDENTIFIER,
    'w': Token.IDENTIFIER,
    'x': Token.IDENTIFIER,
    'y': Token.IDENTIFIER,
    'z': Token.IDENTIFIER,
    'A': Token.IDENTIFIER,
    'B': Token.IDENTIFIER,
    'C': Token.IDENTIFIER,
    'D': Token.IDENTIFIER,
    'E': Token.IDENTIFIER,
    'F': Token.IDENTIFIER,
    'G': Token.IDENTIFIER,
    'H': Token.IDENTIFIER,
    'I': Token.IDENTIFIER,
    'J': Token.IDENTIFIER,
    'K': Token.IDENTIFIER,
    'L': Token.IDENTIFIER,
    'M': Token.IDENTIFIER,
    'N': Token.IDENTIFIER,
    'O': Token.IDENTIFIER,
    'P': Token.IDENTIFIER,
    'Q': Token.IDENTIFIER,
    'R': Token.IDENTIFIER,
    'S': Token.IDENTIFIER,
    'T': Token.IDENTIFIER,
    'U': Token.IDENTIFIER,
    'V': Token.IDENTIFIER,
    'W': Token.IDENTIFIER,
    'X': Token.IDENTIFIER,
    'Y': Token.IDENTIFIER,
    'Z': Token.IDENTIFIER,
    '$': Token.IDENTIFIER,
    '_': Token.IDENTIFIER,
    '\\': Token.IDENTIFIER,
    '.': Token.PERIOD,
    ',': Token.COMMA,
    ':': Token.COLON,
    ';': Token.SEMICOLON,
    '%': Token.MOD,
    '~': Token.BIT_NOT,
    '!': Token.NOT,
    '+': Token.ADD,
    '-': Token.SUB,
    '*': Token.MUL,
    '<': Token.LT,
    '>': Token.GT,
    '=': Token.ASSIGN,
    '?': Token.CONDITIONAL,
    '[': Token.LBRACK,
    ']': Token.RBRACK,
    '(': Token.LPAREN,
    ')': Token.RPAREN,
    '/': Token.DIV,
    '^': Token.BIT_XOR,
    '`': Token.TEMPLATE,
    '{': Token.LBRACE,
    '}': Token.RBRACE,
    '&': Token.BIT_AND,
    '|': Token.BIT_OR,
    '"': Token.STRING,
    '\'': Token.STRING,
    '#': Token.PRIVATE_IDENTIFIER
  };
  class TokenData {
    type;
    startIndex;
    endIndex;
    line;
    column;
    hadLineTerminatorBefore;
    name;
    value;
    escaped;
    constructor({
      type,
      startIndex,
      endIndex,
      line,
      column,
      hadLineTerminatorBefore,
      name,
      value,
      escaped
    }) {
      this.type = type;
      this.startIndex = startIndex;
      this.endIndex = endIndex;
      this.line = line;
      this.column = column;
      this.hadLineTerminatorBefore = hadLineTerminatorBefore;
      this.name = name;
      this.value = value;
      this.escaped = escaped;
    }
    valueAsString() {
      Assert(typeof this.value === 'string', "typeof this.value === 'string'");
      return this.value;
    }
    valueAsNumeric() {
      Assert(typeof this.value === 'number' || typeof this.value === 'bigint', "typeof this.value === 'number' || typeof this.value === 'bigint'");
      return this.value;
    }
    valueAsBoolean() {
      Assert(typeof this.value === 'boolean', "typeof this.value === 'boolean'");
      return this.value;
    }
  }
  class Lexer {
    currentToken; // NOTE: unsound definite assignment operator (`!`)
    peekToken; // NOTE: unsound definite assignment operator (`!`)
    peekAheadToken;
    position = 0;
    line = 1;
    columnOffset = 0;
    scannedValue; // NOTE: unsound definite assignment operator (`!`)
    lineTerminatorBeforeNextToken = false;
    positionForNextToken = 0;
    lineForNextToken = 0;
    columnForNextToken = 0;
    escapeIndex = -1;
    advance() {
      this.lineTerminatorBeforeNextToken = false;
      this.escapeIndex = -1;
      const type = this.nextToken();
      return new TokenData({
        type,
        startIndex: this.positionForNextToken,
        endIndex: this.position,
        line: this.lineForNextToken,
        column: this.columnForNextToken,
        hadLineTerminatorBefore: this.lineTerminatorBeforeNextToken,
        name: TokenNames[type],
        value: TokenValues[type] ?? this.scannedValue,
        escaped: this.escapeIndex !== -1
      });
    }
    next() {
      this.currentToken = this.peekToken;
      if (this.peekAheadToken !== undefined) {
        this.peekToken = this.peekAheadToken;
        this.peekAheadToken = undefined;
      } else {
        this.peekToken = this.advance();
      }
      return this.currentToken;
    }
    peek() {
      if (this.peekToken === undefined) {
        this.next();
      }
      return this.peekToken;
    }
    peekAhead() {
      if (this.peekAheadToken === undefined) {
        this.peek();
        this.peekAheadToken = this.advance();
      }
      return this.peekAheadToken;
    }
    matches(token, peek) {
      if (typeof token === 'string') {
        if (peek.type === Token.IDENTIFIER && peek.value === token) {
          const escapeIndex = this.source.slice(peek.startIndex, peek.endIndex).indexOf('\\');
          if (escapeIndex !== -1) {
            return false;
          }
          return true;
        } else {
          return false;
        }
      }
      return peek.type === token;
    }
    test(token) {
      return this.matches(token, this.peek());
    }
    testAhead(token) {
      return this.matches(token, this.peekAhead());
    }
    eat(token) {
      if (this.test(token)) {
        this.next();
        return true;
      }
      return false;
    }
    expect(token) {
      if (this.test(token)) {
        return this.next();
      }
      return this.unexpected();
    }
    skipSpace() {
      loop:
      // eslint-disable-line no-labels
      while (this.position < this.source.length) {
        const c = this.source[this.position];
        switch (c) {
          case ' ':
          case '\t':
            this.position += 1;
            break;
          case '/':
            switch (this.source[this.position + 1]) {
              case '/':
                this.skipLineComment();
                break;
              case '*':
                this.skipBlockComment();
                break;
              default:
                break loop;
              // eslint-disable-line no-labels
            }
            break;
          default:
            if (isWhitespace(c)) {
              this.position += 1;
            } else if (isLineTerminator(c)) {
              this.position += 1;
              if (c === '\r' && this.source[this.position] === '\n') {
                this.position += 1;
              }
              this.line += 1;
              this.columnOffset = this.position;
              this.lineTerminatorBeforeNextToken = true;
              break;
            } else {
              break loop; // eslint-disable-line no-labels
            }
            break;
        }
      }
    }
    skipHashbangComment() {
      if (this.position === 0 && this.source[0] === '#' && this.source[1] === '!') {
        this.skipLineComment();
      }
    }
    skipLineComment() {
      while (this.position < this.source.length) {
        const c = this.source[this.position];
        this.position += 1;
        if (isLineTerminator(c)) {
          if (c === '\r' && this.source[this.position] === '\n') {
            this.position += 1;
          }
          this.line += 1;
          this.columnOffset = this.position;
          this.lineTerminatorBeforeNextToken = true;
          break;
        }
      }
    }
    skipBlockComment() {
      const end = this.source.indexOf('*/', this.position + 2);
      if (end === -1) {
        this.raise('UnterminatedComment', this.position);
      }
      this.position += 2;
      for (const match of this.source.slice(this.position, end).matchAll(/\r\n?|[\n\u2028\u2029]/ug)) {
        this.position = match.index;
        this.line += 1;
        this.columnOffset = this.position;
        this.lineTerminatorBeforeNextToken = true;
      }
      this.position = end + 2;
    }
    nextToken() {
      this.skipSpace();

      // set token location info after skipping space
      this.positionForNextToken = this.position;
      this.lineForNextToken = this.line;
      this.columnForNextToken = this.position - this.columnOffset + 1;
      if (this.position >= this.source.length) {
        return Token.EOS;
      }
      const c = this.source[this.position];
      this.position += 1;
      const c1 = this.source[this.position];
      if (c.charCodeAt(0) <= 127) {
        const single = SingleCharTokens[c];
        switch (single) {
          case Token.LPAREN:
          case Token.RPAREN:
          case Token.LBRACE:
          case Token.RBRACE:
          case Token.LBRACK:
          case Token.RBRACK:
          case Token.COLON:
          case Token.SEMICOLON:
          case Token.COMMA:
          case Token.BIT_NOT:
          case Token.TEMPLATE:
            return single;
          case Token.CONDITIONAL:
            // ? ?. ?? ??=
            if (c1 === '.' && !isDecimalDigit$1(this.source[this.position + 1])) {
              this.position += 1;
              return Token.OPTIONAL;
            }
            if (c1 === '?') {
              this.position += 1;
              if (this.source[this.position] === '=') {
                this.position += 1;
                return Token.ASSIGN_NULLISH;
              }
              return Token.NULLISH;
            }
            return Token.CONDITIONAL;
          case Token.LT:
            // < <= << <<=
            if (c1 === '=') {
              this.position += 1;
              return Token.LTE;
            }
            if (c1 === '<') {
              this.position += 1;
              if (this.source[this.position] === '=') {
                this.position += 1;
                return Token.ASSIGN_SHL;
              }
              return Token.SHL;
            }
            return Token.LT;
          case Token.GT:
            // > >= >> >>= >>> >>>=
            if (c1 === '=') {
              this.position += 1;
              return Token.GTE;
            }
            if (c1 === '>') {
              this.position += 1;
              if (this.source[this.position] === '>') {
                this.position += 1;
                if (this.source[this.position] === '=') {
                  this.position += 1;
                  return Token.ASSIGN_SHR;
                }
                return Token.SHR;
              }
              if (this.source[this.position] === '=') {
                this.position += 1;
                return Token.ASSIGN_SAR;
              }
              return Token.SAR;
            }
            return Token.GT;
          case Token.ASSIGN:
            // = == === =>
            if (c1 === '=') {
              this.position += 1;
              if (this.source[this.position] === '=') {
                this.position += 1;
                return Token.EQ_STRICT;
              }
              return Token.EQ;
            }
            if (c1 === '>') {
              this.position += 1;
              return Token.ARROW;
            }
            return Token.ASSIGN;
          case Token.NOT:
            // ! != !==
            if (c1 === '=') {
              this.position += 1;
              if (this.source[this.position] === '=') {
                this.position += 1;
                return Token.NE_STRICT;
              }
              return Token.NE;
            }
            return Token.NOT;
          case Token.ADD:
            // + ++ +=
            if (c1 === '+') {
              this.position += 1;
              return Token.INC;
            }
            if (c1 === '=') {
              this.position += 1;
              return Token.ASSIGN_ADD;
            }
            return Token.ADD;
          case Token.SUB:
            // - -- -=
            if (c1 === '-') {
              this.position += 1;
              return Token.DEC;
            }
            if (c1 === '=') {
              this.position += 1;
              return Token.ASSIGN_SUB;
            }
            return Token.SUB;
          case Token.MUL:
            // * *= ** **=
            if (c1 === '=') {
              this.position += 1;
              return Token.ASSIGN_MUL;
            }
            if (c1 === '*') {
              this.position += 1;
              if (this.source[this.position] === '=') {
                this.position += 1;
                return Token.ASSIGN_EXP;
              }
              return Token.EXP;
            }
            return Token.MUL;
          case Token.MOD:
            // % %=
            if (c1 === '=') {
              this.position += 1;
              return Token.ASSIGN_MOD;
            }
            return Token.MOD;
          case Token.DIV:
            // / /=
            if (c1 === '=') {
              this.position += 1;
              return Token.ASSIGN_DIV;
            }
            return Token.DIV;
          case Token.BIT_AND:
            // & && &= &&=
            if (c1 === '&') {
              this.position += 1;
              if (this.source[this.position] === '=') {
                this.position += 1;
                return Token.ASSIGN_AND;
              }
              return Token.AND;
            }
            if (c1 === '=') {
              this.position += 1;
              return Token.ASSIGN_BIT_AND;
            }
            return Token.BIT_AND;
          case Token.BIT_OR:
            // | || |= ||=
            if (c1 === '|') {
              this.position += 1;
              if (this.source[this.position] === '=') {
                this.position += 1;
                return Token.ASSIGN_OR;
              }
              return Token.OR;
            }
            if (c1 === '=') {
              this.position += 1;
              return Token.ASSIGN_BIT_OR;
            }
            return Token.BIT_OR;
          case Token.BIT_XOR:
            // ^ ^=
            if (c1 === '=') {
              this.position += 1;
              return Token.ASSIGN_BIT_XOR;
            }
            return Token.BIT_XOR;
          case Token.PERIOD:
            // . ... NUMBER
            if (isDecimalDigit$1(c1)) {
              this.position -= 1;
              return this.scanNumber();
            }
            if (c1 === '.') {
              if (this.source[this.position + 1] === '.') {
                this.position += 2;
                return Token.ELLIPSIS;
              }
            }
            return Token.PERIOD;
          case Token.STRING:
            return this.scanString(c);
          case Token.NUMBER:
            this.position -= 1;
            return this.scanNumber();
          case Token.IDENTIFIER:
            this.position -= 1;
            return this.scanIdentifierOrKeyword();
          case Token.PRIVATE_IDENTIFIER:
            return this.scanIdentifierOrKeyword(true);
          default:
            this.unexpected(single);
            break;
        }
      }
      this.position -= 1;
      if (isLeadingSurrogate(c.charCodeAt(0)) || isIdentifierStart(c)) {
        return this.scanIdentifierOrKeyword();
      }
      return this.unexpected(this.position);
    }
    scanNumber() {
      const start = this.position;
      let base = 10;
      let check = isDecimalDigit$1;
      if (this.source[this.position] === '0') {
        this.scannedValue = 0;
        this.position += 1;
        switch (this.source[this.position]) {
          case 'x':
          case 'X':
            base = 16;
            break;
          case 'o':
          case 'O':
            base = 8;
            break;
          case 'b':
          case 'B':
            base = 2;
            break;
          case '.':
          case 'e':
          case 'E':
            break;
          case 'n':
            this.position += 1;
            this.scannedValue = 0n;
            return Token.BIGINT;
          default:
            return Token.NUMBER;
        }
        check = {
          16: isHexDigit,
          10: isDecimalDigit$1,
          8: isOctalDigit,
          2: isBinaryDigit
        }[base];
        if (base !== 10) {
          if (!check(this.source[this.position + 1])) {
            return Token.NUMBER;
          }
          this.position += 1;
        }
      }
      while (this.position < this.source.length) {
        const c = this.source[this.position];
        if (check(c)) {
          this.position += 1;
        } else if (c === '_') {
          if (!check(this.source[this.position + 1])) {
            this.unexpected(this.position + 1);
          }
          this.position += 1;
        } else {
          break;
        }
      }
      if (this.source[this.position] === 'n') {
        const buffer = this.source.slice(start, this.position).replace(/_/g, '');
        this.position += 1;
        this.scannedValue = BigInt(buffer);
        return Token.BIGINT;
      }
      if (base === 10 && this.source[this.position] === '.') {
        this.position += 1;
        if (this.source[this.position] === '_') {
          this.unexpected(this.position);
        }
        while (this.position < this.source.length) {
          const c = this.source[this.position];
          if (isDecimalDigit$1(c)) {
            this.position += 1;
          } else if (c === '_') {
            if (!isDecimalDigit$1(this.source[this.position + 1])) {
              this.unexpected(this.position + 1);
            }
            this.position += 1;
          } else {
            break;
          }
        }
      }
      if (base === 10 && (this.source[this.position] === 'E' || this.source[this.position] === 'e')) {
        this.position += 1;
        if (this.source[this.position] === '_') {
          this.unexpected(this.position);
        }
        if (this.source[this.position] === '-' || this.source[this.position] === '+') {
          this.position += 1;
        }
        if (this.source[this.position] === '_') {
          this.unexpected(this.position);
        }
        while (this.position < this.source.length) {
          const c = this.source[this.position];
          if (isDecimalDigit$1(c)) {
            this.position += 1;
          } else if (c === '_') {
            if (!isDecimalDigit$1(this.source[this.position + 1])) {
              this.unexpected(this.position + 1);
            }
            this.position += 1;
          } else {
            break;
          }
        }
      }
      if (isIdentifierStart(this.source[this.position])) {
        this.unexpected(this.position);
      }
      const buffer = this.source.slice(base === 10 ? start : start + 2, this.position).replace(/_/g, '');
      this.scannedValue = base === 10 ? Number.parseFloat(buffer) : Number.parseInt(buffer, base);
      return Token.NUMBER;
    }
    scanString(char) {
      let buffer = '';
      while (true) {
        if (this.position >= this.source.length) {
          this.raise('UnterminatedString', this.position);
        }
        const c = this.source[this.position];
        if (c === char) {
          this.position += 1;
          break;
        }
        if (c === '\r' || c === '\n') {
          this.raise('UnterminatedString', this.position);
        }
        this.position += 1;
        if (c === '\\') {
          const l = this.source[this.position];
          if (isLineTerminator(l)) {
            this.position += 1;
            if (l === '\r' && this.source[this.position] === '\n') {
              this.position += 1;
            }
            this.line += 1;
            this.columnOffset = this.position;
          } else {
            buffer += this.scanEscapeSequence();
          }
        } else {
          buffer += c;
        }
      }
      this.scannedValue = buffer;
      return Token.STRING;
    }
    scanEscapeSequence() {
      const c = this.source[this.position];
      switch (c) {
        case 'b':
          this.position += 1;
          return '\b';
        case 't':
          this.position += 1;
          return '\t';
        case 'n':
          this.position += 1;
          return '\n';
        case 'v':
          this.position += 1;
          return '\v';
        case 'f':
          this.position += 1;
          return '\f';
        case 'r':
          this.position += 1;
          return '\r';
        case 'x':
          this.position += 1;
          return String.fromCodePoint(this.scanHex(2));
        case 'u':
          this.position += 1;
          return String.fromCodePoint(this.scanCodePoint());
        default:
          if (c === '0' && !isDecimalDigit$1(this.source[this.position + 1])) {
            this.position += 1;
            return '\u{0000}';
          } else if (this.isStrictMode() && isDecimalDigit$1(c)) {
            this.raise('IllegalOctalEscape', this.position);
          }
          this.position += 1;
          return c;
      }
    }
    scanCodePoint() {
      if (this.source[this.position] === '{') {
        const end = this.source.indexOf('}', this.position);
        this.position += 1;
        const code = this.scanHex(end - this.position);
        this.position += 1;
        if (code > 0x10FFFF) {
          this.raise('InvalidCodePoint', this.position);
        }
        return code;
      }
      return this.scanHex(4);
    }
    scanHex(length) {
      if (length === 0) {
        this.raise('InvalidCodePoint', this.position);
      }
      let n = 0;
      for (let i = 0; i < length; i += 1) {
        const c = this.source[this.position];
        if (isHexDigit(c)) {
          this.position += 1;
          n = n << 4 | Number.parseInt(c, 16);
        } else {
          this.unexpected(this.position);
        }
      }
      return n;
    }
    scanIdentifierOrKeyword(isPrivate = false) {
      let buffer = '';
      let escapeIndex = -1;
      let check = isIdentifierStart;
      while (this.position < this.source.length) {
        const c = this.source[this.position];
        const code = c.charCodeAt(0);
        if (c === '\\') {
          if (escapeIndex === -1) {
            escapeIndex = this.position;
          }
          this.position += 1;
          if (this.source[this.position] !== 'u') {
            this.raise('InvalidUnicodeEscape', this.position);
          }
          this.position += 1;
          const raw = String.fromCodePoint(this.scanCodePoint());
          if (!check(raw)) {
            this.raise('InvalidUnicodeEscape', this.position);
          }
          buffer += raw;
        } else if (isLeadingSurrogate(code)) {
          const lowSurrogate = this.source.charCodeAt(this.position + 1);
          if (!isTrailingSurrogate(lowSurrogate)) {
            this.raise('InvalidUnicodeEscape', this.position);
          }
          const codePoint = UTF16SurrogatePairToCodePoint(code, lowSurrogate);
          const raw = String.fromCodePoint(codePoint);
          if (!check(raw)) {
            this.raise('InvalidUnicodeEscape', this.position);
          }
          this.position += 2;
          buffer += raw;
        } else if (check(c)) {
          buffer += c;
          this.position += 1;
        } else {
          break;
        }
        check = isIdentifierPart;
      }
      if (!isPrivate && isKeywordRaw(buffer)) {
        if (escapeIndex !== -1) {
          this.scannedValue = buffer;
          return Token.ESCAPED_KEYWORD;
        }
        return KeywordLookup[buffer];
      } else {
        this.scannedValue = buffer;
        this.escapeIndex = escapeIndex;
        return isPrivate ? Token.PRIVATE_IDENTIFIER : Token.IDENTIFIER;
      }
    }
    scanRegularExpressionBody() {
      let inClass = false;
      let buffer = this.peek().type === Token.ASSIGN_DIV ? '=' : '';
      while (true) {
        if (this.position >= this.source.length) {
          this.raise('UnterminatedRegExp', this.position);
        }
        const c = this.source[this.position];
        switch (c) {
          case '[':
            inClass = true;
            this.position += 1;
            buffer += c;
            break;
          case ']':
            if (inClass) {
              inClass = false;
            }
            buffer += c;
            this.position += 1;
            break;
          case '/':
            this.position += 1;
            if (!inClass) {
              this.scannedValue = buffer;
              return;
            }
            buffer += c;
            break;
          case '\\':
            buffer += c;
            this.position += 1;
            if (isLineTerminator(this.source[this.position])) {
              this.raise('UnterminatedRegExp', this.position);
            }
            buffer += this.source[this.position];
            this.position += 1;
            break;
          default:
            if (isLineTerminator(c)) {
              this.raise('UnterminatedRegExp', this.position);
            }
            this.position += 1;
            buffer += c;
            break;
        }
      }
    }
    scanRegularExpressionFlags() {
      let buffer = '';
      while (true) {
        if (this.position >= this.source.length) {
          this.scannedValue = buffer;
          return;
        }
        const c = this.source[this.position];
        if (isRegularExpressionFlagPart(c) && 'dgimsuy'.includes(c) && !buffer.includes(c)) {
          this.position += 1;
          buffer += c;
        } else {
          this.scannedValue = buffer;
          return;
        }
      }
    }
  }

  function TV(s) {
    let buffer = '';
    for (let i = 0; i < s.length; i += 1) {
      if (s[i] === '\\') {
        i += 1;
        switch (s[i]) {
          case '$':
            buffer += '$';
            break;
          case '\\':
            buffer += '\\';
            break;
          case '`':
            buffer += '`';
            break;
          case '\'':
            buffer += '\'';
            break;
          case '"':
            buffer += '"';
            break;
          case 'b':
            buffer += '\b';
            break;
          case 'f':
            buffer += '\f';
            break;
          case 'n':
            buffer += '\n';
            break;
          case 'r':
            buffer += '\r';
            break;
          case 't':
            buffer += '\t';
            break;
          case 'v':
            buffer += '\v';
            break;
          case 'x':
            i += 1;
            if (isHexDigit(s[i]) && isHexDigit(s[i + 1])) {
              const n = Number.parseInt(s.slice(i, i + 2), 16);
              i += 1;
              buffer += String.fromCharCode(n);
            } else {
              return undefined;
            }
            break;
          case 'u':
            i += 1;
            if (s[i] === '{') {
              i += 1;
              const start = i;
              do {
                i += 1;
              } while (isHexDigit(s[i]));
              if (s[i] !== '}') {
                return undefined;
              }
              const n = Number.parseInt(s.slice(start, i), 16);
              if (n > 0x10FFFF) {
                return undefined;
              }
              buffer += String.fromCodePoint(n);
            } else if (isHexDigit(s[i]) && isHexDigit(s[i + 1]) && isHexDigit(s[i + 2]) && isHexDigit(s[i + 3])) {
              const n = Number.parseInt(s.slice(i, i + 4), 16);
              i += 3;
              buffer += String.fromCodePoint(n);
            } else {
              return undefined;
            }
            break;
          case '0':
            if (isDecimalDigit$1(s[i + 1])) {
              return undefined;
            }
            return '\u{0000}';
          default:
            if (isLineTerminator(s)) {
              return '';
            }
            return undefined;
        }
      } else {
        buffer += s[i];
      }
    }
    return buffer;
  }
  function TemplateStrings(node, raw) {
    if (raw) {
      return node.TemplateSpanList.map(s => Value(s));
    }
    return node.TemplateSpanList.map(v => {
      const tv = TV(v);
      if (tv === undefined) {
        return Value.undefined;
      }
      return Value(tv);
    });
  }

  function ImportEntriesForModule(node, module) {
    switch (node.type) {
      case 'ImportClause':
        switch (true) {
          case !!node.ImportedDefaultBinding && !!node.NameSpaceImport:
            {
              // 1. Let entries be ImportEntriesForModule of ImportedDefaultBinding with argument module.
              const entries = ImportEntriesForModule(node.ImportedDefaultBinding, module);
              // 2. Append to entries the elements of the ImportEntriesForModule of NameSpaceImport with argument module.
              entries.push(...ImportEntriesForModule(node.NameSpaceImport, module));
              // 3. Return entries.
              return entries;
            }
          case !!node.ImportedDefaultBinding && !!node.NamedImports:
            {
              // 1. Let entries be ImportEntriesForModule of ImportedDefaultBinding with argument module.
              const entries = ImportEntriesForModule(node.ImportedDefaultBinding, module);
              // 2. Append to entries the elements of the ImportEntriesForModule of NamedImports with argument module.
              entries.push(...ImportEntriesForModule(node.NamedImports, module));
              // 3. Return entries.
              return entries;
            }
          case !!node.ImportedDefaultBinding:
            return ImportEntriesForModule(node.ImportedDefaultBinding, module);
          case !!node.NameSpaceImport:
            return ImportEntriesForModule(node.NameSpaceImport, module);
          case !!node.NamedImports:
            return ImportEntriesForModule(node.NamedImports, module);
          /*c8 ignore next*/default:
            throw new OutOfRange$1('ImportEntriesForModule', node);
        }
      case 'ImportedDefaultBinding':
        {
          // 1. Let localName be the sole element of BoundNames of ImportedBinding.
          const localName = BoundNames(node.ImportedBinding)[0];
          // 2. Let defaultEntry be the ImportEntry Record { [[ModuleRequest]]: module, [[ImportName]]: "default", [[LocalName]]: localName }.
          const defaultEntry = {
            ModuleRequest: module,
            ImportName: Value('default'),
            LocalName: localName
          };
          // 3. Return a new List containing defaultEntry.
          return [defaultEntry];
        }
      case 'NameSpaceImport':
        {
          // 1. Let localName be the StringValue of ImportedBinding.
          const localName = StringValue(node.ImportedBinding);
          // 2. Let entry be the ImportEntry Record { [[ModuleRequest]]: module, [[ImportName]]: ~namespace-object~, [[LocalName]]: localName }.
          const entry = {
            ModuleRequest: module,
            ImportName: 'namespace-object',
            LocalName: localName
          };
          // 3. Return a new List containing entry.
          return [entry];
        }
      case 'NamedImports':
        {
          const specs = [];
          node.ImportsList.forEach(n => {
            specs.push(...ImportEntriesForModule(n, module));
          });
          return specs;
        }
      case 'ImportSpecifier':
        if (node.ModuleExportName) {
          // 1. Let importName be the StringValue of ModuleExportName.
          const importName = StringValue(node.ModuleExportName);
          // 2. Let localName be the StringValue of ImportedBinding.
          const localName = StringValue(node.ImportedBinding);
          // 3. Let entry be the ImportEntry Record { [[ModuleRequest]]: module, [[ImportName]]: importName, [[LocalName]]: localName }.
          const entry = {
            ModuleRequest: module,
            ImportName: importName,
            LocalName: localName
          };
          // 4. Return a new List containing entry.
          return [entry];
        } else {
          // 1. Let localName be the sole element of BoundNames of ImportedBinding.
          const localName = BoundNames(node.ImportedBinding)[0];
          // 2. Let entry be the ImportEntry Record { [[ModuleRequest]]: module, [[ImportName]]: localName, [[LocalName]]: localName }.
          const entry = {
            ModuleRequest: module,
            ImportName: localName,
            LocalName: localName
          };
          // 3. Return a new List containing entry.
          return [entry];
        }
      /*c8 ignore next*/default:
        throw new OutOfRange$1('ImportEntriesForModule', node);
    }
  }

  function ExportEntriesForModule(node, module) {
    if (isArray(node)) {
      const specs = [];
      node.forEach(n => {
        specs.push(...ExportEntriesForModule(n, module));
      });
      return specs;
    }
    switch (node.type) {
      case 'ExportFromClause':
        if (node.ModuleExportName) {
          // 1. Let exportName be the StringValue of ModuleExportName.
          const exportName = StringValue(node.ModuleExportName);
          // 2. Let entry be the ExportEntry Record { [[ModuleRequest]]: module, [[ImportName]]: ~all~, [[LocalName]]: null, [[ExportName]]: exportName }.
          const entry = {
            ModuleRequest: module,
            ImportName: 'all',
            LocalName: Value.null,
            ExportName: exportName
          };
          // 3. Return a new List containing entry.
          return [entry];
        } else {
          // 1. Let entry be the ExportEntry Record { [[ModuleRequest]]: module, [[ImportName]]: ~all-but-default~, [[LocalName]]: null, [[ExportName]]: null }.
          const entry = {
            ModuleRequest: module,
            ImportName: 'all-but-default',
            LocalName: Value.null,
            ExportName: Value.null
          };
          // 2. Return a new List containing entry.
          return [entry];
        }
      case 'ExportSpecifier':
        {
          const sourceName = StringValue(node.localName);
          const exportName = StringValue(node.exportName);
          let localName;
          let importName;
          if (module === Value.null) {
            localName = sourceName;
            importName = Value.null;
          } else {
            // 4. Else,
            localName = Value.null;
            importName = sourceName;
          }
          return [{
            ModuleRequest: module,
            ImportName: importName,
            LocalName: localName,
            ExportName: exportName
          }];
        }
      case 'NamedExports':
        return ExportEntriesForModule(node.ExportsList, module);
      /*c8 ignore next*/default:
        throw new OutOfRange$1('ExportEntriesForModule', node);
    }
  }

  function CharacterValue(node) {
    switch (node.type) {
      case 'CharacterEscape':
        switch (true) {
          case !!node.ControlEscape:
            switch (node.ControlEscape) {
              case 't':
                return 0x0009;
              case 'n':
                return 0x000A;
              case 'v':
                return 0x000B;
              case 'f':
                return 0x000C;
              case 'r':
                return 0x000D;
              /*c8 ignore next*/default:
                throw new OutOfRange$1('Evaluate_CharacterEscape', node);
            }
          case !!node.ControlLetter:
            {
              // 1. Let ch be the code point matched by ControlLetter.
              const ch = node.ControlLetter;
              // 2. Let i be ch's code point value.
              const i = ch.codePointAt(0);
              // 3. Return the remainder of dividing i by 32.
              return i % 32;
            }
          case !!node.HexEscapeSequence:
            // 1. Return the numeric value of the code unit that is the SV of HexEscapeSequence.
            return Number.parseInt(`${node.HexEscapeSequence.HexDigit_a}${node.HexEscapeSequence.HexDigit_b}`, 16);
          case !!node.RegExpUnicodeEscapeSequence:
            return CharacterValue(node.RegExpUnicodeEscapeSequence);
          case node.subtype === '0':
            // 1. Return the code point value of U+0000 (NULL).
            return 0x0000;
          case !!node.IdentityEscape:
            {
              // 1. Let ch be the code point matched by IdentityEscape.
              const ch = node.IdentityEscape.codePointAt(0);
              // 2. Return the code point value of ch.
              return ch;
            }
          /*c8 ignore next*/default:
            throw new OutOfRange$1('Evaluate_CharacterEscape', node);
        }
      case 'RegExpUnicodeEscapeSequence':
        switch (true) {
          case 'Hex4Digits' in node:
            return node.Hex4Digits;
          case 'CodePoint' in node:
            return node.CodePoint;
          case 'HexTrailSurrogate' in node:
            return UTF16SurrogatePairToCodePoint(node.HexLeadSurrogate, node.HexTrailSurrogate);
          case 'HexLeadSurrogate' in node:
            return node.HexLeadSurrogate;
          /*c8 ignore next*/default:
            throw new OutOfRange$1('Evaluate_CharacterEscape', node);
        }
      case 'ClassAtom':
        switch (true) {
          case node.value === '-':
            // 1. Return the code point value of U+002D (HYPHEN-MINUS).
            return 0x002D;
          case !!node.SourceCharacter:
            {
              // 1. Let ch be the code point matched by SourceCharacter.
              const ch = node.SourceCharacter.codePointAt(0);
              // 2. Return ch.
              return ch;
            }
          /*c8 ignore next*/default:
            throw new OutOfRange$1('CharacterValue', node);
        }
      case 'ClassEscape':
        switch (true) {
          case node.value === 'b':
            // 1. Return the code point value of U+0008 (BACKSPACE).
            return 0x0008;
          case node.value === '-':
            // 1. Return the code point value of U+002D (HYPHEN-MINUS).
            return 0x002D;
          case !!node.CharacterEscape:
            return CharacterValue(node.CharacterEscape);
          /*c8 ignore next*/default:
            throw new OutOfRange$1('CharacterValue', node);
        }
      /*c8 ignore next*/default:
        throw new OutOfRange$1('CharacterValue', node);
    }
  }

  /** https://tc39.es/ecma262/#sec-utf16decodesurrogatepair */
  function UTF16SurrogatePairToCodePoint(lead, trail) {
    // 1. Assert: lead is a leading surrogate and trail is a trailing surrogate.
    Assert(isLeadingSurrogate(lead) && isTrailingSurrogate(trail), "isLeadingSurrogate(lead) && isTrailingSurrogate(trail)");
    // 2. Let cp be (lead - 0xD800) × 0x400 + (trail - 0xDC00) + 0x10000.
    const cp = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
    // 3. Return the code point cp.
    return cp;
  }

  /** https://tc39.es/ecma262/#sec-codepointat */
  function CodePointAt(string, position) {
    // 1 .Let size be the length of string.
    const size = string.length;
    // 2. Assert: position ≥ 0 and position < size.
    Assert(position >= 0 && position < size, "position >= 0 && position < size");
    // 3. Let first be the code unit at index position within string.
    const first = string.charCodeAt(position);
    // 4. Let cp be the code point whose numeric value is that of first.
    let cp = first;
    // 5. If first is not a leading surrogate or trailing surrogate, then
    if (!isLeadingSurrogate(first) && !isTrailingSurrogate(first)) {
      // a. Return the Record { [[CodePoint]]: cp, [[CodeUnitCount]]: 1, [[IsUnpairedSurrogate]]: false }.
      return {
        CodePoint: cp,
        CodeUnitCount: 1,
        IsUnpairedSurrogate: false
      };
    }
    // 6. If first is a trailing surrogate or position + 1 = size, then
    if (isTrailingSurrogate(first) || position + 1 === size) {
      // a. Return the Record { [[CodePoint]]: cp, [[CodeUnitCount]]: 1, [[IsUnpairedSurrogate]]: true }.
      return {
        CodePoint: cp,
        CodeUnitCount: 1,
        IsUnpairedSurrogate: true
      };
    }
    // 7. Let second be the code unit at index position + 1 within string.
    const second = string.charCodeAt(position + 1);
    // 8. If seconds is not a trailing surrogate, then
    if (!isTrailingSurrogate(second)) {
      // a. Return the Record { [[CodePoint]]: cp, [[CodeUnitCount]]: 1, [[IsUnpairedSurrogate]]: true }.
      return {
        CodePoint: cp,
        CodeUnitCount: 1,
        IsUnpairedSurrogate: true
      };
    }
    // 9. Set cp to ! UTF16SurrogatePairToCodePoint(first, second).
    let _temp = UTF16SurrogatePairToCodePoint(first, second);
    Assert(!(_temp instanceof AbruptCompletion), "UTF16SurrogatePairToCodePoint(first, second)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    cp = _temp;
    // 10. Return the Record { [[CodePoint]]: cp, [[CodeUnitCount]]: 2, [[IsUnpairedSurrogate]]: false }.
    return {
      CodePoint: cp,
      CodeUnitCount: 2,
      IsUnpairedSurrogate: false
    };
  }

  /** https://tc39.es/ecma262/#sec-stringtocodepoints */
  function StringToCodePoints(string) {
    // 1. Let codePoints be a new empty List.
    const codePoints = [];
    // 2. Let size be the length of string.
    const size = string.length;
    // 3. Let position be 0.
    let position = 0;
    // 4. Repeat, while position < size,
    while (position < size) {
      let _temp = CodePointAt(string, position);
      Assert(!(_temp instanceof AbruptCompletion), "CodePointAt(string, position)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      // a. Let cp be ! CodePointAt(string, position).
      const cp = _temp;
      // b. Append cp.[[CodePoint]] to codePoints.
      codePoints.push(cp.CodePoint);
      // c. Set position to position + cp.[[CodeUnitCount]].
      position += cp.CodeUnitCount;
    }
    // 5. Return codePoints.
    return codePoints;
  }

  /** https://tc39.es/ecma262/#sec-codepointstostring */
  function CodePointsToString(text) {
    // 1. Let result be the empty String.
    let result = '';
    // 2. For each code point cp in text, do
    for (const cp of text) {
      // a. Set result to the string-concatenation of result and UTF16EncodeCodePoint(cp).
      // TODO(ts): Argument of type 'string' is not assignable to parameter of type 'number'. Is this a mistake?
      // @ts-expect-error
      result += UTF16EncodeCodePoint(cp);
    }
    // 3. Return result.
    return result;
  }

  function IsStringWellFormedUnicode(string_) {
    const string = string_.stringValue();
    // 1. Let _strLen_ be the number of code units in string.
    const strLen = string.length;
    // 2. Let k be 0.
    let k = 0;
    // 3. Repeat, while k ≠ strLen,
    while (k !== strLen) {
      let _temp = CodePointAt(string, k);
      Assert(!(_temp instanceof AbruptCompletion), "CodePointAt(string, k)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      // a. Let cp be ! CodePointAt(string, k).
      const cp = _temp;
      // b. If cp.[[IsUnpairedSurrogate]] is true, return false.
      if (cp.IsUnpairedSurrogate) {
        return false;
      }
      // c. Set k to k + cp.[[CodeUnitCount]].
      k += cp.CodeUnitCount;
    }
    // 4. Return true.
    return true;
  }

  function IsComputedPropertyKey(node) {
    return node.type !== 'IdentifierName' && node.type !== 'StringLiteral' && node.type !== 'NumericLiteral';
  }

  /** https://tc39.es/ecma262/#sec-static-semantics-privateboundidentifiers */
  function PrivateBoundIdentifiers(node) {
    if (isArray(node)) {
      return node.flatMap(n => PrivateBoundIdentifiers(n));
    }
    switch (node.type) {
      case 'PrivateIdentifier':
        return [StringValue(node)];
      case 'MethodDefinition':
      case 'GeneratorMethod':
      case 'AsyncMethod':
      case 'AsyncGeneratorMethod':
      case 'FieldDefinition':
        return PrivateBoundIdentifiers(node.ClassElementName);
      default:
        return [];
    }
  }

  /** https://tc39.es/ecma262/#sec-static-semantics-containsarguments */
  function ContainsArguments(node) {
    switch (node.type) {
      case 'IdentifierReference':
        if (node.name === 'arguments') {
          return node;
        }
        return null;
      case 'FunctionDeclaration':
      case 'FunctionExpression':
      case 'MethodDefinition':
      case 'GeneratorMethod':
      case 'GeneratorDeclaration':
      case 'GeneratorExpression':
      case 'AsyncMethod':
      case 'AsyncFunctionDeclaration':
      case 'AsyncFunctionExpression':
        return null;
      default:
        for (const value of Object.values(node)) {
          // TODO(ts): This function does not accept a ParseNode[], when isArray(value), ContainsArguments should never return a result?
          if (value?.type || Array.isArray(value)) {
            const maybe = ContainsArguments(value);
            if (maybe) {
              return maybe;
            }
          }
        }
        return null;
    }
  }

  /** https://tc39.es/ecma262/#sec-utf16encodecodepoint */
  function UTF16EncodeCodePoint(cp) {
    // 1. Assert: 0 ≤ cp ≤ 0x10FFFF.
    Assert(cp >= 0 && cp <= 0x10FFFF, "cp >= 0 && cp <= 0x10FFFF");
    // 2. If cp ≤ 0xFFFF, return the String value consisting of the code unit whose value is cp.
    if (cp <= 0xFFFF) {
      return String.fromCodePoint(cp);
    }
    // 3. Let cu1 be the code unit whose value is floor((cp - 0x10000) / 0x400) + 0xD800.
    const cu1 = Math.floor((cp - 0x10000) / 0x400) + 0xD800;
    // 4. Let cu2 be the code unit whose value is ((cp - 0x10000) modulo 0x400) + 0xDC00.
    const cu2 = (cp - 0x10000) % 0x400 + 0xDC00;
    // 5. Return the string-concatenation of cu1 and cu2.
    return String.fromCodePoint(cu1, cu2);
  }

  /** https://tc39.es/ecma262/#sec-identifiers-runtime-semantics-evaluation */
  // IdentifierReference :
  //   Identifier
  //   `yield`
  //   `await`
  function Evaluate_IdentifierReference(IdentifierReference) {
    // 1. Return ? ResolveBinding(StringValue of Identifier).
    return ResolveBinding(StringValue(IdentifierReference), undefined, IdentifierReference.strict);
  }

  // @ts-nocheck
  /** https://tc39.es/ecma262/#sec-this-keyword-runtime-semantics-evaluation */
  // PrimaryExpression : `this`
  function Evaluate_This(_PrimaryExpression) {
    return ResolveThisBinding();
  }

  /** https://tc39.es/ecma262/#sec-literals-runtime-semantics-evaluation */
  // Literal :
  //   NullLiteral
  //   BooleanLiteral
  //   NumericLiteral
  //   StringLiteral
  function Evaluate_Literal(Literal) {
    switch (Literal.type) {
      case 'NullLiteral':
        // 1. Return null.
        return NormalCompletion(Value.null);
      case 'BooleanLiteral':
        // 1. If BooleanLiteral is the token false, return false.
        if (Literal.value === false) {
          return NormalCompletion(Value.false);
        }
        // 2. If BooleanLiteral is the token true, return true.
        if (Literal.value === true) {
          return NormalCompletion(Value.true);
        }
        throw new OutOfRange$1('Evaluate_Literal', Literal);
      case 'NumericLiteral':
        // 1. Return the NumericValue of NumericLiteral as defined in 11.8.3.
        return NormalCompletion(NumericValue(Literal));
      case 'StringLiteral':
        return NormalCompletion(StringValue(Literal));
      /*c8 ignore next*/default:
        throw new OutOfRange$1('Evaluate_Literal', Literal);
    }
  }

  /** https://tc39.es/ecma262/#sec-class-definitions-runtime-semantics-evaluation */
  // ClassExpression :
  //   `class` ClassTail
  //   `class` BindingIdentifier ClassTail
  function* Evaluate_ClassExpression(ClassExpression) {
    const {
      BindingIdentifier,
      ClassTail
    } = ClassExpression;
    if (!BindingIdentifier) {
      let _temp = yield* ClassDefinitionEvaluation(ClassTail, Value.undefined, Value(''));
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      // 1. Let value be ? ClassDefinitionEvaluation of ClassTail with arguments undefined and ''
      const value = _temp;
      // 2. Set value.[[SourceText]] to the source text matched by ClassExpression.
      value.SourceText = sourceTextMatchedBy(ClassExpression);
      // 3. Return value.
      return value;
    }
    // 1. Let className be StringValue of BindingIdentifier.
    const className = StringValue(BindingIdentifier);
    // 2. Let value be ? ClassDefinitionEvaluation of ClassTail with arguments className and className.
    let _temp2 = yield* ClassDefinitionEvaluation(ClassTail, className, className);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const value = _temp2;
    // Set value.[[SourceText]] to the source text matched by ClassExpression.
    value.SourceText = sourceTextMatchedBy(ClassExpression);
    // Return value.
    return value;
  }

  // @ts-nocheck

  function* Evaluate(node) {
    exports.surroundingAgent.runningExecutionContext.callSite.setLocation(node);
    if (exports.surroundingAgent.hostDefinedOptions.onNodeEvaluation) {
      exports.surroundingAgent.hostDefinedOptions.onNodeEvaluation(node, exports.surroundingAgent.currentRealmRecord);
    }
    switch (node.type) {
      // Language
      case 'Script':
        return yield* Evaluate_Script(node);
      case 'ScriptBody':
        return yield* Evaluate_ScriptBody(node);
      case 'Module':
        return yield* Evaluate_Module(node);
      case 'ModuleBody':
        return yield* Evaluate_ModuleBody(node);
      // Statements
      case 'Block':
        return yield* Evaluate_Block(node);
      case 'VariableStatement':
        return yield* Evaluate_VariableStatement(node);
      case 'EmptyStatement':
        return Evaluate_EmptyStatement();
      case 'IfStatement':
        return yield* Evaluate_IfStatement(node);
      case 'ExpressionStatement':
        return yield* Evaluate_ExpressionStatement(node);
      case 'WhileStatement':
      case 'DoWhileStatement':
      case 'SwitchStatement':
      case 'ForStatement':
      case 'ForInStatement':
      case 'ForOfStatement':
      case 'ForAwaitStatement':
        return yield* Evaluate_BreakableStatement(node);
      case 'ForBinding':
        return Evaluate_ForBinding(node);
      case 'CaseClause':
      case 'DefaultClause':
        return yield* Evaluate_CaseClause(node);
      case 'BreakStatement':
        return Evaluate_BreakStatement(node);
      case 'ContinueStatement':
        return Evaluate_ContinueStatement(node);
      case 'LabelledStatement':
        return yield* Evaluate_LabelledStatement(node);
      case 'ReturnStatement':
        return yield* Evaluate_ReturnStatement(node);
      case 'ThrowStatement':
        return yield* Evaluate_ThrowStatement(node);
      case 'TryStatement':
        return yield* Evaluate_TryStatement(node);
      case 'DebuggerStatement':
        return Evaluate_DebuggerStatement();
      case 'WithStatement':
        return yield* Evaluate_WithStatement(node);
      // Declarations
      case 'ImportDeclaration':
        return Evaluate_ImportDeclaration();
      case 'ExportDeclaration':
        return yield* Evaluate_ExportDeclaration(node);
      case 'ClassDeclaration':
        return yield* Evaluate_ClassDeclaration(node);
      case 'LexicalDeclaration':
        return yield* Evaluate_LexicalDeclaration(node);
      case 'FunctionDeclaration':
        return Evaluate_FunctionDeclaration();
      case 'GeneratorDeclaration':
      case 'AsyncFunctionDeclaration':
      case 'AsyncGeneratorDeclaration':
        return Evaluate_HoistableDeclaration();
      // Expressions
      case 'CommaOperator':
        return yield* Evaluate_CommaOperator(node);
      case 'ThisExpression':
        return Evaluate_This();
      case 'IdentifierReference':
        return Evaluate_IdentifierReference(node);
      case 'NullLiteral':
      case 'BooleanLiteral':
      case 'NumericLiteral':
      case 'StringLiteral':
        return Evaluate_Literal(node);
      case 'ArrayLiteral':
        return yield* Evaluate_ArrayLiteral(node);
      case 'ObjectLiteral':
        return yield* Evaluate_ObjectLiteral(node);
      case 'FunctionExpression':
        return Evaluate_FunctionExpression(node);
      case 'ClassExpression':
        return yield* Evaluate_ClassExpression(node);
      case 'GeneratorExpression':
        return Evaluate_GeneratorExpression(node);
      case 'AsyncFunctionExpression':
        return Evaluate_AsyncFunctionExpression(node);
      case 'AsyncGeneratorExpression':
        return Evaluate_AsyncGeneratorExpression(node);
      case 'TemplateLiteral':
        return yield* Evaluate_TemplateLiteral(node);
      case 'ParenthesizedExpression':
        return yield* Evaluate_ParenthesizedExpression(node);
      case 'AdditiveExpression':
        return yield* Evaluate_AdditiveExpression(node);
      case 'MultiplicativeExpression':
        return yield* Evaluate_MultiplicativeExpression(node);
      case 'ExponentiationExpression':
        return yield* Evaluate_ExponentiationExpression(node);
      case 'UpdateExpression':
        return yield* Evaluate_UpdateExpression(node);
      case 'ShiftExpression':
        return yield* Evaluate_ShiftExpression(node);
      case 'LogicalORExpression':
        return yield* Evaluate_LogicalORExpression(node);
      case 'LogicalANDExpression':
        return yield* Evaluate_LogicalANDExpression(node);
      case 'BitwiseANDExpression':
      case 'BitwiseXORExpression':
      case 'BitwiseORExpression':
        return yield* Evaluate_BinaryBitwiseExpression(node);
      case 'RelationalExpression':
        return yield* Evaluate_RelationalExpression(node);
      case 'CoalesceExpression':
        return yield* Evaluate_CoalesceExpression(node);
      case 'EqualityExpression':
        return yield* Evaluate_EqualityExpression(node);
      case 'CallExpression':
        {
          exports.surroundingAgent.runningExecutionContext.callSite.setCallLocation(node);
          const r = yield* Evaluate_CallExpression(node);
          exports.surroundingAgent.runningExecutionContext.callSite.setCallLocation(null);
          return r;
        }
      case 'NewExpression':
        return yield* Evaluate_NewExpression(node);
      case 'MemberExpression':
        return yield* Evaluate_MemberExpression(node);
      case 'OptionalExpression':
        return yield* Evaluate_OptionalExpression(node);
      case 'TaggedTemplateExpression':
        return yield* Evaluate_TaggedTemplateExpression(node);
      case 'SuperProperty':
        return yield* Evaluate_SuperProperty(node);
      case 'SuperCall':
        return yield* Evaluate_SuperCall(node);
      case 'NewTarget':
        return Evaluate_NewTarget();
      case 'ImportMeta':
        return Evaluate_ImportMeta();
      case 'ImportCall':
        return yield* Evaluate_ImportCall(node);
      case 'AssignmentExpression':
        return yield* Evaluate_AssignmentExpression(node);
      case 'YieldExpression':
        return yield* Evaluate_YieldExpression(node);
      case 'AwaitExpression':
        return yield* Evaluate_AwaitExpression(node);
      case 'UnaryExpression':
        return yield* Evaluate_UnaryExpression(node);
      case 'ArrowFunction':
        return Evaluate_ArrowFunction(node);
      case 'AsyncArrowFunction':
        return Evaluate_AsyncArrowFunction(node);
      case 'ConditionalExpression':
        return yield* Evaluate_ConditionalExpression(node);
      case 'RegularExpressionLiteral':
        return Evaluate_RegularExpressionLiteral(node);
      case 'AsyncBody':
      case 'GeneratorBody':
      case 'AsyncGeneratorBody':
        return yield* Evaluate_AnyFunctionBody(node);
      case 'ExpressionBody':
        return yield* Evaluate_ExpressionBody(node);
      /*c8 ignore next*/default:
        throw new OutOfRange$1('Evaluate', node);
    }
  }

  // @ts-nocheck
  function* ClassElementEvaluation(node, object, enumerable) {
    switch (node.type) {
      case 'MethodDefinition':
      case 'GeneratorMethod':
      case 'AsyncMethod':
      case 'AsyncGeneratorMethod':
        return yield* MethodDefinitionEvaluation(node, object, enumerable);
      case 'FieldDefinition':
        return yield* ClassFieldDefinitionEvaluation(node, object);
      case 'ClassStaticBlock':
        return ClassStaticBlockDefinitionEvaluation(node, object);
      /*c8 ignore next*/default:
        throw new OutOfRange$1('ClassElementEvaluation', node);
    }
  }

  // ClassTail : ClassHeritage? `{` ClassBody? `}`
  function* ClassDefinitionEvaluation(ClassTail, classBinding, className) {
    const {
      ClassHeritage,
      ClassBody
    } = ClassTail;
    // 1. Let env be the LexicalEnvironment of the running execution context.
    const env = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 2. Let classScope be NewDeclarativeEnvironment(env).
    const classScope = new DeclarativeEnvironmentRecord(env);
    // 3. If classBinding is not undefined, then
    if (classBinding !== Value.undefined) {
      // a. Perform classScopeEnv.CreateImmutableBinding(classBinding, true).
      classScope.CreateImmutableBinding(classBinding, Value.true);
    }
    // 4. Let outerPrivateEnvironment be the running execution context's PrivateEnvironment.
    const outerPrivateEnvironment = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
    // 5. Let classPrivateEnvironment be NewPrivateEnvironment(outerPrivateEnvironment).
    const classPrivateEnvironment = new PrivateEnvironmentRecord(outerPrivateEnvironment);
    // 6. If ClassBody is present, then
    if (ClassBody) {
      // a. For each String dn of the PrivateBoundIdentifiers of ClassBody, do
      for (const dn of PrivateBoundIdentifiers(ClassBody)) {
        // i. If classPrivateEnvironment.[[Names]] contains a Private Name whose [[Description]] is dn, then
        const existing = classPrivateEnvironment.Names.find(n => n.Description.stringValue() === dn.stringValue());
        if (existing) ; else {
          // ii. Else,
          // 1. Let name be a new Private Name whose [[Description]] value is dn.
          const name = new PrivateName(dn);
          // 2. Append name to classPrivateEnvironment.[[Names]].
          classPrivateEnvironment.Names.push(name);
        }
      }
    }
    let protoParent;
    let constructorParent;
    // 7. If ClassHeritage is not present, then
    if (!ClassHeritage) {
      // a. Let protoParent be %Object.prototype%.
      protoParent = exports.surroundingAgent.intrinsic('%Object.prototype%');
      // b. Let constructorParent be %Function.prototype%.
      constructorParent = exports.surroundingAgent.intrinsic('%Function.prototype%');
    } else {
      // 8. Else,
      // a. Set the running execution context's LexicalEnvironment to classScope.
      exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = classScope;
      // b. Let superclassRef be the result of evaluating ClassHeritage.
      const superclassRef = yield* Evaluate(ClassHeritage);
      // c. Set the running execution context's LexicalEnvironment to env.
      exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = env;
      // d. Let superclass be ? GetValue(superclassRef).
      let _temp = GetValue(superclassRef);
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      const superclass = _temp;
      // e. If superclass is null, then
      if (superclass === Value.null) {
        // i. Let protoParent be null.
        protoParent = Value.null;
        // ii. Let constructorParent be %Function.prototype%.
        constructorParent = exports.surroundingAgent.intrinsic('%Function.prototype%');
      } else if (IsConstructor(superclass) === Value.false) {
        // f. Else if IsConstructor(superclass) is false, throw a TypeError exception.
        return exports.surroundingAgent.Throw('TypeError', 'NotAConstructor', superclass);
      } else {
        let _temp2 = Get(superclass, Value('prototype'));
        /* c8 ignore if */
        if (_temp2 instanceof AbruptCompletion) {
          return _temp2;
        }
        /* c8 ignore if */
        if (_temp2 instanceof Completion) {
          _temp2 = _temp2.Value;
        }
        // g. Else,
        // i. Let protoParent be ? Get(superclass, "prototype").
        protoParent = _temp2;
        // ii. If Type(protoParent) is neither Object nor Null, throw a TypeError exception.
        if (!(protoParent instanceof ObjectValue) && !(protoParent instanceof NullValue)) {
          return exports.surroundingAgent.Throw('TypeError', 'ObjectPrototypeType');
        }
        // iii. Let constructorParent be superclass.
        constructorParent = superclass;
      }
    }
    // 9. Let proto be OrdinaryObjectCreate(protoParent).
    const proto = OrdinaryObjectCreate(protoParent);
    let constructor;
    // 10. If ClassBody is not present, let constructor be empty.
    if (!ClassBody) {
      constructor = undefined;
    } else {
      // 11. Else, let constructor be ConstructorMethod of ClassBody.
      constructor = ConstructorMethod(ClassBody);
    }
    // 12. Set the running execution context's LexicalEnvironment to classScope.
    exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = classScope;
    // 13. Set the running execution context's PrivateEnvironment to classPrivateEnvironment.
    exports.surroundingAgent.runningExecutionContext.PrivateEnvironment = classPrivateEnvironment;
    let F;
    // 14. If constructor is empty, then
    if (constructor === undefined) {
      // a. Let defaultConstructor be a new Abstract Closure with no parameters that captures nothing and performs the following steps when called:
      const defaultConstructor = (args, {
        NewTarget
      }) => {
        // i. Let args be the List of arguments that was passed to this function by [[Call]] or [[Construct]].
        // ii. If NewTarget is undefined, throw a TypeError exception.
        if (NewTarget === Value.undefined) {
          return exports.surroundingAgent.Throw('TypeError', 'ConstructorNonCallable', exports.surroundingAgent.activeFunctionObject);
        }
        // iii. Let F be the active function object.
        const F = exports.surroundingAgent.activeFunctionObject; // eslint-disable-line no-shadow
        let result;
        // iv. If F.[[ConstructorKind]] is derived, then
        if (F.ConstructorKind === 'derived') {
          let _temp3 = F.GetPrototypeOf();
          Assert(!(_temp3 instanceof AbruptCompletion), "F.GetPrototypeOf()" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp3 instanceof Completion) {
            _temp3 = _temp3.Value;
          }
          // 1. NOTE: This branch behaves similarly to `constructor(...args) { super(...args); }`. The most
          //    notable distinction is that while the aforementioned ECMAScript source text observably calls
          //    the @@iterator method on `%Array.prototype%`, a Default Constructor Function does not.
          // 2. Let func be ! F.[[GetPrototypeOf]]().
          const func = _temp3;
          // 3. If IsConstructor(func) is false, throw a TypeError exception.
          if (IsConstructor(func) === Value.false) {
            return exports.surroundingAgent.Throw('TypeError', 'NotAConstructor', func);
          }
          // 4. Let result be ? Construct(func, args, NewTarget).
          let _temp4 = Construct(func, args, NewTarget);
          /* c8 ignore if */
          if (_temp4 instanceof AbruptCompletion) {
            return _temp4;
          }
          /* c8 ignore if */
          if (_temp4 instanceof Completion) {
            _temp4 = _temp4.Value;
          }
          result = _temp4;
        } else {
          let _temp5 = OrdinaryCreateFromConstructor(NewTarget, '%Object.prototype%');
          /* c8 ignore if */
          if (_temp5 instanceof AbruptCompletion) {
            return _temp5;
          }
          /* c8 ignore if */
          if (_temp5 instanceof Completion) {
            _temp5 = _temp5.Value;
          }
          // v. Else,
          // 1. NOTE: This branch behaves similarly to `constructor() {}`.
          // 2. Let result be ? OrdinaryCreateFromConstructor(NewTarget, "%Object.prototype%").
          result = _temp5;
        }
        let _temp6 = InitializeInstanceElements(result, F);
        /* c8 ignore if */
        if (_temp6 instanceof AbruptCompletion) {
          return _temp6;
        }
        /* c8 ignore if */
        if (_temp6 instanceof Completion) {
          _temp6 = _temp6.Value;
        }
        return result;
      };
      // b. ! CreateBuiltinFunction(defaultConstructor, 0, className, « [[ConstructorKind]], [[SourceText]] », the current Realm Record, constructorParent).
      let _temp7 = CreateBuiltinFunction(defaultConstructor, 0, className, ['ConstructorKind', 'SourceText'], undefined, constructorParent, undefined, Value.true);
      Assert(!(_temp7 instanceof AbruptCompletion), "CreateBuiltinFunction(defaultConstructor, 0, className, ['ConstructorKind', 'SourceText'], undefined, constructorParent, undefined, Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp7 instanceof Completion) {
        _temp7 = _temp7.Value;
      }
      F = _temp7;
    } else {
      let _temp8 = yield* DefineMethod(constructor, proto, constructorParent);
      Assert(!(_temp8 instanceof AbruptCompletion), "yield* DefineMethod(constructor, proto, constructorParent)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp8 instanceof Completion) {
        _temp8 = _temp8.Value;
      }
      // 15. Else,
      // a. Let constructorInfo be ! DefineMethod of constructor with arguments proto and constructorParent.
      const constructorInfo = _temp8;
      // b. Let F be constructorInfo.[[Closure]].
      F = constructorInfo.Closure;
      // c. Perform MakeClassConstructor(F).
      MakeClassConstructor(F);
      // d. Perform SetFunctionName(F, className).
      SetFunctionName(F, className);
    }
    // 16. Perform MakeConstructor(F, false, proto).
    MakeConstructor(F, Value.false, proto);
    // 17. If ClassHeritage is present, set F.[[ConstructorKind]] to derived.
    if (ClassHeritage) {
      F.ConstructorKind = 'derived';
    }
    // 18. Perform CreateMethodProperty(proto, "constructor", F).
    let _temp9 = CreateMethodProperty(proto, Value('constructor'), F);
    Assert(!(_temp9 instanceof AbruptCompletion), "CreateMethodProperty(proto, Value('constructor'), F)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    // 19. If ClassBody is not present, let elements be a new empty List.
    let elements;
    if (!ClassBody) {
      elements = [];
    } else {
      // 20. Else, let elements be NonConstructorElements of ClassBody.
      elements = NonConstructorElements(ClassBody);
    }
    // 21. Let instancePrivateMethods be a new empty List.
    const instancePrivateMethods = [];
    // 22. Let staticPrivateMethods be a new empty List.
    const staticPrivateMethods = [];
    // 23. Let instanceFields be a new empty List.
    const instanceFields = [];
    // 24. Let staticElements be a new empty List.
    const staticElements = [];
    // 25. For each ClassElement e of elements, do
    for (const e of elements) {
      let field;
      // a. If IsStatic of e is false, then
      if (IsStatic(e) === false) {
        // i. Let field be ClassElementEvaluation of e with arguments proto and false.
        field = yield* ClassElementEvaluation(e, proto, Value.false);
      } else {
        // b. Else,
        // i. Let field be ClassElementEvaluation of e with arguments F and false.
        field = yield* ClassElementEvaluation(e, F, Value.false);
      }
      // c. If field is an abrupt completion, then
      if (field instanceof AbruptCompletion) {
        // i. Set the running execution context's LexicalEnvironment to env.
        exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = env;
        // ii. Set the running execution context's PrivateEnvironment to outerPrivateEnvironment.
        exports.surroundingAgent.runningExecutionContext.PrivateEnvironment = outerPrivateEnvironment;
        // iii. Return Completion(field).
        return Completion(field);
      }
      // d. Set field to field.[[Value]].
      field = EnsureCompletion(field).Value;
      // e. If field is a PrivateElement, then
      if (field instanceof PrivateElementRecord) {
        // i. Assert: field.[[Kind]] is either method or accessor.
        Assert(field.Kind === 'method' || field.Kind === 'accessor', "field.Kind === 'method' || field.Kind === 'accessor'");
        // ii. If IsStatic of e is false, let container be instancePrivateMethods.
        let container;
        if (IsStatic(e) === false) {
          container = instancePrivateMethods;
        } else {
          // iii. Else, let container be staticPrivateMethods.
          container = staticPrivateMethods;
        }
        // iv. If container contains a PrivateElement whose [[Key]] is field.[[Key]], then
        const index = container.findIndex(el => el.Key === field.Key);
        if (index >= 0) {
          // 1. Let existing be that PrivateElement.
          const existing = container[index];
          // 2. Assert: field.[[Kind]] and existing.[[Kind]] are both accessor.
          Assert(field.Kind === 'accessor' && existing.Kind === 'accessor', "field.Kind === 'accessor' && existing.Kind === 'accessor'");
          // 3. If field.[[Get]] is undefined, then
          let combined;
          if (field.Get === Value.undefined) {
            combined = new PrivateElementRecord({
              Key: field.Key,
              Kind: 'accessor',
              Get: existing.Get,
              Set: field.Set
            });
          } else {
            // 4. Else
            combined = new PrivateElementRecord({
              Key: field.Key,
              Kind: 'accessor',
              Get: field.Get,
              Set: existing.Set
            });
          }
          // 5. Replace existing in container with combined.
          container[index] = combined;
        } else {
          // v. Else,
          // 1. Append field to container.
          container.push(field);
        }
      } else if (field instanceof ClassFieldDefinitionRecord) {
        // f. Else if field is a ClassFieldDefinition Record, then
        // i. If IsStatic of e is false, append field to instanceFields.
        if (IsStatic(e) === false) {
          instanceFields.push(field);
        } else {
          // ii. Else, append field to staticElements.
          staticElements.push(field);
        }
      } else if (field instanceof ClassStaticBlockDefinitionRecord) {
        // g. Else if element is a ClassStaticBlockDefinition Record, then
        // i. Append element to staticElements.
        staticElements.push(field);
      }
    }
    // 26. Set the running execution context's LexicalEnvironment to env.
    exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = env;
    // 27. If classBinding is not undefined, then
    if (classBinding !== Value.undefined) {
      // a. Perform classScope.InitializeBinding(classBinding, F).
      classScope.InitializeBinding(classBinding, F);
    }
    // 28. Set F.[[PrivateMethods]] to instancePrivateMethods.
    F.PrivateMethods = instancePrivateMethods;
    // 29. Set F.[[Fields]] to instanceFields.
    F.Fields = instanceFields;
    // 30. For each PrivateElement method of staticPrivateMethods, do
    for (const method of staticPrivateMethods) {
      let _temp10 = PrivateMethodOrAccessorAdd(method, F);
      Assert(!(_temp10 instanceof AbruptCompletion), "PrivateMethodOrAccessorAdd(method, F)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp10 instanceof Completion) {
        _temp10 = _temp10.Value;
      }
    }
    // 31. For each element elementRecord of staticElements, do
    for (const elementRecord of staticElements) {
      let result;
      // a. If elementRecord is a ClassFieldDefinition Record, then
      if (elementRecord instanceof ClassFieldDefinitionRecord) {
        // a. Let result be DefineField(F, elementRecord).
        result = DefineField(F, elementRecord);
      } else {
        // b. Else,
        // i. Assert: elementRecord is a ClassStaticBlockDefinition Record.
        Assert(elementRecord instanceof ClassStaticBlockDefinitionRecord, "elementRecord instanceof ClassStaticBlockDefinitionRecord");
        // ii. Let result be Completion(Call(elementRecord.[[BodyFunction]], F)).
        result = Completion(Call(elementRecord.BodyFunction, F));
      }
      // c. If result is an abrupt completion, then
      if (result instanceof AbruptCompletion) {
        // i. Set the running execution context's PrivateEnvironment to outerPrivateEnvironment.
        exports.surroundingAgent.runningExecutionContext.PrivateEnvironment = outerPrivateEnvironment;
        // ii. Return result.
        return result;
      }
    }
    // 32. Set the running execution context's PrivateEnvironment to outerPrivateEnvironment.
    exports.surroundingAgent.runningExecutionContext.PrivateEnvironment = outerPrivateEnvironment;
    // 33. Return F.
    return F;
  }

  /** https://tc39.es/ecma262/#sec-runtime-semantics-definemethod */
  function* DefineMethod(MethodDefinition, object, functionPrototype) {
    const {
      ClassElementName,
      UniqueFormalParameters,
      FunctionBody
    } = MethodDefinition;
    // 1. Let propKey be the result of evaluating ClassElementName.
    let propKey = yield* Evaluate_PropertyName(ClassElementName);
    // 2. ReturnIfAbrupt(propKey).
    /* c8 ignore if */
    if (propKey instanceof AbruptCompletion) {
      return propKey;
    }
    /* c8 ignore if */
    if (propKey instanceof Completion) {
      propKey = propKey.Value;
    }
    // 3. Let scope be the running execution context's LexicalEnvironment.
    const scope = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 4. Let privateScope be the running execution context's PrivateEnvironment.
    const privateScope = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
    let prototype;
    // 5. If functionPrototype is present as a parameter, then
    if (functionPrototype !== undefined) {
      // a. Let prototype be functionPrototype.
      prototype = functionPrototype;
    } else {
      // 6. Else,
      // a. Let prototype be %Function.prototype%.
      prototype = exports.surroundingAgent.intrinsic('%Function.prototype%');
    }
    // 7. Let sourceText be the source text matched by MethodDefinition.
    const sourceText = sourceTextMatchedBy(MethodDefinition);
    // 8. Let closure be OrdinaryFunctionCreate(prototype, sourceText, UniqueFormalParameters, FunctionBody, non-lexical-this, scope, privateScope).
    const closure = OrdinaryFunctionCreate(prototype, sourceText, UniqueFormalParameters, FunctionBody, 'non-lexical-this', scope, privateScope);
    // 9. Perform MakeMethod(closure, object).
    MakeMethod(closure, object);
    // 10. Return the Record { [[Key]]: propKey, [[Closure]]: closure }.
    return {
      Key: propKey,
      Closure: closure
    };
  }

  /** https://tc39.es/ecma262/#sec-object-initializer-runtime-semantics-evaluation */
  // PropertyName :
  //   LiteralPropertyName
  //   ComputedPropertyName
  // LiteralPropertyName :
  //   IdentifierName
  //   StringLiteral
  //   NumericLiteral
  // ComputedPropertyName :
  //   `[` AssignmentExpression `]`
  function* Evaluate_PropertyName(PropertyName) {
    switch (PropertyName.type) {
      case 'IdentifierName':
        return StringValue(PropertyName);
      case 'StringLiteral':
        return Value(PropertyName.value);
      case 'NumericLiteral':
        {
          // 1. Let nbr be the NumericValue of NumericLiteral.
          const nbr = NumericValue(PropertyName);
          // 2. Return ! ToString(nbr).
          let _temp = ToString(nbr);
          Assert(!(_temp instanceof AbruptCompletion), "ToString(nbr)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp instanceof Completion) {
            _temp = _temp.Value;
          }
          return _temp;
        }
      case 'PrivateIdentifier':
        {
          // 1. Let privateIdentifier be StringValue of PrivateIdentifier.
          const privateIdentifier = StringValue(PropertyName);
          // 2. Let privateEnvRec be the running execution context's PrivateEnvironment.
          const privateEnvRec = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
          // 3. Let names be privateEnvRec.[[Names]].
          const names = privateEnvRec.Names;
          // 4. Assert: Exactly one element of names is a Private Name whose [[Description]] is privateIdentifier.
          // 5. Let privateName be the Private Name in names whose [[Description]] is privateIdentifier.
          const privateName = names.find(n => n.Description.stringValue() === privateIdentifier.stringValue());
          Assert(privateName, "privateName");
          // 6. Return privateName.
          return privateName;
        }
      default:
        {
          // 1. Let exprValue be the result of evaluating AssignmentExpression.
          const exprValue = yield* Evaluate(PropertyName.ComputedPropertyName);
          // 2. Let propName be ? GetValue(exprValue).
          let _temp2 = GetValue(exprValue);
          /* c8 ignore if */
          if (_temp2 instanceof AbruptCompletion) {
            return _temp2;
          }
          /* c8 ignore if */
          if (_temp2 instanceof Completion) {
            _temp2 = _temp2.Value;
          }
          const propName = _temp2;
          // 3. Return ? ToPropertyKey(propName).
          return ToPropertyKey(propName);
        }
    }
  }

  // @ts-nocheck

  /** https://tc39.es/ecma262/#sec-addition-operator-plus-runtime-semantics-evaluation */
  //   AdditiveExpression : AdditiveExpression + MultiplicativeExpression
  function* Evaluate_AdditiveExpression_Plus({
    AdditiveExpression,
    MultiplicativeExpression
  }) {
    // 1. Return ? EvaluateStringOrNumericBinaryExpression(AdditiveExpression, +, MultiplicativeExpression).
    return yield* EvaluateStringOrNumericBinaryExpression(AdditiveExpression, '+', MultiplicativeExpression);
  }

  /** https://tc39.es/ecma262/#sec-subtraction-operator-minus-runtime-semantics-evaluation */
  Evaluate_AdditiveExpression_Plus.section = 'https://tc39.es/ecma262/#sec-addition-operator-plus-runtime-semantics-evaluation';
  function* Evaluate_AdditiveExpression_Minus({
    AdditiveExpression,
    MultiplicativeExpression
  }) {
    // 1. Return ? EvaluateStringOrNumericBinaryExpression(AdditiveExpression, -, MultiplicativeExpression).
    return yield* EvaluateStringOrNumericBinaryExpression(AdditiveExpression, '-', MultiplicativeExpression);
  }
  Evaluate_AdditiveExpression_Minus.section = 'https://tc39.es/ecma262/#sec-subtraction-operator-minus-runtime-semantics-evaluation';
  function* Evaluate_AdditiveExpression(AdditiveExpression) {
    switch (AdditiveExpression.operator) {
      case '+':
        return yield* Evaluate_AdditiveExpression_Plus(AdditiveExpression);
      case '-':
        return yield* Evaluate_AdditiveExpression_Minus(AdditiveExpression);
      /*c8 ignore next*/default:
        throw new OutOfRange$1('Evaluate_AdditiveExpression', AdditiveExpression);
    }
  }

  /** https://tc39.es/ecma262/#sec-destructuring-assignment */
  function refineLeftHandSideExpression(node, type) {
    switch (node.type) {
      case 'ArrayLiteral':
        {
          const refinement = {
            type: 'ArrayAssignmentPattern',
            AssignmentElementList: [],
            AssignmentRestElement: undefined
          };
          node.ElementList.forEach(n => {
            switch (n.type) {
              case 'SpreadElement':
                refinement.AssignmentRestElement = {
                  type: 'AssignmentRestElement',
                  DestructuringAssignmentTarget: n.AssignmentExpression
                };
                break;
              case 'ArrayLiteral':
              case 'ObjectLiteral':
                refinement.AssignmentElementList.push({
                  type: 'AssignmentElement',
                  DestructuringAssignmentTarget: n,
                  Initializer: null
                });
                break;
              default:
                refinement.AssignmentElementList.push(refineLeftHandSideExpression(n, 'array'));
                break;
            }
          });
          return refinement;
        }
      case 'ObjectLiteral':
        {
          const refined = {
            type: 'ObjectAssignmentPattern',
            AssignmentPropertyList: [],
            AssignmentRestProperty: undefined
          };
          node.PropertyDefinitionList.forEach(p => {
            if (p.PropertyName === null && p.AssignmentExpression) {
              refined.AssignmentRestProperty = {
                type: 'AssignmentRestProperty',
                DestructuringAssignmentTarget: p.AssignmentExpression
              };
            } else {
              refined.AssignmentPropertyList.push(refineLeftHandSideExpression(p, 'object'));
            }
          });
          return refined;
        }
      case 'PropertyDefinition':
        return {
          type: 'AssignmentProperty',
          PropertyName: node.PropertyName,
          AssignmentElement: node.AssignmentExpression.type === 'AssignmentExpression' ? {
            type: 'AssignmentElement',
            DestructuringAssignmentTarget: node.AssignmentExpression.LeftHandSideExpression,
            Initializer: node.AssignmentExpression.AssignmentExpression
          } : {
            type: 'AssignmentElement',
            DestructuringAssignmentTarget: node.AssignmentExpression,
            Initializer: undefined
          }
        };
      case 'IdentifierReference':
        if (type === 'array') {
          return {
            type: 'AssignmentElement',
            DestructuringAssignmentTarget: node,
            Initializer: undefined
          };
        } else {
          return {
            type: 'AssignmentProperty',
            IdentifierReference: node,
            Initializer: undefined
          };
        }
      case 'MemberExpression':
        return {
          type: 'AssignmentElement',
          DestructuringAssignmentTarget: node,
          Initializer: undefined
        };
      case 'CoverInitializedName':
        return {
          type: 'AssignmentProperty',
          IdentifierReference: node.IdentifierReference,
          Initializer: node.Initializer
        };
      case 'AssignmentExpression':
        return {
          type: 'AssignmentElement',
          DestructuringAssignmentTarget: node.LeftHandSideExpression,
          Initializer: node.AssignmentExpression
        };
      case 'Elision':
        return {
          type: 'Elision'
        };
      /*c8 ignore next*/default:
        throw new OutOfRange$1('refineLeftHandSideExpression', node.type);
    }
  }

  /** https://tc39.es/ecma262/#sec-assignment-operators-runtime-semantics-evaluation */
  //   AssignmentExpression :
  //     LeftHandSideExpression `=` AssignmentExpression
  //     LeftHandSideExpression AssignmentOperator AssignmentExpression
  //     LeftHandSideExpression `&&=` AssignmentExpression
  //     LeftHandSideExpression `||=` AssignmentExpression
  //     LeftHandSideExpression `??=` AssignmentExpression
  function* Evaluate_AssignmentExpression({
    LeftHandSideExpression,
    AssignmentOperator,
    AssignmentExpression
  }) {
    if (AssignmentOperator === '=') {
      // 1. If LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral, then
      if (LeftHandSideExpression.type !== 'ObjectLiteral' && LeftHandSideExpression.type !== 'ArrayLiteral') {
        let _temp = yield* Evaluate(LeftHandSideExpression);
        /* c8 ignore if */
        if (_temp instanceof AbruptCompletion) {
          return _temp;
        }
        /* c8 ignore if */
        if (_temp instanceof Completion) {
          _temp = _temp.Value;
        }
        // a. Let lref be the result of evaluating LeftHandSideExpression.
        let lref = _temp;
        // b. ReturnIfAbrupt(lref).
        /* c8 ignore if */
        if (lref instanceof AbruptCompletion) {
          return lref;
        }
        /* c8 ignore if */
        if (lref instanceof Completion) {
          lref = lref.Value;
        }
        // c. If IsAnonymousFunctionDefinition(AssignmentExpression) and IsIdentifierRef of LeftHandSideExpression are both true, then
        let rval;
        if (IsAnonymousFunctionDefinition(AssignmentExpression) && IsIdentifierRef(LeftHandSideExpression)) {
          // i. Let rval be NamedEvaluation of AssignmentExpression with argument GetReferencedName(lref).
          rval = yield* NamedEvaluation(AssignmentExpression, lref.ReferencedName);
        } else {
          // d. Else,
          // i. Let rref be the result of evaluating AssignmentExpression.
          const rref = yield* Evaluate(AssignmentExpression);
          // ii. Let rval be ? GetValue(rref).
          let _temp2 = GetValue(rref);
          /* c8 ignore if */
          if (_temp2 instanceof AbruptCompletion) {
            return _temp2;
          }
          /* c8 ignore if */
          if (_temp2 instanceof Completion) {
            _temp2 = _temp2.Value;
          }
          rval = _temp2;
        }
        // e. Perform ? PutValue(lref, rval).
        let _temp3 = PutValue(lref, rval);
        /* c8 ignore if */
        if (_temp3 instanceof AbruptCompletion) {
          return _temp3;
        }
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
        // f. Return rval.
        return rval;
      }
      // 2. Let assignmentPattern be the AssignmentPattern that is covered by LeftHandSideExpression.
      const assignmentPattern = refineLeftHandSideExpression(LeftHandSideExpression);
      // 3. Let rref be the result of evaluating AssignmentExpression.
      const rref = yield* Evaluate(AssignmentExpression);
      // 3. Let rval be ? GetValue(rref).
      let _temp4 = GetValue(rref);
      /* c8 ignore if */
      if (_temp4 instanceof AbruptCompletion) {
        return _temp4;
      }
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      const rval = _temp4;
      // 4. Perform ? DestructuringAssignmentEvaluation of assignmentPattern using rval as the argument.
      let _temp5 = yield* DestructuringAssignmentEvaluation(assignmentPattern, rval);
      /* c8 ignore if */
      if (_temp5 instanceof AbruptCompletion) {
        return _temp5;
      }
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      // 5. Return rval.
      return rval;
    } else if (AssignmentOperator === '&&=') {
      let _temp6 = yield* Evaluate(LeftHandSideExpression);
      /* c8 ignore if */
      if (_temp6 instanceof AbruptCompletion) {
        return _temp6;
      }
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
      // 1. Let lref be the result of evaluating LeftHandSideExpression.
      const lref = _temp6;
      // 2. Let lval be ? GetValue(lref).
      let _temp7 = GetValue(lref);
      /* c8 ignore if */
      if (_temp7 instanceof AbruptCompletion) {
        return _temp7;
      }
      /* c8 ignore if */
      if (_temp7 instanceof Completion) {
        _temp7 = _temp7.Value;
      }
      const lval = _temp7;
      // 3. Let lbool be ! ToBoolean(lval).
      let _temp8 = ToBoolean(lval);
      Assert(!(_temp8 instanceof AbruptCompletion), "ToBoolean(lval)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp8 instanceof Completion) {
        _temp8 = _temp8.Value;
      }
      const lbool = _temp8;
      // 4. If lbool is false, return lval.
      if (lbool === Value.false) {
        return lval;
      }
      let rval;
      // 5. If IsAnonymousFunctionDefinition(AssignmentExpression) is true and IsIdentifierRef of LeftHandSideExpression is true, then
      if (IsAnonymousFunctionDefinition(AssignmentExpression) && IsIdentifierRef(LeftHandSideExpression)) {
        // a. Let rval be NamedEvaluation of AssignmentExpression with argument GetReferencedName(lref).
        rval = yield* NamedEvaluation(AssignmentExpression, lref.ReferencedName);
      } else {
        // 6. Else,
        // a. Let rref be the result of evaluating AssignmentExpression.
        const rref = yield* Evaluate(AssignmentExpression);
        // b. Let rval be ? GetValue(rref).
        let _temp9 = GetValue(rref);
        /* c8 ignore if */
        if (_temp9 instanceof AbruptCompletion) {
          return _temp9;
        }
        /* c8 ignore if */
        if (_temp9 instanceof Completion) {
          _temp9 = _temp9.Value;
        }
        rval = _temp9;
      }
      // 7. Perform ? PutValue(lref, rval).
      let _temp10 = PutValue(lref, rval);
      /* c8 ignore if */
      if (_temp10 instanceof AbruptCompletion) {
        return _temp10;
      }
      /* c8 ignore if */
      if (_temp10 instanceof Completion) {
        _temp10 = _temp10.Value;
      }
      // 8. Return rval.
      return rval;
    } else if (AssignmentOperator === '||=') {
      let _temp11 = yield* Evaluate(LeftHandSideExpression);
      /* c8 ignore if */
      if (_temp11 instanceof AbruptCompletion) {
        return _temp11;
      }
      /* c8 ignore if */
      if (_temp11 instanceof Completion) {
        _temp11 = _temp11.Value;
      }
      // 1. Let lref be the result of evaluating LeftHandSideExpression.
      const lref = _temp11;
      // 2. Let lval be ? GetValue(lref).
      let _temp12 = GetValue(lref);
      /* c8 ignore if */
      if (_temp12 instanceof AbruptCompletion) {
        return _temp12;
      }
      /* c8 ignore if */
      if (_temp12 instanceof Completion) {
        _temp12 = _temp12.Value;
      }
      const lval = _temp12;
      // 3. Let lbool be ! ToBoolean(lval).
      let _temp13 = ToBoolean(lval);
      Assert(!(_temp13 instanceof AbruptCompletion), "ToBoolean(lval)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp13 instanceof Completion) {
        _temp13 = _temp13.Value;
      }
      const lbool = _temp13;
      // 4. If lbool is true, return lval.
      if (lbool === Value.true) {
        return lval;
      }
      let rval;
      // 5. If IsAnonymousFunctionDefinition(AssignmentExpression) is true and IsIdentifierRef of LeftHandSideExpression is true, then
      if (IsAnonymousFunctionDefinition(AssignmentExpression) && IsIdentifierRef(LeftHandSideExpression)) {
        // a. Let rval be NamedEvaluation of AssignmentExpression with argument GetReferencedName(lref).
        rval = yield* NamedEvaluation(AssignmentExpression, lref.ReferencedName);
      } else {
        // 6. Else,
        // a. Let rref be the result of evaluating AssignmentExpression.
        const rref = yield* Evaluate(AssignmentExpression);
        // b. Let rval be ? GetValue(rref).
        let _temp14 = GetValue(rref);
        /* c8 ignore if */
        if (_temp14 instanceof AbruptCompletion) {
          return _temp14;
        }
        /* c8 ignore if */
        if (_temp14 instanceof Completion) {
          _temp14 = _temp14.Value;
        }
        rval = _temp14;
      }
      // 7. Perform ? PutValue(lref, rval).
      let _temp15 = PutValue(lref, rval);
      /* c8 ignore if */
      if (_temp15 instanceof AbruptCompletion) {
        return _temp15;
      }
      /* c8 ignore if */
      if (_temp15 instanceof Completion) {
        _temp15 = _temp15.Value;
      }
      // 8. Return rval.
      return rval;
    } else if (AssignmentOperator === '??=') {
      let _temp16 = yield* Evaluate(LeftHandSideExpression);
      /* c8 ignore if */
      if (_temp16 instanceof AbruptCompletion) {
        return _temp16;
      }
      /* c8 ignore if */
      if (_temp16 instanceof Completion) {
        _temp16 = _temp16.Value;
      }
      // 1.Let lref be the result of evaluating LeftHandSideExpression.
      const lref = _temp16;
      // 2. Let lval be ? GetValue(lref).
      let _temp17 = GetValue(lref);
      /* c8 ignore if */
      if (_temp17 instanceof AbruptCompletion) {
        return _temp17;
      }
      /* c8 ignore if */
      if (_temp17 instanceof Completion) {
        _temp17 = _temp17.Value;
      }
      const lval = _temp17;
      // 3. If lval is not undefined nor null, return lval.
      if (lval !== Value.undefined && lval !== Value.null) {
        return lval;
      }
      let rval;
      // 4. If IsAnonymousFunctionDefinition(AssignmentExpression) is true and IsIdentifierRef of LeftHandSideExpression is true, then
      if (IsAnonymousFunctionDefinition(AssignmentExpression) && IsIdentifierRef(LeftHandSideExpression)) {
        // a. Let rval be NamedEvaluation of AssignmentExpression with argument GetReferencedName(lref).
        rval = yield* NamedEvaluation(AssignmentExpression, lref.ReferencedName);
      } else {
        // 5. Else,
        // a. Let rref be the result of evaluating AssignmentExpression.
        const rref = yield* Evaluate(AssignmentExpression);
        // b. Let rval be ? GetValue(rref).
        let _temp18 = GetValue(rref);
        /* c8 ignore if */
        if (_temp18 instanceof AbruptCompletion) {
          return _temp18;
        }
        /* c8 ignore if */
        if (_temp18 instanceof Completion) {
          _temp18 = _temp18.Value;
        }
        rval = _temp18;
      }
      // 6. Perform ? PutValue(lref, rval).
      let _temp19 = PutValue(lref, rval);
      /* c8 ignore if */
      if (_temp19 instanceof AbruptCompletion) {
        return _temp19;
      }
      /* c8 ignore if */
      if (_temp19 instanceof Completion) {
        _temp19 = _temp19.Value;
      }
      // 7. Return rval.
      return rval;
    } else {
      let _temp20 = yield* Evaluate(LeftHandSideExpression);
      /* c8 ignore if */
      if (_temp20 instanceof AbruptCompletion) {
        return _temp20;
      }
      /* c8 ignore if */
      if (_temp20 instanceof Completion) {
        _temp20 = _temp20.Value;
      }
      // 1. Let lref be the result of evaluating LeftHandSideExpression.
      const lref = _temp20;
      // 2. Let lval be ? GetValue(lref).
      let _temp21 = GetValue(lref);
      /* c8 ignore if */
      if (_temp21 instanceof AbruptCompletion) {
        return _temp21;
      }
      /* c8 ignore if */
      if (_temp21 instanceof Completion) {
        _temp21 = _temp21.Value;
      }
      const lval = _temp21;
      // 3. Let rref be the result of evaluating AssignmentExpression.
      const rref = yield* Evaluate(AssignmentExpression);
      // 4. Let rval be ? GetValue(rref).
      let _temp22 = GetValue(rref);
      /* c8 ignore if */
      if (_temp22 instanceof AbruptCompletion) {
        return _temp22;
      }
      /* c8 ignore if */
      if (_temp22 instanceof Completion) {
        _temp22 = _temp22.Value;
      }
      const rval = _temp22;
      // 5. Let assignmentOpText be the source text matched by AssignmentOperator.
      const assignmentOpText = AssignmentOperator;
      // 6. Let opText be the sequence of Unicode code points associated with assignmentOpText in the following table:
      const opText = {
        '**=': '**',
        '*=': '*',
        '/=': '/',
        '%=': '%',
        '+=': '+',
        '-=': '-',
        '<<=': '<<',
        '>>=': '>>',
        '>>>=': '>>>',
        '&=': '&',
        '^=': '^',
        '|=': '|'
      }[assignmentOpText];
      // 7. Let r be ApplyStringOrNumericBinaryOperator(lval, opText, rval).
      const r = ApplyStringOrNumericBinaryOperator(lval, opText, rval);
      // 8. Perform ? PutValue(lref, r).
      let _temp23 = PutValue(lref, r);
      /* c8 ignore if */
      if (_temp23 instanceof AbruptCompletion) {
        return _temp23;
      }
      /* c8 ignore if */
      if (_temp23 instanceof Completion) {
        _temp23 = _temp23.Value;
      }
      // 9. Return r.
      return r;
    }
  }

  // @ts-nocheck

  /** https://tc39.es/ecma262/#sec-binary-bitwise-operators-runtime-semantics-evaluation */
  //   BitwiseANDExpression : BitwiseANDExpression `&` EqualityExpression
  //   BitwiseXORExpression : BitwiseXORExpression `^` BitwiseANDExpression
  //   BitwiseORExpression : BitwiseORExpression `|` BitwiseXORExpression
  // The production A : A @ B, where @ is one of the bitwise operators in the
  // productions above, is evaluated as follows:
  function* Evaluate_BinaryBitwiseExpression({
    A,
    operator,
    B
  }) {
    return yield* EvaluateStringOrNumericBinaryExpression(A, operator, B);
  }

  /** https://tc39.es/ecma262/#sec-binary-logical-operators-runtime-semantics-evaluation */
  //   CoalesceExpression :
  //     CoalesceExpressionHead `??` BitwiseORExpression
  function* Evaluate_CoalesceExpression({
    CoalesceExpressionHead,
    BitwiseORExpression
  }) {
    // 1. Let lref be the result of evaluating |CoalesceExpressionHead|.
    const lref = yield* Evaluate(CoalesceExpressionHead);
    // 2. Let lval be ? GetValue(lref).
    let _temp = GetValue(lref);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const lval = _temp;
    // 3. If lval is *undefined* or *null*,
    if (lval === Value.undefined || lval === Value.null) {
      // a. Let rref be the result of evaluating |BitwiseORExpression|.
      const rref = yield* Evaluate(BitwiseORExpression);
      // b. Return ? GetValue(rref).
      return GetValue(rref);
    }
    // 4. Otherwise, return lval.
    return lval;
  }

  /** https://tc39.es/ecma262/#sec-empty-statement-runtime-semantics-evaluation */
  //   EmptyStatement : `;`
  function Evaluate_EmptyStatement(_EmptyStatement) {
    // 1. Return NormalCompletion(empty).
    return NormalCompletion(undefined);
  }

  /** https://tc39.es/ecma262/#sec-exp-operator-runtime-semantics-evaluation */
  // ExponentiationExpression : UpdateExpression ** ExponentiationExpression
  function* Evaluate_ExponentiationExpression({
    UpdateExpression,
    ExponentiationExpression
  }) {
    // 1. Return ? EvaluateStringOrNumericBinaryExpression(UpdateExpression, **, ExponentiationExpression).
    return yield* EvaluateStringOrNumericBinaryExpression(UpdateExpression, '**', ExponentiationExpression);
  }

  /** https://tc39.es/ecma262/#sec-if-statement-runtime-semantics-evaluation */
  // IfStatement :
  //   `if` `(` Expression `)` Statement `else` Statement
  //   `if` `(` Expression `)` Statement
  function* Evaluate_IfStatement({
    Expression,
    Statement_a,
    Statement_b
  }) {
    // 1. Let exprRef be the result of evaluating Expression.
    const exprRef = yield* Evaluate(Expression);
    // 2. Let exprValue be ! ToBoolean(? GetValue(exprRef)).
    let _temp = GetValue(exprRef);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const exprValue = ToBoolean(_temp);
    if (Statement_b) {
      let stmtCompletion;
      // 3. If exprValue is true, then
      if (exprValue === Value.true) {
        // a. Let stmtCompletion be the result of evaluating the first Statement.
        stmtCompletion = yield* Evaluate(Statement_a);
      } else {
        // 4. Else,
        // a. Let stmtCompletion be the result of evaluating the second Statement.
        stmtCompletion = yield* Evaluate(Statement_b);
      }
      // 5. Return Completion(UpdateEmpty(stmtCompletion, undefined)).
      return Completion(UpdateEmpty(EnsureCompletion(stmtCompletion), Value.undefined));
    } else {
      // 3. If exprValue is false, then
      if (exprValue === Value.false) {
        // a. Return NormalCompletion(undefined).
        return NormalCompletion(Value.undefined);
      } else {
        // 4. Else,
        // a. Let stmtCompletion be the result of evaluating Statement.
        const stmtCompletion = yield* Evaluate(Statement_a);
        // b. Return Completion(UpdateEmpty(stmtCompletion, undefined)).
        return Completion(UpdateEmpty(EnsureCompletion(stmtCompletion), Value.undefined));
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-import-calls */
  // ImportCall : `import` `(` AssignmentExpression `)`
  function* Evaluate_ImportCall({
    AssignmentExpression
  }) {
    let _temp = GetActiveScriptOrModule();
    Assert(!(_temp instanceof AbruptCompletion), "GetActiveScriptOrModule()" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 1. Let referrer be ! GetActiveScriptOrModule().
    let referrer = _temp;
    // 2. If referrer is null, set referrer to the current Realm Record.
    if (referrer === null) {
      referrer = exports.surroundingAgent.realm;
    }
    // 3. Let argRef be the result of evaluating AssignmentExpression.
    const argRef = yield* Evaluate(AssignmentExpression);
    // 4. Let specifier be ? GetValue(argRef).
    let _temp2 = GetValue(argRef);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const specifier = _temp2;
    // 5. Let promiseCapability be ! NewPromiseCapability(%Promise%).
    let _temp3 = NewPromiseCapability(exports.surroundingAgent.intrinsic('%Promise%'));
    Assert(!(_temp3 instanceof AbruptCompletion), "NewPromiseCapability(surroundingAgent.intrinsic('%Promise%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const promiseCapability = _temp3;
    // 6. Let specifierString be ToString(specifier).
    let specifierString = ToString(specifier);
    // 7. IfAbruptRejectPromise(specifierString, promiseCapability).
    /* c8 ignore if */
    if (specifierString instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [specifierString.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (specifierString instanceof Completion) {
      specifierString = specifierString.Value;
    }
    // 8. Perform HostLoadImportedModule(referrer, specifierString, ~empty~, promiseCapability).
    HostLoadImportedModule(referrer, specifierString, Value.undefined, promiseCapability);
    // 9. Return promiseCapability.[[Promise]].
    return promiseCapability.Promise;
  }

  // @ts-nocheck

  /** https://tc39.es/ecma262/#sec-multiplicative-operators-runtime-semantics-evaluation */
  //   MultiplicativeExpression :
  //     MultiplicativeExpression MultiplicativeOperator ExponentiationExpression
  function* Evaluate_MultiplicativeExpression({
    MultiplicativeExpression,
    MultiplicativeOperator,
    ExponentiationExpression
  }) {
    // 1. Let opText be the source text matched by MultiplicativeOperator.
    const opText = MultiplicativeOperator;
    // 2. Return ? EvaluateStringOrNumericBinaryExpression(MultiplicativeExpression, opText, ExponentiationExpression).
    return yield* EvaluateStringOrNumericBinaryExpression(MultiplicativeExpression, opText, ExponentiationExpression);
  }

  /** https://tc39.es/ecma262/#sec-throw-statement-runtime-semantics-evaluation */
  // ThrowStatement : `throw` Expression `;`
  function* Evaluate_ThrowStatement({
    Expression
  }) {
    // 1. Let exprRef be the result of evaluating Expression.
    const exprRef = yield* Evaluate(Expression);
    // 2. Let exprValue be ? GetValue(exprRef).
    let _temp = GetValue(exprRef);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const exprValue = _temp;
    // 3. Return ThrowCompletion(exprValue).
    return ThrowCompletion(exprValue);
  }

  // UpdateExpression :
  //   LeftHandSideExpression `++`
  //   LeftHandSideExpression `--`
  //   `++` UnaryExpression
  //   `--` UnaryExpression
  function* Evaluate_UpdateExpression({
    LeftHandSideExpression,
    operator,
    UnaryExpression
  }) {
    switch (true) {
      // UpdateExpression : LeftHandSideExpression `++`
      case operator === '++' && !!LeftHandSideExpression:
        {
          // 1. Let lhs be the result of evaluating LeftHandSideExpression.
          const lhs = yield* Evaluate(LeftHandSideExpression);
          // 2. Let oldValue be ? ToNumeric(? GetValue(lhs)).
          let _temp4 = GetValue(lhs);
          /* c8 ignore if */
          if (_temp4 instanceof AbruptCompletion) {
            return _temp4;
          }
          /* c8 ignore if */
          if (_temp4 instanceof Completion) {
            _temp4 = _temp4.Value;
          }
          let _temp = ToNumeric(_temp4);
          /* c8 ignore if */
          if (_temp instanceof AbruptCompletion) {
            return _temp;
          }
          /* c8 ignore if */
          if (_temp instanceof Completion) {
            _temp = _temp.Value;
          }
          const oldValue = _temp;
          // 3. Let newValue be ! Type(oldvalue)::add(oldValue, Type(oldValue)::unit).
          let _temp2 = TypeForMethod(oldValue).add(oldValue, TypeForMethod(oldValue).unit);
          Assert(!(_temp2 instanceof AbruptCompletion), "TypeForMethod(oldValue).add(oldValue, TypeForMethod(oldValue).unit)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp2 instanceof Completion) {
            _temp2 = _temp2.Value;
          }
          const newValue = _temp2;
          // 4. Perform ? PutValue(lhs, newValue).
          let _temp3 = PutValue(lhs, newValue);
          /* c8 ignore if */
          if (_temp3 instanceof AbruptCompletion) {
            return _temp3;
          }
          /* c8 ignore if */
          if (_temp3 instanceof Completion) {
            _temp3 = _temp3.Value;
          }
          // 5. Return oldValue.
          return oldValue;
        }

      // UpdateExpression : LeftHandSideExpression `--`
      case operator === '--' && !!LeftHandSideExpression:
        {
          // 1. Let lhs be the result of evaluating LeftHandSideExpression.
          const lhs = yield* Evaluate(LeftHandSideExpression);
          // 2. Let oldValue be ? ToNumeric(? GetValue(lhs)).
          let _temp8 = GetValue(lhs);
          /* c8 ignore if */
          if (_temp8 instanceof AbruptCompletion) {
            return _temp8;
          }
          /* c8 ignore if */
          if (_temp8 instanceof Completion) {
            _temp8 = _temp8.Value;
          }
          let _temp5 = ToNumeric(_temp8);
          /* c8 ignore if */
          if (_temp5 instanceof AbruptCompletion) {
            return _temp5;
          }
          /* c8 ignore if */
          if (_temp5 instanceof Completion) {
            _temp5 = _temp5.Value;
          }
          const oldValue = _temp5;
          // 3. Let newValue be ! Type(oldvalue)::subtract(oldValue, Type(oldValue)::unit).
          let _temp6 = TypeForMethod(oldValue).subtract(oldValue, TypeForMethod(oldValue).unit);
          Assert(!(_temp6 instanceof AbruptCompletion), "TypeForMethod(oldValue).subtract(oldValue, TypeForMethod(oldValue).unit)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp6 instanceof Completion) {
            _temp6 = _temp6.Value;
          }
          const newValue = _temp6;
          // 4. Perform ? PutValue(lhs, newValue).
          let _temp7 = PutValue(lhs, newValue);
          /* c8 ignore if */
          if (_temp7 instanceof AbruptCompletion) {
            return _temp7;
          }
          /* c8 ignore if */
          if (_temp7 instanceof Completion) {
            _temp7 = _temp7.Value;
          }
          // 5. Return oldValue.
          return oldValue;
        }

      // UpdateExpression : `++` UnaryExpression
      case operator === '++' && !!UnaryExpression:
        {
          // 1. Let expr be the result of evaluating UnaryExpression.
          const expr = yield* Evaluate(UnaryExpression);
          // 2. Let oldValue be ? ToNumeric(? GetValue(expr)).
          let _temp12 = GetValue(expr);
          /* c8 ignore if */
          if (_temp12 instanceof AbruptCompletion) {
            return _temp12;
          }
          /* c8 ignore if */
          if (_temp12 instanceof Completion) {
            _temp12 = _temp12.Value;
          }
          let _temp9 = ToNumeric(_temp12);
          /* c8 ignore if */
          if (_temp9 instanceof AbruptCompletion) {
            return _temp9;
          }
          /* c8 ignore if */
          if (_temp9 instanceof Completion) {
            _temp9 = _temp9.Value;
          }
          const oldValue = _temp9;
          // 3. Let newValue be ! Type(oldvalue)::add(oldValue, Type(oldValue)::unit).
          let _temp10 = TypeForMethod(oldValue).add(oldValue, TypeForMethod(oldValue).unit);
          Assert(!(_temp10 instanceof AbruptCompletion), "TypeForMethod(oldValue).add(oldValue, TypeForMethod(oldValue).unit)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp10 instanceof Completion) {
            _temp10 = _temp10.Value;
          }
          const newValue = _temp10;
          // 4. Perform ? PutValue(expr, newValue).
          let _temp11 = PutValue(expr, newValue);
          /* c8 ignore if */
          if (_temp11 instanceof AbruptCompletion) {
            return _temp11;
          }
          /* c8 ignore if */
          if (_temp11 instanceof Completion) {
            _temp11 = _temp11.Value;
          }
          // 5. Return newValue.
          return newValue;
        }

      // UpdateExpression : `--` UnaryExpression
      case operator === '--' && !!UnaryExpression:
        {
          // 1. Let expr be the result of evaluating UnaryExpression.
          const expr = yield* Evaluate(UnaryExpression);
          // 2. Let oldValue be ? ToNumeric(? GetValue(expr)).
          let _temp16 = GetValue(expr);
          /* c8 ignore if */
          if (_temp16 instanceof AbruptCompletion) {
            return _temp16;
          }
          /* c8 ignore if */
          if (_temp16 instanceof Completion) {
            _temp16 = _temp16.Value;
          }
          let _temp13 = ToNumeric(_temp16);
          /* c8 ignore if */
          if (_temp13 instanceof AbruptCompletion) {
            return _temp13;
          }
          /* c8 ignore if */
          if (_temp13 instanceof Completion) {
            _temp13 = _temp13.Value;
          }
          const oldValue = _temp13;
          // 3. Let newValue be ! Type(oldvalue)::subtract(oldValue, Type(oldValue)::unit).
          let _temp14 = TypeForMethod(oldValue).subtract(oldValue, TypeForMethod(oldValue).unit);
          Assert(!(_temp14 instanceof AbruptCompletion), "TypeForMethod(oldValue).subtract(oldValue, TypeForMethod(oldValue).unit)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp14 instanceof Completion) {
            _temp14 = _temp14.Value;
          }
          const newValue = _temp14;
          // 4. Perform ? PutValue(expr, newValue).
          let _temp15 = PutValue(expr, newValue);
          /* c8 ignore if */
          if (_temp15 instanceof AbruptCompletion) {
            return _temp15;
          }
          /* c8 ignore if */
          if (_temp15 instanceof Completion) {
            _temp15 = _temp15.Value;
          }
          // 5. Return newValue.
          return newValue;
        }
      /*c8 ignore next*/default:
        throw new OutOfRange$1('Evaluate_UpdateExpression', operator);
    }
  }

  function GlobalDeclarationInstantiation(script, env) {
    // 1. Assert: env is a global Environment Record.
    Assert(env instanceof EnvironmentRecord, "env instanceof EnvironmentRecord");
    // 2. Let lexNames be the LexicallyDeclaredNames of script.
    const lexNames = LexicallyDeclaredNames(script);
    // 3. Let varNames be the VarDeclaredNames of script.
    const varNames = VarDeclaredNames(script);
    // 4. For each name in lexNames, do
    for (const name of lexNames) {
      // 1. If env.HasVarDeclaration(name) is true, throw a SyntaxError exception.
      if (env.HasVarDeclaration(name) === Value.true) {
        return exports.surroundingAgent.Throw('SyntaxError', 'AlreadyDeclared', name);
      }
      // 1. If env.HasLexicalDeclaration(name) is true, throw a SyntaxError exception.
      if (env.HasLexicalDeclaration(name) === Value.true) {
        return exports.surroundingAgent.Throw('SyntaxError', 'AlreadyDeclared', name);
      }
      // 1. Let hasRestrictedGlobal be ? env.HasRestrictedGlobalProperty(name).
      let _temp = env.HasRestrictedGlobalProperty(name);
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      const hasRestrictedGlobal = _temp;
      // 1. If hasRestrictedGlobal is true, throw a SyntaxError exception.
      if (hasRestrictedGlobal === Value.true) {
        return exports.surroundingAgent.Throw('SyntaxError', 'AlreadyDeclared', name);
      }
    }
    // 5. For each name in varNames, do
    for (const name of varNames) {
      // 1. If env.HasLexicalDeclaration(name) is true, throw a SyntaxError exception.
      if (env.HasLexicalDeclaration(name) === Value.true) {
        return exports.surroundingAgent.Throw('SyntaxError', 'AlreadyDeclared', name);
      }
    }
    // 6. Let varDeclarations be the VarScopedDeclarations of script.
    const varDeclarations = VarScopedDeclarations(script);
    // 7. Let functionsToInitialize be a new empty List.
    const functionsToInitialize = [];
    // 8. Let declaredFunctionNames be a new empty List.
    const declaredFunctionNames = new ValueSet();
    // 9. For each d in varDeclarations, in reverse list order, do
    for (const d of [...varDeclarations].reverse()) {
      // a. If d is neither a VariableDeclaration nor a ForBinding nor a BindingIdentifier, then
      if (d.type !== 'VariableDeclaration' && d.type !== 'ForBinding' && d.type !== 'BindingIdentifier') {
        // i. Assert: d is either a FunctionDeclaration, a GeneratorDeclaration, an AsyncFunctionDeclaration, or an AsyncGeneratorDeclaration.
        Assert(d.type === 'FunctionDeclaration' || d.type === 'GeneratorDeclaration' || d.type === 'AsyncFunctionDeclaration' || d.type === 'AsyncGeneratorDeclaration', "d.type === 'FunctionDeclaration'\n             || d.type === 'GeneratorDeclaration'\n             || d.type === 'AsyncFunctionDeclaration'\n             || d.type === 'AsyncGeneratorDeclaration'");
        // ii. NOTE: If there are multiple function declarations for the same name, the last declaration is used.
        // iii. Let fn be the sole element of the BoundNames of d.
        const fn = BoundNames(d)[0];
        // iv. If fn is not an element of declaredFunctionNames, then
        if (!declaredFunctionNames.has(fn)) {
          let _temp2 = env.CanDeclareGlobalFunction(fn);
          /* c8 ignore if */
          if (_temp2 instanceof AbruptCompletion) {
            return _temp2;
          }
          /* c8 ignore if */
          if (_temp2 instanceof Completion) {
            _temp2 = _temp2.Value;
          }
          // 1. Let fnDefinable be ? env.CanDeclareGlobalFunction(fn).
          const fnDefinable = _temp2;
          // 2. If fnDefinable is false, throw a TypeError exception.
          if (fnDefinable === Value.false) {
            return exports.surroundingAgent.Throw('TypeError', 'AlreadyDeclared', fn);
          }
          // 3. Append fn to declaredFunctionNames.
          declaredFunctionNames.add(fn);
          // 4. Insert d as the first element of functionsToInitialize.
          functionsToInitialize.unshift(d);
        }
      }
    }
    // 10. Let declaredVarNames be a new empty List.
    const declaredVarNames = new ValueSet();
    // 11. For each d in varDeclarations, do
    for (const d of varDeclarations) {
      // a. If d is a VariableDeclaration, a ForBinding, or a BindingIdentifier, then
      if (d.type === 'VariableDeclaration' || d.type === 'ForBinding' || d.type === 'BindingIdentifier') {
        // i. For each String vn in the BoundNames of d, do
        for (const vn of BoundNames(d)) {
          // 1. If vn is not an element of declaredFunctionNames, then
          if (!declaredFunctionNames.has(vn)) {
            let _temp3 = env.CanDeclareGlobalVar(vn);
            /* c8 ignore if */
            if (_temp3 instanceof AbruptCompletion) {
              return _temp3;
            }
            /* c8 ignore if */
            if (_temp3 instanceof Completion) {
              _temp3 = _temp3.Value;
            }
            // a. Let vnDefinable be ? env.CanDeclareGlobalVar(vn).
            const vnDefinable = _temp3;
            // b. If vnDefinable is false, throw a TypeError exception.
            if (vnDefinable === Value.false) {
              return exports.surroundingAgent.Throw('TypeError', 'AlreadyDeclared', vn);
            }
            // c. If vn is not an element of declaredVarNames, then
            if (!declaredVarNames.has(vn)) {
              // i. Append vn to declaredVarNames.
              declaredVarNames.add(vn);
            }
          }
        }
      }
    }
    // 12. NOTE: No abnormal terminations occur after this algorithm step if the global object is an ordinary object. However, if the global object is a Proxy exotic object it may exhibit behaviours that cause abnormal terminations in some of the following steps.
    // 13. NOTE: Annex B.3.3.2 adds additional steps at this point.
    // 14. Let lexDeclarations be the LexicallyScopedDeclarations of script.
    const lexDeclarations = LexicallyScopedDeclarations(script);
    // 15. Let privateEnv be null.
    const privateEnv = Value.null;
    // 16. For each element d in lexDeclarations, do
    for (const d of lexDeclarations) {
      // a. NOTE: Lexically declared names are only instantiated here but not initialized.
      // b. For each element dn of the BoundNames of d, do
      for (const dn of BoundNames(d)) {
        // 1. If IsConstantDeclaration of d is true, then
        if (IsConstantDeclaration(d)) {
          let _temp4 = env.CreateImmutableBinding(dn, Value.true);
          /* c8 ignore if */
          if (_temp4 instanceof AbruptCompletion) {
            return _temp4;
          }
          /* c8 ignore if */
          if (_temp4 instanceof Completion) {
            _temp4 = _temp4.Value;
          }
        } else {
          let _temp5 = env.CreateMutableBinding(dn, Value.false);
          /* c8 ignore if */
          if (_temp5 instanceof AbruptCompletion) {
            return _temp5;
          }
          /* c8 ignore if */
          if (_temp5 instanceof Completion) {
            _temp5 = _temp5.Value;
          }
        }
      }
    }
    // 17. For each Parse Node f in functionsToInitialize, do
    for (const f of functionsToInitialize) {
      // a. Let fn be the sole element of the BoundNames of f.
      const fn = BoundNames(f)[0];
      // b. Let fo be InstantiateFunctionObject of f with argument env and privateEnv.
      const fo = InstantiateFunctionObject(f, env, privateEnv);
      // c. Perform ? env.CreateGlobalFunctionBinding(fn, fo, false).
      let _temp6 = env.CreateGlobalFunctionBinding(fn, fo, Value.false);
      /* c8 ignore if */
      if (_temp6 instanceof AbruptCompletion) {
        return _temp6;
      }
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
    }
    // 18. For each String vn in declaredVarNames, in list order, do
    for (const vn of declaredVarNames) {
      let _temp7 = env.CreateGlobalVarBinding(vn, Value.false);
      /* c8 ignore if */
      if (_temp7 instanceof AbruptCompletion) {
        return _temp7;
      }
      /* c8 ignore if */
      if (_temp7 instanceof Completion) {
        _temp7 = _temp7.Value;
      }
    }
    // 19. Return NormalCompletion(empty).
    return NormalCompletion(undefined);
  }

  /** https://tc39.es/ecma262/#sec-function-definitions-runtime-semantics-instantiatefunctionobject */
  //   FunctionDeclaration :
  //     `function` BindingIdentifier `(` FormalParameters `)` `{` FunctionBody `}`
  //     `function` `(` FormalParameters `)` `{` FunctionBody `}`
  function InstantiateFunctionObject_FunctionDeclaration(FunctionDeclaration, scope, privateScope) {
    const {
      BindingIdentifier,
      FormalParameters,
      FunctionBody
    } = FunctionDeclaration;
    // 1. Let name be StringValue of BindingIdentifier.
    const name = BindingIdentifier ? StringValue(BindingIdentifier) : Value('default');
    // 2. Let sourceText be the source text matched by FunctionDeclaration.
    const sourceText = sourceTextMatchedBy(FunctionDeclaration);
    // 3. Let F be OrdinaryFunctionCreate(%Function.prototype%, sourceText, FormalParameters, FunctionBody, non-lexical-this, scope, privateScope).
    let _temp = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%Function.prototype%'), sourceText, FormalParameters, FunctionBody, 'non-lexical-this', scope, privateScope);
    Assert(!(_temp instanceof AbruptCompletion), "OrdinaryFunctionCreate(surroundingAgent.intrinsic('%Function.prototype%'), sourceText, FormalParameters, FunctionBody, 'non-lexical-this', scope, privateScope)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const F = _temp;
    // 4. Perform SetFunctionName(F, name).
    SetFunctionName(F, name);
    // 5. Perform MakeConstructor(F).
    MakeConstructor(F);
    // 6. Return F.
    return F;
  }

  /** https://tc39.es/ecma262/#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject */
  //   GeneratorDeclaration :
  //     `function` `*` BindingIdentifier `(` FormalParameters `)` `{` GeneratorBody `}`
  //     `function` `*` `(` FormalParameters `)` `{` GeneratorBody `}`
  function InstantiateFunctionObject_GeneratorDeclaration(GeneratorDeclaration, scope, privateScope) {
    const {
      BindingIdentifier,
      FormalParameters,
      GeneratorBody
    } = GeneratorDeclaration;
    // 1. Let name be StringValue of BindingIdentifier.
    const name = BindingIdentifier ? StringValue(BindingIdentifier) : Value('default');
    // 2. Let sourceText be the source text matched by GeneratorDeclaration.
    const sourceText = sourceTextMatchedBy(GeneratorDeclaration);
    // 3. Let F be OrdinaryFunctionCreate(%GeneratorFunction.prototype%, sourceText, FormalParameters, GeneratorBody, non-lexical-this, scope, privateScope).
    let _temp2 = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%GeneratorFunction.prototype%'), sourceText, FormalParameters, GeneratorBody, 'non-lexical-this', scope, privateScope);
    Assert(!(_temp2 instanceof AbruptCompletion), "OrdinaryFunctionCreate(surroundingAgent.intrinsic('%GeneratorFunction.prototype%'), sourceText, FormalParameters, GeneratorBody, 'non-lexical-this', scope, privateScope)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const F = _temp2;
    // 4. Perform SetFunctionName(F, name).
    SetFunctionName(F, name);
    // 5. Let prototype be OrdinaryObjectCreate(%GeneratorFunction.prototype.prototype%).
    let _temp3 = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%GeneratorFunction.prototype.prototype%'));
    Assert(!(_temp3 instanceof AbruptCompletion), "OrdinaryObjectCreate(surroundingAgent.intrinsic('%GeneratorFunction.prototype.prototype%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const prototype = _temp3;
    // 6. Perform DefinePropertyOrThrow(F, "prototype", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).
    let _temp4 = DefinePropertyOrThrow(F, Value('prototype'), exports.Descriptor({
      Value: prototype,
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.false
    }));
    Assert(!(_temp4 instanceof AbruptCompletion), "DefinePropertyOrThrow(F, Value('prototype'), Descriptor({\n    Value: prototype,\n    Writable: Value.true,\n    Enumerable: Value.false,\n    Configurable: Value.false,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 7. Return F.
    return F;
  }

  /** https://tc39.es/ecma262/#sec-async-function-definitions-InstantiateFunctionObject */
  //  AsyncFunctionDeclaration :
  //    `async` `function` BindingIdentifier `(` FormalParameters `)` `{` AsyncBody `}`
  //    `async` `function` `(` FormalParameters `)` `{` AsyncBody `}`
  function InstantiateFunctionObject_AsyncFunctionDeclaration(AsyncFunctionDeclaration, scope, privateScope) {
    const {
      BindingIdentifier,
      FormalParameters,
      AsyncBody
    } = AsyncFunctionDeclaration;
    // 1. Let name be StringValue of BindingIdentifier.
    const name = BindingIdentifier ? StringValue(BindingIdentifier) : Value('default');
    // 2. Let sourceText be the source text matched by AsyncFunctionDeclaration.
    const sourceText = sourceTextMatchedBy(AsyncFunctionDeclaration);
    // 3. Let F be ! OrdinaryFunctionCreate(%AsyncFunction.prototype%, sourceText, FormalParameters, AsyncBody, non-lexical-this, scope, privateScope).
    let _temp5 = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%AsyncFunction.prototype%'), sourceText, FormalParameters, AsyncBody, 'non-lexical-this', scope, privateScope);
    Assert(!(_temp5 instanceof AbruptCompletion), "OrdinaryFunctionCreate(surroundingAgent.intrinsic('%AsyncFunction.prototype%'), sourceText, FormalParameters, AsyncBody, 'non-lexical-this', scope, privateScope)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const F = _temp5;
    // 4. Perform ! SetFunctionName(F, name).
    SetFunctionName(F, name);
    // 5. Return F.
    return F;
  }

  /** https://tc39.es/ecma262/#sec-asyncgenerator-definitions-evaluatebody */
  //  AsyncGeneratorDeclaration :
  //    `async` `function` `*` BindingIdentifier `(` FormalParameters`)` `{` AsyncGeneratorBody `}`
  //    `async` `function` `*` `(` FormalParameters`)` `{` AsyncGeneratorBody `}`
  function InstantiateFunctionObject_AsyncGeneratorDeclaration(AsyncGeneratorDeclaration, scope, privateScope) {
    const {
      BindingIdentifier,
      FormalParameters,
      AsyncGeneratorBody
    } = AsyncGeneratorDeclaration;
    // 1. Let name be StringValue of BindingIdentifier.
    const name = BindingIdentifier ? StringValue(BindingIdentifier) : Value('default');
    // 2. Let sourceText be the source text matched by AsyncGeneratorDeclaration.
    const sourceText = sourceTextMatchedBy(AsyncGeneratorDeclaration);
    // 3. Let F be ! OrdinaryFunctionCreate(%AsyncGeneratorFunction.prototype%, sourceText, FormalParameters, AsyncGeneratorBody, non-lexical-this, scope, privateScope).
    let _temp6 = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%AsyncGeneratorFunction.prototype%'), sourceText, FormalParameters, AsyncGeneratorBody, 'non-lexical-this', scope, privateScope);
    Assert(!(_temp6 instanceof AbruptCompletion), "OrdinaryFunctionCreate(surroundingAgent.intrinsic('%AsyncGeneratorFunction.prototype%'), sourceText, FormalParameters, AsyncGeneratorBody, 'non-lexical-this', scope, privateScope)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const F = _temp6;
    // 4. Perform ! SetFunctionName(F, name).
    SetFunctionName(F, name);
    // 5. Let prototype be ! OrdinaryObjectCreate(%AsyncGeneratorFunction.prototype.prototype%).
    let _temp7 = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%AsyncGeneratorFunction.prototype.prototype%'));
    Assert(!(_temp7 instanceof AbruptCompletion), "OrdinaryObjectCreate(surroundingAgent.intrinsic('%AsyncGeneratorFunction.prototype.prototype%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    const prototype = _temp7;
    // 6. Perform ! DefinePropertyOrThrow(F, "prototype", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).
    let _temp8 = DefinePropertyOrThrow(F, Value('prototype'), exports.Descriptor({
      Value: prototype,
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.false
    }));
    Assert(!(_temp8 instanceof AbruptCompletion), "DefinePropertyOrThrow(F, Value('prototype'), Descriptor({\n    Value: prototype,\n    Writable: Value.true,\n    Enumerable: Value.false,\n    Configurable: Value.false,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    // 7. Return F.
    return F;
  }
  function InstantiateFunctionObject(AnyFunctionDeclaration, scope, privateScope) {
    switch (AnyFunctionDeclaration.type) {
      case 'FunctionDeclaration':
        return InstantiateFunctionObject_FunctionDeclaration(AnyFunctionDeclaration, scope, privateScope);
      case 'GeneratorDeclaration':
        return InstantiateFunctionObject_GeneratorDeclaration(AnyFunctionDeclaration, scope, privateScope);
      case 'AsyncFunctionDeclaration':
        return InstantiateFunctionObject_AsyncFunctionDeclaration(AnyFunctionDeclaration, scope, privateScope);
      case 'AsyncGeneratorDeclaration':
        return InstantiateFunctionObject_AsyncGeneratorDeclaration(AnyFunctionDeclaration, scope, privateScope);
      /*c8 ignore next*/default:
        throw new OutOfRange$1('InstantiateFunctionObject', AnyFunctionDeclaration);
    }
  }

  /** https://tc39.es/ecma262/#sec-script-semantics-runtime-semantics-evaluation */
  // Script :
  //   [empty]
  //   ScriptBody
  function* Evaluate_Script({
    ScriptBody
  }) {
    if (!ScriptBody) {
      return NormalCompletion(Value.undefined);
    }
    return yield* Evaluate(ScriptBody);
  }

  // ScriptBody : StatementList
  function Evaluate_ScriptBody(ScriptBody) {
    return Evaluate_StatementList(ScriptBody.StatementList);
  }

  /** https://tc39.es/ecma262/#sec-block-runtime-semantics-evaluation */
  function* Evaluate_StatementList(StatementList) {
    if (StatementList.length === 0) {
      return NormalCompletion(undefined);
    }
    let sl = yield* Evaluate(StatementList[0]);
    if (StatementList.length === 1) {
      return sl;
    }
    for (const StatementListItem of StatementList.slice(1)) {
      /* c8 ignore if */
      if (sl instanceof AbruptCompletion) {
        return sl;
      }
      /* c8 ignore if */
      if (sl instanceof Completion) {
        sl = sl.Value;
      }
      let s = yield* Evaluate(StatementListItem);
      // We don't always return a Completion value, but here we actually need it
      // to be a Completion.
      s = EnsureCompletion(s);
      sl = UpdateEmpty(s, sl);
    }
    return sl;
  }

  // @ts-nocheck
  /** https://tc39.es/ecma262/#sec-expression-statement-runtime-semantics-evaluation */
  //   ExpressionStatement :
  //     Expression `;`
  function* Evaluate_ExpressionStatement({
    Expression
  }) {
    // 1. Let exprRef be the result of evaluating Expression.
    const exprRef = yield* Evaluate(Expression);
    // 2. Return ? GetValue(exprRef).
    return GetValue(exprRef);
  }

  /** https://tc39.es/ecma262/#sec-variable-statement-runtime-semantics-evaluation */
  //   VariableDeclaration :
  //     BindingIdentifier
  //     BindingIdentifier Initializer
  //     BindingPattern Initializer
  function* Evaluate_VariableDeclaration({
    BindingIdentifier,
    Initializer,
    BindingPattern
  }) {
    if (BindingIdentifier) {
      if (!Initializer) {
        // 1. Return NormalCompletion(empty).
        return NormalCompletion(undefined);
      }
      // 1. Let bindingId be StringValue of BindingIdentifier.
      const bindingId = StringValue(BindingIdentifier);
      // 2. Let lhs be ? ResolveBinding(bindingId).
      let _temp = ResolveBinding(bindingId, undefined, BindingIdentifier.strict);
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      const lhs = _temp;
      // 3. If IsAnonymousFunctionDefinition(Initializer) is true, then
      let value;
      if (IsAnonymousFunctionDefinition(Initializer)) {
        // a. Let value be NamedEvaluation of Initializer with argument bindingId.
        value = yield* NamedEvaluation(Initializer, bindingId);
      } else {
        // 4. Else,
        // a. Let rhs be the result of evaluating Initializer.
        const rhs = yield* Evaluate(Initializer);
        // b. Let value be ? GetValue(rhs).
        let _temp2 = GetValue(rhs);
        /* c8 ignore if */
        if (_temp2 instanceof AbruptCompletion) {
          return _temp2;
        }
        /* c8 ignore if */
        if (_temp2 instanceof Completion) {
          _temp2 = _temp2.Value;
        }
        value = _temp2;
      }
      // 5. Return ? PutValue(lhs, value).
      return PutValue(lhs, value);
    }
    // 1. Let rhs be the result of evaluating Initializer.
    const rhs = yield* Evaluate(Initializer);
    // 2. Let rval be ? GetValue(rhs).
    let _temp3 = GetValue(rhs);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const rval = _temp3;
    // 3. Return the result of performing BindingInitialization for BindingPattern passing rval and undefined as arguments.
    return yield* BindingInitialization(BindingPattern, rval, Value.undefined);
  }

  /** https://tc39.es/ecma262/#sec-variable-statement-runtime-semantics-evaluation */
  //   VariableDeclarationList : VariableDeclarationList `,` VariableDeclaration
  //
  // (implicit)
  //   VariableDeclarationList : VariableDeclaration
  Evaluate_VariableDeclaration.section = 'https://tc39.es/ecma262/#sec-variable-statement-runtime-semantics-evaluation';
  function* Evaluate_VariableDeclarationList(VariableDeclarationList) {
    let next;
    for (const VariableDeclaration of VariableDeclarationList) {
      next = yield* Evaluate_VariableDeclaration(VariableDeclaration);
      /* c8 ignore if */
      if (next instanceof AbruptCompletion) {
        return next;
      }
      /* c8 ignore if */
      if (next instanceof Completion) {
        next = next.Value;
      }
    }
    return next;
  }

  /** https://tc39.es/ecma262/#sec-variable-statement-runtime-semantics-evaluation */
  //   VariableStatement : `var` VariableDeclarationList `;`
  function* Evaluate_VariableStatement({
    VariableDeclarationList
  }) {
    let next = yield* Evaluate_VariableDeclarationList(VariableDeclarationList);
    /* c8 ignore if */
    if (next instanceof AbruptCompletion) {
      return next;
    }
    /* c8 ignore if */
    if (next instanceof Completion) {
      next = next.Value;
    }
    return NormalCompletion(undefined);
  }

  /** https://tc39.es/ecma262/#sec-function-definitions-runtime-semantics-evaluation */
  // FunctionDeclaration :
  //   function BindingIdentifier ( FormalParameters ) { FunctionBody }
  //   function ( FormalParameters ) { FunctionBody }
  function Evaluate_FunctionDeclaration(_FunctionDeclaration) {
    // 1. Return NormalCompletion(empty).
    return NormalCompletion(undefined);
  }

  /** https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation */
  // CallExpression :
  //   CoverCallExpressionAndAsyncArrowHead
  //   CallExpression Arguments
  function* Evaluate_CallExpression(CallExpression) {
    // 1. Let expr be CoveredCallExpression of CoverCallExpressionAndAsyncArrowHead.
    const expr = CallExpression;
    // 2. Let memberExpr be the MemberExpression of expr.
    const memberExpr = expr.CallExpression;
    // 3. Let arguments be the Arguments of expr.
    const args = expr.Arguments;
    // 4. Let ref be the result of evaluating memberExpr.
    let _temp = yield* Evaluate(memberExpr);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const ref = _temp;
    // 5. Let func be ? GetValue(ref).
    let _temp2 = GetValue(ref);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const func = _temp2;
    // 6. If Type(ref) is Reference, IsPropertyReference(ref) is false, and GetReferencedName(ref) is "eval", then
    if (ref instanceof ReferenceRecord && IsPropertyReference(ref) === Value.false && ref.ReferencedName instanceof JSStringValue && ref.ReferencedName.stringValue() === 'eval') {
      // a. If SameValue(func, %eval%) is true, then
      if (SameValue(func, exports.surroundingAgent.intrinsic('%eval%')) === Value.true) {
        let _temp3 = yield* ArgumentListEvaluation(args);
        /* c8 ignore if */
        if (_temp3 instanceof AbruptCompletion) {
          return _temp3;
        }
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
        // i. Let argList be ? ArgumentListEvaluation of arguments.
        const argList = _temp3;
        // ii. If argList has no elements, return undefined.
        if (argList.length === 0) {
          return Value.undefined;
        }
        // iii. Let evalText be the first element of argList.
        const evalText = argList[0];
        // iv. If the source code matching this CallExpression is strict mode code, let strictCaller be true. Otherwise let strictCaller be false.
        const strictCaller = CallExpression.strict;
        // v. Let evalRealm be the current Realm Record.
        const evalRealm = exports.surroundingAgent.currentRealmRecord;
        // vi. Return ? PerformEval(evalText, evalRealm, strictCaller, true).
        return PerformEval(evalText, evalRealm, strictCaller, true);
      }
    }
    // 8. Let tailCall be IsInTailPosition(thisCall).
    const tailCall = IsInTailPosition();
    // 9. Return ? EvaluateCall(func, ref, arguments, tailCall).
    return yield* EvaluateCall(func, ref, args, tailCall);
  }

  // @ts-nocheck

  /** https://tc39.es/ecma262/#sec-evaluatecall */
  function* EvaluateCall(func, ref, args, tailPosition) {
    // 1. If Type(ref) is Reference, then
    let thisValue;
    if (ref instanceof ReferenceRecord) {
      // a. If IsPropertyReference(ref) is true, then
      if (IsPropertyReference(ref) === Value.true) {
        // i. Let thisValue be GetThisValue(ref).
        thisValue = GetThisValue(ref);
      } else {
        // i. Let refEnv be ref.[[Base]].
        const refEnv = ref.Base;
        // ii. Assert: refEnv is an Environment Record.
        Assert(refEnv instanceof EnvironmentRecord, "refEnv instanceof EnvironmentRecord");
        // iii. Let thisValue be refEnv.WithBaseObject().
        thisValue = refEnv.WithBaseObject();
      }
    } else {
      // a. Let thisValue be undefined.
      thisValue = Value.undefined;
    }
    // 3. Let argList be ? ArgumentListEvaluation of arguments.
    let _temp = yield* ArgumentListEvaluation(args);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const argList = _temp;
    // 4. If Type(func) is not Object, throw a TypeError exception.
    if (!(func instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', func);
    }
    // 5. If IsCallable(func) is false, throw a TypeError exception.
    if (IsCallable(func) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', func);
    }
    // 6. If tailPosition is true, perform PrepareForTailCall().
    if (tailPosition) {
      PrepareForTailCall();
    }
    // 7. Let result be Call(func, thisValue, argList).
    const result = Call(func, thisValue, argList);
    // 8. Assert: If tailPosition is true, the above call will not return here but instead
    //    evaluation will continue as if the following return has already occurred.
    // 9. Assert: If result is not an abrupt completion, then Type(result) is an ECMAScript language type.
    if (!(result instanceof AbruptCompletion)) {
      Assert(result instanceof Value || result instanceof Completion, "result instanceof Value || result instanceof Completion");
    }
    // 10. Return result.
    return result;
  }

  /** https://tc39.es/ecma262/#sec-gettemplateobjec */
  function GetTemplateObject(templateLiteral) {
    // 1. Let realm be the current Realm Record.
    const realm = exports.surroundingAgent.currentRealmRecord;
    // 2. Let templateRegistry be realm.[[TemplateMap]].
    const templateRegistry = realm.TemplateMap;
    // 3. For each element e of templateRegistry, do
    for (const e of templateRegistry) {
      // a. If e.[[Site]] is the same Parse Node as templateLiteral, then
      if (e.Site === templateLiteral) {
        // b. Return e.[[Array]].
        return e.Array;
      }
    }
    // 4. Let rawStrings be TemplateStrings of templateLiteral with argument true.
    const rawStrings = TemplateStrings(templateLiteral, true);
    // 5. Let cookedStrings be TemplateStrings of templateLiteral with argument false.
    const cookedStrings = TemplateStrings(templateLiteral, false);
    // 6. Let count be the number of elements in the List cookedStrings.
    const count = cookedStrings.length;
    // 7. Assert: count ≤ 232 - 1.
    Assert(count < 2 ** 32 - 1, "count < (2 ** 32) - 1");
    // 8. Let template be ! ArrayCreate(count).
    let _temp = ArrayCreate(count);
    Assert(!(_temp instanceof AbruptCompletion), "ArrayCreate(count)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const template = _temp;
    // 9. Let template be ! ArrayCreate(count).
    let _temp2 = ArrayCreate(count);
    Assert(!(_temp2 instanceof AbruptCompletion), "ArrayCreate(count)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const rawObj = _temp2;
    // 10. Let index be 0.
    let index = 0;
    // 11. Repeat, while index < count
    while (index < count) {
      let _temp3 = ToString(F(index));
      Assert(!(_temp3 instanceof AbruptCompletion), "ToString(F(index))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      // a. Let prop be ! ToString(𝔽(index)).
      const prop = _temp3;
      // b. Let cookedValue be the String value cookedStrings[index].
      const cookedValue = cookedStrings[index];
      // c. Call template.[[DefineOwnProperty]](prop, PropertyDescriptor { [[Value]]: cookedValue, [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: false }).
      let _temp4 = template.DefineOwnProperty(prop, exports.Descriptor({
        Value: cookedValue,
        Writable: Value.false,
        Enumerable: Value.true,
        Configurable: Value.false
      }));
      Assert(!(_temp4 instanceof AbruptCompletion), "template.DefineOwnProperty(prop, Descriptor({\n      Value: cookedValue,\n      Writable: Value.false,\n      Enumerable: Value.true,\n      Configurable: Value.false,\n    }))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      // d. Let rawValue be the String value rawStrings[index].
      const rawValue = rawStrings[index];
      // e. Call rawObj.[[DefineOwnProperty]](prop, PropertyDescriptor { [[Value]]: rawValue, [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: false }).
      let _temp5 = rawObj.DefineOwnProperty(prop, exports.Descriptor({
        Value: rawValue,
        Writable: Value.false,
        Enumerable: Value.true,
        Configurable: Value.false
      }));
      Assert(!(_temp5 instanceof AbruptCompletion), "rawObj.DefineOwnProperty(prop, Descriptor({\n      Value: rawValue,\n      Writable: Value.false,\n      Enumerable: Value.true,\n      Configurable: Value.false,\n    }))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      // f. Call rawObj.[[DefineOwnProperty]](prop, PropertyDescriptor { [[Value]]: rawValue, [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: false }).
      index += 1;
    }
    // 12. Perform SetIntegrityLevel(rawObj, frozen).
    let _temp6 = SetIntegrityLevel(rawObj, 'frozen');
    Assert(!(_temp6 instanceof AbruptCompletion), "SetIntegrityLevel(rawObj, 'frozen')" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    // 13. Perform SetIntegrityLevel(rawObj, frozen).
    let _temp7 = template.DefineOwnProperty(Value('raw'), exports.Descriptor({
      Value: rawObj,
      Writable: Value.false,
      Enumerable: Value.false,
      Configurable: Value.false
    }));
    Assert(!(_temp7 instanceof AbruptCompletion), "template.DefineOwnProperty(Value('raw'), Descriptor({\n    Value: rawObj,\n    Writable: Value.false,\n    Enumerable: Value.false,\n    Configurable: Value.false,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    // 14. Perform SetIntegrityLevel(template, frozen).
    let _temp8 = SetIntegrityLevel(template, 'frozen');
    Assert(!(_temp8 instanceof AbruptCompletion), "SetIntegrityLevel(template, 'frozen')" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    // 15. Append the Record { [[Site]]: templateLiteral, [[Array]]: template } to templateRegistry.
    templateRegistry.push({
      Site: templateLiteral,
      Array: template
    });
    // 16. Return template.
    return template;
  }

  /** https://tc39.es/ecma262/#sec-template-literals-runtime-semantics-argumentlistevaluation */
  //   TemplateLiteral : NoSubstitutionTemplate
  //
  // https://github.com/tc39/ecma262/pull/1402
  //   TemplateLiteral : SubstitutionTemplate
  GetTemplateObject.section = 'https://tc39.es/ecma262/#sec-gettemplateobjec';
  function* ArgumentListEvaluation_TemplateLiteral(TemplateLiteral) {
    switch (true) {
      case TemplateLiteral.TemplateSpanList.length === 1:
        {
          const templateLiteral = TemplateLiteral;
          const siteObj = GetTemplateObject(templateLiteral);
          return [siteObj];
        }
      case TemplateLiteral.TemplateSpanList.length > 1:
        {
          const templateLiteral = TemplateLiteral;
          const siteObj = GetTemplateObject(templateLiteral);
          const restSub = [];
          for (const Expression of TemplateLiteral.ExpressionList) {
            const subRef = yield* Evaluate(Expression);
            let _temp9 = GetValue(subRef);
            /* c8 ignore if */
            if (_temp9 instanceof AbruptCompletion) {
              return _temp9;
            }
            /* c8 ignore if */
            if (_temp9 instanceof Completion) {
              _temp9 = _temp9.Value;
            }
            const subValue = _temp9;
            restSub.push(subValue);
          }
          return [siteObj, ...restSub];
        }
      /*c8 ignore next*/default:
        throw new OutOfRange$1('ArgumentListEvaluation_TemplateLiteral', TemplateLiteral);
    }
  }

  /** https://tc39.es/ecma262/#sec-argument-lists-runtime-semantics-argumentlistevaluation */
  //   Arguments : `(` `)`
  //   ArgumentList :
  //     AssignmentExpression
  //     `...` AssignmentExpression
  //     ArgumentList `,` AssignmentExpression
  //     ArgumentList `,` `...` AssignmentExpression
  //
  // (implicit)
  //   Arguments :
  //     `(` ArgumentList `)`
  //     `(` ArgumentList `,` `)`
  ArgumentListEvaluation_TemplateLiteral.section = 'https://tc39.es/ecma262/#sec-template-literals-runtime-semantics-argumentlistevaluation';
  function* ArgumentListEvaluation_Arguments(Arguments) {
    const precedingArgs = [];
    for (const element of Arguments) {
      if (element.type === 'AssignmentRestElement') {
        const {
          AssignmentExpression
        } = element;
        // 2. Let spreadRef be the result of evaluating AssignmentExpression.
        const spreadRef = yield* Evaluate(AssignmentExpression);
        // 3. Let spreadObj be ? GetValue(spreadRef).
        let _temp10 = GetValue(spreadRef);
        /* c8 ignore if */
        if (_temp10 instanceof AbruptCompletion) {
          return _temp10;
        }
        /* c8 ignore if */
        if (_temp10 instanceof Completion) {
          _temp10 = _temp10.Value;
        }
        const spreadObj = _temp10;
        // 4. Let iteratorRecord be ? GetIterator(spreadObj).
        let _temp11 = GetIterator(spreadObj);
        /* c8 ignore if */
        if (_temp11 instanceof AbruptCompletion) {
          return _temp11;
        }
        /* c8 ignore if */
        if (_temp11 instanceof Completion) {
          _temp11 = _temp11.Value;
        }
        const iteratorRecord = _temp11;
        // 5. Repeat,
        while (true) {
          let _temp12 = IteratorStep(iteratorRecord);
          /* c8 ignore if */
          if (_temp12 instanceof AbruptCompletion) {
            return _temp12;
          }
          /* c8 ignore if */
          if (_temp12 instanceof Completion) {
            _temp12 = _temp12.Value;
          }
          // a. Let next be ? IteratorStep(iteratorRecord).
          const next = _temp12;
          // b. If next is false, return list.
          if (next === Value.false) {
            break;
          }
          // c. Let nextArg be ? IteratorValue(next).
          let _temp13 = IteratorValue(next);
          /* c8 ignore if */
          if (_temp13 instanceof AbruptCompletion) {
            return _temp13;
          }
          /* c8 ignore if */
          if (_temp13 instanceof Completion) {
            _temp13 = _temp13.Value;
          }
          const nextArg = _temp13;
          // d. Append nextArg as the last element of list.
          precedingArgs.push(nextArg);
        }
      } else {
        const AssignmentExpression = element;
        // 2. Let ref be the result of evaluating AssignmentExpression.
        const ref = yield* Evaluate(AssignmentExpression);
        // 3. Let arg be ? GetValue(ref).
        let _temp14 = GetValue(ref);
        /* c8 ignore if */
        if (_temp14 instanceof AbruptCompletion) {
          return _temp14;
        }
        /* c8 ignore if */
        if (_temp14 instanceof Completion) {
          _temp14 = _temp14.Value;
        }
        const arg = _temp14;
        // 4. Append arg to the end of precedingArgs.
        precedingArgs.push(arg);
        // 5. Return precedingArgs.
      }
    }
    return precedingArgs;
  }
  ArgumentListEvaluation_Arguments.section = 'https://tc39.es/ecma262/#sec-argument-lists-runtime-semantics-argumentlistevaluation';
  function ArgumentListEvaluation(ArgumentsOrTemplateLiteral) {
    switch (true) {
      case isArray(ArgumentsOrTemplateLiteral):
        return ArgumentListEvaluation_Arguments(ArgumentsOrTemplateLiteral);
      case ArgumentsOrTemplateLiteral.type === 'TemplateLiteral':
        return ArgumentListEvaluation_TemplateLiteral(ArgumentsOrTemplateLiteral);
      /*c8 ignore next*/default:
        throw new OutOfRange$1('ArgumentListEvaluation', ArgumentsOrTemplateLiteral);
    }
  }

  // @ts-nocheck
  function Evaluate_AnyFunctionBody({
    FunctionStatementList
  }) {
    return Evaluate_FunctionStatementList(FunctionStatementList);
  }

  /** https://tc39.es/ecma262/#sec-function-definitions-runtime-semantics-evaluatebody */
  // FunctionBody : FunctionStatementList
  function* EvaluateBody_FunctionBody({
    FunctionStatementList
  }, functionObject, argumentsList) {
    let _temp = yield* FunctionDeclarationInstantiation(functionObject, argumentsList);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 2. Return the result of evaluating FunctionStatementList.
    return yield* Evaluate_FunctionStatementList(FunctionStatementList);
  }

  /** https://tc39.es/ecma262/#sec-arrow-function-definitions-runtime-semantics-evaluation */
  // ExpressionBody : AssignmentExpression
  function* Evaluate_ExpressionBody({
    AssignmentExpression
  }) {
    // 1. Let exprRef be the result of evaluating AssignmentExpression.
    const exprRef = yield* Evaluate(AssignmentExpression);
    // 2. Let exprValue be ? GetValue(exprRef).
    let _temp2 = GetValue(exprRef);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const exprValue = _temp2;
    // 3. Return Completion { [[Type]]: return, [[Value]]: exprValue, [[Target]]: empty }.
    return new Completion({
      Type: 'return',
      Value: exprValue,
      Target: undefined
    });
  }

  /** https://tc39.es/ecma262/#sec-arrow-function-definitions-runtime-semantics-evaluatebody */
  // ConciseBody : ExpressionBody
  function* EvaluateBody_ConciseBody({
    ExpressionBody
  }, functionObject, argumentsList) {
    let _temp3 = yield* FunctionDeclarationInstantiation(functionObject, argumentsList);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    // 2. Return the result of evaluating ExpressionBody.
    return yield* Evaluate(ExpressionBody);
  }

  /** https://tc39.es/ecma262/#sec-async-arrow-function-definitions-EvaluateBody */
  // AsyncConciseBody : ExpressionBody
  function* EvaluateBody_AsyncConciseBody({
    ExpressionBody
  }, functionObject, argumentsList) {
    let _temp4 = NewPromiseCapability(exports.surroundingAgent.intrinsic('%Promise%'));
    Assert(!(_temp4 instanceof AbruptCompletion), "NewPromiseCapability(surroundingAgent.intrinsic('%Promise%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 1. Let promiseCapability be ! NewPromiseCapability(%Promise%).
    const promiseCapability = _temp4;
    // 2. Let declResult be FunctionDeclarationInstantiation(functionObject, argumentsList).
    const declResult = yield* FunctionDeclarationInstantiation(functionObject, argumentsList);
    // 3. If declResult is not an abrupt completion, then
    if (!(declResult instanceof AbruptCompletion)) {
      let _temp5 = AsyncFunctionStart(promiseCapability, ExpressionBody);
      Assert(!(_temp5 instanceof AbruptCompletion), "AsyncFunctionStart(promiseCapability, ExpressionBody)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
    } else {
      let _temp6 = Call(promiseCapability.Reject, Value.undefined, [declResult.Value]);
      Assert(!(_temp6 instanceof AbruptCompletion), "Call(promiseCapability.Reject, Value.undefined, [declResult.Value])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
    }
    // 5. Return Completion { [[Type]]: return, [[Value]]: promiseCapability.[[Promise]], [[Target]]: empty }.
    return new Completion({
      Type: 'return',
      Value: promiseCapability.Promise,
      Target: undefined
    });
  }

  /** https://tc39.es/ecma262/#sec-generator-function-definitions-runtime-semantics-evaluatebody */
  // GeneratorBody : FunctionBody
  EvaluateBody_AsyncConciseBody.section = 'https://tc39.es/ecma262/#sec-async-arrow-function-definitions-EvaluateBody';
  function* EvaluateBody_GeneratorBody(GeneratorBody, functionObject, argumentsList) {
    let _temp7 = yield* FunctionDeclarationInstantiation(functionObject, argumentsList);
    /* c8 ignore if */
    if (_temp7 instanceof AbruptCompletion) {
      return _temp7;
    }
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    // 2. Let G be ? OrdinaryCreateFromConstructor(functionObject, "%GeneratorFunction.prototype.prototype%", « [[GeneratorState]], [[GeneratorContext]], [[GeneratorBrand]] »).
    let _temp8 = OrdinaryCreateFromConstructor(functionObject, '%GeneratorFunction.prototype.prototype%', ['GeneratorState', 'GeneratorContext', 'GeneratorBrand']);
    /* c8 ignore if */
    if (_temp8 instanceof AbruptCompletion) {
      return _temp8;
    }
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    const G = _temp8;
    // 3. Set G.[[GeneratorBrand]] to empty.
    G.GeneratorBrand = undefined;
    // 4. Perform GeneratorStart(G, FunctionBody).
    GeneratorStart(G, GeneratorBody);
    // 5. Return Completion { [[Type]]: return, [[Value]]: G, [[Target]]: empty }.
    return new Completion({
      Type: 'return',
      Value: G,
      Target: undefined
    });
  }

  /** https://tc39.es/ecma262/#sec-asyncgenerator-definitions-evaluatebody */
  // AsyncGeneratorBody : FunctionBody
  function* EvaluateBody_AsyncGeneratorBody(FunctionBody, functionObject, argumentsList) {
    let _temp9 = yield* FunctionDeclarationInstantiation(functionObject, argumentsList);
    /* c8 ignore if */
    if (_temp9 instanceof AbruptCompletion) {
      return _temp9;
    }
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    // 2. Let generator be ? OrdinaryCreateFromConstructor(functionObject, "%AsyncGeneratorFunction.prototype.prototype%", « [[AsyncGeneratorState]], [[AsyncGeneratorContext]], [[AsyncGeneratorQueue]], [[GeneratorBrand]] »).
    let _temp10 = OrdinaryCreateFromConstructor(functionObject, '%AsyncGeneratorFunction.prototype.prototype%', ['AsyncGeneratorState', 'AsyncGeneratorContext', 'AsyncGeneratorQueue', 'GeneratorBrand']);
    /* c8 ignore if */
    if (_temp10 instanceof AbruptCompletion) {
      return _temp10;
    }
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    const generator = _temp10;
    // 3. Set generator.[[GeneratorBrand]] to empty.
    generator.GeneratorBrand = undefined;
    // 4. Perform ! AsyncGeneratorStart(generator, FunctionBody).
    let _temp11 = AsyncGeneratorStart(generator, FunctionBody);
    Assert(!(_temp11 instanceof AbruptCompletion), "AsyncGeneratorStart(generator, FunctionBody)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    // 5. Return Completion { [[Type]]: return, [[Value]]: generator, [[Target]]: empty }.
    return new Completion({
      Type: 'return',
      Value: generator,
      Target: undefined
    });
  }

  /** https://tc39.es/ecma262/#sec-async-function-definitions-EvaluateBody */
  // AsyncBody : FunctionBody
  function* EvaluateBody_AsyncFunctionBody(FunctionBody, functionObject, argumentsList) {
    let _temp12 = NewPromiseCapability(exports.surroundingAgent.intrinsic('%Promise%'));
    Assert(!(_temp12 instanceof AbruptCompletion), "NewPromiseCapability(surroundingAgent.intrinsic('%Promise%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp12 instanceof Completion) {
      _temp12 = _temp12.Value;
    }
    // 1. Let promiseCapability be ! NewPromiseCapability(%Promise%).
    const promiseCapability = _temp12;
    // 2. Let declResult be FunctionDeclarationInstantiation(functionObject, argumentsList).
    const declResult = yield* FunctionDeclarationInstantiation(functionObject, argumentsList);
    // 3. If declResult is not an abrupt completion, then
    if (!(declResult instanceof AbruptCompletion)) {
      let _temp13 = AsyncFunctionStart(promiseCapability, FunctionBody);
      Assert(!(_temp13 instanceof AbruptCompletion), "AsyncFunctionStart(promiseCapability, FunctionBody)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp13 instanceof Completion) {
        _temp13 = _temp13.Value;
      }
    } else {
      let _temp14 = Call(promiseCapability.Reject, Value.undefined, [declResult.Value]);
      Assert(!(_temp14 instanceof AbruptCompletion), "Call(promiseCapability.Reject, Value.undefined, [declResult.Value])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp14 instanceof Completion) {
        _temp14 = _temp14.Value;
      }
    }
    // 5. Return Completion { [[Type]]: return, [[Value]]: promiseCapability.[[Promise]], [[Target]]: empty }.
    return new Completion({
      Type: 'return',
      Value: promiseCapability.Promise,
      Target: undefined
    });
  }

  // Initializer :
  //   `=` AssignmentExpression
  function* EvaluateBody_AssignmentExpression(AssignmentExpression, functionObject, argumentsList) {
    // 1. Assert: argumentsList is empty.
    Assert(argumentsList.length === 0, "argumentsList.length === 0");
    // 2. Assert: functionObject.[[ClassFieldInitializerName]] is not empty.
    Assert(functionObject.ClassFieldInitializerName !== undefined, "functionObject.ClassFieldInitializerName !== undefined");
    let value;
    // 3. If IsAnonymousFunctionDefinition(AssignmentExpression) is true, then
    if (IsAnonymousFunctionDefinition(AssignmentExpression)) {
      // a. Let value be NamedEvaluation of Initializer with argument functionObject.[[ClassFieldInitializerName]].
      value = yield* NamedEvaluation(AssignmentExpression, functionObject.ClassFieldInitializerName);
    } else {
      // 4. Else,
      // a. Let rhs be the result of evaluating AssignmentExpression.
      const rhs = yield* Evaluate(AssignmentExpression);
      // b. Let value be ? GetValue(rhs).
      let _temp15 = GetValue(rhs);
      /* c8 ignore if */
      if (_temp15 instanceof AbruptCompletion) {
        return _temp15;
      }
      /* c8 ignore if */
      if (_temp15 instanceof Completion) {
        _temp15 = _temp15.Value;
      }
      value = _temp15;
    }
    // 5. Return Completion { [[Type]]: return, [[Value]]: value, [[Target]]: empty }.
    return new Completion({
      Type: 'return',
      Value: value,
      Target: undefined
    });
  }

  /** https://tc39.es/ecma262/#sec-runtime-semantics-evaluateclassstaticblockbody */
  //    ClassStaticBlockBody : ClassStaticBlockStatementList
  function* EvaluateClassStaticBlockBody({
    ClassStaticBlockStatementList
  }, functionObject) {
    let _temp16 = yield* FunctionDeclarationInstantiation(functionObject, []);
    /* c8 ignore if */
    if (_temp16 instanceof AbruptCompletion) {
      return _temp16;
    }
    /* c8 ignore if */
    if (_temp16 instanceof Completion) {
      _temp16 = _temp16.Value;
    }
    // 2. Return the result of evaluating ClassStaticBlockStatementList.
    return yield* Evaluate_FunctionStatementList(ClassStaticBlockStatementList);
  }

  // FunctionBody : FunctionStatementList
  // ConciseBody : ExpressionBody
  // GeneratorBody : FunctionBody
  // AsyncGeneratorBody : FunctionBody
  // AsyncBody : FunctionBody
  // AsyncConciseBody : ExpressionBody
  // ClassStaticBlockBody : ClassStaticBlockStatementList
  EvaluateClassStaticBlockBody.section = 'https://tc39.es/ecma262/#sec-runtime-semantics-evaluateclassstaticblockbody';
  function EvaluateBody(Body, functionObject, argumentsList) {
    switch (Body.type) {
      case 'FunctionBody':
        return EvaluateBody_FunctionBody(Body, functionObject, argumentsList);
      case 'ConciseBody':
        return EvaluateBody_ConciseBody(Body, functionObject, argumentsList);
      case 'GeneratorBody':
        return EvaluateBody_GeneratorBody(Body, functionObject, argumentsList);
      case 'AsyncGeneratorBody':
        return EvaluateBody_AsyncGeneratorBody(Body, functionObject, argumentsList);
      case 'AsyncBody':
        return EvaluateBody_AsyncFunctionBody(Body, functionObject, argumentsList);
      case 'AsyncConciseBody':
        return EvaluateBody_AsyncConciseBody(Body, functionObject, argumentsList);
      case 'ClassStaticBlockBody':
        return EvaluateClassStaticBlockBody(Body, functionObject);
      default:
        return EvaluateBody_AssignmentExpression(Body, functionObject, argumentsList);
    }
  }

  /** https://tc39.es/ecma262/#sec-functiondeclarationinstantiation */
  function* FunctionDeclarationInstantiation(func, argumentsList) {
    // 1. Let calleeContext be the running execution context.
    const calleeContext = exports.surroundingAgent.runningExecutionContext;
    // 2. Let code be func.[[ECMAScriptCode]].
    const code = func.ECMAScriptCode;
    // 3. Let strict be func.[[Strict]].
    const strict = func.Strict;
    // 4. Let formals be func.[[FormalParameters]].
    const formals = func.FormalParameters;
    // 5. Let parameterNames be BoundNames of formals.
    const parameterNames = BoundNames(formals);
    // 6. If parameterNames has any duplicate entries, let hasDuplicates be true. Otherwise, let hasDuplicates be false.
    const hasDuplicates = new ValueSet(parameterNames).size !== parameterNames.length;
    // 7. Let simpleParameterList be IsSimpleParameterList of formals.
    const simpleParameterList = IsSimpleParameterList(formals);
    // 8. Let hasParameterExpressions be ContainsExpression of formals.
    const hasParameterExpressions = ContainsExpression(formals);
    // 9. Let varNames be the VarDeclaredNames of code.
    const varNames = VarDeclaredNames(code);
    // 10. Let varDeclarations be the VarScopedDeclarations of code.
    const varDeclarations = VarScopedDeclarations(code);
    // 11. Let lexicalNames be the LexicallyDeclaredNames of code.
    const lexicalNames = new ValueSet(LexicallyDeclaredNames(code));
    // 12. Let functionNames be a new empty List.
    const functionNames = new ValueSet();
    // 13. Let functionNames be a new empty List.
    const functionsToInitialize = [];
    // 14. For each d in varDeclarations, in reverse list order, do
    for (const d of [...varDeclarations].reverse()) {
      // a. If d is neither a VariableDeclaration nor a ForBinding nor a BindingIdentifier, then
      if (d.type !== 'VariableDeclaration' && d.type !== 'ForBinding' && d.type !== 'BindingIdentifier') {
        // i. Assert: d is either a FunctionDeclaration, a GeneratorDeclaration, an AsyncFunctionDeclaration, or an AsyncGeneratorDeclaration.
        Assert(d.type === 'FunctionDeclaration' || d.type === 'GeneratorDeclaration' || d.type === 'AsyncFunctionDeclaration' || d.type === 'AsyncGeneratorDeclaration', "d.type === 'FunctionDeclaration'\n             || d.type === 'GeneratorDeclaration'\n             || d.type === 'AsyncFunctionDeclaration'\n             || d.type === 'AsyncGeneratorDeclaration'");
        // ii. Let fn be the sole element of the BoundNames of d.
        const fn = BoundNames(d)[0];
        // iii. If fn is not an element of functionNames, then
        if (!functionNames.has(fn)) {
          // 1. Insert fn as the first element of functionNames.
          functionNames.add(fn);
          // 2. NOTE: If there are multiple function declarations for the same name, the last declaration is used.
          // 3. Insert d as the first element of functionsToInitialize.
          functionsToInitialize.unshift(d);
        }
      }
    }
    // 15. Let argumentsObjectNeeded be true.
    let argumentsObjectNeeded = true;
    // If func.[[ThisMode]] is lexical, then
    if (func.ThisMode === 'lexical') {
      // a. NOTE: Arrow functions never have an arguments objects.
      // b. Set argumentsObjectNeeded to false.
      argumentsObjectNeeded = false;
    } else if (new ValueSet(parameterNames).has(Value('arguments'))) {
      // a. Set argumentsObjectNeeded to false.
      argumentsObjectNeeded = false;
    } else if (hasParameterExpressions === false) {
      // a. If "arguments" is an element of functionNames or if "arguments" is an element of lexicalNames, then
      if (functionNames.has(Value('arguments')) || lexicalNames.has(Value('arguments'))) {
        // i. Set argumentsObjectNeeded to false.
        argumentsObjectNeeded = false;
      }
    }
    let env;
    // 19. If strict is true or if hasParameterExpressions is false, then
    if (strict || hasParameterExpressions === false) {
      // a. NOTE: Only a single lexical environment is needed for the parameters and top-level vars.
      // b. Let env be the LexicalEnvironment of calleeContext.
      env = calleeContext.LexicalEnvironment;
    } else {
      // a. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval
      //    calls in the formal parameter list are outside the environment where parameters are declared.
      // b. Let calleeEnv be the LexicalEnvironment of calleeContext.
      const calleeEnv = calleeContext.LexicalEnvironment;
      // c. Let env be NewDeclarativeEnvironment(calleeEnv).
      env = new DeclarativeEnvironmentRecord(calleeEnv);
      // d. Assert: The VariableEnvironment of calleeContext is calleeEnv.
      Assert(calleeContext.VariableEnvironment === calleeEnv, "calleeContext.VariableEnvironment === calleeEnv");
      // e. Set the LexicalEnvironment of calleeContext to env.
      calleeContext.LexicalEnvironment = env;
    }
    // 21. For each String paramName in parameterNames, do
    for (const paramName of parameterNames) {
      // a. Let alreadyDeclared be env.HasBinding(paramName).
      const alreadyDeclared = env.HasBinding(paramName);
      // b. NOTE: Early errors ensure that duplicate parameter names can only occur in
      //    non-strict functions that do not have parameter default values or rest parameters.
      // c. If alreadyDeclared is false, then
      if (alreadyDeclared === Value.false) {
        let _temp = env.CreateMutableBinding(paramName, Value.false);
        Assert(!(_temp instanceof AbruptCompletion), "env.CreateMutableBinding(paramName, Value.false)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp instanceof Completion) {
          _temp = _temp.Value;
        }
        // ii. If hasDuplicates is true, then
        if (hasDuplicates === true) {
          let _temp2 = env.InitializeBinding(paramName, Value.undefined);
          Assert(!(_temp2 instanceof AbruptCompletion), "env.InitializeBinding(paramName, Value.undefined)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp2 instanceof Completion) {
            _temp2 = _temp2.Value;
          }
        }
      }
    }
    // 22. If argumentsObjectNeeded is true, then
    let parameterBindings;
    if (argumentsObjectNeeded === true) {
      let ao;
      // a. If strict is true or if simpleParameterList is false, then
      if (strict || simpleParameterList === false) {
        // i. Let ao be CreateUnmappedArgumentsObject(argumentsList).
        ao = CreateUnmappedArgumentsObject(argumentsList);
      } else {
        // i. NOTE: mapped argument object is only provided for non-strict functions
        //    that don't have a rest parameter, any parameter default value initializers,
        //    or any destructured parameters.
        // ii. Let ao be CreateMappedArgumentsObject(func, formals, argumentsList, env).
        ao = CreateMappedArgumentsObject(func, formals, argumentsList, env);
      }
      // c. If strict is true, then
      if (strict) {
        let _temp3 = env.CreateImmutableBinding(Value('arguments'), Value.false);
        Assert(!(_temp3 instanceof AbruptCompletion), "env.CreateImmutableBinding(Value('arguments'), Value.false)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
      } else {
        let _temp4 = env.CreateMutableBinding(Value('arguments'), Value.false);
        Assert(!(_temp4 instanceof AbruptCompletion), "env.CreateMutableBinding(Value('arguments'), Value.false)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp4 instanceof Completion) {
          _temp4 = _temp4.Value;
        }
      }
      // e. Call env.InitializeBinding("arguments", ao).
      env.InitializeBinding(Value('arguments'), ao);
      // f. Let parameterBindings be a new List of parameterNames with "arguments" appended.
      parameterBindings = new ValueSet([...parameterNames, Value('arguments')]);
    } else {
      // a. Let parameterBindings be parameterNames.
      parameterBindings = new ValueSet(parameterNames);
    }
    // 24. Let iteratorRecord be CreateListIteratorRecord(argumentsList).
    const iteratorRecord = CreateListIteratorRecord(argumentsList);
    // 25. If hasDuplicates is true, then
    if (hasDuplicates) {
      let _temp5 = yield* IteratorBindingInitialization_FormalParameters(formals, iteratorRecord, Value.undefined);
      /* c8 ignore if */
      if (_temp5 instanceof AbruptCompletion) {
        return _temp5;
      }
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
    } else {
      let _temp6 = yield* IteratorBindingInitialization_FormalParameters(formals, iteratorRecord, env);
      /* c8 ignore if */
      if (_temp6 instanceof AbruptCompletion) {
        return _temp6;
      }
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
    }
    let varEnv;
    // 27. If hasParameterExpressions is false, then
    if (hasParameterExpressions === false) {
      // a. NOTE: Only a single lexical environment is needed for the parameters and top-level vars.
      // b. Let instantiatedVarNames be a copy of the List parameterBindings.
      const instantiatedVarNames = new ValueSet(parameterBindings);
      // c. For each n in varNames, do
      for (const n of varNames) {
        // i. If n is not an element of instantiatedVarNames, then
        if (!instantiatedVarNames.has(n)) {
          // 1. Append n to instantiatedVarNames.
          instantiatedVarNames.add(n);
          // 2. Perform ! env.CreateMutableBinding(n, false).
          let _temp7 = env.CreateMutableBinding(n, Value.false);
          Assert(!(_temp7 instanceof AbruptCompletion), "env.CreateMutableBinding(n, Value.false)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp7 instanceof Completion) {
            _temp7 = _temp7.Value;
          }
          // 3. Call env.InitializeBinding(n, undefined).
          env.InitializeBinding(n, Value.undefined);
        }
      }
      // d. Let varEnv be env.
      varEnv = env;
    } else {
      // a. NOTE: A separate Environment Record is needed to ensure that closures created by expressions
      //    in the formal parameter list do not have visibility of declarations in the function body.
      // b. Let varEnv be NewDeclarativeEnvironment(env).
      varEnv = new DeclarativeEnvironmentRecord(env);
      // c. Set the VariableEnvironment of calleeContext to varEnv.
      calleeContext.VariableEnvironment = varEnv;
      // d. Let instantiatedVarNames be a new empty List.
      const instantiatedVarNames = new ValueSet();
      // e. For each n in varNames, do
      for (const n of varNames) {
        // If n is not an element of instantiatedVarNames, then
        if (!instantiatedVarNames.has(n)) {
          // 1. Append n to instantiatedVarNames.
          instantiatedVarNames.add(n);
          // 2. Perform ! varEnv.CreateMutableBinding(n, false).
          let _temp8 = varEnv.CreateMutableBinding(n, Value.false);
          Assert(!(_temp8 instanceof AbruptCompletion), "varEnv.CreateMutableBinding(n, Value.false)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp8 instanceof Completion) {
            _temp8 = _temp8.Value;
          }
          let initialValue;
          // 3. If n is not an element of parameterBindings or if n is an element of functionNames, let initialValue be undefined.
          if (!parameterBindings.has(n) || functionNames.has(n)) {
            initialValue = Value.undefined;
          } else {
            let _temp9 = env.GetBindingValue(n, Value.false);
            Assert(!(_temp9 instanceof AbruptCompletion), "env.GetBindingValue(n, Value.false)" + ' returned an abrupt completion');
            /* c8 ignore if */
            if (_temp9 instanceof Completion) {
              _temp9 = _temp9.Value;
            }
            // a. Let initialValue be ! env.GetBindingValue(n, false).
            initialValue = _temp9;
          }
          // 5. Call varEnv.InitializeBinding(n, initialValue).
          varEnv.InitializeBinding(n, initialValue);
          // 6. NOTE: vars whose names are the same as a formal parameter, initially have the same value as the corresponding initialized parameter.
        }
      }
    }
    // 29. NOTE: Annex B.3.3.1 adds additional steps at this point.
    let lexEnv;
    // 30. If strict is false, then
    if (strict === false) {
      // a. Let lexEnv be NewDeclarativeEnvironment(varEnv).
      lexEnv = new DeclarativeEnvironmentRecord(varEnv);
      // b. NOTE: Non-strict functions use a separate lexical Environment Record for top-level lexical declarations
      //    so that a direct eval can determine whether any var scoped declarations introduced by the eval code
      //    conflict with pre-existing top-level lexically scoped declarations. This is not needed for strict functions
      //    because a strict direct eval always places all declarations into a new Environment Record.
    } else {
      // a. Else, let lexEnv be varEnv.
      lexEnv = varEnv;
    }
    // 32. Set the LexicalEnvironment of calleeContext to lexEnv.
    calleeContext.LexicalEnvironment = lexEnv;
    // 33. Let lexDeclarations be the LexicallyScopedDeclarations of code.
    const lexDeclarations = LexicallyScopedDeclarations(code);
    // 34. For each element d in lexDeclarations, do
    for (const d of lexDeclarations) {
      // a. NOTE: A lexically declared name cannot be the same as a function/generator declaration, formal
      //    parameter, or a var name. Lexically declared names are only instantiated here but not initialized.
      // b. For each element dn of the BoundNames of d, do
      for (const dn of BoundNames(d)) {
        // i. If IsConstantDeclaration of d is true, then
        if (IsConstantDeclaration(d)) {
          let _temp10 = lexEnv.CreateImmutableBinding(dn, Value.true);
          Assert(!(_temp10 instanceof AbruptCompletion), "lexEnv.CreateImmutableBinding(dn, Value.true)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp10 instanceof Completion) {
            _temp10 = _temp10.Value;
          }
        } else {
          let _temp11 = lexEnv.CreateMutableBinding(dn, Value.false);
          Assert(!(_temp11 instanceof AbruptCompletion), "lexEnv.CreateMutableBinding(dn, Value.false)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp11 instanceof Completion) {
            _temp11 = _temp11.Value;
          }
        }
      }
    }
    // 35. Let privateEnv be the PrivateEnvironment of calleeContext.
    const privateEnv = calleeContext.PrivateEnvironment;
    // 36. For each Parse Node f in functionsToInitialize, do
    for (const f of functionsToInitialize) {
      // a. Let fn be the sole element of the BoundNames of f.
      const fn = BoundNames(f)[0];
      // b. Let fo be InstantiateFunctionObject of f with argument lexEnv and privateEnv.
      const fo = InstantiateFunctionObject(f, lexEnv, privateEnv);
      // c. Perform ! varEnv.SetMutableBinding(fn, fo, false).
      let _temp12 = varEnv.SetMutableBinding(fn, fo, Value.false);
      Assert(!(_temp12 instanceof AbruptCompletion), "varEnv.SetMutableBinding(fn, fo, Value.false)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp12 instanceof Completion) {
        _temp12 = _temp12.Value;
      }
    }
    // 37. Return NormalCompletion(empty).
    return NormalCompletion(undefined);
  }

  // @ts-nocheck


  /** https://tc39.es/ecma262/#sec-function-definitions-runtime-semantics-evaluation */
  //   FunctionStatementList : [empty]
  //
  // (implicit)
  //   FunctionStatementList : StatementList
  function Evaluate_FunctionStatementList(FunctionStatementList) {
    return Evaluate_StatementList(FunctionStatementList);
  }

  /** https://tc39.es/ecma262/#sec-function-definitions-runtime-semantics-iteratorbindinginitialization */
  // FormalParameters :
  //   [empty]
  //   FormalParameterList `,` FunctionRestParameter
  function* IteratorBindingInitialization_FormalParameters(FormalParameters, iteratorRecord, environment) {
    if (FormalParameters.length === 0) {
      // 1. Return NormalCompletion(empty).
      return NormalCompletion(undefined);
    }
    for (const FormalParameter of FormalParameters.slice(0, -1)) {
      let _temp = yield* IteratorBindingInitialization_FormalParameter(FormalParameter, iteratorRecord, environment);
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
    }
    const last = FormalParameters[FormalParameters.length - 1];
    if (last.type === 'BindingRestElement') {
      return yield* IteratorBindingInitialization_FunctionRestParameter(last, iteratorRecord, environment);
    }
    return yield* IteratorBindingInitialization_FormalParameter(last, iteratorRecord, environment);
  }

  // FormalParameter : BindingElement
  function IteratorBindingInitialization_FormalParameter(BindingElement, iteratorRecord, environment) {
    return IteratorBindingInitialization_BindingElement(BindingElement, iteratorRecord, environment);
  }

  // FunctionRestParameter : BindingRestElement
  function IteratorBindingInitialization_FunctionRestParameter(FunctionRestParameter, iteratorRecord, environment) {
    return IteratorBindingInitialization_BindingRestElement(FunctionRestParameter, iteratorRecord, environment);
  }

  // BindingElement :
  //   SingleNameBinding
  //   BindingPattern
  function IteratorBindingInitialization_BindingElement(BindingElement, iteratorRecord, environment) {
    if (BindingElement.BindingPattern) {
      return IteratorBindingInitialization_BindingPattern(BindingElement, iteratorRecord, environment);
    }
    return IteratorBindingInitialization_SingleNameBinding(BindingElement, iteratorRecord, environment);
  }

  // SingleNameBinding : BindingIdentifier Initializer?
  function* IteratorBindingInitialization_SingleNameBinding({
    BindingIdentifier,
    Initializer
  }, iteratorRecord, environment) {
    // 1. Let bindingId be StringValue of BindingIdentifier.
    const bindingId = StringValue(BindingIdentifier);
    // 2. Let lhs be ? ResolveBinding(bindingId, environment).
    let _temp2 = ResolveBinding(bindingId, environment, BindingIdentifier.strict);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const lhs = _temp2;
    let v;
    // 3. If iteratorRecord.[[Done]] is false, then
    if (iteratorRecord.Done === Value.false) {
      // a. Let next be IteratorStep(iteratorRecord).
      let next = IteratorStep(iteratorRecord);
      // b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.
      if (next instanceof AbruptCompletion) {
        iteratorRecord.Done = Value.true;
      }
      // c. ReturnIfAbrupt(next).
      /* c8 ignore if */
      if (next instanceof AbruptCompletion) {
        return next;
      }
      /* c8 ignore if */
      if (next instanceof Completion) {
        next = next.Value;
      }
      // d. If next is false, set iteratorRecord.[[Done]] to true.
      if (next === Value.false) {
        iteratorRecord.Done = Value.true;
      } else {
        // e. Else,
        // i. Let v be IteratorValue(next).
        v = IteratorValue(next);
        // ii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.
        if (v instanceof AbruptCompletion) {
          iteratorRecord.Done = Value.true;
        }
        // iii. ReturnIfAbrupt(v).
        /* c8 ignore if */
        if (v instanceof AbruptCompletion) {
          return v;
        }
        /* c8 ignore if */
        if (v instanceof Completion) {
          v = v.Value;
        }
      }
    }
    // 4. If iteratorRecord.[[Done]] is true, let v be undefined.
    if (iteratorRecord.Done === Value.true) {
      v = Value.undefined;
    }
    // 5. If Initializer is present and v is undefined, then
    if (Initializer && v === Value.undefined) {
      if (IsAnonymousFunctionDefinition(Initializer)) {
        v = yield* NamedEvaluation(Initializer, bindingId);
      } else {
        const defaultValue = yield* Evaluate(Initializer);
        let _temp3 = GetValue(defaultValue);
        /* c8 ignore if */
        if (_temp3 instanceof AbruptCompletion) {
          return _temp3;
        }
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
        v = _temp3;
      }
    }
    // 6. If environment is undefined, return ? PutValue(lhs, v).
    if (environment === Value.undefined) {
      return PutValue(lhs, v);
    }
    // 7. Return InitializeReferencedBinding(lhs, v).
    return InitializeReferencedBinding(lhs, v);
  }

  // BindingRestElement :
  //   `...` BindingIdentifier
  //   `...` BindingPattern
  function* IteratorBindingInitialization_BindingRestElement({
    BindingIdentifier,
    BindingPattern
  }, iteratorRecord, environment) {
    if (BindingIdentifier) {
      let _temp4 = ResolveBinding(StringValue(BindingIdentifier), environment, BindingIdentifier.strict);
      /* c8 ignore if */
      if (_temp4 instanceof AbruptCompletion) {
        return _temp4;
      }
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      // 1. Let lhs be ? ResolveBinding(StringValue of BindingIdentifier, environment).
      const lhs = _temp4;
      // 2. Let A be ! ArrayCreate(0).
      let _temp5 = ArrayCreate(0);
      Assert(!(_temp5 instanceof AbruptCompletion), "ArrayCreate(0)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      const A = _temp5;
      // 3. Let n be 0.
      let n = 0;
      // 4. Repeat,
      while (true) {
        let next;
        // a. If iteratorRecord.[[Done]] is false, then
        if (iteratorRecord.Done === Value.false) {
          // i. Let next be IteratorStep(iteratorRecord).
          next = IteratorStep(iteratorRecord);
          // ii. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.
          if (next instanceof AbruptCompletion) {
            iteratorRecord.Done = Value.true;
          }
          // iii. ReturnIfAbrupt(next).
          /* c8 ignore if */
          if (next instanceof AbruptCompletion) {
            return next;
          }
          /* c8 ignore if */
          if (next instanceof Completion) {
            next = next.Value;
          }
          // iv. If next is false, set iteratorRecord.[[Done]] to true.
          if (next === Value.false) {
            iteratorRecord.Done = Value.true;
          }
        }
        // b. If iteratorRecord.[[Done]] is true, then
        if (iteratorRecord.Done === Value.true) {
          // i. If environment is undefined, return ? PutValue(lhs, A).
          if (environment === Value.undefined) {
            return PutValue(lhs, A);
          }
          // ii. Return InitializeReferencedBinding(lhs, A).
          return InitializeReferencedBinding(lhs, A);
        }
        // c. Let nextValue be IteratorValue(next).
        let nextValue = IteratorValue(next);
        // d. If nextValue is an abrupt completion, set iteratorRecord.[[Done]] to true.
        if (nextValue instanceof AbruptCompletion) {
          iteratorRecord.Done = Value.true;
        }
        // e. ReturnIfAbrupt(nextValue).
        /* c8 ignore if */
        if (nextValue instanceof AbruptCompletion) {
          return nextValue;
        }
        /* c8 ignore if */
        if (nextValue instanceof Completion) {
          nextValue = nextValue.Value;
        }
        // f. Perform ! CreateDataPropertyOrThrow(A, ! ToString(𝔽(n)), nextValue).
        let _temp7 = ToString(F(n));
        Assert(!(_temp7 instanceof AbruptCompletion), "ToString(F(n))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp7 instanceof Completion) {
          _temp7 = _temp7.Value;
        }
        let _temp6 = CreateDataPropertyOrThrow(A, _temp7, nextValue);
        Assert(!(_temp6 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(A, X(ToString(F(n))), nextValue)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp6 instanceof Completion) {
          _temp6 = _temp6.Value;
        }
        // g. Set n to n + 1.
        n += 1;
      }
    } else {
      let _temp8 = ArrayCreate(0);
      Assert(!(_temp8 instanceof AbruptCompletion), "ArrayCreate(0)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp8 instanceof Completion) {
        _temp8 = _temp8.Value;
      }
      // 1. Let A be ! ArrayCreate(0).
      const A = _temp8;
      // 2. Let n be 0.
      let n = 0;
      // 3. Repeat,
      while (true) {
        let next;
        // a. If iteratorRecord.[[Done]] is false, then
        if (iteratorRecord.Done === Value.false) {
          // i. Let next be IteratorStep(iteratorRecord).
          next = IteratorStep(iteratorRecord);
          // ii. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.
          if (next instanceof AbruptCompletion) {
            iteratorRecord.Done = Value.true;
          }
          // iii. ReturnIfAbrupt(next).
          /* c8 ignore if */
          if (next instanceof AbruptCompletion) {
            return next;
          }
          /* c8 ignore if */
          if (next instanceof Completion) {
            next = next.Value;
          }
          // iv. If next is false, set iteratorRecord.[[Done]] to true.
          if (next === Value.false) {
            iteratorRecord.Done = Value.true;
          }
        }
        // b. If iteratorRecord.[[Done]] is true, then
        if (iteratorRecord.Done === Value.true) {
          // i. Return the result of performing BindingInitialization of BindingPattern with A and environment as the arguments.
          return yield* BindingInitialization(BindingPattern, A, environment);
        }
        // c. Let nextValue be IteratorValue(next).
        let nextValue = IteratorValue(next);
        // d. If nextValue is an abrupt completion, set iteratorRecord.[[Done]] to true.
        if (nextValue instanceof AbruptCompletion) {
          iteratorRecord.Done = Value.true;
        }
        // e. ReturnIfAbrupt(nextValue).
        /* c8 ignore if */
        if (nextValue instanceof AbruptCompletion) {
          return nextValue;
        }
        /* c8 ignore if */
        if (nextValue instanceof Completion) {
          nextValue = nextValue.Value;
        }
        // f. Perform ! CreateDataPropertyOrThrow(A, ! ToString(𝔽(n)), nextValue).
        let _temp10 = ToString(F(n));
        Assert(!(_temp10 instanceof AbruptCompletion), "ToString(F(n))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp10 instanceof Completion) {
          _temp10 = _temp10.Value;
        }
        let _temp9 = CreateDataPropertyOrThrow(A, _temp10, nextValue);
        Assert(!(_temp9 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(A, X(ToString(F(n))), nextValue)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp9 instanceof Completion) {
          _temp9 = _temp9.Value;
        }
        // g. Set n to n + 1.
        n += 1;
      }
    }
  }
  function* IteratorBindingInitialization_BindingPattern({
    BindingPattern,
    Initializer
  }, iteratorRecord, environment) {
    let v;
    // 1. If iteratorRecord.[[Done]] is false, then
    if (iteratorRecord.Done === Value.false) {
      // a. Let next be IteratorStep(iteratorRecord).
      let next = IteratorStep(iteratorRecord);
      // b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.
      if (next instanceof AbruptCompletion) {
        iteratorRecord.Done = Value.true;
      }
      // c. ReturnIfAbrupt(next).
      /* c8 ignore if */
      if (next instanceof AbruptCompletion) {
        return next;
      }
      /* c8 ignore if */
      if (next instanceof Completion) {
        next = next.Value;
      }
      // d. If next is false, set iteratorRecord.[[Done]] to true.
      if (next === Value.false) {
        iteratorRecord.Done = Value.true;
      } else {
        // e. Else,
        // i. Let v be IteratorValue(next).
        v = IteratorValue(next);
        // ii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.
        if (v instanceof AbruptCompletion) {
          iteratorRecord.Done = Value.true;
        }
        // iii. ReturnIfAbrupt(v).
        /* c8 ignore if */
        if (v instanceof AbruptCompletion) {
          return v;
        }
        /* c8 ignore if */
        if (v instanceof Completion) {
          v = v.Value;
        }
      }
    }
    // 2. If iteratorRecord.[[Done]] is true, let v be undefined.
    if (iteratorRecord.Done === Value.true) {
      v = Value.undefined;
    }
    // 3. If Initializer is present and v is undefined, then
    if (Initializer && v === Value.undefined) {
      // a. Let defaultValue be the result of evaluating Initializer.
      const defaultValue = yield* Evaluate(Initializer);
      // b. Set v to ? GetValue(defaultValue).
      let _temp11 = GetValue(defaultValue);
      /* c8 ignore if */
      if (_temp11 instanceof AbruptCompletion) {
        return _temp11;
      }
      /* c8 ignore if */
      if (_temp11 instanceof Completion) {
        _temp11 = _temp11.Value;
      }
      v = _temp11;
    }
    // 4. Return the result of performing BindingInitialization of BindingPattern with v and environment as the arguments.
    return yield* BindingInitialization(BindingPattern, v, environment);
  }
  function IteratorDestructuringAssignmentEvaluation$1(node, iteratorRecord) {
    Assert(node.type === 'Elision', "node.type === 'Elision'");
    // 1. If iteratorRecord.[[Done]] is false, then
    if (iteratorRecord.Done === Value.false) {
      // a. Let next be IteratorStep(iteratorRecord).
      let next = IteratorStep(iteratorRecord);
      // b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.
      if (next instanceof AbruptCompletion) {
        iteratorRecord.Done = Value.true;
      }
      // c. ReturnIfAbrupt(next).
      /* c8 ignore if */
      if (next instanceof AbruptCompletion) {
        return next;
      }
      /* c8 ignore if */
      if (next instanceof Completion) {
        next = next.Value;
      }
      // d. If next is false, set iteratorRecord.[[Done]] to true.
      if (next === Value.false) {
        iteratorRecord.Done = Value.true;
      }
    }
    // 2. Return NormalCompletion(empty).
    return NormalCompletion(undefined);
  }
  function* IteratorBindingInitialization_ArrayBindingPattern({
    BindingElementList,
    BindingRestElement
  }, iteratorRecord, environment) {
    for (const BindingElement of BindingElementList) {
      if (BindingElement.type === 'Elision') {
        let _temp12 = IteratorDestructuringAssignmentEvaluation$1(BindingElement, iteratorRecord);
        /* c8 ignore if */
        if (_temp12 instanceof AbruptCompletion) {
          return _temp12;
        }
        /* c8 ignore if */
        if (_temp12 instanceof Completion) {
          _temp12 = _temp12.Value;
        }
      } else {
        let _temp13 = yield* IteratorBindingInitialization_BindingElement(BindingElement, iteratorRecord, environment);
        /* c8 ignore if */
        if (_temp13 instanceof AbruptCompletion) {
          return _temp13;
        }
        /* c8 ignore if */
        if (_temp13 instanceof Completion) {
          _temp13 = _temp13.Value;
        }
      }
    }
    if (BindingRestElement) {
      return yield* IteratorBindingInitialization_BindingRestElement(BindingRestElement, iteratorRecord, environment);
    }
    return NormalCompletion(undefined);
  }

  /** https://tc39.es/ecma262/#sec-return-statement-runtime-semantics-evaluation */
  //  ReturnStatement :
  //    `return` `;`
  //    `return` Expression `;`
  function* Evaluate_ReturnStatement({
    Expression
  }) {
    if (!Expression) {
      // 1. Return Completion { [[Type]]: return, [[Value]]: undefined, [[Target]]: empty }.
      return new Completion({
        Type: 'return',
        Value: Value.undefined,
        Target: undefined
      });
    }
    // 1. Let exprRef be the result of evaluating Expression.
    const exprRef = yield* Evaluate(Expression);
    // 1. Let exprValue be ? GetValue(exprRef).
    let _temp = GetValue(exprRef);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    let exprValue = _temp;
    // 1. If ! GetGeneratorKind() is async, set exprValue to ? Await(exprValue).
    let _temp2 = GetGeneratorKind();
    Assert(!(_temp2 instanceof AbruptCompletion), "GetGeneratorKind()" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    if (_temp2 === 'async') {
      let _temp3 = yield* Await(exprValue);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      exprValue = _temp3;
    }
    // 1. Return Completion { [[Type]]: return, [[Value]]: exprValue, [[Target]]: empty }.
    return new Completion({
      Type: 'return',
      Value: exprValue,
      Target: undefined
    });
  }

  // @ts-nocheck
  /** https://tc39.es/ecma262/#sec-grouping-operator-runtime-semantics-evaluation */
  function* Evaluate_ParenthesizedExpression({
    Expression
  }) {
    // 1. Return the result of evaluating Expression. This may be of type Reference.
    return yield* Evaluate(Expression);
  }

  /** https://tc39.es/ecma262/#sec-property-accessors-runtime-semantics-evaluation */
  //   MemberExpression : MemberExpression `[` Expression `]`
  //   CallExpression : CallExpression `[` Expression `]`
  function* Evaluate_MemberExpression_Expression({
    strict,
    MemberExpression,
    Expression
  }) {
    // 1. Let baseReference be the result of evaluating |MemberExpression|.
    const baseReference = yield* Evaluate(MemberExpression);
    // 2. Let baseValue be ? GetValue(baseReference).
    let _temp = GetValue(baseReference);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const baseValue = _temp;
    // 3. If the code matched by this |MemberExpression| is strict mode code, let strict be true; else let strict be false.
    // 4. Return ? EvaluatePropertyAccessWithExpressionKey(baseValue, |Expression|, strict).
    return yield* EvaluatePropertyAccessWithExpressionKey(baseValue, Expression, strict);
  }

  /** https://tc39.es/ecma262/#sec-property-accessors-runtime-semantics-evaluation */
  //   MemberExpression : MemberExpression `.` IdentifierName
  //   CallExpression : CallExpression `.` IdentifierName
  Evaluate_MemberExpression_Expression.section = 'https://tc39.es/ecma262/#sec-property-accessors-runtime-semantics-evaluation';
  function* Evaluate_MemberExpression_IdentifierName({
    strict,
    MemberExpression,
    IdentifierName
  }) {
    // 1. Let baseReference be the result of evaluating |MemberExpression|.
    const baseReference = yield* Evaluate(MemberExpression);
    // 2. Let baseValue be ? GetValue(baseReference).
    let _temp2 = GetValue(baseReference);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const baseValue = _temp2;
    // 3. If the code matched by this |MemberExpression| is strict mode code, let strict be true; else let strict be false.
    // 4. Return ? EvaluatePropertyAccessWithIdentifierKey(baseValue, |IdentifierName|, strict).
    return EvaluatePropertyAccessWithIdentifierKey(baseValue, IdentifierName, strict);
  }

  /** https://tc39.es/ecma262/#sec-property-accessors-runtime-semantics-evaluation */
  //   MemberExpression : MemberExpression `.` PrivateIdentifier
  //   CallExpression : CallExpression `.` PrivateIdentifier
  Evaluate_MemberExpression_IdentifierName.section = 'https://tc39.es/ecma262/#sec-property-accessors-runtime-semantics-evaluation';
  function* Evaluate_MemberExpression_PrivateIdentifier({
    MemberExpression,
    PrivateIdentifier
  }) {
    // 1. Let baseReference be the result of evaluating MemberExpression.
    const baseReference = yield* Evaluate(MemberExpression);
    // 2. Let baseValue be ? GetValue(baseReference).
    let _temp3 = GetValue(baseReference);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const baseValue = _temp3;
    // 3. Let bv be ? RequireObjectCoercible(baseValue).
    let _temp4 = RequireObjectCoercible(baseValue);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const bv = _temp4;
    // 4. Let fieldNameString be the StringValue of PrivateIdentifier.
    const fieldNameString = StringValue(PrivateIdentifier);
    // 5. Return ! MakePrivateReference(bv, fieldNameString).
    let _temp5 = MakePrivateReference(bv, fieldNameString);
    Assert(!(_temp5 instanceof AbruptCompletion), "MakePrivateReference(bv, fieldNameString)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    return _temp5;
  }

  /** https://tc39.es/ecma262/#sec-property-accessors-runtime-semantics-evaluation */
  //   MemberExpression :
  //     MemberExpression `[` Expression `]`
  //     MemberExpression `.` IdentifierName
  //   CallExpression :
  //     CallExpression `[` Expression `]`
  //     CallExpression `.` IdentifierName
  Evaluate_MemberExpression_PrivateIdentifier.section = 'https://tc39.es/ecma262/#sec-property-accessors-runtime-semantics-evaluation';
  function Evaluate_MemberExpression(MemberExpression) {
    switch (true) {
      case !!MemberExpression.Expression:
        return Evaluate_MemberExpression_Expression(MemberExpression);
      case !!MemberExpression.IdentifierName:
        return Evaluate_MemberExpression_IdentifierName(MemberExpression);
      case !!MemberExpression.PrivateIdentifier:
        return Evaluate_MemberExpression_PrivateIdentifier(MemberExpression);
      /*c8 ignore next*/default:
        throw new OutOfRange$1('Evaluate_MemberExpression', MemberExpression);
    }
  }

  /** https://tc39.es/ecma262/#sec-evaluate-expression-key-property-access */
  function* EvaluatePropertyAccessWithExpressionKey(baseValue, expression, strict) {
    // 1. Let propertyNameReference be the result of evaluating expression.
    const propertyNameReference = yield* Evaluate(expression);
    // 2. Let propertyNameValue be ? GetValue(propertyNameReference).
    let _temp = GetValue(propertyNameReference);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const propertyNameValue = _temp;
    // 3. Let bv be ? RequireObjectCoercible(baseValue).
    let _temp2 = RequireObjectCoercible(baseValue);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const bv = _temp2;
    // 4. Let propertyKey be ? ToPropertyKey(propertyNameValue).
    let _temp3 = ToPropertyKey(propertyNameValue);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const propertyKey = _temp3;
    // 5. Return the Reference Record { [[Base]]: bv, [[ReferencedName]]: propertyKey, [[Strict]]: strict, [[ThisValue]]: empty }.
    return new ReferenceRecord({
      Base: bv,
      ReferencedName: propertyKey,
      Strict: strict ? Value.true : Value.false,
      ThisValue: undefined
    });
  }

  /** https://tc39.es/ecma262/#sec-evaluate-identifier-key-property-access */
  function EvaluatePropertyAccessWithIdentifierKey(baseValue, identifierName, strict) {
    // 1. Assert: identifierName is an IdentifierName.
    Assert(identifierName.type === 'IdentifierName', "identifierName.type === 'IdentifierName'");
    // 2. Let bv be ? RequireObjectCoercible(baseValue).
    let _temp4 = RequireObjectCoercible(baseValue);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const bv = _temp4;
    // 3. Let propertyNameString be StringValue of IdentifierName
    const propertyNameString = StringValue(identifierName);
    // 4. Return the Reference Record { [[Base]]: bv, [[ReferencedName]]: propertyNameString, [[Strict]]: strict, [[ThisValue]]: empty }.
    return new ReferenceRecord({
      Base: bv,
      ReferencedName: propertyNameString,
      Strict: strict ? Value.true : Value.false,
      ThisValue: undefined
    });
  }

  /** https://tc39.es/ecma262/#sec-let-and-const-declarations-runtime-semantics-evaluation */
  //   LexicalBinding :
  //     BindingIdentifier
  //     BindingIdentifier Initializer
  function* Evaluate_LexicalBinding_BindingIdentifier({
    BindingIdentifier,
    Initializer,
    strict
  }) {
    if (Initializer) {
      // 1. Let bindingId be StringValue of BindingIdentifier.
      const bindingId = StringValue(BindingIdentifier);
      // 2. Let lhs be ResolveBinding(bindingId).
      let _temp = ResolveBinding(bindingId, undefined, strict);
      Assert(!(_temp instanceof AbruptCompletion), "ResolveBinding(bindingId, undefined, strict)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      const lhs = _temp;
      let value;
      // 3. If IsAnonymousFunctionDefinition(Initializer) is true, then
      if (IsAnonymousFunctionDefinition(Initializer)) {
        // a. Let value be NamedEvaluation of Initializer with argument bindingId.
        value = yield* NamedEvaluation(Initializer, bindingId);
      } else {
        // 4. Else,
        // a. Let rhs be the result of evaluating Initializer.
        const rhs = yield* Evaluate(Initializer);
        // b. Let value be ? GetValue(rhs).
        let _temp2 = GetValue(rhs);
        /* c8 ignore if */
        if (_temp2 instanceof AbruptCompletion) {
          return _temp2;
        }
        /* c8 ignore if */
        if (_temp2 instanceof Completion) {
          _temp2 = _temp2.Value;
        }
        value = _temp2;
      }
      // 5. Return InitializeReferencedBinding(lhs, value).
      return InitializeReferencedBinding(lhs, value);
    } else {
      // 1. Let lhs be ResolveBinding(StringValue of BindingIdentifier).
      const lhs = ResolveBinding(StringValue(BindingIdentifier), undefined, strict);
      // 2. Return InitializeReferencedBinding(lhs, undefined).
      return InitializeReferencedBinding(lhs, Value.undefined);
    }
  }

  /** https://tc39.es/ecma262/#sec-let-and-const-declarations-runtime-semantics-evaluation */
  //   LexicalBinding : BindingPattern Initializer
  Evaluate_LexicalBinding_BindingIdentifier.section = 'https://tc39.es/ecma262/#sec-let-and-const-declarations-runtime-semantics-evaluation';
  function* Evaluate_LexicalBinding_BindingPattern(LexicalBinding) {
    const {
      BindingPattern,
      Initializer
    } = LexicalBinding;
    const rhs = yield* Evaluate(Initializer);
    let _temp3 = GetValue(rhs);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const value = _temp3;
    const env = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    return yield* BindingInitialization(BindingPattern, value, env);
  }
  Evaluate_LexicalBinding_BindingPattern.section = 'https://tc39.es/ecma262/#sec-let-and-const-declarations-runtime-semantics-evaluation';
  function* Evaluate_LexicalBinding(LexicalBinding) {
    switch (true) {
      case !!LexicalBinding.BindingIdentifier:
        return yield* Evaluate_LexicalBinding_BindingIdentifier(LexicalBinding);
      case !!LexicalBinding.BindingPattern:
        return yield* Evaluate_LexicalBinding_BindingPattern(LexicalBinding);
      /*c8 ignore next*/default:
        throw new OutOfRange$1('Evaluate_LexicalBinding', LexicalBinding);
    }
  }

  /** https://tc39.es/ecma262/#sec-let-and-const-declarations-runtime-semantics-evaluation */
  //   BindingList : BindingList `,` LexicalBinding
  //
  // (implicit)
  //   BindingList : LexicalBinding
  function* Evaluate_BindingList(BindingList) {
    // 1. Let next be the result of evaluating BindingList.
    // 2. ReturnIfAbrupt(next).
    // 3. Return the result of evaluating LexicalBinding.
    let next;
    for (const LexicalBinding of BindingList) {
      next = yield* Evaluate_LexicalBinding(LexicalBinding);
      /* c8 ignore if */
      if (next instanceof AbruptCompletion) {
        return next;
      }
      /* c8 ignore if */
      if (next instanceof Completion) {
        next = next.Value;
      }
    }
    return next;
  }

  /** https://tc39.es/ecma262/#sec-let-and-const-declarations-runtime-semantics-evaluation */
  //   LexicalDeclaration : LetOrConst BindingList `;`
  function* Evaluate_LexicalDeclaration({
    BindingList
  }) {
    // 1. Let next be the result of evaluating BindingList.
    let next = yield* Evaluate_BindingList(BindingList);
    // 2. ReturnIfAbrupt(next).
    /* c8 ignore if */
    if (next instanceof AbruptCompletion) {
      return next;
    }
    /* c8 ignore if */
    if (next instanceof Completion) {
      next = next.Value;
    }
    // 3. Return NormalCompletion(empty).
    return NormalCompletion(undefined);
  }

  /** https://tc39.es/ecma262/#sec-object-initializer-runtime-semantics-evaluation */
  //   ObjectLiteral :
  //     `{` `}`
  //     `{` PropertyDefinitionList `}`
  //     `{` PropertyDefinitionList `,` `}`
  function* Evaluate_ObjectLiteral({
    PropertyDefinitionList
  }) {
    // 1. Let obj be OrdinaryObjectCreate(%Object.prototype%).
    const obj = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%Object.prototype%'));
    if (PropertyDefinitionList.length === 0) {
      return obj;
    }
    // 2. Perform ? PropertyDefinitionEvaluation of PropertyDefinitionList with arguments obj and true.
    let _temp = yield* PropertyDefinitionEvaluation_PropertyDefinitionList(PropertyDefinitionList, obj, Value.true);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 3. Return obj.
    return obj;
  }

  /** https://tc39.es/ecma262/#sec-object-initializer-runtime-semantics-propertydefinitionevaluation */
  //   PropertyDefinitionList :
  //     PropertyDefinitionList `,` PropertyDefinition
  function* PropertyDefinitionEvaluation_PropertyDefinitionList(PropertyDefinitionList, object, enumerable) {
    let lastReturn;
    for (const PropertyDefinition of PropertyDefinitionList) {
      let _temp = yield* PropertyDefinitionEvaluation_PropertyDefinition(PropertyDefinition, object, enumerable);
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      lastReturn = _temp;
    }
    return lastReturn;
  }

  // PropertyDefinition :
  //   `...` AssignmentExpression
  //   IdentifierReference
  //   PropertyName `:` AssignmentExpression
  function* PropertyDefinitionEvaluation_PropertyDefinition(PropertyDefinition, object, enumerable) {
    switch (PropertyDefinition.type) {
      case 'IdentifierReference':
        return yield* PropertyDefinitionEvaluation_PropertyDefinition_IdentifierReference(PropertyDefinition, object, enumerable);
      case 'PropertyDefinition':
        break;
      case 'MethodDefinition':
      case 'GeneratorMethod':
      case 'AsyncMethod':
      case 'AsyncGeneratorMethod':
        return yield* MethodDefinitionEvaluation(PropertyDefinition, object, enumerable);
      /*c8 ignore next*/default:
        throw new OutOfRange$1('PropertyDefinitionEvaluation_PropertyDefinition', PropertyDefinition);
    }
    // PropertyDefinition :
    //   PropertyName `:` AssignmentExpression
    //   `...` AssignmentExpression
    const {
      PropertyName,
      AssignmentExpression
    } = PropertyDefinition;
    if (!PropertyName) {
      // 1. Let exprValue be the result of evaluating AssignmentExpression.
      const exprValue = yield* Evaluate(AssignmentExpression);
      // 2. Let fromValue be ? GetValue(exprValue).
      let _temp2 = GetValue(exprValue);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      const fromValue = _temp2;
      // 3. Let excludedNames be a new empty List.
      const excludedNames = [];
      // 4. Return ? CopyDataProperties(object, fromValue, excludedNames).
      return CopyDataProperties(object, fromValue, excludedNames);
    }
    // 1. Let propKey be the result of evaluating PropertyName.
    let propKey = yield* Evaluate_PropertyName(PropertyName);
    // 2. ReturnIfAbrupt(propKey).
    /* c8 ignore if */
    if (propKey instanceof AbruptCompletion) {
      return propKey;
    }
    /* c8 ignore if */
    if (propKey instanceof Completion) {
      propKey = propKey.Value;
    }
    // 3. If this PropertyDefinition is contained within a Script which is being evaluated for JSON.parse, then
    let isProtoSetter;
    if (exports.surroundingAgent.runningExecutionContext?.HostDefined?.[kInternal]?.json) {
      isProtoSetter = false;
    } else if (!IsComputedPropertyKey(PropertyName) && propKey.stringValue() === '__proto__') {
      // 3. Else, If _propKey_ is the String value *"__proto__"* and if IsComputedPropertyKey(|PropertyName|) is *false*,
      // a. Let isProtoSetter be true.
      isProtoSetter = true;
    } else {
      // 4. Else,
      // a. Let isProtoSetter be false.
      isProtoSetter = false;
    }
    let propValue;
    // 5. If IsAnonymousFunctionDefinition(AssignmentExpression) is true and isProtoSetter is false, then
    if (IsAnonymousFunctionDefinition(AssignmentExpression) && !isProtoSetter) {
      // a. Let propValue be NamedEvaluation of AssignmentExpression with argument propKey.
      propValue = yield* NamedEvaluation(AssignmentExpression, propKey);
    } else {
      // 6. Else,
      // a. Let exprValueRef be the result of evaluating AssignmentExpression.
      const exprValueRef = yield* Evaluate(AssignmentExpression);
      // b. Let propValue be ? GetValue(exprValueRef).
      let _temp3 = GetValue(exprValueRef);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      propValue = _temp3;
    }
    // 7. If isProtoSetter is true, then
    if (isProtoSetter) {
      // a. If Type(propValue) is either Object or Null, then
      if (propValue instanceof ObjectValue || propValue instanceof NullValue) {
        // i. Return object.[[SetPrototypeOf]](propValue).
        return object.SetPrototypeOf(propValue);
      }
      // b. Return NormalCompletion(empty).
      return NormalCompletion(undefined);
    }
    // 8. Assert: enumerable is true.
    Assert(enumerable === Value.true, "enumerable === Value.true");
    // 9. Assert: object is an ordinary, extensible object with no non-configurable properties.
    // 10. Return ! CreateDataPropertyOrThrow(object, propKey, propValue).
    let _temp4 = CreateDataPropertyOrThrow(object, propKey, propValue);
    Assert(!(_temp4 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(object, propKey, propValue)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    return _temp4;
  }

  // PropertyDefinition : IdentifierReference
  function* PropertyDefinitionEvaluation_PropertyDefinition_IdentifierReference(IdentifierReference, object, enumerable) {
    // 1. Let propName be StringValue of IdentifierReference.
    const propName = StringValue(IdentifierReference);
    // 2. Let exprValue be the result of evaluating IdentifierReference.
    const exprValue = yield* Evaluate(IdentifierReference);
    // 3. Let propValue be ? GetValue(exprValue).
    let _temp5 = GetValue(exprValue);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const propValue = _temp5;
    // 4. Assert: enumerable is true.
    Assert(enumerable === Value.true, "enumerable === Value.true");
    // 5. Assert: object is an ordinary, extensible object with no non-configurable properties.
    // 6. Return ! CreateDataPropertyOrThrow(object, propName, propValue).
    let _temp6 = CreateDataPropertyOrThrow(object, propName, propValue);
    Assert(!(_temp6 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(object, propName, propValue)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    return _temp6;
  }

  // @ts-nocheck


  /** https://tc39.es/ecma262/#sec-function-definitions-runtime-semantics-evaluation */
  //   FunctionExpression :
  //     `function` `(` FormalParameters `)` `{` FunctionBody `}`
  //     `function` BindingIdentifier `(` FormalParameters `)` `{` FunctionBody `}`
  function Evaluate_FunctionExpression(FunctionExpression) {
    // 1. Return InstantiateOrdinaryFunctionExpression of FunctionExpression.
    return InstantiateOrdinaryFunctionExpression(FunctionExpression);
  }

  /** https://tc39.es/ecma262/#sec-function-definitions-runtime-semantics-namedevaluation */
  //   FunctionExpression :
  //     `function` `(` FormalParameters `)` `{` FunctionBody `}`
  function NamedEvaluation_FunctionExpression(FunctionExpression, name) {
    return InstantiateOrdinaryFunctionExpression(FunctionExpression, name);
  }

  /** https://tc39.es/ecma262/#sec-generator-function-definitions-runtime-semantics-namedevaluation */
  //   GeneratorExpression :
  //     `function` `*` `(` FormalParameters `)` `{` GeneratorBody `}`
  NamedEvaluation_FunctionExpression.section = 'https://tc39.es/ecma262/#sec-function-definitions-runtime-semantics-namedevaluation';
  function NamedEvaluation_GeneratorExpression(GeneratorExpression, name) {
    return InstantiateGeneratorFunctionExpression(GeneratorExpression, name);
  }

  /** https://tc39.es/ecma262/#sec-async-function-definitions-runtime-semantics-namedevaluation */
  //   AsyncFunctionExpression :
  //     `async` `function` `(` FormalParameters `)` `{` AsyncBody `}`
  NamedEvaluation_GeneratorExpression.section = 'https://tc39.es/ecma262/#sec-generator-function-definitions-runtime-semantics-namedevaluation';
  function NamedEvaluation_AsyncFunctionExpression(AsyncFunctionExpression, name) {
    return InstantiateAsyncFunctionExpression(AsyncFunctionExpression, name);
  }

  /** https://tc39.es/ecma262/#sec-asyncgenerator-definitions-namedevaluation */
  //   AsyncGeneratorExpression :
  //     `async` `function` `*` `(` FormalParameters `)` `{` AsyncGeneratorBody `}`
  NamedEvaluation_AsyncFunctionExpression.section = 'https://tc39.es/ecma262/#sec-async-function-definitions-runtime-semantics-namedevaluation';
  function NamedEvaluation_AsyncGeneratorExpression(AsyncGeneratorExpression, name) {
    return InstantiateAsyncGeneratorFunctionExpression(AsyncGeneratorExpression, name);
  }

  /** https://tc39.es/ecma262/#sec-arrow-function-definitions-runtime-semantics-namedevaluation */
  //   ArrowFunction :
  //     ArrowParameters `=>` ConciseBody
  NamedEvaluation_AsyncGeneratorExpression.section = 'https://tc39.es/ecma262/#sec-asyncgenerator-definitions-namedevaluation';
  function NamedEvaluation_ArrowFunction(ArrowFunction, name) {
    return InstantiateArrowFunctionExpression(ArrowFunction, name);
  }

  /** https://tc39.es/ecma262/#sec-arrow-function-definitions-runtime-semantics-namedevaluation */
  //   AsyncArrowFunction :
  //     ArrowParameters `=>` AsyncConciseBody
  NamedEvaluation_ArrowFunction.section = 'https://tc39.es/ecma262/#sec-arrow-function-definitions-runtime-semantics-namedevaluation';
  function NamedEvaluation_AsyncArrowFunction(AsyncArrowFunction, name) {
    return InstantiateAsyncArrowFunctionExpression(AsyncArrowFunction, name);
  }

  /** https://tc39.es/ecma262/#sec-class-definitions-runtime-semantics-namedevaluation */
  //   ClassExpression : `class` ClassTail
  NamedEvaluation_AsyncArrowFunction.section = 'https://tc39.es/ecma262/#sec-arrow-function-definitions-runtime-semantics-namedevaluation';
  function* NamedEvaluation_ClassExpression(ClassExpression, name) {
    const {
      ClassTail
    } = ClassExpression;
    // 1. Let value be the result of ClassDefinitionEvaluation of ClassTail with arguments undefined and name.
    let value = yield* ClassDefinitionEvaluation(ClassTail, Value.undefined, name);
    // 2. ReturnIfAbrupt(value).
    /* c8 ignore if */
    if (value instanceof AbruptCompletion) {
      return value;
    }
    /* c8 ignore if */
    if (value instanceof Completion) {
      value = value.Value;
    }
    // 3. Set value.[[SourceText]] to the source text matched by ClassExpression.
    value.SourceText = sourceTextMatchedBy(ClassExpression);
    // 4. Return value.
    return value;
  }
  NamedEvaluation_ClassExpression.section = 'https://tc39.es/ecma262/#sec-class-definitions-runtime-semantics-namedevaluation';
  function* NamedEvaluation(F, name) {
    switch (F.type) {
      case 'FunctionExpression':
        return NamedEvaluation_FunctionExpression(F, name);
      case 'GeneratorExpression':
        return NamedEvaluation_GeneratorExpression(F, name);
      case 'AsyncFunctionExpression':
        return NamedEvaluation_AsyncFunctionExpression(F, name);
      case 'AsyncGeneratorExpression':
        return NamedEvaluation_AsyncGeneratorExpression(F, name);
      case 'ArrowFunction':
        return NamedEvaluation_ArrowFunction(F, name);
      case 'AsyncArrowFunction':
        return NamedEvaluation_AsyncArrowFunction(F, name);
      case 'ClassExpression':
        return yield* NamedEvaluation_ClassExpression(F, name);
      case 'ParenthesizedExpression':
        return yield* NamedEvaluation(F.Expression, name);
      /*c8 ignore next*/default:
        throw new OutOfRange$1('NamedEvaluation', F);
    }
  }

  /** https://tc39.es/ecma262/#sec-try-statement-runtime-semantics-evaluation */
  //   TryStatement :
  //     `try` Block Catch
  //     `try` Block Finally
  //     `try` Block Catch Finally
  function Evaluate_TryStatement(TryStatement) {
    switch (true) {
      case !!TryStatement.Catch && !TryStatement.Finally:
        return Evaluate_TryStatement_BlockCatch(TryStatement);
      case !TryStatement.Catch && !!TryStatement.Finally:
        return Evaluate_TryStatement_BlockFinally(TryStatement);
      case !!TryStatement.Catch && !!TryStatement.Finally:
        return Evaluate_TryStatement_BlockCatchFinally(TryStatement);
      /*c8 ignore next*/default:
        throw new OutOfRange$1('Evaluate_TryStatement', TryStatement);
    }
  }

  // TryStatement : `try` Block Catch
  function* Evaluate_TryStatement_BlockCatch({
    Block,
    Catch
  }) {
    // 1. Let B be the result of evaluating Block.
    const B = EnsureCompletion(yield* Evaluate(Block));
    // 2. If B.[[Type]] is throw, let C be CatchClauseEvaluation of Catch with argument B.[[Value]].
    let C;
    if (B.Type === 'throw') {
      C = EnsureCompletion(yield* CatchClauseEvaluation(Catch, B.Value));
    } else {
      // 3. Else, let C be B.
      C = B;
    }
    // 3. Return Completion(UpdateEmpty(C, undefined)).
    return Completion(UpdateEmpty(C, Value.undefined));
  }

  // TryStatement : `try` Block Finally
  function* Evaluate_TryStatement_BlockFinally({
    Block,
    Finally
  }) {
    // 1. Let B be the result of evaluating Block.
    const B = EnsureCompletion(yield* Evaluate(Block));
    // 1. Let F be the result of evaluating Finally.
    let F = EnsureCompletion(yield* Evaluate(Finally));
    // 1. If F.[[Type]] is normal, set F to B.
    if (F.Type === 'normal') {
      F = B;
    }
    // 1. Return Completion(UpdateEmpty(F, undefined)).
    return Completion(UpdateEmpty(F, Value.undefined));
  }

  // TryStatement : `try` Block Catch Finally
  function* Evaluate_TryStatement_BlockCatchFinally({
    Block,
    Catch,
    Finally
  }) {
    // 1. Let B be the result of evaluating Block.
    const B = EnsureCompletion(yield* Evaluate(Block));
    // 2. If B.[[Type]] is throw, let C be CatchClauseEvaluation of Catch with argument B.[[Value]].
    let C;
    if (B.Type === 'throw') {
      C = EnsureCompletion(yield* CatchClauseEvaluation(Catch, B.Value));
    } else {
      // 3. Else, let C be B.
      C = B;
    }
    // 4. Let F be the result of evaluating Finally.
    let F = EnsureCompletion(yield* Evaluate(Finally));
    // 5. If F.[[Type]] is normal, set F to C.
    if (F.Type === 'normal') {
      F = C;
    }
    // 6. Return Completion(UpdateEmpty(F, undefined)).
    return Completion(UpdateEmpty(F, Value.undefined));
  }

  /** https://tc39.es/ecma262/#sec-runtime-semantics-catchclauseevaluation */
  //  Catch :
  //    `catch` Block
  //    `catch` `(` CatchParameter `)` Block
  function* CatchClauseEvaluation({
    CatchParameter,
    Block
  }, thrownValue) {
    if (!CatchParameter) {
      // 1. Return the result of evaluating Block.
      return yield* Evaluate(Block);
    }
    // 1. Let oldEnv be the running execution context's LexicalEnvironment.
    const oldEnv = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 2. Let catchEnv be NewDeclarativeEnvironment(oldEnv).
    const catchEnv = new DeclarativeEnvironmentRecord(oldEnv);
    // 3. For each element argName of the BoundNames of CatchParameter, do
    for (const argName of BoundNames(CatchParameter)) {
      let _temp = catchEnv.CreateMutableBinding(argName, Value.false);
      Assert(!(_temp instanceof AbruptCompletion), "catchEnv.CreateMutableBinding(argName, Value.false)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
    }
    // 4. Set the running execution context's LexicalEnvironment to catchEnv.
    exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = catchEnv;
    // 5. Let status be BindingInitialization of CatchParameter with arguments thrownValue and catchEnv.
    const status = yield* BindingInitialization(CatchParameter, thrownValue, catchEnv);
    // 6. If status is an abrupt completion, then
    if (status instanceof AbruptCompletion) {
      // a. Set the running execution context's LexicalEnvironment to oldEnv.
      exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = oldEnv;
      // b. Return Completion(status).
      return Completion(status);
    }
    // 7. Let B be the result of evaluating Block.
    const B = EnsureCompletion(yield* Evaluate(Block));
    // 8. Set the running execution context's LexicalEnvironment to oldEnv.
    exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = oldEnv;
    // 9. Return Completion(B).
    return Completion(B);
  }
  CatchClauseEvaluation.section = 'https://tc39.es/ecma262/#sec-runtime-semantics-catchclauseevaluation';

  /** https://tc39.es/ecma262/#sec-blockdeclarationinstantiation */
  function BlockDeclarationInstantiation(code, env) {
    // 1. Assert: env is a declarative Environment Record.
    Assert(env instanceof DeclarativeEnvironmentRecord, "env instanceof DeclarativeEnvironmentRecord");
    // 2. Let declarations be the LexicallyScopedDeclarations of code.
    const declarations = LexicallyScopedDeclarations(code);
    // 3. Let privateEnv be the running execution context's PrivateEnvironment.
    const privateEnv = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
    // 4. For each element d in declarations, do
    for (const d of declarations) {
      // a. For each element dn of the BoundNames of d, do
      for (const dn of BoundNames(d)) {
        // i. If IsConstantDeclaration of d is true, then
        if (IsConstantDeclaration(d)) {
          let _temp = env.CreateImmutableBinding(dn, Value.true);
          Assert(!(_temp instanceof AbruptCompletion), "env.CreateImmutableBinding(dn, Value.true)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp instanceof Completion) {
            _temp = _temp.Value;
          }
        } else {
          let _temp2 = env.CreateMutableBinding(dn, false);
          Assert(!(_temp2 instanceof AbruptCompletion), "env.CreateMutableBinding(dn, false)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp2 instanceof Completion) {
            _temp2 = _temp2.Value;
          }
        }
        // b. If d is a FunctionDeclaration, a GeneratorDeclaration, an AsyncFunctionDeclaration, or an AsyncGeneratorDeclaration, then
        if (d.type === 'FunctionDeclaration' || d.type === 'GeneratorDeclaration' || d.type === 'AsyncFunctionDeclaration' || d.type === 'AsyncGeneratorDeclaration') {
          // i. Let fn be the sole element of the BoundNames of d.
          const fn = BoundNames(d)[0];
          // ii. Let fo be InstantiateFunctionObject of d with argument env.
          const fo = InstantiateFunctionObject(d, env, privateEnv);
          // iii. Perform env.InitializeBinding(fn, fo).
          env.InitializeBinding(fn, fo);
        }
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-block-runtime-semantics-evaluation */
  //  Block :
  //    `{` `}`
  //    `{` StatementList `}`
  function* Evaluate_Block({
    StatementList
  }) {
    if (StatementList.length === 0) {
      // 1. Return NormalCompletion(empty).
      return NormalCompletion(undefined);
    }
    // 1. Let oldEnv be the running execution context's LexicalEnvironment.
    const oldEnv = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 2. Let blockEnv be NewDeclarativeEnvironment(oldEnv).
    const blockEnv = new DeclarativeEnvironmentRecord(oldEnv);
    // 3. Perform BlockDeclarationInstantiation(StatementList, blockEnv).
    BlockDeclarationInstantiation(StatementList, blockEnv);
    // 4. Set the running execution context's LexicalEnvironment to blockEnv.
    exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = blockEnv;
    // 5. Let blockValue be the result of evaluating StatementList.
    const blockValue = yield* Evaluate_StatementList(StatementList);
    // 6. Set the running execution context's LexicalEnvironment to oldEnv.
    exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = oldEnv;
    // 7. Return blockValue.
    return blockValue;
  }

  /** https://tc39.es/ecma262/#sec-runtime-semantics-arrayaccumulation */
  //  Elision :
  //    `,`
  //    Elision `,`
  //  ElementList :
  //    Elision? AssignmentExpression
  //    Elision? SpreadElement
  //    ElementList `,` Elision? AssignmentExpression
  //    ElementList : ElementList `,` Elision SpreadElement
  //  SpreadElement :
  //    `...` AssignmentExpression
  function* ArrayAccumulation(ElementList, array, nextIndex) {
    let postIndex = nextIndex;
    for (const element of ElementList) {
      switch (element.type) {
        case 'Elision':
          postIndex += 1;
          let _temp = Set$1(array, Value('length'), F(postIndex), Value.true);
          /* c8 ignore if */
          if (_temp instanceof AbruptCompletion) {
            return _temp;
          }
          /* c8 ignore if */
          if (_temp instanceof Completion) {
            _temp = _temp.Value;
          }
          break;
        case 'SpreadElement':
          let _temp2 = yield* ArrayAccumulation_SpreadElement(element, array, postIndex);
          /* c8 ignore if */
          if (_temp2 instanceof AbruptCompletion) {
            return _temp2;
          }
          /* c8 ignore if */
          if (_temp2 instanceof Completion) {
            _temp2 = _temp2.Value;
          }
          postIndex = _temp2;
          break;
        default:
          let _temp3 = yield* ArrayAccumulation_AssignmentExpression(element, array, postIndex);
          /* c8 ignore if */
          if (_temp3 instanceof AbruptCompletion) {
            return _temp3;
          }
          /* c8 ignore if */
          if (_temp3 instanceof Completion) {
            _temp3 = _temp3.Value;
          }
          postIndex = _temp3;
          break;
      }
    }
    return postIndex;
  }

  // SpreadElement : `...` AssignmentExpression
  ArrayAccumulation.section = 'https://tc39.es/ecma262/#sec-runtime-semantics-arrayaccumulation';
  function* ArrayAccumulation_SpreadElement({
    AssignmentExpression
  }, array, nextIndex) {
    // 1. Let spreadRef be the result of evaluating AssignmentExpression.
    const spreadRef = yield* Evaluate(AssignmentExpression);
    // 2. Let spreadObj be ? GetValue(spreadRef).
    let _temp4 = GetValue(spreadRef);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const spreadObj = _temp4;
    // 3. Let iteratorRecord be ? GetIterator(spreadObj).
    let _temp5 = GetIterator(spreadObj);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const iteratorRecord = _temp5;
    // 4. Repeat,
    while (true) {
      let _temp6 = IteratorStep(iteratorRecord);
      /* c8 ignore if */
      if (_temp6 instanceof AbruptCompletion) {
        return _temp6;
      }
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
      // a. Let next be ? IteratorStep(iteratorRecord).
      const next = _temp6;
      // b. If next is false, return nextIndex.
      if (next === Value.false) {
        return nextIndex;
      }
      // c. Let nextValue be ? IteratorValue(next).
      let _temp7 = IteratorValue(next);
      /* c8 ignore if */
      if (_temp7 instanceof AbruptCompletion) {
        return _temp7;
      }
      /* c8 ignore if */
      if (_temp7 instanceof Completion) {
        _temp7 = _temp7.Value;
      }
      const nextValue = _temp7;
      // d. Perform ! CreateDataPropertyOrThrow(array, ! ToString(𝔽(nextIndex)), nextValue).
      let _temp9 = ToString(F(nextIndex));
      Assert(!(_temp9 instanceof AbruptCompletion), "ToString(F(nextIndex))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp9 instanceof Completion) {
        _temp9 = _temp9.Value;
      }
      let _temp8 = CreateDataPropertyOrThrow(array, _temp9, nextValue);
      Assert(!(_temp8 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(array, X(ToString(F(nextIndex))), nextValue)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp8 instanceof Completion) {
        _temp8 = _temp8.Value;
      }
      // e. Set nextIndex to nextIndex + 1.
      nextIndex += 1;
    }
  }
  function* ArrayAccumulation_AssignmentExpression(AssignmentExpression, array, nextIndex) {
    // 2. Let initResult be the result of evaluating AssignmentExpression.
    const initResult = yield* Evaluate(AssignmentExpression);
    // 3. Let initValue be ? GetValue(initResult).
    let _temp10 = GetValue(initResult);
    /* c8 ignore if */
    if (_temp10 instanceof AbruptCompletion) {
      return _temp10;
    }
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    const initValue = _temp10;
    // 4. Let created be ! CreateDataPropertyOrThrow(array, ! ToString(𝔽(nextIndex)), initValue).
    let _temp12 = ToString(F(nextIndex));
    Assert(!(_temp12 instanceof AbruptCompletion), "ToString(F(nextIndex))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp12 instanceof Completion) {
      _temp12 = _temp12.Value;
    }
    let _temp11 = CreateDataPropertyOrThrow(array, _temp12, initValue);
    Assert(!(_temp11 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(array, X(ToString(F(nextIndex))), initValue)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    // 5. Return nextIndex + 1.
    return nextIndex + 1;
  }

  /** https://tc39.es/ecma262/#sec-array-initializer-runtime-semantics-evaluation */
  //  ArrayLiteral :
  //    `[` Elision `]`
  //    `[` ElementList `]`
  //    `[` ElementList `,` Elision `]`
  function* Evaluate_ArrayLiteral({
    ElementList
  }) {
    let _temp13 = ArrayCreate(0);
    Assert(!(_temp13 instanceof AbruptCompletion), "ArrayCreate(0)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp13 instanceof Completion) {
      _temp13 = _temp13.Value;
    }
    // 1. Let array be ! ArrayCreate(0).
    const array = _temp13;
    // 2. Let len be the result of performing ArrayAccumulation for ElementList with arguments array and 0.
    let len = yield* ArrayAccumulation(ElementList, array, 0);
    // 3. ReturnIfAbrupt(len).
    /* c8 ignore if */
    if (len instanceof AbruptCompletion) {
      return len;
    }
    /* c8 ignore if */
    if (len instanceof Completion) {
      len = len.Value;
    }
    // 4. Return array.
    return array;
  }

  /** https://tc39.es/ecma262/#sec-delete-operator-runtime-semantics-evaluation */
  //   UnaryExpression : `delete` UnaryExpression
  function* Evaluate_UnaryExpression_Delete({
    UnaryExpression
  }) {
    let _temp = yield* Evaluate(UnaryExpression);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 1. Let ref be the result of evaluating UnaryExpression.
    let ref = _temp;
    // 2. ReturnIfAbrupt(ref).
    /* c8 ignore if */
    if (ref instanceof AbruptCompletion) {
      return ref;
    }
    /* c8 ignore if */
    if (ref instanceof Completion) {
      ref = ref.Value;
    }
    // 3. If ref is not a Reference Record, return true.
    if (!(ref instanceof ReferenceRecord)) {
      return Value.true;
    }
    // 4. If IsUnresolvableReference(ref) is true, then
    if (IsUnresolvableReference(ref) === Value.true) {
      // a. Assert: ref.[[Strict]] is false.
      Assert(ref.Strict === Value.false, "ref.Strict === Value.false");
      // b. Return true.
      return Value.true;
    }
    // 5. If IsPropertyReference(ref) is true, then
    if (IsPropertyReference(ref) === Value.true) {
      // a. If IsSuperReference(ref) is true, throw a ReferenceError exception.
      if (IsSuperReference(ref) === Value.true) {
        return exports.surroundingAgent.Throw('ReferenceError', 'CannotDeleteSuper');
      }
      // b. Let baseObj be ! ToObject(ref.[[Base]]).
      let _temp2 = ToObject(ref.Base);
      Assert(!(_temp2 instanceof AbruptCompletion), "ToObject(ref.Base)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      const baseObj = _temp2;
      // c. Let deleteStatus be ? baseObj.[[Delete]](ref.[[ReferencedName]]).
      let _temp3 = baseObj.Delete(ref.ReferencedName);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      const deleteStatus = _temp3;
      // d. If deleteStatus is false and ref.[[Strict]] is true, throw a TypeError exception.
      if (deleteStatus === Value.false && ref.Strict === Value.true) {
        return exports.surroundingAgent.Throw('TypeError', 'StrictModeDelete', ref.ReferencedName);
      }
      // e. Return deleteStatus.
      return deleteStatus;
    } else {
      // 6. Else,
      // a. Let base be ref.[[Base]].
      const base = ref.Base;
      // b. Assert: base is an Environment Record.
      Assert(base instanceof EnvironmentRecord, "base instanceof EnvironmentRecord");
      // c. Return ? bindings.DeleteBinding(GetReferencedName(ref)).
      return base.DeleteBinding(ref.ReferencedName);
    }
  }

  /** https://tc39.es/ecma262/#sec-void-operator-runtime-semantics-evaluation */
  //   UnaryExpression : `void` UnaryExpression
  Evaluate_UnaryExpression_Delete.section = 'https://tc39.es/ecma262/#sec-delete-operator-runtime-semantics-evaluation';
  function* Evaluate_UnaryExpression_Void({
    UnaryExpression
  }) {
    // 1. Let expr be the result of evaluating UnaryExpression.
    const expr = yield* Evaluate(UnaryExpression);
    // 2. Perform ? GetValue(expr).
    let _temp4 = GetValue(expr);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 3. Return undefined.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-typeof-operator-runtime-semantics-evaluation */
  // UnaryExpression : `typeof` UnaryExpression
  Evaluate_UnaryExpression_Void.section = 'https://tc39.es/ecma262/#sec-void-operator-runtime-semantics-evaluation';
  function* Evaluate_UnaryExpression_Typeof({
    UnaryExpression
  }) {
    let _temp5 = yield* Evaluate(UnaryExpression);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    // 1. Let val be the result of evaluating UnaryExpression.
    let val = _temp5;
    // 2. If Type(val) is Reference, then
    if (val instanceof ReferenceRecord) {
      // a. If IsUnresolvableReference(val) is true, return "undefined".
      if (IsUnresolvableReference(val) === Value.true) {
        return Value('undefined');
      }
    }
    // 3. Set val to ? GetValue(val).
    let _temp6 = GetValue(val);
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    val = _temp6;
    // 4. Return a String according to Table 37.
    if (val instanceof UndefinedValue) {
      return Value('undefined');
    } else if (val instanceof NullValue) {
      return Value('object');
    } else if (val instanceof BooleanValue) {
      return Value('boolean');
    } else if (val instanceof NumberValue) {
      return Value('number');
    } else if (val instanceof JSStringValue) {
      return Value('string');
    } else if (val instanceof BigIntValue) {
      return Value('bigint');
    } else if (val instanceof SymbolValue) {
      return Value('symbol');
    } else if (val instanceof ObjectValue) {
      if (IsCallable(val) === Value.true) {
        return Value('function');
      }
      return Value('object');
    }
    throw new OutOfRange$1('Evaluate_UnaryExpression_Typeof', val);
  }

  /** https://tc39.es/ecma262/#sec-unary-plus-operator-runtime-semantics-evaluation */
  //   UnaryExpression : `+` UnaryExpression
  Evaluate_UnaryExpression_Typeof.section = 'https://tc39.es/ecma262/#sec-typeof-operator-runtime-semantics-evaluation';
  function* Evaluate_UnaryExpression_Plus({
    UnaryExpression
  }) {
    // 1. Let expr be the result of evaluating UnaryExpression.
    const expr = yield* Evaluate(UnaryExpression);
    // 2. Return ? ToNumber(? GetValue(expr)).
    let _temp7 = GetValue(expr);
    /* c8 ignore if */
    if (_temp7 instanceof AbruptCompletion) {
      return _temp7;
    }
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    return ToNumber(_temp7);
  }

  /** https://tc39.es/ecma262/#sec-unary-minus-operator-runtime-semantics-evaluation */
  //   UnaryExpression : `-` UnaryExpression
  Evaluate_UnaryExpression_Plus.section = 'https://tc39.es/ecma262/#sec-unary-plus-operator-runtime-semantics-evaluation';
  function* Evaluate_UnaryExpression_Minus({
    UnaryExpression
  }) {
    // 1. Let expr be the result of evaluating UnaryExpression.
    const expr = yield* Evaluate(UnaryExpression);
    // 2. Let oldValue be ? ToNumeric(? GetValue(expr)).
    let _temp10 = GetValue(expr);
    /* c8 ignore if */
    if (_temp10 instanceof AbruptCompletion) {
      return _temp10;
    }
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    let _temp8 = ToNumeric(_temp10);
    /* c8 ignore if */
    if (_temp8 instanceof AbruptCompletion) {
      return _temp8;
    }
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    const oldValue = _temp8;
    // 3. Let T be Type(oldValue).
    const T = TypeForMethod(oldValue);
    // 4. Return ! T::unaryMinus(oldValue).
    let _temp9 = T.unaryMinus(oldValue);
    Assert(!(_temp9 instanceof AbruptCompletion), "T.unaryMinus(oldValue)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    return _temp9;
  }

  /** https://tc39.es/ecma262/#sec-bitwise-not-operator-runtime-semantics-evaluation */
  //   UnaryExpression : `~` UnaryExpression
  Evaluate_UnaryExpression_Minus.section = 'https://tc39.es/ecma262/#sec-unary-minus-operator-runtime-semantics-evaluation';
  function* Evaluate_UnaryExpression_Tilde({
    UnaryExpression
  }) {
    // 1. Let expr be the result of evaluating UnaryExpression.
    const expr = yield* Evaluate(UnaryExpression);
    // 2. Let oldValue be ? ToNumeric(? GetValue(expr)).
    let _temp13 = GetValue(expr);
    /* c8 ignore if */
    if (_temp13 instanceof AbruptCompletion) {
      return _temp13;
    }
    /* c8 ignore if */
    if (_temp13 instanceof Completion) {
      _temp13 = _temp13.Value;
    }
    let _temp11 = ToNumeric(_temp13);
    /* c8 ignore if */
    if (_temp11 instanceof AbruptCompletion) {
      return _temp11;
    }
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    const oldValue = _temp11;
    // 3. Let T be Type(oldValue).
    const T = TypeForMethod(oldValue);
    // 4. Return ! T::bitwiseNOT(oldValue).
    let _temp12 = T.bitwiseNOT(oldValue);
    Assert(!(_temp12 instanceof AbruptCompletion), "T.bitwiseNOT(oldValue)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp12 instanceof Completion) {
      _temp12 = _temp12.Value;
    }
    return _temp12;
  }

  /** https://tc39.es/ecma262/#sec-logical-not-operator-runtime-semantics-evaluation */
  //   UnaryExpression : `!` UnaryExpression
  Evaluate_UnaryExpression_Tilde.section = 'https://tc39.es/ecma262/#sec-bitwise-not-operator-runtime-semantics-evaluation';
  function* Evaluate_UnaryExpression_Bang({
    UnaryExpression
  }) {
    // 1. Let expr be the result of evaluating UnaryExpression.
    const expr = yield* Evaluate(UnaryExpression);
    // 2. Let oldValue be ! ToBoolean(? GetValue(expr)).
    let _temp14 = GetValue(expr);
    /* c8 ignore if */
    if (_temp14 instanceof AbruptCompletion) {
      return _temp14;
    }
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    const oldValue = ToBoolean(_temp14);
    // 3. If oldValue is true, return false.
    if (oldValue === Value.true) {
      return Value.false;
    }
    // 4. Return true.
    return Value.true;
  }

  // UnaryExpression :
  //  `delete` UnaryExpression
  //  `void` UnaryExpression
  //  `typeof` UnaryExpression
  //  `+` UnaryExpression
  //  `-` UnaryExpression
  //  `~` UnaryExpression
  //  `!` UnaryExpression
  Evaluate_UnaryExpression_Bang.section = 'https://tc39.es/ecma262/#sec-logical-not-operator-runtime-semantics-evaluation';
  function* Evaluate_UnaryExpression(UnaryExpression) {
    switch (UnaryExpression.operator) {
      case 'delete':
        return yield* Evaluate_UnaryExpression_Delete(UnaryExpression);
      case 'void':
        return yield* Evaluate_UnaryExpression_Void(UnaryExpression);
      case 'typeof':
        return yield* Evaluate_UnaryExpression_Typeof(UnaryExpression);
      case '+':
        return yield* Evaluate_UnaryExpression_Plus(UnaryExpression);
      case '-':
        return yield* Evaluate_UnaryExpression_Minus(UnaryExpression);
      case '~':
        return yield* Evaluate_UnaryExpression_Tilde(UnaryExpression);
      case '!':
        return yield* Evaluate_UnaryExpression_Bang(UnaryExpression);
      /*c8 ignore next*/default:
        throw new OutOfRange$1('Evaluate_UnaryExpression', UnaryExpression);
    }
  }

  /** https://tc39.es/ecma262/#sec-equality-operators-runtime-semantics-evaluation */
  //   EqualityExpression :
  //     EqualityExpression `==` RelationalExpression
  //     EqualityExpression `!=` RelationalExpression
  //     EqualityExpression `===` RelationalExpression
  //     EqualityExpression `!==` RelationalExpression
  function* Evaluate_EqualityExpression({
    EqualityExpression,
    operator,
    RelationalExpression
  }) {
    // 1. Let lref be the result of evaluating EqualityExpression.
    const lref = yield* Evaluate(EqualityExpression);
    // 2. Let lval be ? GetValue(lref).
    let _temp = GetValue(lref);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const lval = _temp;
    // 3. Let rref be the result of evaluating RelationalExpression.
    const rref = yield* Evaluate(RelationalExpression);
    // 4. Let rval be ? GetValue(rref).
    let _temp2 = GetValue(rref);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const rval = _temp2;
    switch (operator) {
      case '==':
        // 5. Return the result of performing Abstract Equality Comparison rval == lval.
        return AbstractEqualityComparison(rval, lval);
      case '!=':
        {
          // 5. Let r be the result of performing Abstract Equality Comparison rval == lval.
          let r = AbstractEqualityComparison(rval, lval);
          // 6. ReturnIfAbrupt(r).
          /* c8 ignore if */
          if (r instanceof AbruptCompletion) {
            return r;
          }
          /* c8 ignore if */
          if (r instanceof Completion) {
            r = r.Value;
          }
          // 7. If r is true, return false. Otherwise, return true.
          if (r === Value.true) {
            return Value.false;
          } else {
            return Value.true;
          }
        }
      case '===':
        // 5. Return the result of performing Strict Equality Comparison rval === lval.
        return StrictEqualityComparison(rval, lval);
      case '!==':
        {
          let _temp3 = StrictEqualityComparison(rval, lval);
          Assert(!(_temp3 instanceof AbruptCompletion), "StrictEqualityComparison(rval, lval)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp3 instanceof Completion) {
            _temp3 = _temp3.Value;
          }
          // 5. Let r be the result of performing Strict Equality Comparison rval === lval.
          // 6. Assert: r is a normal completion.
          const r = _temp3;
          // 7. If r.[[Value]] is true, return false. Otherwise, return true.
          if (r === Value.true) {
            return Value.false;
          } else {
            return Value.true;
          }
        }
      /*c8 ignore next*/default:
        throw new OutOfRange$1('Evaluate_EqualityExpression', operator);
    }
  }

  /** https://tc39.es/ecma262/#sec-binary-logical-operators-runtime-semantics-evaluation */
  //   LogicalANDExpression :
  //     LogicalANDExpression `&&` BitwiseORExpression
  function* Evaluate_LogicalANDExpression({
    LogicalANDExpression,
    BitwiseORExpression
  }) {
    // 1. Let lref be the result of evaluating LogicalANDExpression.
    const lref = yield* Evaluate(LogicalANDExpression);
    // 2. Let lval be ? GetValue(lref).
    let _temp = GetValue(lref);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const lval = _temp;
    // 3. Let lbool be ! ToBoolean(lval).
    let _temp2 = ToBoolean(lval);
    Assert(!(_temp2 instanceof AbruptCompletion), "ToBoolean(lval)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const lbool = _temp2;
    // 4. If lbool is false, return lval.
    if (lbool === Value.false) {
      return lval;
    }
    // 5. Let rref be the result of evaluating BitwiseORExpression.
    const rref = yield* Evaluate(BitwiseORExpression);
    // 6. Return ? GetValue(rref).
    return GetValue(rref);
  }

  /** https://tc39.es/ecma262/#sec-binary-logical-operators-runtime-semantics-evaluation */
  //   LogicalORExpression :
  //     LogicalORExpression `||` LogicalANDExpression
  function* Evaluate_LogicalORExpression({
    LogicalORExpression,
    LogicalANDExpression
  }) {
    // 1. Let lref be the result of evaluating LogicalORExpression.
    const lref = yield* Evaluate(LogicalORExpression);
    // 2. Let lval be ? GetValue(lref).
    let _temp = GetValue(lref);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const lval = _temp;
    // 3. Let lbool be ! ToBoolean(lval).
    let _temp2 = ToBoolean(lval);
    Assert(!(_temp2 instanceof AbruptCompletion), "ToBoolean(lval)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const lbool = _temp2;
    // 4. If lbool is false, return lval.
    if (lbool === Value.true) {
      return lval;
    }
    // 5. Let rref be the result of evaluating LogicalANDExpression.
    const rref = yield* Evaluate(LogicalANDExpression);
    // 6. Return ? GetValue(rref).
    return GetValue(rref);
  }

  /** https://tc39.es/ecma262/#sec-evaluatenew */
  function* EvaluateNew(constructExpr, args) {
    // 1. Assert: constructExpr is either a NewExpression or a MemberExpression.
    // 2. Assert: arguments is either empty or an Arguments.
    Assert(args === undefined || Array.isArray(args), "args === undefined || Array.isArray(args)");
    // 3. Let ref be the result of evaluating constructExpr.
    const ref = yield* Evaluate(constructExpr);
    // 4. Let constructor be ? GetValue(ref).
    let _temp = GetValue(ref);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const constructor = _temp;
    let argList;
    // 5. If arguments is empty, let argList be a new empty List.
    if (args === undefined) {
      argList = [];
    } else {
      let _temp2 = yield* ArgumentListEvaluation(args);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      // 6. Else,
      // a. Let argList be ? ArgumentListEvaluation of arguments.
      argList = _temp2;
    }
    // 7. If IsConstructor(constructor) is false, throw a TypeError exception.
    if (IsConstructor(constructor) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAConstructor', constructor);
    }
    // 8. Return ? Construct(constructor, argList).
    return Construct(constructor, argList);
  }

  /** https://tc39.es/ecma262/#sec-new-operator-runtime-semantics-evaluation */
  //   NewExpression :
  //     `new` NewExpression
  //     `new` MemberExpression Arguments
  EvaluateNew.section = 'https://tc39.es/ecma262/#sec-evaluatenew';
  function* Evaluate_NewExpression({
    MemberExpression,
    Arguments
  }) {
    if (!Arguments) {
      // 1. Return ? EvaluateNew(NewExpression, empty).
      return yield* EvaluateNew(MemberExpression, undefined);
    } else {
      // 1. Return ? EvaluateNew(MemberExpression, Arguments).
      return yield* EvaluateNew(MemberExpression, Arguments);
    }
  }

  /** https://tc39.es/ecma262/#sec-left-shift-operator-runtime-semantics-evaluation */
  //  ShiftExpression :
  //    ShiftExpression `<<` AdditiveExpression
  /** https://tc39.es/ecma262/#sec-signed-right-shift-operator-runtime-semantics-evaluation */
  //  ShiftExpression :
  //    ShiftExpression `>>` AdditiveExpression
  /** https://tc39.es/ecma262/#sec-unsigned-right-shift-operator-runtime-semantics-evaluation */
  //  ShiftExpression :
  //    ShiftExpression `>>>` AdditiveExpression
  function* Evaluate_ShiftExpression({
    ShiftExpression,
    operator,
    AdditiveExpression
  }) {
    return yield* EvaluateStringOrNumericBinaryExpression(ShiftExpression, operator, AdditiveExpression);
  }

  /** https://tc39.es/ecma262/#sec-super-keyword-runtime-semantics-evaluation */
  // SuperCall : `super` Arguments
  function* Evaluate_SuperCall({
    Arguments
  }) {
    // 1. Let newTarget be GetNewTarget().
    const newTarget = GetNewTarget();
    // 2. Assert: Type(newTarget) is Object.
    Assert(newTarget instanceof ObjectValue, "newTarget instanceof ObjectValue");
    // 3. Let func be ! GetSuperConstructor().
    let _temp = GetSuperConstructor();
    Assert(!(_temp instanceof AbruptCompletion), "GetSuperConstructor()" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const func = _temp;
    // 4. Let argList be ? ArgumentListEvaluation of Arguments.
    let _temp2 = yield* ArgumentListEvaluation(Arguments);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const argList = _temp2;
    // 5. If IsConstructor(func) is false, throw a TypeError exception.
    if (IsConstructor(func) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAConstructor', func);
    }
    // 6. Let result be ? Construct(func, argList, newTarget).
    let _temp3 = Construct(func, argList, newTarget);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const result = _temp3;
    // 7. Let thisER be GetThisEnvironment().
    const thisER = GetThisEnvironment();
    // 8. Perform ? thisER.BindThisValue(result).
    let _temp4 = thisER.BindThisValue(result);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 9. Let F be thisER.[[FunctionObject]].
    const F = thisER.FunctionObject;
    // 10. Assert: F is an ECMAScript function object.
    Assert(isECMAScriptFunctionObject(F), "isECMAScriptFunctionObject(F)");
    // 11. Perform ? InitializeInstanceElements(result, F).
    let _temp5 = InitializeInstanceElements(result, F);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    // 12. Return result.
    return result;
  }

  /** https://tc39.es/ecma262/#sec-getsuperconstructor */
  function GetSuperConstructor() {
    // 1. Let envRec be GetThisEnvironment().
    const envRec = GetThisEnvironment();
    // 2. Assert: envRec is a function Environment Record.
    Assert(envRec instanceof FunctionEnvironmentRecord, "envRec instanceof FunctionEnvironmentRecord");
    // 3. Let activeFunction be envRec.[[FunctionObject]].
    const activeFunction = envRec.FunctionObject;
    // 4. Assert: activeFunction is an ECMAScript function object.
    Assert(isECMAScriptFunctionObject(activeFunction), "isECMAScriptFunctionObject(activeFunction)");
    // 5. Let superConstructor be ! activeFunction.[[GetPrototypeOf]]().
    let _temp6 = activeFunction.GetPrototypeOf();
    Assert(!(_temp6 instanceof AbruptCompletion), "activeFunction.GetPrototypeOf()" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const superConstructor = _temp6;
    // 6. Return superConstructor.
    return superConstructor;
  }
  GetSuperConstructor.section = 'https://tc39.es/ecma262/#sec-getsuperconstructor';

  /** https://tc39.es/ecma262/#sec-makesuperpropertyreference */
  function MakeSuperPropertyReference(actualThis, propertyKey, strict) {
    // 1. Let env be GetThisEnvironment().
    const env = GetThisEnvironment();
    // 2. Assert: env.HasSuperBinding() is true.
    Assert(env.HasSuperBinding() === Value.true, "env.HasSuperBinding() === Value.true");
    // 3. Let baseValue be ? env.GetSuperBase().
    let _temp = env.GetSuperBase();
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const baseValue = _temp;
    // 4. Return the Reference Record { [[Base]]: baseValue, [[ReferencedName]]: propertyKey, [[Strict]]: strict, [[ThisValue]]: actualThis }.
    return new ReferenceRecord({
      Base: baseValue,
      ReferencedName: propertyKey,
      Strict: strict ? Value.true : Value.false,
      ThisValue: actualThis
    });
  }

  /** https://tc39.es/ecma262/#sec-super-keyword-runtime-semantics-evaluation */
  //  SuperProperty :
  //    `super` `[` Expression `]`
  //    `super` `.` IdentifierName
  MakeSuperPropertyReference.section = 'https://tc39.es/ecma262/#sec-makesuperpropertyreference';
  function* Evaluate_SuperProperty({
    Expression,
    IdentifierName,
    strict
  }) {
    // 1. Let env be GetThisEnvironment().
    const env = GetThisEnvironment();
    // 2. Let actualThis be ? env.GetThisBinding().
    let _temp2 = env.GetThisBinding();
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const actualThis = _temp2;
    if (Expression) {
      // 3. Let propertyNameReference be the result of evaluating Expression.
      const propertyNameReference = yield* Evaluate(Expression);
      // 4. Let propertyNameReference be the result of evaluating Expression.
      let _temp3 = GetValue(propertyNameReference);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      const propertyNameValue = _temp3;
      // 5. Let propertyNameValue be ? GetValue(propertyNameReference).
      let _temp4 = ToPropertyKey(propertyNameValue);
      /* c8 ignore if */
      if (_temp4 instanceof AbruptCompletion) {
        return _temp4;
      }
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      const propertyKey = _temp4;
      // 6. If the code matched by this SuperProperty is strict mode code, let strict be true; else let strict be false.
      // 7. Return ? MakeSuperPropertyReference(actualThis, propertyKey, strict).
      return MakeSuperPropertyReference(actualThis, propertyKey, strict);
    } else {
      // 3. Let propertyKey be StringValue of IdentifierName.
      const propertyKey = StringValue(IdentifierName);
      // 4. const strict = SuperProperty.strict;
      // 5. Return ? MakeSuperPropertyReference(actualThis, propertyKey, strict).
      return MakeSuperPropertyReference(actualThis, propertyKey, strict);
    }
  }

  /** https://tc39.es/ecma262/#sec-initializeboundname */
  function InitializeBoundName(name, value, environment) {
    // 1. Assert: Type(name) is String.
    Assert(name instanceof JSStringValue, "name instanceof JSStringValue");
    // 2. If environment is not undefined, then
    if (environment !== Value.undefined) {
      // a. Perform environment.InitializeBinding(name, value).
      environment.InitializeBinding(name, value);
      // b. Return NormalCompletion(undefined).
      return NormalCompletion(Value.undefined);
    } else {
      // a. Let lhs be ResolveBinding(name).
      const lhs = ResolveBinding(name, undefined, false);
      // b. Return ? PutValue(lhs, value).
      return PutValue(lhs, value);
    }
  }

  // ObjectBindingPattern :
  //   `{` `}`
  //   `{` BindingPropertyList `}`
  //   `{` BindingRestProperty `}`
  //   `{` BindingPropertyList `,` BindingRestProperty `}`
  function* BindingInitialization_ObjectBindingPattern({
    BindingPropertyList,
    BindingRestProperty
  }, value, environment) {
    let _temp = yield* PropertyBindingInitialization(BindingPropertyList, value, environment);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 1. Perform ? PropertyBindingInitialization for BindingPropertyList using value and environment as the arguments.
    const excludedNames = _temp;
    if (BindingRestProperty) {
      let _temp2 = RestBindingInitialization(BindingRestProperty, value, environment, excludedNames);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
    }
    // 2. Return NormalCompletion(empty).
    return NormalCompletion(undefined);
  }
  function* BindingInitialization(node, value, environment) {
    switch (node.type) {
      case 'ForBinding':
        if (node.BindingIdentifier) {
          return yield* BindingInitialization(node.BindingIdentifier, value, environment);
        }
        return yield* BindingInitialization(node.BindingPattern, value, environment);
      case 'ForDeclaration':
        return yield* BindingInitialization(node.ForBinding, value, environment);
      case 'BindingIdentifier':
        {
          // 1. Let name be StringValue of Identifier.
          const name = StringValue(node);
          // 2. Return ? InitializeBoundName(name, value, environment).
          return InitializeBoundName(name, value, environment);
        }
      case 'ObjectBindingPattern':
        {
          let _temp3 = RequireObjectCoercible(value);
          /* c8 ignore if */
          if (_temp3 instanceof AbruptCompletion) {
            return _temp3;
          }
          /* c8 ignore if */
          if (_temp3 instanceof Completion) {
            _temp3 = _temp3.Value;
          }
          // 2. Return the result of performing BindingInitialization for ObjectBindingPattern using value and environment as arguments.
          return yield* BindingInitialization_ObjectBindingPattern(node, value, environment);
        }
      case 'ArrayBindingPattern':
        {
          let _temp4 = GetIterator(value);
          /* c8 ignore if */
          if (_temp4 instanceof AbruptCompletion) {
            return _temp4;
          }
          /* c8 ignore if */
          if (_temp4 instanceof Completion) {
            _temp4 = _temp4.Value;
          }
          // 1. Let iteratorRecord be ? GetIterator(value).
          const iteratorRecord = _temp4;
          // 2. Let result be IteratorBindingInitialization of ArrayBindingPattern with arguments iteratorRecord and environment.
          const result = yield* IteratorBindingInitialization_ArrayBindingPattern(node, iteratorRecord, environment);
          // 3. If iteratorRecord.[[Done]] is false, return ? IteratorClose(iteratorRecord, result).
          if (iteratorRecord.Done === Value.false) {
            return IteratorClose(iteratorRecord, result);
          }
          // 4. Return result.
          return result;
        }
      /*c8 ignore next*/default:
        throw new OutOfRange$1('BindingInitialization', node);
    }
  }

  /** https://tc39.es/ecma262/#sec-async-function-definitions-runtime-semantics-evaluation */
  //   AsyncFunctionExpression :
  //     `async` `function` `(` FormalParameters `)` `{` AsyncBody `}`
  //     `async` `function` BindingIdentifier `(` FormalParameters `)` `{` AsyncBody `}`
  function Evaluate_AsyncFunctionExpression(AsyncFunctionExpression) {
    // 1. Return InstantiateAsyncFunctionExpression of AsyncFunctionExpression.
    return InstantiateAsyncFunctionExpression(AsyncFunctionExpression);
  }

  /** https://tc39.es/ecma262/#sec-instanceofoperator */
  function InstanceofOperator(V, target) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!(target instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', target);
    }
    // 2. Let instOfHandler be ? GetMethod(target, @@hasInstance).
    let _temp = GetMethod(target, wellKnownSymbols.hasInstance);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const instOfHandler = _temp;
    // 3. If instOfHandler is not undefined, then
    if (instOfHandler !== Value.undefined) {
      let _temp3 = Call(instOfHandler, target, [V]);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      let _temp2 = ToBoolean(_temp3);
      Assert(!(_temp2 instanceof AbruptCompletion), "ToBoolean(Q(Call(instOfHandler, target, [V])))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      // a. Return ! ToBoolean(? Call(instOfHandler, target, « V »)).
      return _temp2;
    }
    // 4. If IsCallable(target) is false, throw a TypeError exception.
    if (IsCallable(target) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', target);
    }
    // 5. Return ? OrdinaryHasInstance(target, V).
    return OrdinaryHasInstance(target, V);
  }

  // RelationalExpression : PrivateIdentifier `in` ShiftExpression
  function* Evaluate_RelationalExpression_PrivateIdentifier({
    PrivateIdentifier,
    ShiftExpression
  }) {
    // 1. Let privateIdentifier be the StringValue of PrivateIdentifier.
    const privateIdentifier = StringValue(PrivateIdentifier);
    // 2. Let rref be the result of evaluating ShiftExpression.
    const rref = yield* Evaluate(ShiftExpression);
    // 3. Let rval be ? GetValue(rref).
    let _temp4 = GetValue(rref);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const rval = _temp4;
    // 4. If Type(rval) is not Object, throw a TypeError exception.
    if (!(rval instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', rval);
    }
    // 5. Let privateEnv be the running execution context's PrivateEnvironment.
    const privateEnv = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
    // 6. Let privateName be ! ResolvePrivateIdentifier(privateEnv, privateIdentifier).
    let _temp5 = ResolvePrivateIdentifier(privateEnv, privateIdentifier);
    Assert(!(_temp5 instanceof AbruptCompletion), "ResolvePrivateIdentifier(privateEnv, privateIdentifier)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const privateName = _temp5;
    // 7. If ! PrivateElementFind(privateName, rval) is not empty, return true.
    let _temp6 = PrivateElementFind(privateName, rval);
    Assert(!(_temp6 instanceof AbruptCompletion), "PrivateElementFind(privateName, rval)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    if (_temp6 !== undefined) {
      return Value.true;
    }
    // 8. Return false.
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-relational-operators-runtime-semantics-evaluation */
  //   RelationalExpression :
  //     RelationalExpression `<` ShiftExpression
  //     RelationalExpression `>` ShiftExpression
  //     RelationalExpression `<=` ShiftExpression
  //     RelationalExpression `>=` ShiftExpression
  //     RelationalExpression `instanceof` ShiftExpression
  //     RelationalExpression `in` ShiftExpression
  //     PrivateIdentifier `in` ShiftExpression
  function* Evaluate_RelationalExpression(expr) {
    if (expr.PrivateIdentifier) {
      return yield* Evaluate_RelationalExpression_PrivateIdentifier(expr);
    }
    const {
      RelationalExpression,
      operator,
      ShiftExpression
    } = expr;

    // 1. Let lref be the result of evaluating RelationalExpression.
    const lref = yield* Evaluate(RelationalExpression);
    // 2. Let lval be ? GetValue(lref).
    let _temp7 = GetValue(lref);
    /* c8 ignore if */
    if (_temp7 instanceof AbruptCompletion) {
      return _temp7;
    }
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    const lval = _temp7;
    // 3. Let rref be the result of evaluating ShiftExpression.
    const rref = yield* Evaluate(ShiftExpression);
    // 4. Let rval be ? GetValue(rref).
    let _temp8 = GetValue(rref);
    /* c8 ignore if */
    if (_temp8 instanceof AbruptCompletion) {
      return _temp8;
    }
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    const rval = _temp8;
    switch (operator) {
      case '<':
        {
          // 5. Let r be the result of performing Abstract Relational Comparison lval < rval.
          let r = AbstractRelationalComparison(lval, rval);
          // 6. ReturnIfAbrupt(r).
          /* c8 ignore if */
          if (r instanceof AbruptCompletion) {
            return r;
          }
          /* c8 ignore if */
          if (r instanceof Completion) {
            r = r.Value;
          }
          // 7. If r is undefined, return false. Otherwise, return r.
          if (r === Value.undefined) {
            return Value.false;
          }
          return r;
        }
      case '>':
        {
          // 5. Let r be the result of performing Abstract Relational Comparison rval < lval with LeftFirst equal to false.
          let r = AbstractRelationalComparison(rval, lval, false);
          // 6. ReturnIfAbrupt(r).
          /* c8 ignore if */
          if (r instanceof AbruptCompletion) {
            return r;
          }
          /* c8 ignore if */
          if (r instanceof Completion) {
            r = r.Value;
          }
          // 7. If r is undefined, return false. Otherwise, return r.
          if (r === Value.undefined) {
            return Value.false;
          }
          return r;
        }
      case '<=':
        {
          // 5. Let r be the result of performing Abstract Relational Comparison rval < lval with LeftFirst equal to false.
          let r = AbstractRelationalComparison(rval, lval, false);
          // 6. ReturnIfAbrupt(r).
          /* c8 ignore if */
          if (r instanceof AbruptCompletion) {
            return r;
          }
          /* c8 ignore if */
          if (r instanceof Completion) {
            r = r.Value;
          }
          // 7. If r is true or undefined, return false. Otherwise, return true.
          if (r === Value.true || r === Value.undefined) {
            return Value.false;
          }
          return Value.true;
        }
      case '>=':
        {
          // 5. Let r be the result of performing Abstract Relational Comparison lval < rval.
          let r = AbstractRelationalComparison(lval, rval);
          // 6. ReturnIfAbrupt(r).
          /* c8 ignore if */
          if (r instanceof AbruptCompletion) {
            return r;
          }
          /* c8 ignore if */
          if (r instanceof Completion) {
            r = r.Value;
          }
          // 7. If r is true or undefined, return false. Otherwise, return true.
          if (r === Value.true || r === Value.undefined) {
            return Value.false;
          }
          return Value.true;
        }
      case 'instanceof':
        // 5. Return ? InstanceofOperator(lval, rval).
        return InstanceofOperator(lval, rval);
      case 'in':
        // 5. Return ? InstanceofOperator(lval, rval).
        if (!(rval instanceof ObjectValue)) {
          return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', rval);
        }
        // 6. Return ? HasProperty(rval, ? ToPropertyKey(lval)).
        return HasProperty(rval, ToPropertyKey(lval));
      /*c8 ignore next*/default:
        throw new OutOfRange$1('Evaluate_RelationalExpression', operator);
    }
  }

  // @ts-nocheck

  /** https://tc39.es/ecma262/#sec-statement-semantics-runtime-semantics-evaluation */
  //   BreakableStatement :
  //     IterationStatement
  //     SwitchStatement
  //
  //   IterationStatement :
  //     (DoStatement)
  //     (WhileStatement)
  function Evaluate_BreakableStatement(BreakableStatement) {
    // 1. Let newLabelSet be a new empty List.
    const newLabelSet = new ValueSet();
    // 2. Return the result of performing LabelledEvaluation of this BreakableStatement with argument newLabelSet.
    return LabelledEvaluation(BreakableStatement, newLabelSet);
  }

  /** https://tc39.es/ecma262/#sec-ecmascript-standard-built-in-objects */
  function assignProps(realmRec, obj, props) {
    for (const item of props) {
      if (item === undefined) {
        continue;
      }
      const [n, v, len, descriptor] = item;
      const name = n instanceof Value ? n : Value(n);
      if (Array.isArray(v)) {
        // Every accessor property described in clauses 18 through 26 and in
        // Annex B.2 has the attributes { [[Enumerable]]: false,
        // [[Configurable]]: true } unless otherwise specified. If only a get
        // accessor function is described, the set accessor function is the
        // default value, undefined. If only a set accessor is described the get
        // accessor is the default value, undefined.
        let [getter = Value.undefined, setter = Value.undefined] = v;
        if (typeof getter === 'function') {
          getter = CreateBuiltinFunction(getter, 0, name, [], realmRec, undefined, Value('get'));
        }
        if (typeof setter === 'function') {
          setter = CreateBuiltinFunction(setter, 1, name, [], realmRec, undefined, Value('set'));
        }
        let _temp = obj.DefineOwnProperty(name, exports.Descriptor({
          Get: getter,
          Set: setter,
          Enumerable: Value.false,
          Configurable: Value.true,
          ...descriptor
        }));
        Assert(!(_temp instanceof AbruptCompletion), "obj.DefineOwnProperty(name, Descriptor({\n        Get: getter,\n        Set: setter,\n        Enumerable: Value.false,\n        Configurable: Value.true,\n        ...descriptor,\n      }))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp instanceof Completion) {
          _temp = _temp.Value;
        }
      } else {
        // Every other data property described in clauses 18 through 26 and in
        // Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]:
        // false, [[Configurable]]: true } unless otherwise specified.
        let value;
        if (typeof v === 'function') {
          Assert(typeof len === 'number', "typeof len === 'number'");
          value = CreateBuiltinFunction(v, len, name, [], realmRec);
        } else {
          value = v;
        }
        obj.properties.set(name, exports.Descriptor({
          Value: value,
          Writable: Value.true,
          Enumerable: Value.false,
          Configurable: Value.true,
          ...descriptor
        }));
      }
    }
  }
  function bootstrapPrototype(realmRec, props, Prototype, stringTag) {
    Assert(Prototype !== undefined, "Prototype !== undefined");
    const proto = OrdinaryObjectCreate(Prototype);
    assignProps(realmRec, proto, props);
    if (stringTag !== undefined) {
      let _temp2 = proto.DefineOwnProperty(wellKnownSymbols.toStringTag, exports.Descriptor({
        Value: Value(stringTag),
        Writable: Value.false,
        Enumerable: Value.false,
        Configurable: Value.true
      }));
      Assert(!(_temp2 instanceof AbruptCompletion), "proto.DefineOwnProperty(wellKnownSymbols.toStringTag, Descriptor({\n      Value: Value(stringTag),\n      Writable: Value.false,\n      Enumerable: Value.false,\n      Configurable: Value.true,\n    }))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
    }
    return proto;
  }
  function bootstrapConstructor(realmRec, Constructor, name, length, Prototype, props = []) {
    const cons = CreateBuiltinFunction(Constructor, length, Value(name), [], realmRec, undefined, undefined, Value.true);
    let _temp3 = cons.DefineOwnProperty(Value('prototype'), exports.Descriptor({
      Value: Prototype,
      Writable: Value.false,
      Enumerable: Value.false,
      Configurable: Value.false
    }));
    Assert(!(_temp3 instanceof AbruptCompletion), "cons.DefineOwnProperty(Value('prototype'), Descriptor({\n    Value: Prototype,\n    Writable: Value.false,\n    Enumerable: Value.false,\n    Configurable: Value.false,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    let _temp4 = Prototype.DefineOwnProperty(Value('constructor'), exports.Descriptor({
      Value: cons,
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.true
    }));
    Assert(!(_temp4 instanceof AbruptCompletion), "Prototype.DefineOwnProperty(Value('constructor'), Descriptor({\n    Value: cons,\n    Writable: Value.true,\n    Enumerable: Value.false,\n    Configurable: Value.true,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    assignProps(realmRec, cons, props);
    return cons;
  }

  /** https://tc39.es/ecma262/#sec-createforiniterator */
  function CreateForInIterator(object) {
    // 1. Assert: Type(object) is Object.
    Assert(object instanceof ObjectValue, "object instanceof ObjectValue");
    // 2. Let iterator be ObjectCreate(%ForInIteratorPrototype%, « [[Object]], [[ObjectWasVisited]], [[VisitedKeys]], [[RemainingKeys]] »).
    const iterator = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%ForInIteratorPrototype%'), ['Object', 'ObjectWasVisited', 'VisitedKeys', 'RemainingKeys']);
    // 3. Set iterator.[[Object]] to object.
    iterator.Object = object;
    // 4. Set iterator.[[ObjectWasVisited]] to false.
    iterator.ObjectWasVisited = Value.false;
    // 5. Set iterator.[[VisitedKeys]] to a new empty List.
    iterator.VisitedKeys = [];
    // 6. Set iterator.[[RemainingKeys]] to a new empty List.
    iterator.RemainingKeys = [];
    // 7. Return iterator.
    return iterator;
  }

  /** https://tc39.es/ecma262/#sec-%foriniteratorprototype%.next */
  function ForInIteratorPrototype_next(args, {
    thisValue
  }) {
    // 1. Let O be this value.
    const O = thisValue;
    // 2. Assert: Type(O) is Object.
    Assert(O instanceof ObjectValue, "O instanceof ObjectValue");
    // 3. Assert: O has all the internal slot sof a For-In Iterator Instance.
    Assert('Object' in O && 'ObjectWasVisited' in O && 'VisitedKeys' in O && 'RemainingKeys in O', "'Object' in O && 'ObjectWasVisited' in O && 'VisitedKeys' in O && 'RemainingKeys in O'");
    // 4. Let object be O.[[Object]].
    let object = O.Object;
    // 5. Let visited be O.[[VisitedKeys]].
    const visited = O.VisitedKeys;
    // 6. Let remaining be O.[[RemainingKeys]].
    const remaining = O.RemainingKeys;
    // 7. Repeat,
    while (true) {
      // a. If O.[[ObjectWasVisited]] is false, then
      if (O.ObjectWasVisited === Value.false) {
        let _temp = object.OwnPropertyKeys();
        /* c8 ignore if */
        if (_temp instanceof AbruptCompletion) {
          return _temp;
        }
        /* c8 ignore if */
        if (_temp instanceof Completion) {
          _temp = _temp.Value;
        }
        // i. Let keys be ? object.[[OwnPropertyKeys]]().
        const keys = _temp;
        // ii. for each key of keys in List order, do
        for (const key of keys) {
          // 1. If Type(key) is String, then
          if (key instanceof JSStringValue) {
            // a. Append key to remaining.
            remaining.push(key);
          }
        }
        // iii. Set O.ObjectWasVisited to true.
        O.ObjectWasVisited = Value.true;
      }
      // b. Repeat, while remaining is not empty,
      while (remaining.length > 0) {
        // i. Remove the first element from remaining and let r be the value of the element.
        const r = remaining.shift();
        // ii. If there does not exist an element v of visisted such that SameValue(r, v) is true, then
        if (!visited.find(v => SameValue(r, v) === Value.true)) {
          let _temp2 = object.GetOwnProperty(r);
          /* c8 ignore if */
          if (_temp2 instanceof AbruptCompletion) {
            return _temp2;
          }
          /* c8 ignore if */
          if (_temp2 instanceof Completion) {
            _temp2 = _temp2.Value;
          }
          // 1. Let desc be ? object.[[GetOwnProperty]](r).
          const desc = _temp2;
          // 2. If desc is not undefined, then,
          if (desc !== Value.undefined) {
            // a. Append r to visited.
            visited.push(r);
            // b. If desc.[[Enumerable]] is true, return CreateIterResultObject(r, false).
            if (desc.Enumerable === Value.true) {
              return CreateIterResultObject(r, Value.false);
            }
          }
        }
      }
      // c. Set object to ? object.[[GetPrototypeOf]]().
      let _temp3 = object.GetPrototypeOf();
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      object = _temp3;
      // d. Set O.Object to object.
      O.Object = object;
      // e. Set O.ObjectWasVisited to false.
      O.ObjectWasVisited = Value.false;
      // f. If object is null, return CreateIterResultObject(undefined, true).
      if (object === Value.null) {
        return CreateIterResultObject(Value.undefined, Value.true);
      }
    }
  }
  ForInIteratorPrototype_next.section = 'https://tc39.es/ecma262/#sec-%foriniteratorprototype%.next';
  function bootstrapForInIteratorPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['next', ForInIteratorPrototype_next, 0]], realmRec.Intrinsics['%IteratorPrototype%']);
    realmRec.Intrinsics['%ForInIteratorPrototype%'] = proto;
  }

  // @ts-nocheck

  /** https://tc39.es/ecma262/#sec-loopcontinues */
  function LoopContinues(completion, labelSet) {
    // 1. If completion.[[Type]] is normal, return true.
    if (completion.Type === 'normal') {
      return Value.true;
    }
    // 2. If completion.[[Type]] is not continue, return false.
    if (completion.Type !== 'continue') {
      return Value.false;
    }
    // 3. If completion.[[Target]] is empty, return true.
    if (completion.Target === undefined) {
      return Value.true;
    }
    // 4. If completion.[[Target]] is an element of labelSet, return true.
    if (labelSet.has(completion.Target)) {
      return Value.true;
    }
    // 5. Return false.
    return Value.false;
  }
  LoopContinues.section = 'https://tc39.es/ecma262/#sec-loopcontinues';
  function LabelledEvaluation(node, labelSet) {
    switch (node.type) {
      case 'DoWhileStatement':
      case 'WhileStatement':
      case 'ForStatement':
      case 'ForInStatement':
      case 'ForOfStatement':
      case 'ForAwaitStatement':
      case 'SwitchStatement':
        return LabelledEvaluation_BreakableStatement(node, labelSet);
      case 'LabelledStatement':
        return LabelledEvaluation_LabelledStatement(node, labelSet);
      /*c8 ignore next*/default:
        throw new OutOfRange$1('LabelledEvaluation', node);
    }
  }

  /** https://tc39.es/ecma262/#sec-labelled-statements-runtime-semantics-labelledevaluation */
  //   LabelledStatement : LabelIdentifier `:` LabelledItem
  function* LabelledEvaluation_LabelledStatement({
    LabelIdentifier,
    LabelledItem
  }, labelSet) {
    // 1. Let label be the StringValue of LabelIdentifier.
    const label = StringValue(LabelIdentifier);
    // 2. Append label as an element of labelSet.
    labelSet.add(label);
    // 3. Let stmtResult be LabelledEvaluation of LabelledItem with argument labelSet.
    let stmtResult = EnsureCompletion(yield* LabelledEvaluation_LabelledItem(LabelledItem, labelSet));
    // 4. If stmtResult.[[Type]] is break and SameValue(stmtResult.[[Target]], label) is true, then
    if (stmtResult.Type === 'break' && SameValue(stmtResult.Target, label) === Value.true) {
      // a. Set stmtResult to NormalCompletion(stmtResult.[[Value]]).
      stmtResult = NormalCompletion(stmtResult.Value);
    }
    // 5. Return Completion(stmtResult).
    return Completion(stmtResult);
  }

  // LabelledItem :
  //   Statement
  //   FunctionDeclaration
  LabelledEvaluation_LabelledStatement.section = 'https://tc39.es/ecma262/#sec-labelled-statements-runtime-semantics-labelledevaluation';
  function LabelledEvaluation_LabelledItem(LabelledItem, labelSet) {
    switch (LabelledItem.type) {
      case 'DoWhileStatement':
      case 'WhileStatement':
      case 'ForStatement':
      case 'ForInStatement':
      case 'ForOfStatement':
      case 'SwitchStatement':
      case 'LabelledStatement':
        return LabelledEvaluation(LabelledItem, labelSet);
      default:
        return Evaluate(LabelledItem);
    }
  }

  /** https://tc39.es/ecma262/#sec-statement-semantics-runtime-semantics-labelledevaluation */
  //  BreakableStatement :
  //    IterationStatement
  //    SwitchStatement
  //
  //  IterationStatement :
  //    (DoWhileStatement)
  //    (WhileStatement)
  function* LabelledEvaluation_BreakableStatement(BreakableStatement, labelSet) {
    switch (BreakableStatement.type) {
      case 'DoWhileStatement':
      case 'WhileStatement':
      case 'ForStatement':
      case 'ForInStatement':
      case 'ForOfStatement':
      case 'ForAwaitStatement':
        {
          // 1. Let stmtResult be LabelledEvaluation of IterationStatement with argument labelSet.
          let stmtResult = EnsureCompletion(yield* LabelledEvaluation_IterationStatement(BreakableStatement, labelSet));
          // 2. If stmtResult.[[Type]] is break, then
          if (stmtResult.Type === 'break') {
            // a. If stmtResult.[[Target]] is empty, then
            if (stmtResult.Target === undefined) {
              // i. If stmtResult.[[Value]] is empty, set stmtResult to NormalCompletion(undefined).
              if (stmtResult.Value === undefined) {
                stmtResult = NormalCompletion(Value.undefined);
              } else {
                // ii. Else, set stmtResult to NormalCompletion(stmtResult.[[Value]]).
                stmtResult = NormalCompletion(stmtResult.Value);
              }
            }
          }
          // 3. Return Completion(stmtResult).
          return Completion(stmtResult);
        }
      case 'SwitchStatement':
        {
          // 1. Let stmtResult be LabelledEvaluation of SwitchStatement.
          let stmtResult = EnsureCompletion(yield* Evaluate_SwitchStatement(BreakableStatement));
          // 2. If stmtResult.[[Type]] is break, then
          if (stmtResult.Type === 'break') {
            // a. If stmtResult.[[Target]] is empty, then
            if (stmtResult.Target === undefined) {
              // i. If stmtResult.[[Value]] is empty, set stmtResult to NormalCompletion(undefined).
              if (stmtResult.Value === undefined) {
                stmtResult = NormalCompletion(Value.undefined);
              } else {
                // ii. Else, set stmtResult to NormalCompletion(stmtResult.[[Value]]).
                stmtResult = NormalCompletion(stmtResult.Value);
              }
            }
          }
          // 3. Return Completion(stmtResult).
          return Completion(stmtResult);
        }
      /*c8 ignore next*/default:
        throw new OutOfRange$1('LabelledEvaluation_BreakableStatement', BreakableStatement);
    }
  }
  LabelledEvaluation_BreakableStatement.section = 'https://tc39.es/ecma262/#sec-statement-semantics-runtime-semantics-labelledevaluation';
  function LabelledEvaluation_IterationStatement(IterationStatement, labelSet) {
    switch (IterationStatement.type) {
      case 'DoWhileStatement':
        return LabelledEvaluation_IterationStatement_DoWhileStatement(IterationStatement, labelSet);
      case 'WhileStatement':
        return LabelledEvaluation_IterationStatement_WhileStatement(IterationStatement, labelSet);
      case 'ForStatement':
        return LabelledEvaluation_BreakableStatement_ForStatement(IterationStatement, labelSet);
      case 'ForInStatement':
        return LabelledEvaluation_IterationStatement_ForInStatement(IterationStatement, labelSet);
      case 'ForOfStatement':
        return LabelledEvaluation_IterationStatement_ForOfStatement(IterationStatement, labelSet);
      case 'ForAwaitStatement':
        return LabelledEvaluation_IterationStatement_ForAwaitStatement(IterationStatement, labelSet);
      /*c8 ignore next*/default:
        throw new OutOfRange$1('LabelledEvaluation_IterationStatement', IterationStatement);
    }
  }

  /** https://tc39.es/ecma262/#sec-do-while-statement-runtime-semantics-labelledevaluation */
  //   IterationStatement :
  //     `do` Statement `while` `(` Expression `)` `;`
  function* LabelledEvaluation_IterationStatement_DoWhileStatement({
    Statement,
    Expression
  }, labelSet) {
    // 1. Let V be undefined.
    let V = Value.undefined;
    // 2. Repeat,
    while (true) {
      // a. Let stmtResult be the result of evaluating Statement.
      const stmtResult = EnsureCompletion(yield* Evaluate(Statement));
      // b. If LoopContinues(stmtResult, labelSet) is false, return Completion(UpdateEmpty(stmtResult, V)).
      if (LoopContinues(stmtResult, labelSet) === Value.false) {
        return Completion(UpdateEmpty(stmtResult, V));
      }
      // c. If stmtResult.[[Value]] is not empty, set V to stmtResult.[[Value]].
      if (stmtResult.Value !== undefined) {
        V = stmtResult.Value;
      }
      // d. Let exprRef be the result of evaluating Expression.
      const exprRef = yield* Evaluate(Expression);
      // e. Let exprValue be ? GetValue(exprRef).
      let _temp = GetValue(exprRef);
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      const exprValue = _temp;
      // f. If ! ToBoolean(exprValue) is false, return NormalCompletion(V).
      let _temp2 = ToBoolean(exprValue);
      Assert(!(_temp2 instanceof AbruptCompletion), "ToBoolean(exprValue)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      if (_temp2 === Value.false) {
        return NormalCompletion(V);
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-while-statement-runtime-semantics-labelledevaluation */
  //   IterationStatement :
  //     `while` `(` Expression `)` Statement
  LabelledEvaluation_IterationStatement_DoWhileStatement.section = 'https://tc39.es/ecma262/#sec-do-while-statement-runtime-semantics-labelledevaluation';
  function* LabelledEvaluation_IterationStatement_WhileStatement({
    Expression,
    Statement
  }, labelSet) {
    // 1. Let V be undefined.
    let V = Value.undefined;
    // 2. Repeat,
    while (true) {
      // a. Let exprRef be the result of evaluating Expression.
      const exprRef = yield* Evaluate(Expression);
      // b. Let exprValue be ? GetValue(exprRef).
      let _temp3 = GetValue(exprRef);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      const exprValue = _temp3;
      // c. If ! ToBoolean(exprValue) is false, return NormalCompletion(V).
      let _temp4 = ToBoolean(exprValue);
      Assert(!(_temp4 instanceof AbruptCompletion), "ToBoolean(exprValue)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      if (_temp4 === Value.false) {
        return NormalCompletion(V);
      }
      // d. Let stmtResult be the result of evaluating Statement.
      const stmtResult = EnsureCompletion(yield* Evaluate(Statement));
      // e. If LoopContinues(stmtResult, labelSet) is false, return Completion(UpdateEmpty(stmtResult, V)).
      if (LoopContinues(stmtResult, labelSet) === Value.false) {
        return Completion(UpdateEmpty(stmtResult, V));
      }
      // f. If stmtResult.[[Value]] is not empty, set V to stmtResult.[[Value]].
      if (stmtResult.Value !== undefined) {
        V = stmtResult.Value;
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-for-statement-runtime-semantics-labelledevaluation */
  //   IterationStatement :
  //     `for` `(` Expression? `;` Expression? `;` Expresssion? `)` Statement
  //     `for` `(` `var` VariableDeclarationList `;` Expression? `;` Expression? `)` Statement
  //     `for` `(` LexicalDeclaration Expression? `;` Expression? `)` Statement
  LabelledEvaluation_IterationStatement_WhileStatement.section = 'https://tc39.es/ecma262/#sec-while-statement-runtime-semantics-labelledevaluation';
  function* LabelledEvaluation_BreakableStatement_ForStatement(ForStatement, labelSet) {
    const {
      VariableDeclarationList,
      LexicalDeclaration,
      Expression_a,
      Expression_b,
      Expression_c,
      Statement
    } = ForStatement;
    switch (true) {
      case !!LexicalDeclaration:
        {
          // 1. Let oldEnv be the running execution context's LexicalEnvironment.
          const oldEnv = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
          // 2. Let loopEnv be NewDeclarativeEnvironment(oldEnv).
          const loopEnv = new DeclarativeEnvironmentRecord(oldEnv);
          // 3. Let isConst be IsConstantDeclaration of LexicalDeclaration.
          const isConst = IsConstantDeclaration(LexicalDeclaration);
          // 4. Let boundNames be the BoundNames of LexicalDeclaration.
          const boundNames = BoundNames(LexicalDeclaration);
          // 5. For each element dn of boundNames, do
          for (const dn of boundNames) {
            // a. If isConst is true, then
            if (isConst) {
              let _temp5 = loopEnv.CreateImmutableBinding(dn, Value.true);
              Assert(!(_temp5 instanceof AbruptCompletion), "loopEnv.CreateImmutableBinding(dn, Value.true)" + ' returned an abrupt completion');
              /* c8 ignore if */
              if (_temp5 instanceof Completion) {
                _temp5 = _temp5.Value;
              }
            } else {
              let _temp6 = loopEnv.CreateMutableBinding(dn, Value.false);
              Assert(!(_temp6 instanceof AbruptCompletion), "loopEnv.CreateMutableBinding(dn, Value.false)" + ' returned an abrupt completion');
              /* c8 ignore if */
              if (_temp6 instanceof Completion) {
                _temp6 = _temp6.Value;
              }
            }
          }
          // 6. Set the running execution context's LexicalEnvironment to loopEnv.
          exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = loopEnv;
          // 7. Let forDcl be the result of evaluating LexicalDeclaration.
          const forDcl = yield* Evaluate(LexicalDeclaration);
          // 8. If forDcl is an abrupt completion, then
          if (forDcl instanceof AbruptCompletion) {
            // a. Set the running execution context's LexicalEnvironment to oldEnv.
            exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = oldEnv;
            // b. Return Completion(forDcl).
            return Completion(forDcl);
          }
          // 9. If isConst is false, let perIterationLets be boundNames; otherwise let perIterationLets be « ».
          let perIterationLets;
          if (isConst === false) {
            perIterationLets = boundNames;
          } else {
            perIterationLets = [];
          }
          // 10. Let bodyResult be ForBodyEvaluation(the first Expression, the second Expression, Statement, perIterationLets, labelSet).
          const bodyResult = yield* ForBodyEvaluation(Expression_a, Expression_b, Statement, perIterationLets, labelSet);
          // 11. Set the running execution context's LexicalEnvironment to oldEnv.
          exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = oldEnv;
          // 12. Return Completion(bodyResult).
          return Completion(bodyResult);
        }
      case !!VariableDeclarationList:
        {
          // 1. Let varDcl be the result of evaluating VariableDeclarationList.
          let varDcl = yield* Evaluate_VariableDeclarationList(VariableDeclarationList);
          // 2. ReturnIfAbrupt(varDcl).
          /* c8 ignore if */
          if (varDcl instanceof AbruptCompletion) {
            return varDcl;
          }
          /* c8 ignore if */
          if (varDcl instanceof Completion) {
            varDcl = varDcl.Value;
          }
          // 3. Return ? ForBodyEvaluation(the first Expression, the second Expression, Statement, « », labelSet).
          return yield* ForBodyEvaluation(Expression_a, Expression_b, Statement, [], labelSet);
        }
      default:
        {
          // 1. If the first Expression is present, then
          if (Expression_a) {
            // a. Let exprRef be the result of evaluating the first Expression.
            const exprRef = yield* Evaluate(Expression_a);
            // b. Perform ? GetValue(exprRef).
            let _temp7 = GetValue(exprRef);
            /* c8 ignore if */
            if (_temp7 instanceof AbruptCompletion) {
              return _temp7;
            }
            /* c8 ignore if */
            if (_temp7 instanceof Completion) {
              _temp7 = _temp7.Value;
            }
          }
          // 2. Return ? ForBodyEvaluation(the second Expression, the third Expression, Statement, « », labelSet).
          return yield* ForBodyEvaluation(Expression_b, Expression_c, Statement, [], labelSet);
        }
    }
  }
  LabelledEvaluation_BreakableStatement_ForStatement.section = 'https://tc39.es/ecma262/#sec-for-statement-runtime-semantics-labelledevaluation';
  function* LabelledEvaluation_IterationStatement_ForInStatement(ForInStatement, labelSet) {
    const {
      LeftHandSideExpression,
      ForBinding,
      ForDeclaration,
      Expression,
      Statement
    } = ForInStatement;
    switch (true) {
      case !!LeftHandSideExpression && !!Expression:
        {
          let _temp8 = yield* ForInOfHeadEvaluation([], Expression, 'enumerate');
          /* c8 ignore if */
          if (_temp8 instanceof AbruptCompletion) {
            return _temp8;
          }
          /* c8 ignore if */
          if (_temp8 instanceof Completion) {
            _temp8 = _temp8.Value;
          }
          // IterationStatement : `for` `(` LeftHandSideExpression `in` Expression `)` Statement
          // 1. Let keyResult be ? ForIn/OfHeadEvaluation(« », Expression, enumerate).
          const keyResult = _temp8;
          // 2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement, keyResult, enumerate, assignment, labelSet).
          return yield* ForInOfBodyEvaluation(LeftHandSideExpression, Statement, keyResult, 'enumerate', 'assignment', labelSet);
        }
      case !!ForBinding && !!Expression:
        {
          let _temp9 = yield* ForInOfHeadEvaluation([], Expression, 'enumerate');
          /* c8 ignore if */
          if (_temp9 instanceof AbruptCompletion) {
            return _temp9;
          }
          /* c8 ignore if */
          if (_temp9 instanceof Completion) {
            _temp9 = _temp9.Value;
          }
          // IterationStatement :`for` `(` `var` ForBinding `in` Expression `)` Statement
          // 1. Let keyResult be ? ForIn/OfHeadEvaluation(« », Expression, enumerate).
          const keyResult = _temp9;
          // 2. Return ? ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult, enumerate, varBinding, labelSet).
          return yield* ForInOfBodyEvaluation(ForBinding, Statement, keyResult, 'enumerate', 'varBinding', labelSet);
        }
      case !!ForDeclaration && !!Expression:
        {
          let _temp10 = yield* ForInOfHeadEvaluation(BoundNames(ForDeclaration), Expression, 'enumerate');
          /* c8 ignore if */
          if (_temp10 instanceof AbruptCompletion) {
            return _temp10;
          }
          /* c8 ignore if */
          if (_temp10 instanceof Completion) {
            _temp10 = _temp10.Value;
          }
          // IterationStatement : `for` `(` ForDeclaration `in` Expression `)` Statement
          // 1. Let keyResult be ? ForIn/OfHeadEvaluation(BoundNames of ForDeclaration, Expression, enumerate).
          const keyResult = _temp10;
          // 2. Return ? ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult, enumerate, lexicalBinding, labelSet).
          return yield* ForInOfBodyEvaluation(ForDeclaration, Statement, keyResult, 'enumerate', 'lexicalBinding', labelSet);
        }
      /*c8 ignore next*/default:
        throw new OutOfRange$1('LabelledEvaluation_IterationStatement_ForInStatement', ForInStatement);
    }
  }

  // IterationStatement :
  //   `for` `await` `(` LeftHandSideExpression `of` AssignmentExpression `)` Statement
  //   `for` `await` `(` `var` ForBinding `of` AssignmentExpression `)` Statement
  //   `for` `await` `(` ForDeclaration`of` AssignmentExpression `)` Statement
  function* LabelledEvaluation_IterationStatement_ForAwaitStatement(ForAwaitStatement, labelSet) {
    const {
      LeftHandSideExpression,
      ForBinding,
      ForDeclaration,
      AssignmentExpression,
      Statement
    } = ForAwaitStatement;
    switch (true) {
      case !!LeftHandSideExpression:
        {
          let _temp11 = yield* ForInOfHeadEvaluation([], AssignmentExpression, 'async-iterate');
          /* c8 ignore if */
          if (_temp11 instanceof AbruptCompletion) {
            return _temp11;
          }
          /* c8 ignore if */
          if (_temp11 instanceof Completion) {
            _temp11 = _temp11.Value;
          }
          // 1. Let keyResult be ? ForIn/OfHeadEvaluation(« », AssignmentExpression, async-iterate).
          const keyResult = _temp11;
          // 2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement, keyResult, iterate, assignment, labelSet, async).
          return yield* ForInOfBodyEvaluation(LeftHandSideExpression, Statement, keyResult, 'iterate', 'assignment', labelSet, 'async');
        }
      case !!ForBinding:
        {
          let _temp12 = yield* ForInOfHeadEvaluation([], AssignmentExpression, 'async-iterate');
          /* c8 ignore if */
          if (_temp12 instanceof AbruptCompletion) {
            return _temp12;
          }
          /* c8 ignore if */
          if (_temp12 instanceof Completion) {
            _temp12 = _temp12.Value;
          }
          // 1. Let keyResult be ? ForIn/OfHeadEvaluation(« », AssignmentExpression, async-iterate).
          const keyResult = _temp12;
          // 2. Return ? ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult, iterate, varBinding, labelSet, async).
          return yield* ForInOfBodyEvaluation(ForBinding, Statement, keyResult, 'iterate', 'varBinding', labelSet, 'async');
        }
      case !!ForDeclaration:
        {
          let _temp13 = yield* ForInOfHeadEvaluation(BoundNames(ForDeclaration), AssignmentExpression, 'async-iterate');
          /* c8 ignore if */
          if (_temp13 instanceof AbruptCompletion) {
            return _temp13;
          }
          /* c8 ignore if */
          if (_temp13 instanceof Completion) {
            _temp13 = _temp13.Value;
          }
          // 1. Let keyResult be ? ForIn/OfHeadEvaluation(BoundNames of ForDeclaration, AssignmentExpression, async-iterate).
          const keyResult = _temp13;
          // 2. Return ? ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult, iterate, lexicalBinding, labelSet, async).
          return yield* ForInOfBodyEvaluation(ForDeclaration, Statement, keyResult, 'iterate', 'lexicalBinding', labelSet, 'async');
        }
      /*c8 ignore next*/default:
        throw new OutOfRange$1('LabelledEvaluation_IterationStatement_ForAwaitStatement', ForAwaitStatement);
    }
  }

  /** https://tc39.es/ecma262/#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation */
  // IterationStatement :
  //   `for` `(` LeftHandSideExpression `of` AssignmentExpression `)` Statement
  //   `for` `(` `var` ForBinding `of` AssignmentExpression `)` Statement
  //   `for` `(` ForDeclaration `of` AssignmentExpression `)` Statement
  function* LabelledEvaluation_IterationStatement_ForOfStatement(ForOfStatement, labelSet) {
    const {
      LeftHandSideExpression,
      ForBinding,
      ForDeclaration,
      AssignmentExpression,
      Statement
    } = ForOfStatement;
    switch (true) {
      case !!LeftHandSideExpression:
        {
          let _temp14 = yield* ForInOfHeadEvaluation([], AssignmentExpression, 'iterate');
          /* c8 ignore if */
          if (_temp14 instanceof AbruptCompletion) {
            return _temp14;
          }
          /* c8 ignore if */
          if (_temp14 instanceof Completion) {
            _temp14 = _temp14.Value;
          }
          // 1. Let keyResult be ? ForIn/OfHeadEvaluation(« », AssignmentExpression, iterate).
          const keyResult = _temp14;
          // 2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement, keyResult, iterate, assignment, labelSet).
          return yield* ForInOfBodyEvaluation(LeftHandSideExpression, Statement, keyResult, 'iterate', 'assignment', labelSet);
        }
      case !!ForBinding:
        {
          let _temp15 = yield* ForInOfHeadEvaluation([], AssignmentExpression, 'iterate');
          /* c8 ignore if */
          if (_temp15 instanceof AbruptCompletion) {
            return _temp15;
          }
          /* c8 ignore if */
          if (_temp15 instanceof Completion) {
            _temp15 = _temp15.Value;
          }
          // 1. Let keyResult be ? ForIn/OfHeadEvaluation(« », AssignmentExpression, iterate).
          const keyResult = _temp15;
          // 2. Return ? ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult, iterate, varBinding, labelSet).
          return yield* ForInOfBodyEvaluation(ForBinding, Statement, keyResult, 'iterate', 'varBinding', labelSet);
        }
      case !!ForDeclaration:
        {
          let _temp16 = yield* ForInOfHeadEvaluation(BoundNames(ForDeclaration), AssignmentExpression, 'iterate');
          /* c8 ignore if */
          if (_temp16 instanceof AbruptCompletion) {
            return _temp16;
          }
          /* c8 ignore if */
          if (_temp16 instanceof Completion) {
            _temp16 = _temp16.Value;
          }
          // 1. Let keyResult be ? ForIn/OfHeadEvaluation(BoundNames of ForDeclaration, AssignmentExpression, iterate).
          const keyResult = _temp16;
          // 2. Return ? ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult, iterate, lexicalBinding, labelSet).
          return yield* ForInOfBodyEvaluation(ForDeclaration, Statement, keyResult, 'iterate', 'lexicalBinding', labelSet);
        }
      /*c8 ignore next*/default:
        throw new OutOfRange$1('LabelledEvaluation_BreakableStatement_ForOfStatement', ForOfStatement);
    }
  }

  /** https://tc39.es/ecma262/#sec-forbodyevaluation */
  LabelledEvaluation_IterationStatement_ForOfStatement.section = 'https://tc39.es/ecma262/#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation';
  function* ForBodyEvaluation(test, increment, stmt, perIterationBindings, labelSet) {
    // 1. Let V be undefined.
    let V = Value.undefined;
    // 2. Perform ? CreatePerIterationEnvironment(perIterationBindings).
    let _temp17 = CreatePerIterationEnvironment(perIterationBindings);
    /* c8 ignore if */
    if (_temp17 instanceof AbruptCompletion) {
      return _temp17;
    }
    /* c8 ignore if */
    if (_temp17 instanceof Completion) {
      _temp17 = _temp17.Value;
    }
    // 3. Repeat,
    while (true) {
      // a. If test is not [empty], then
      if (test) {
        // i. Let testRef be the result of evaluating test.
        const testRef = yield* Evaluate(test);
        // ii. Let testValue be ? GetValue(testRef).
        let _temp18 = GetValue(testRef);
        /* c8 ignore if */
        if (_temp18 instanceof AbruptCompletion) {
          return _temp18;
        }
        /* c8 ignore if */
        if (_temp18 instanceof Completion) {
          _temp18 = _temp18.Value;
        }
        const testValue = _temp18;
        // iii. If ! ToBoolean(testValue) is false, return NormalCompletion(V).
        let _temp19 = ToBoolean(testValue);
        Assert(!(_temp19 instanceof AbruptCompletion), "ToBoolean(testValue)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp19 instanceof Completion) {
          _temp19 = _temp19.Value;
        }
        if (_temp19 === Value.false) {
          return NormalCompletion(V);
        }
      }
      // b. Let result be the result of evaluating stmt.
      const result = EnsureCompletion(yield* Evaluate(stmt));
      // c. If LoopContinues(result, labelSet) is false, return Completion(UpdateEmpty(result, V)).
      if (LoopContinues(result, labelSet) === Value.false) {
        return Completion(UpdateEmpty(result, V));
      }
      // d. If result.[[Value]] is not empty, set V to result.[[Value]].
      if (result.Value !== undefined) {
        V = result.Value;
      }
      // e. Perform ? CreatePerIterationEnvironment(perIterationBindings).
      let _temp20 = CreatePerIterationEnvironment(perIterationBindings);
      /* c8 ignore if */
      if (_temp20 instanceof AbruptCompletion) {
        return _temp20;
      }
      /* c8 ignore if */
      if (_temp20 instanceof Completion) {
        _temp20 = _temp20.Value;
      }
      // f. If increment is not [empty], then
      if (increment) {
        // i. Let incRef be the result of evaluating increment.
        const incRef = yield* Evaluate(increment);
        // ii. Perform ? GetValue(incRef).
        let _temp21 = GetValue(incRef);
        /* c8 ignore if */
        if (_temp21 instanceof AbruptCompletion) {
          return _temp21;
        }
        /* c8 ignore if */
        if (_temp21 instanceof Completion) {
          _temp21 = _temp21.Value;
        }
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-createperiterationenvironment */
  ForBodyEvaluation.section = 'https://tc39.es/ecma262/#sec-forbodyevaluation';
  function CreatePerIterationEnvironment(perIterationBindings) {
    // 1. If perIterationBindings has any elements, then
    if (perIterationBindings.length > 0) {
      // a. Let lastIterationEnv be the running execution context's LexicalEnvironment.
      const lastIterationEnv = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
      // b. Let outer be lastIterationEnv.[[OuterEnv]].
      const outer = lastIterationEnv.OuterEnv;
      // c. Assert: outer is not null.
      Assert(outer !== Value.null, "outer !== Value.null");
      // d. Let thisIterationEnv be NewDeclarativeEnvironment(outer).
      const thisIterationEnv = new DeclarativeEnvironmentRecord(outer);
      // e. For each element bn of perIterationBindings, do
      for (const bn of perIterationBindings) {
        let _temp22 = thisIterationEnv.CreateMutableBinding(bn, Value.false);
        Assert(!(_temp22 instanceof AbruptCompletion), "thisIterationEnv.CreateMutableBinding(bn, Value.false)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp22 instanceof Completion) {
          _temp22 = _temp22.Value;
        }
        // ii. Let lastValue be ? lastIterationEnv.GetBindingValue(bn, true).
        let _temp23 = lastIterationEnv.GetBindingValue(bn, Value.true);
        /* c8 ignore if */
        if (_temp23 instanceof AbruptCompletion) {
          return _temp23;
        }
        /* c8 ignore if */
        if (_temp23 instanceof Completion) {
          _temp23 = _temp23.Value;
        }
        const lastValue = _temp23;
        // iii. Perform thisIterationEnv.InitializeBinding(bn, lastValue).
        thisIterationEnv.InitializeBinding(bn, lastValue);
      }
      // f. Set the running execution context's LexicalEnvironment to thisIterationEnv.
      exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = thisIterationEnv;
    }
    // 2. Return undefined.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-runtime-semantics-forinofheadevaluation */
  CreatePerIterationEnvironment.section = 'https://tc39.es/ecma262/#sec-createperiterationenvironment';
  function* ForInOfHeadEvaluation(uninitializedBoundNames, expr, iterationKind) {
    // 1. Let oldEnv be the running execution context's LexicalEnvironment.
    const oldEnv = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 2. If uninitializedBoundNames is not an empty List, then
    if (uninitializedBoundNames.length > 0) {
      // a. Assert: uninitializedBoundNames has no duplicate entries.
      // b. Let newEnv be NewDeclarativeEnvironment(oldEnv).
      const newEnv = new DeclarativeEnvironmentRecord(oldEnv);
      // c. For each string name in uninitializedBoundNames, do
      for (const name of uninitializedBoundNames) {
        let _temp24 = newEnv.CreateMutableBinding(name, Value.false);
        Assert(!(_temp24 instanceof AbruptCompletion), "newEnv.CreateMutableBinding(name, Value.false)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp24 instanceof Completion) {
          _temp24 = _temp24.Value;
        }
      }
      // d. Set the running execution context's LexicalEnvironment to newEnv.
      exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = newEnv;
    }
    // 3. Let exprRef be the result of evaluating expr.
    const exprRef = yield* Evaluate(expr);
    // 4. Set the running execution context's LexicalEnvironment to oldEnv.
    exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = oldEnv;
    // 5. Let exprValue be ? GetValue(exprRef).
    let _temp25 = GetValue(exprRef);
    /* c8 ignore if */
    if (_temp25 instanceof AbruptCompletion) {
      return _temp25;
    }
    /* c8 ignore if */
    if (_temp25 instanceof Completion) {
      _temp25 = _temp25.Value;
    }
    const exprValue = _temp25;
    // 6. If iterationKind is enumerate, then
    if (iterationKind === 'enumerate') {
      // a. If exprValue is undefined or null, then
      if (exprValue === Value.undefined || exprValue === Value.null) {
        // i. Return Completion { [[Type]]: break, [[Value]]: empty, [[Target]]: empty }.
        return new Completion({
          Type: 'break',
          Value: undefined,
          Target: undefined
        });
      }
      // b. Let obj be ! ToObject(exprValue).
      let _temp26 = ToObject(exprValue);
      Assert(!(_temp26 instanceof AbruptCompletion), "ToObject(exprValue)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp26 instanceof Completion) {
        _temp26 = _temp26.Value;
      }
      const obj = _temp26;
      // c. Let iterator be ? EnumerateObjectProperties(obj).
      let _temp27 = EnumerateObjectProperties(obj);
      /* c8 ignore if */
      if (_temp27 instanceof AbruptCompletion) {
        return _temp27;
      }
      /* c8 ignore if */
      if (_temp27 instanceof Completion) {
        _temp27 = _temp27.Value;
      }
      const iterator = _temp27;
      // d. Let nextMethod be ! GetV(iterator, "next").
      let _temp28 = GetV(iterator, Value('next'));
      Assert(!(_temp28 instanceof AbruptCompletion), "GetV(iterator, Value('next'))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp28 instanceof Completion) {
        _temp28 = _temp28.Value;
      }
      const nextMethod = _temp28;
      // e. Return the Record { [[Iterator]]: iterator, [[NextMethod]]: nextMethod, [[Done]]: false }.
      return {
        Iterator: iterator,
        NextMethod: nextMethod,
        Done: Value.false
      };
    } else {
      // 7. Else,
      // a. Assert: iterationKind is iterate or async-iterate.
      Assert(iterationKind === 'iterate' || iterationKind === 'async-iterate', "iterationKind === 'iterate' || iterationKind === 'async-iterate'");
      // b. If iterationKind is async-iterate, let iteratorHint be async.
      // c. Else, let iteratorHint be sync.
      const iteratorHint = iterationKind === 'async-iterate' ? 'async' : 'sync';
      // d. Return ? GetIterator(exprValue, iteratorHint).
      return GetIterator(exprValue, iteratorHint);
    }
  }

  /** https://tc39.es/ecma262/#sec-enumerate-object-properties */
  ForInOfHeadEvaluation.section = 'https://tc39.es/ecma262/#sec-runtime-semantics-forinofheadevaluation';
  function EnumerateObjectProperties(O) {
    return CreateForInIterator(O);
  }

  /** https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset */
  EnumerateObjectProperties.section = 'https://tc39.es/ecma262/#sec-enumerate-object-properties';
  function* ForInOfBodyEvaluation(lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet, iteratorKind) {
    // 1. If iteratorKind is not present, set iteratorKind to sync.
    if (iterationKind === undefined) {
      iterationKind = 'sync';
    }
    // 2. Let oldEnv be the running execution context's LexicalEnvironment.
    const oldEnv = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 3. Let V be undefined.
    let V = Value.undefined;
    // 4. Let destructuring be IsDestructuring of lhs.
    const destructuring = IsDestructuring(lhs);
    // 5. If destructuring is true and if lhsKind is assignment, then
    let assignmentPattern;
    if (destructuring && lhsKind === 'assignment') {
      // a. Assert: lhs is a LeftHandSideExpression.
      // b. Let assignmentPattern be the AssignmentPattern that is covered by lhs.
      assignmentPattern = refineLeftHandSideExpression(lhs);
    }
    // 6. Repeat,
    while (true) {
      let _temp29 = Call(iteratorRecord.NextMethod, iteratorRecord.Iterator);
      /* c8 ignore if */
      if (_temp29 instanceof AbruptCompletion) {
        return _temp29;
      }
      /* c8 ignore if */
      if (_temp29 instanceof Completion) {
        _temp29 = _temp29.Value;
      }
      // a. Let nextResult be ? Call(iteratorRecord.[[NextMethod]], iteratorRecord.[[Iterator]]).
      let nextResult = _temp29;
      // b. If iteratorKind is async, then set nextResult to ? Await(nextResult).
      if (iteratorKind === 'async') {
        let _temp30 = yield* Await(nextResult);
        /* c8 ignore if */
        if (_temp30 instanceof AbruptCompletion) {
          return _temp30;
        }
        /* c8 ignore if */
        if (_temp30 instanceof Completion) {
          _temp30 = _temp30.Value;
        }
        nextResult = _temp30;
      }
      // c. If Type(nextResult) is not Object, throw a TypeError exception.
      if (!(nextResult instanceof ObjectValue)) {
        return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', nextResult);
      }
      // d. Let done be ? IteratorComplete(nextResult).
      let _temp31 = IteratorComplete(nextResult);
      /* c8 ignore if */
      if (_temp31 instanceof AbruptCompletion) {
        return _temp31;
      }
      /* c8 ignore if */
      if (_temp31 instanceof Completion) {
        _temp31 = _temp31.Value;
      }
      const done = _temp31;
      // e. If done is true, return NormalCompletion(V).
      if (done === Value.true) {
        return NormalCompletion(V);
      }
      // f. Let nextValue be ? IteratorValue(nextResult).
      let _temp32 = IteratorValue(nextResult);
      /* c8 ignore if */
      if (_temp32 instanceof AbruptCompletion) {
        return _temp32;
      }
      /* c8 ignore if */
      if (_temp32 instanceof Completion) {
        _temp32 = _temp32.Value;
      }
      const nextValue = _temp32;
      // g. If lhsKind is either assignment or varBinding, then
      let lhsRef;
      let iterationEnv;
      if (lhsKind === 'assignment' || lhsKind === 'varBinding') {
        // i. If destructuring is false, then
        if (destructuring === false) {
          // 1. Let lhsRef be the result of evaluating lhs. (It may be evaluated repeatedly.)
          lhsRef = yield* Evaluate(lhs);
        }
      } else {
        // h. Else,
        // i. Assert: lhsKind is lexicalBinding.
        Assert(lhsKind === 'lexicalBinding', "lhsKind === 'lexicalBinding'");
        // ii. Assert: lhs is a ForDeclaration.
        Assert(lhs.type === 'ForDeclaration', "lhs.type === 'ForDeclaration'");
        // iii. Let iterationEnv be NewDeclarativeEnvironment(oldEnv).
        iterationEnv = new DeclarativeEnvironmentRecord(oldEnv);
        // iv. Perform BindingInstantiation for lhs passing iterationEnv as the argument.
        BindingInstantiation(lhs, iterationEnv);
        // v. Set the running execution context's LexicalEnvironment to iterationEnv.
        exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = iterationEnv;
        // vi. If destructuring is false, then
        if (destructuring === false) {
          // 1. Assert: lhs binds a single name.
          // 2. Let lhsName be the sole element of BoundNames of lhs.
          const lhsName = BoundNames(lhs)[0];
          // 3. Let lhsRef be ! ResolveBinding(lhsName).
          let _temp33 = ResolveBinding(lhsName, undefined, lhs.strict);
          Assert(!(_temp33 instanceof AbruptCompletion), "ResolveBinding(lhsName, undefined, lhs.strict)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp33 instanceof Completion) {
            _temp33 = _temp33.Value;
          }
          lhsRef = _temp33;
        }
      }
      let status;
      // i. If destructuring is false, then
      if (destructuring === false) {
        // i. If lhsRef is an abrupt completion, then
        if (lhsRef instanceof AbruptCompletion) {
          // 1. Let status be lhsRef.
          status = lhsRef;
        } else if (lhsKind === 'lexicalBinding') {
          // ii. Else is lhsKind is lexicalBinding, then
          // 1. Let status be InitializeReferencedBinding(lhsRef, nextValue).
          status = InitializeReferencedBinding(lhsRef, nextValue);
        } else {
          // iii. Else,
          status = PutValue(lhsRef, nextValue);
        }
      } else {
        // j. Else,
        // i. If lhsKind is assignment, then
        if (lhsKind === 'assignment') {
          // 1. Let status be DestructuringAssignmentEvaluation of assignmentPattern with argument nextValue.
          status = yield* DestructuringAssignmentEvaluation(assignmentPattern, nextValue);
        } else if (lhsKind === 'varBinding') {
          // ii. Else if lhsKind is varBinding, then
          // 1. Assert: lhs is a ForBinding.
          Assert(lhs.type === 'ForBinding', "lhs.type === 'ForBinding'");
          // 2. Let status be BindingInitialization of lhs with arguments nextValue and undefined.
          status = yield* BindingInitialization(lhs, nextValue, Value.undefined);
        } else {
          // iii. Else,
          // 1. Assert: lhsKind is lexicalBinding.
          Assert(lhsKind === 'lexicalBinding', "lhsKind === 'lexicalBinding'");
          // 2. Assert: lhs is a ForDeclaration.
          Assert(lhs.type === 'ForDeclaration', "lhs.type === 'ForDeclaration'");
          // 3. Let status be BindingInitialization of lhs with arguments nextValue and iterationEnv.
          status = yield* BindingInitialization(lhs, nextValue, iterationEnv);
        }
      }
      // k. If status is an abrupt completion, then
      if (status instanceof AbruptCompletion) {
        // i. Set the running execution context's LexicalEnvironment to oldEnv.
        exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = oldEnv;
        // ii. If iteratorKind is async, return ? AsyncIteratorClose(iteratorRecord, status).
        if (iteratorKind === 'async') {
          return yield* AsyncIteratorClose(iteratorRecord, status);
        }
        // iii. if iterationKind is enumerate, then
        if (iterationKind === 'enumerate') {
          // 1. Return status.
          return status;
        } else {
          // iv. Else,
          // 1. Assert: iterationKind is iterate.
          Assert(iterationKind === 'iterate', "iterationKind === 'iterate'");
          // 2 .Return ? IteratorClose(iteratorRecord, status).
          return IteratorClose(iteratorRecord, status);
        }
      }
      // l. Let result be the result of evaluating stmt.
      const result = EnsureCompletion(yield* Evaluate(stmt));
      // m. Set the running execution context's LexicalEnvironment to oldEnv.
      exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = oldEnv;
      // n. If LoopContinues(result, labelSet) is false, then
      if (LoopContinues(result, labelSet) === Value.false) {
        // i. If iterationKind is enumerate, then
        if (iterationKind === 'enumerate') {
          // 1. Return Completion(UpdateEmpty(result, V)).
          return Completion(UpdateEmpty(result, V));
        } else {
          // ii. Else,
          // 1. Assert: iterationKind is iterate.
          Assert(iterationKind === 'iterate', "iterationKind === 'iterate'");
          // 2. Set status to UpdateEmpty(result, V).
          status = UpdateEmpty(result, V);
          // 3. If iteratorKind is async, return ? AsyncIteratorClose(iteratorRecord, status).
          if (iteratorKind === 'async') {
            return yield* AsyncIteratorClose(iteratorRecord, status);
          }
          // 4. Return ? IteratorClose(iteratorRecord, status).
          return IteratorClose(iteratorRecord, status);
        }
      }
      // o. If result.[[Value]] is not empty, set V to result.[[Value]].
      if (result.Value !== undefined) {
        V = result.Value;
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-runtime-semantics-bindinginstantiation */
  //   ForDeclaration : LetOrConst ForBinding
  ForInOfBodyEvaluation.section = 'https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset';
  function BindingInstantiation({
    LetOrConst,
    ForBinding
  }, environment) {
    // 1. Assert: environment is a declarative Environment Record.
    Assert(environment instanceof DeclarativeEnvironmentRecord, "environment instanceof DeclarativeEnvironmentRecord");
    // 2. For each element name of the BoundNames of ForBinding, do
    for (const name of BoundNames(ForBinding)) {
      // a. If IsConstantDeclaration of LetOrConst is true, then
      if (IsConstantDeclaration(LetOrConst)) {
        let _temp34 = environment.CreateImmutableBinding(name, Value.true);
        Assert(!(_temp34 instanceof AbruptCompletion), "environment.CreateImmutableBinding(name, Value.true)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp34 instanceof Completion) {
          _temp34 = _temp34.Value;
        }
      } else {
        let _temp35 = environment.CreateMutableBinding(name, Value.false);
        Assert(!(_temp35 instanceof AbruptCompletion), "environment.CreateMutableBinding(name, Value.false)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp35 instanceof Completion) {
          _temp35 = _temp35.Value;
        }
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-for-in-and-for-of-statements-runtime-semantics-evaluation */
  //   ForBinding : BindingIdentifier
  BindingInstantiation.section = 'https://tc39.es/ecma262/#sec-runtime-semantics-bindinginstantiation';
  function Evaluate_ForBinding({
    BindingIdentifier,
    strict
  }) {
    // 1. Let bindingId be StringValue of BindingIdentifier.
    const bindingId = StringValue(BindingIdentifier);
    // 2. Return ? ResolveBinding(bindingId).
    return ResolveBinding(bindingId, undefined, strict);
  }

  /** https://tc39.es/ecma262/#sec-template-literals-runtime-semantics-evaluation */
  //   TemplateLiteral : NoSubstitutionTemplate
  //   SubstitutionTemplate : TemplateHead Expression TemplateSpans
  //   TemplateSpans : TemplateTail
  //   TemplateSpans : TemplateMiddleList TemplateTail
  //   TemplateMiddleList : TemplateMiddle Expression
  //   TemplateMiddleList : TemplateMiddleList TemplateMiddle Expression
  //
  // (implicit)
  //   TemplateLiteral : SubstitutionTemplate
  function* Evaluate_TemplateLiteral({
    TemplateSpanList,
    ExpressionList
  }) {
    let str = '';
    for (let i = 0; i < TemplateSpanList.length - 1; i += 1) {
      const Expression = ExpressionList[i];
      const head = TV(TemplateSpanList[i]);
      // 2. Let subRef be the result of evaluating Expression.
      const subRef = yield* Evaluate(Expression);
      // 3. Let sub be ? GetValue(subRef).
      let _temp = GetValue(subRef);
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      const sub = _temp;
      // 4. Let middle be ? ToString(sub).
      let _temp2 = ToString(sub);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      const middle = _temp2;
      str += head;
      str += middle.stringValue();
    }
    const tail = TV(TemplateSpanList[TemplateSpanList.length - 1]);
    return Value(str + tail);
  }

  // @ts-nocheck

  /** https://tc39.es/ecma262/#sec-runtime-semantics-caseclauseisselected */
  function* CaseClauseIsSelected(C, input) {
    // 1. Assert: C is an instance of the production  CaseClause : `case` Expression `:` StatementList?.
    Assert(C.type === 'CaseClause', "C.type === 'CaseClause'");
    // 2. Let exprRef be the result of evaluating the Expression of C.
    const exprRef = yield* Evaluate(C.Expression);
    // 3. Let clauseSelector be ? GetValue(exprRef).
    let _temp = GetValue(exprRef);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const clauseSelector = _temp;
    // 4. Return the result of performing Strict Equality Comparison input === clauseSelector.
    return StrictEqualityComparison(input, clauseSelector);
  }

  /** https://tc39.es/ecma262/#sec-runtime-semantics-caseblockevaluation */
  //   CaseBlock :
  //     `{` `}`
  //     `{` CaseClauses `}`
  //     `{` CaseClauses? DefaultClause CaseClauses? `}`
  CaseClauseIsSelected.section = 'https://tc39.es/ecma262/#sec-runtime-semantics-caseclauseisselected';
  function* CaseBlockEvaluation({
    CaseClauses_a,
    DefaultClause,
    CaseClauses_b
  }, input) {
    switch (true) {
      case !CaseClauses_a && !DefaultClause && !CaseClauses_b:
        {
          // 1. Return NormalCompletion(undefined).
          return NormalCompletion(Value.undefined);
        }
      case !!CaseClauses_a && !DefaultClause && !CaseClauses_b:
        {
          // 1. Let V be undefined.
          let V = Value.undefined;
          // 2. Let A be the List of CaseClause items in CaseClauses, in source text order.
          const A = CaseClauses_a;
          // 3. Let found be false.
          let found = Value.false;
          // 4. For each CaseClause C in A, do
          for (const C of A) {
            // a. If found is false, then
            if (found === Value.false) {
              let _temp2 = yield* CaseClauseIsSelected(C, input);
              /* c8 ignore if */
              if (_temp2 instanceof AbruptCompletion) {
                return _temp2;
              }
              /* c8 ignore if */
              if (_temp2 instanceof Completion) {
                _temp2 = _temp2.Value;
              }
              // i. Set found to ? CaseClauseIsSelected(C, input).
              found = _temp2;
            }
            // b. If found is true, them
            if (found === Value.true) {
              // i. Let R be the result of evaluating C.
              const R = EnsureCompletion(yield* Evaluate(C));
              // ii. If R.[[Value]] is not empty, set V to R.[[Value]].
              if (R.Value !== undefined) {
                V = R.Value;
              }
              // iii. If R is an abrupt completion, return Completion(UpdateEmpty(R, V)).
              if (R instanceof AbruptCompletion) {
                return Completion(UpdateEmpty(R, V));
              }
            }
          }
          // 5. Return NormalCompletion(V).
          return NormalCompletion(V);
        }
      case !!DefaultClause:
        {
          // 1. Let V be undefined.
          let V = Value.undefined;
          // 2. If the first CaseClauses is present, then
          let A;
          if (CaseClauses_a) {
            // a. Let A be the List of CaseClause items in the first CaseClauses, in source text order.
            A = CaseClauses_a;
          } else {
            // 3. Else,
            // a. Let A be « ».
            A = [];
          }
          let found = Value.false;
          // 4. For each CaseClause C in A, do
          for (const C of A) {
            // a. If found is false, then
            if (found === Value.false) {
              let _temp3 = yield* CaseClauseIsSelected(C, input);
              /* c8 ignore if */
              if (_temp3 instanceof AbruptCompletion) {
                return _temp3;
              }
              /* c8 ignore if */
              if (_temp3 instanceof Completion) {
                _temp3 = _temp3.Value;
              }
              // i. Set found to ? CaseClauseIsSelected(C, input).
              found = _temp3;
            }
            // b. If found is true, them
            if (found === Value.true) {
              // i. Let R be the result of evaluating C.
              const R = EnsureCompletion(yield* Evaluate(C));
              // ii. If R.[[Value]] is not empty, set V to R.[[Value]].
              if (R.Value !== undefined) {
                V = R.Value;
              }
              // iii. If R is an abrupt completion, return Completion(UpdateEmpty(R, V)).
              if (R instanceof AbruptCompletion) {
                return Completion(UpdateEmpty(R, V));
              }
            }
          }
          // 6. Let foundInB be false.
          let foundInB = Value.false;
          // 7. If the second CaseClauses is present, then
          let B;
          if (CaseClauses_b) {
            // a. Let B be the List of CaseClause items in the second CaseClauses, in source text order.
            B = CaseClauses_b;
          } else {
            // 8. Else,
            // a. Let B be « ».
            B = [];
          }
          // 9. If found is false, then
          if (found === Value.false) {
            // a. For each CaseClause C in B, do
            for (const C of B) {
              // a. If foundInB is false, then
              if (foundInB === Value.false) {
                let _temp4 = yield* CaseClauseIsSelected(C, input);
                /* c8 ignore if */
                if (_temp4 instanceof AbruptCompletion) {
                  return _temp4;
                }
                /* c8 ignore if */
                if (_temp4 instanceof Completion) {
                  _temp4 = _temp4.Value;
                }
                // i. Set foundInB to ? CaseClauseIsSelected(C, input).
                foundInB = _temp4;
              }
              // b. If foundInB is true, them
              if (foundInB === Value.true) {
                // i. Let R be the result of evaluating C.
                const R = EnsureCompletion(yield* Evaluate(C));
                // ii. If R.[[Value]] is not empty, set V to R.[[Value]].
                if (R.Value !== undefined) {
                  V = R.Value;
                }
                // iii. If R is an abrupt completion, return Completion(UpdateEmpty(R, V)).
                if (R instanceof AbruptCompletion) {
                  return Completion(UpdateEmpty(R, V));
                }
              }
            }
          }
          // 10. If foundInB is true, return NormalCompletion(V).
          if (foundInB === Value.true) {
            return NormalCompletion(V);
          }
          // 11. Let R be the result of evaluating DefaultClause.
          const R = EnsureCompletion(yield* Evaluate(DefaultClause));
          // 12. If R.[[Value]] is not empty, set V to R.[[Value]].
          if (R.Value !== undefined) {
            V = R.Value;
          }
          // 13. If R is an abrupt completion, return Completion(UpdateEmpty(R, V)).
          if (R instanceof AbruptCompletion) {
            return Completion(UpdateEmpty(R, V));
          }
          // 14. NOTE: The following is another complete iteration of the second CaseClauses.
          // 15. For each CaseClause C in B, do
          for (const C of B) {
            // a. Let R be the result of evaluating CaseClause C.
            const innerR = EnsureCompletion(yield* Evaluate(C));
            // b. If R.[[Value]] is not empty, set V to R.[[Value]].
            if (innerR.Value !== undefined) {
              V = innerR.Value;
            }
            // c. If R is an abrupt completion, return Completion(UpdateEmpty(R, V)).
            if (innerR instanceof AbruptCompletion) {
              return Completion(UpdateEmpty(innerR, V));
            }
          }
          // 16. Return NormalCompletion(V).
          //
          return NormalCompletion(V);
        }
      /*c8 ignore next*/default:
        throw new OutOfRange$1('CaseBlockEvaluation');
    }
  }

  /** https://tc39.es/ecma262/#sec-switch-statement-runtime-semantics-evaluation */
  //   SwitchStatement :
  //     `switch` `(` Expression `)` CaseBlock
  CaseBlockEvaluation.section = 'https://tc39.es/ecma262/#sec-runtime-semantics-caseblockevaluation';
  function* Evaluate_SwitchStatement({
    Expression,
    CaseBlock
  }) {
    // 1. Let exprRef be the result of evaluating Expression.
    const exprRef = yield* Evaluate(Expression);
    // 2. Let switchValue be ? GetValue(exprRef).
    let _temp5 = GetValue(exprRef);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const switchValue = _temp5;
    // 3. Let oldEnv be the running execution context's LexicalEnvironment.
    const oldEnv = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 4. Let blockEnv be NewDeclarativeEnvironment(oldEnv).
    const blockEnv = new DeclarativeEnvironmentRecord(oldEnv);
    // 5. Perform BlockDeclarationInstantiation(CaseBlock, blockEnv).
    BlockDeclarationInstantiation(CaseBlock, blockEnv);
    // 6. Set the running execution context's LexicalEnvironment to blockEnv.
    exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = blockEnv;
    // 7. Let R be CaseBlockEvaluation of CaseBlock with argument switchValue.
    const R = yield* CaseBlockEvaluation(CaseBlock, switchValue);
    // 8. Set the running execution context's LexicalEnvironment to oldEnv.
    exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = oldEnv;
    // 9. return R.
    return R;
  }

  /** https://tc39.es/ecma262/#sec-switch-statement-runtime-semantics-evaluation */
  //   CaseClause :
  //     `case` Expression `:`
  //     `case` Expression `:` StatementList
  //   DefaultClause :
  //     `case` `default` `:`
  //     `case` `default` `:` StatementList
  function* Evaluate_CaseClause({
    StatementList
  }) {
    if (!StatementList) {
      // 1. Return NormalCompletion(empty).
      return NormalCompletion(undefined);
    }
    // 1. Return the result of evaluating StatementList.
    return yield* Evaluate_StatementList(StatementList);
  }

  // @ts-nocheck

  function i(V) {
    if (V instanceof Value) {
      return inspect(V, exports.surroundingAgent.currentRealmRecord);
    }
    return `${V}`;
  }
  const Raw = s => s;
  const AlreadyDeclared = n => `${i(n)} is already declared`;
  const ArrayBufferDetached = () => 'Attempt to access detached ArrayBuffer';
  const ArrayBufferShared = () => 'Attempt to access shared ArrayBuffer';
  const ArrayPastSafeLength = () => 'Cannot make length of array-like object surpass the bounds of an integer index';
  const ArrayEmptyReduce = () => 'Cannot reduce an empty array with no initial value';
  const AssignmentToConstant = n => `Assignment to constant variable ${i(n)}`;
  const AwaitInFormalParameters = () => 'await is not allowed in function parameters';
  const AwaitInClassStaticBlock = () => 'await is not allowed in class static blocks';
  const AwaitNotInAsyncFunction = () => 'await is only valid in async functions';
  const BigIntDivideByZero = () => 'Division by zero';
  const BigIntNegativeExponent = () => 'Exponent must be positive';
  const BigIntUnsignedRightShift = () => 'BigInt has no unsigned right shift, use >> instead';
  const BufferContentTypeMismatch = () => 'Newly created TypedArray did not match exemplar\'s content type';
  const BufferDetachKeyMismatch = (k, b) => `${i(k)} is not the [[ArrayBufferDetachKey]] of ${i(b)}`;
  const CannotAllocateDataBlock = () => 'Cannot allocate memory';
  const CannotCreateProxyWith = (x, y) => `Cannot create a proxy with a ${x} as ${y}`;
  const CannotConvertDecimalToBigInt = n => `Cannot convert ${i(n)} to a BigInt because it is not an integer`;
  const CannotConvertSymbol = t => `Cannot convert a Symbol value to a ${t}`;
  const CannotConvertToBigInt = v => `Cannot convert ${i(v)} to a BigInt`;
  const CannotConvertToObject = t => `Cannot convert ${t} to object`;
  const CannotDefineProperty = p => `Cannot define property ${i(p)}`;
  const CannotDeleteProperty = p => `Cannot delete property ${i(p)}`;
  const CannotDeleteSuper = () => 'Cannot delete a super property';
  const CannotJSONSerializeBigInt = () => 'Cannot serialize a BigInt to JSON';
  const CannotMixBigInts = () => 'Cannot mix BigInt and other types, use explicit conversions';
  const CannotResolvePromiseWithItself = () => 'Cannot resolve a promise with itself';
  const CannotSetProperty = (p, o) => `Cannot set property ${i(p)} on ${i(o)}`;
  const ClassMissingBindingIdentifier = () => 'Class declaration missing binding identifier';
  const ConstDeclarationMissingInitializer = () => 'Missing initialization of const declaration';
  const ConstructorNonCallable = f => `${i(f)} cannot be invoked without new`;
  const CouldNotResolveModule = s => `Could not resolve module ${i(s)}`;
  const DataViewOOB = () => 'Offset is outside the bounds of the DataView';
  const DeleteIdentifier = () => 'Delete of identifier in strict mode';
  const DeletePrivateName = () => 'Private fields cannot be deleted';
  const DateInvalidTime = () => 'Invalid time';
  const DerivedConstructorReturnedNonObject = () => 'Derived constructors may only return object or undefined';
  const DuplicateConstructor = () => 'A class may only have one constructor';
  const DuplicateExports = () => 'Module cannot contain duplicate exports';
  const DuplicateProto = () => 'An object literal may only have one __proto__ property';
  const FunctionDeclarationStatement = () => 'Functions can only be declared at top level or inside a block';
  const GeneratorRunning = () => 'Cannot manipulate a running generator';
  const IllegalBreakContinue = isBreak => `Illegal ${isBreak ? 'break' : 'continue'} statement`;
  const IllegalOctalEscape = () => 'Illegal octal escape';
  const InternalSlotMissing = (o, s) => `Internal slot ${s} is missing for ${i(o)}`;
  const InvalidArrayLength = l => `Invalid array length: ${i(l)}`;
  const InvalidAssignmentTarget = () => 'Invalid assignment target';
  const InvalidCodePoint = () => 'Not a valid code point';
  const InvalidHint = v => `Invalid hint: ${i(v)}`;
  const InvalidMethodName = name => `Method cannot be named '${i(name)}'`;
  const InvalidPropertyDescriptor = () => 'Invalid property descriptor. Cannot both specify accessors and a value or writable attribute';
  const InvalidRadix = () => 'Radix must be between 2 and 36, inclusive';
  const InvalidReceiver = (f, v) => `${f} called on invalid receiver: ${i(v)}`;
  const InvalidRegExpFlags = f => `Invalid RegExp flags: ${f}`;
  const InvalidSuperCall = () => '`super` not expected here';
  const InvalidSuperProperty = () => '`super` not expected here';
  const InvalidTemplateEscape = () => 'Invalid escapes are only allowed in tagged templates';
  const InvalidThis = () => 'Invalid `this` access';
  const InvalidUnicodeEscape = () => 'Invalid unicode escape';
  const IteratorThrowMissing = () => 'The iterator does not provide a throw method';
  const JSONCircular = () => 'Cannot JSON stringify a circular structure';
  const JSONUnexpectedToken = () => 'Unexpected token in JSON';
  const JSONUnexpectedChar = c => `Unexpected character ${c} in JSON`;
  const JSONExpected = (e, a) => `Expected character ${e} but got ${a} in JSON`;
  const LetInLexicalBinding = () => '\'let\' is not allowed to be used as a name in lexical declarations';
  const ModuleExportNameInvalidUnicode = () => 'Export name is not valid unicode';
  const ModuleUndefinedExport = n => `Export '${i(n)}' is not defined in module`;
  const NegativeIndex = n => `${n} cannot be negative`;
  const NewlineAfterThrow = () => 'Illegal newline after throw';
  const NormalizeInvalidForm = () => 'Invalid normalization form';
  const NotAConstructor = v => `${i(v)} is not a constructor`;
  const NotAFunction = v => `${i(v)} is not a function`;
  const NotATypeObject = (t, v) => `${i(v)} is not a ${t} object`;
  const NotAnObject = v => `${i(v)} is not an object`;
  const NotASymbol = v => `${i(v)} is not a symbol`;
  const NotDefined = n => `${i(n)} is not defined`;
  const NotInitialized = n => `${i(n)} cannot be used before initialization`;
  const NotPropertyName = p => `${i(p)} is not a valid property name`;
  const NumberFormatRange = m => `Invalid format range for ${m}`;
  const ObjectToPrimitive = () => 'Cannot convert object to primitive value';
  const ObjectPrototypeType = () => 'Object prototype must be an Object or null';
  const ObjectSetPrototype = () => 'Could not set prototype of object';
  const OutOfRange = n => `${n} is out of range`;
  const PrivateNameNoGetter = p => `${i(p)} was defined without a getter`;
  const PrivateNameNoSetter = p => `${i(p)} was defined without a setter`;
  const PrivateNameIsMethod = p => `Private method ${i(p)} is not writable`;
  const PromiseAnyRejected = () => 'No promises passed to Promise.any were fulfilled';
  const PromiseCapabilityFunctionAlreadySet = f => `Promise ${f} function already set`;
  const PromiseRejectFunction = v => `Promise reject function ${i(v)} is not callable`;
  const PromiseResolveFunction = v => `Promise resolve function ${i(v)} is not callable`;
  const ProxyRevoked = n => `Cannot perform '${n}' on a proxy that has been revoked`;
  const ProxyDefinePropertyNonConfigurable = p => `'defineProperty' on proxy: trap returned truthy for defining non-configurable property ${i(p)} which is either non-existent or configurable in the proxy target`;
  const ProxyDefinePropertyNonConfigurableWritable = p => `'defineProperty' on proxy: trap returned truthy for defining non-configurable property ${i(p)} which cannot be non-writable, unless there exists a corresponding non-configurable, non-writable own property of the target object`;
  const ProxyDefinePropertyNonExtensible = p => `'defineProperty' on proxy: trap returned truthy for adding property ${i(p)} to the non-extensible proxy target`;
  const ProxyDefinePropertyIncompatible = p => `'defineProperty' on proxy: trap returned truthy for adding property ${i(p)} that is incompatible with the existing property in the proxy target`;
  const ProxyDeletePropertyNonConfigurable = p => `'deleteProperty' on proxy: trap returned truthy for property ${i(p)} which is non-configurable in the proxy target`;
  const ProxyDeletePropertyNonExtensible = p => `'deleteProperty' on proxy: trap returned truthy for property ${i(p)} but the proxy target is non-extensible`;
  const ProxyGetNonConfigurableData = p => `'get' on proxy: property ${i(p)} is a read-only and non-configurable data property on the proxy target but the proxy did not return its actual value`;
  const ProxyGetNonConfigurableAccessor = p => `'get' on proxy: property ${i(p)} is a non-configurable accessor property on the proxy target and does not have a getter function, but the trap did not return 'undefined'`;
  const ProxyGetPrototypeOfInvalid = () => '\'getPrototypeOf\' on proxy: trap returned neither object nor null';
  const ProxyGetPrototypeOfNonExtensible = () => '\'getPrototypeOf\' on proxy: proxy target is non-extensible but the trap did not return its actual prototype';
  const ProxyGetOwnPropertyDescriptorIncompatible = p => `'getOwnPropertyDescriptor' on proxy: trap returned descriptor for property ${i(p)} that is incompatible with the existing property in the proxy target`;
  const ProxyGetOwnPropertyDescriptorInvalid = p => `'getOwnPropertyDescriptor' on proxy: trap returned neither object nor undefined for property ${i(p)}`;
  const ProxyGetOwnPropertyDescriptorUndefined = p => `'getOwnPropertyDescriptor' on proxy: trap returned undefined for property ${i(p)} which is non-configurable in the proxy target`;
  const ProxyGetOwnPropertyDescriptorNonExtensible = p => `'getOwnPropertyDescriptor' on proxy: trap returned undefined for property ${i(p)} which exists in the non-extensible target`;
  const ProxyGetOwnPropertyDescriptorNonConfigurable = p => `'getOwnPropertyDescriptor' on proxy: trap reported non-configurability for property ${i(p)} which is either non-existent or configurable in the proxy target`;
  const ProxyGetOwnPropertyDescriptorNonConfigurableWritable = p => `'getOwnPropertyDescriptor' on proxy: trap reported non-configurability for property ${i(p)} which is writable or configurable in the proxy target`;
  const ProxyHasNonConfigurable = p => `'has' on proxy: trap returned falsy for property ${i(p)} which exists in the proxy target as non-configurable`;
  const ProxyHasNonExtensible = p => `'has' on proxy: trap returned falsy for property ${i(p)} but the proxy target is not extensible`;
  const ProxyIsExtensibleInconsistent = e => `'isExtensible' on proxy: trap result does not reflect extensibility of proxy target (which is ${i(e)})`;
  const ProxyOwnKeysMissing = p => `'ownKeys' on proxy: trap result did not include ${i(p)}`;
  const ProxyOwnKeysNonExtensible = () => '\'ownKeys\' on proxy: trap result returned extra keys but proxy target is non-extensible';
  const ProxyOwnKeysDuplicateEntries = () => '\'ownKeys\' on proxy: trap returned duplicate entries';
  const ProxyPreventExtensionsExtensible = () => '\'preventExtensions\' on proxy: trap returned truthy but the proxy target is extensible';
  const ProxySetPrototypeOfNonExtensible = () => '\'setPrototypeOf\' on proxy: trap returned truthy for setting a new prototype on the non-extensible proxy target';
  const ProxySetFrozenData = p => `'set' on proxy: trap returned truthy for property ${i(p)} which exists in the proxy target as a non-configurable and non-writable data property with a different value`;
  const ProxySetFrozenAccessor = p => `'set' on proxy: trap returned truthy for property ${i(p)} which exists in the proxy target as a non-configurable and non-writable accessor property without a setter`;
  const RegExpArgumentNotAllowed = m => `First argument to ${m} must not be a regular expression`;
  const RegExpExecNotObject = o => `${i(o)} is not object or null`;
  const ResolutionNullOrAmbiguous = (r, n, m) => r === null ? `Could not resolve import ${i(n)} from ${m.HostDefined.specifier}` : `Star export ${i(n)} from ${m.HostDefined.specifier} is ambiguous`;
  const SpeciesNotConstructor = () => 'object.constructor[Symbol.species] is not a constructor';
  const StrictModeDelete = n => `Cannot not delete property ${i(n)}`;
  const StrictPoisonPill = () => 'The caller, callee, and arguments properties may not be accessed on functions or the arguments objects for calls to them';
  const StringRepeatCount = v => `Count ${i(v)} is invalid`;
  const StringCodePointInvalid = n => `Invalid code point ${i(n)}`;
  const StringPrototypeMethodGlobalRegExp = m => `The RegExp passed to String.prototype.${m} must have the global flag`;
  const SubclassLengthTooSmall = v => `Subclass constructor returned a smaller-than-requested object ${i(v)}`;
  const SubclassSameValue = v => `Subclass constructor returned the same object ${i(v)}`;
  const TargetMatchesHeldValue = v => `heldValue ${i(v)} matches target`;
  const TemplateInOptionalChain = () => 'Templates are not allowed in optional chains';
  const ThisNotAFunction = v => `Expected 'this' value to be a function but got ${i(v)}`;
  const TryMissingCatchOrFinally = () => 'Missing catch or finally after try';
  const TypedArrayCreationOOB = () => 'Sum of start offset and byte length should be less than the size of underlying buffer';
  const TypedArrayLengthAlignment = (n, m) => `Size of ${n} should be a multiple of ${m}`;
  const TypedArrayOOB = () => 'Sum of start offset and byte length should be less than the size of the TypedArray';
  const TypedArrayOffsetAlignment = (n, m) => `Start offset of ${n} should be a multiple of ${m}`;
  const TypedArrayTooSmall = () => 'Derived TypedArray constructor created an array which was too small';
  const UnableToSeal = o => `Unable to seal object ${i(o)}`;
  const UnableToFreeze = o => `Unable to freeze object ${i(o)}`;
  const UnableToPreventExtensions = o => `Unable to prevent extensions on object ${i(o)}`;
  const UnknownPrivateName = (o, p) => `${i(p)} does not exist on object ${i(o)}`;
  const UnterminatedComment = () => 'Missing */ after comment';
  const UnterminatedRegExp = () => 'Missing / after RegExp literal';
  const UnterminatedString = () => 'Missing \' or " after string literal';
  const UnterminatedTemplate = () => 'Missing ` after template literal';
  const UnexpectedEOS = () => 'Unexpected end of source';
  const UnexpectedEvalOrArguments = () => '`arguments` and `eval` are not valid in this context';
  const UnexpectedToken = () => 'Unexpected token';
  const UnexpectedReservedWordStrict = () => 'Unexpected reserved word in strict mode';
  const UseStrictNonSimpleParameter = () => 'Function with \'use strict\' directive has non-simple parameter list';
  const URIMalformed = () => 'URI malformed';
  const WeakCollectionNotObject = v => `${i(v)} is not a valid weak collection entry object`;
  const YieldInFormalParameters = () => 'yield is not allowed in function parameters';
  const YieldNotInGenerator = () => 'yield is only valid in generators';

  var messages = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AlreadyDeclared: AlreadyDeclared,
    ArrayBufferDetached: ArrayBufferDetached,
    ArrayBufferShared: ArrayBufferShared,
    ArrayEmptyReduce: ArrayEmptyReduce,
    ArrayPastSafeLength: ArrayPastSafeLength,
    AssignmentToConstant: AssignmentToConstant,
    AwaitInClassStaticBlock: AwaitInClassStaticBlock,
    AwaitInFormalParameters: AwaitInFormalParameters,
    AwaitNotInAsyncFunction: AwaitNotInAsyncFunction,
    BigIntDivideByZero: BigIntDivideByZero,
    BigIntNegativeExponent: BigIntNegativeExponent,
    BigIntUnsignedRightShift: BigIntUnsignedRightShift,
    BufferContentTypeMismatch: BufferContentTypeMismatch,
    BufferDetachKeyMismatch: BufferDetachKeyMismatch,
    CannotAllocateDataBlock: CannotAllocateDataBlock,
    CannotConvertDecimalToBigInt: CannotConvertDecimalToBigInt,
    CannotConvertSymbol: CannotConvertSymbol,
    CannotConvertToBigInt: CannotConvertToBigInt,
    CannotConvertToObject: CannotConvertToObject,
    CannotCreateProxyWith: CannotCreateProxyWith,
    CannotDefineProperty: CannotDefineProperty,
    CannotDeleteProperty: CannotDeleteProperty,
    CannotDeleteSuper: CannotDeleteSuper,
    CannotJSONSerializeBigInt: CannotJSONSerializeBigInt,
    CannotMixBigInts: CannotMixBigInts,
    CannotResolvePromiseWithItself: CannotResolvePromiseWithItself,
    CannotSetProperty: CannotSetProperty,
    ClassMissingBindingIdentifier: ClassMissingBindingIdentifier,
    ConstDeclarationMissingInitializer: ConstDeclarationMissingInitializer,
    ConstructorNonCallable: ConstructorNonCallable,
    CouldNotResolveModule: CouldNotResolveModule,
    DataViewOOB: DataViewOOB,
    DateInvalidTime: DateInvalidTime,
    DeleteIdentifier: DeleteIdentifier,
    DeletePrivateName: DeletePrivateName,
    DerivedConstructorReturnedNonObject: DerivedConstructorReturnedNonObject,
    DuplicateConstructor: DuplicateConstructor,
    DuplicateExports: DuplicateExports,
    DuplicateProto: DuplicateProto,
    FunctionDeclarationStatement: FunctionDeclarationStatement,
    GeneratorRunning: GeneratorRunning,
    IllegalBreakContinue: IllegalBreakContinue,
    IllegalOctalEscape: IllegalOctalEscape,
    InternalSlotMissing: InternalSlotMissing,
    InvalidArrayLength: InvalidArrayLength,
    InvalidAssignmentTarget: InvalidAssignmentTarget,
    InvalidCodePoint: InvalidCodePoint,
    InvalidHint: InvalidHint,
    InvalidMethodName: InvalidMethodName,
    InvalidPropertyDescriptor: InvalidPropertyDescriptor,
    InvalidRadix: InvalidRadix,
    InvalidReceiver: InvalidReceiver,
    InvalidRegExpFlags: InvalidRegExpFlags,
    InvalidSuperCall: InvalidSuperCall,
    InvalidSuperProperty: InvalidSuperProperty,
    InvalidTemplateEscape: InvalidTemplateEscape,
    InvalidThis: InvalidThis,
    InvalidUnicodeEscape: InvalidUnicodeEscape,
    IteratorThrowMissing: IteratorThrowMissing,
    JSONCircular: JSONCircular,
    JSONExpected: JSONExpected,
    JSONUnexpectedChar: JSONUnexpectedChar,
    JSONUnexpectedToken: JSONUnexpectedToken,
    LetInLexicalBinding: LetInLexicalBinding,
    ModuleExportNameInvalidUnicode: ModuleExportNameInvalidUnicode,
    ModuleUndefinedExport: ModuleUndefinedExport,
    NegativeIndex: NegativeIndex,
    NewlineAfterThrow: NewlineAfterThrow,
    NormalizeInvalidForm: NormalizeInvalidForm,
    NotAConstructor: NotAConstructor,
    NotAFunction: NotAFunction,
    NotASymbol: NotASymbol,
    NotATypeObject: NotATypeObject,
    NotAnObject: NotAnObject,
    NotDefined: NotDefined,
    NotInitialized: NotInitialized,
    NotPropertyName: NotPropertyName,
    NumberFormatRange: NumberFormatRange,
    ObjectPrototypeType: ObjectPrototypeType,
    ObjectSetPrototype: ObjectSetPrototype,
    ObjectToPrimitive: ObjectToPrimitive,
    OutOfRange: OutOfRange,
    PrivateNameIsMethod: PrivateNameIsMethod,
    PrivateNameNoGetter: PrivateNameNoGetter,
    PrivateNameNoSetter: PrivateNameNoSetter,
    PromiseAnyRejected: PromiseAnyRejected,
    PromiseCapabilityFunctionAlreadySet: PromiseCapabilityFunctionAlreadySet,
    PromiseRejectFunction: PromiseRejectFunction,
    PromiseResolveFunction: PromiseResolveFunction,
    ProxyDefinePropertyIncompatible: ProxyDefinePropertyIncompatible,
    ProxyDefinePropertyNonConfigurable: ProxyDefinePropertyNonConfigurable,
    ProxyDefinePropertyNonConfigurableWritable: ProxyDefinePropertyNonConfigurableWritable,
    ProxyDefinePropertyNonExtensible: ProxyDefinePropertyNonExtensible,
    ProxyDeletePropertyNonConfigurable: ProxyDeletePropertyNonConfigurable,
    ProxyDeletePropertyNonExtensible: ProxyDeletePropertyNonExtensible,
    ProxyGetNonConfigurableAccessor: ProxyGetNonConfigurableAccessor,
    ProxyGetNonConfigurableData: ProxyGetNonConfigurableData,
    ProxyGetOwnPropertyDescriptorIncompatible: ProxyGetOwnPropertyDescriptorIncompatible,
    ProxyGetOwnPropertyDescriptorInvalid: ProxyGetOwnPropertyDescriptorInvalid,
    ProxyGetOwnPropertyDescriptorNonConfigurable: ProxyGetOwnPropertyDescriptorNonConfigurable,
    ProxyGetOwnPropertyDescriptorNonConfigurableWritable: ProxyGetOwnPropertyDescriptorNonConfigurableWritable,
    ProxyGetOwnPropertyDescriptorNonExtensible: ProxyGetOwnPropertyDescriptorNonExtensible,
    ProxyGetOwnPropertyDescriptorUndefined: ProxyGetOwnPropertyDescriptorUndefined,
    ProxyGetPrototypeOfInvalid: ProxyGetPrototypeOfInvalid,
    ProxyGetPrototypeOfNonExtensible: ProxyGetPrototypeOfNonExtensible,
    ProxyHasNonConfigurable: ProxyHasNonConfigurable,
    ProxyHasNonExtensible: ProxyHasNonExtensible,
    ProxyIsExtensibleInconsistent: ProxyIsExtensibleInconsistent,
    ProxyOwnKeysDuplicateEntries: ProxyOwnKeysDuplicateEntries,
    ProxyOwnKeysMissing: ProxyOwnKeysMissing,
    ProxyOwnKeysNonExtensible: ProxyOwnKeysNonExtensible,
    ProxyPreventExtensionsExtensible: ProxyPreventExtensionsExtensible,
    ProxyRevoked: ProxyRevoked,
    ProxySetFrozenAccessor: ProxySetFrozenAccessor,
    ProxySetFrozenData: ProxySetFrozenData,
    ProxySetPrototypeOfNonExtensible: ProxySetPrototypeOfNonExtensible,
    Raw: Raw,
    RegExpArgumentNotAllowed: RegExpArgumentNotAllowed,
    RegExpExecNotObject: RegExpExecNotObject,
    ResolutionNullOrAmbiguous: ResolutionNullOrAmbiguous,
    SpeciesNotConstructor: SpeciesNotConstructor,
    StrictModeDelete: StrictModeDelete,
    StrictPoisonPill: StrictPoisonPill,
    StringCodePointInvalid: StringCodePointInvalid,
    StringPrototypeMethodGlobalRegExp: StringPrototypeMethodGlobalRegExp,
    StringRepeatCount: StringRepeatCount,
    SubclassLengthTooSmall: SubclassLengthTooSmall,
    SubclassSameValue: SubclassSameValue,
    TargetMatchesHeldValue: TargetMatchesHeldValue,
    TemplateInOptionalChain: TemplateInOptionalChain,
    ThisNotAFunction: ThisNotAFunction,
    TryMissingCatchOrFinally: TryMissingCatchOrFinally,
    TypedArrayCreationOOB: TypedArrayCreationOOB,
    TypedArrayLengthAlignment: TypedArrayLengthAlignment,
    TypedArrayOOB: TypedArrayOOB,
    TypedArrayOffsetAlignment: TypedArrayOffsetAlignment,
    TypedArrayTooSmall: TypedArrayTooSmall,
    URIMalformed: URIMalformed,
    UnableToFreeze: UnableToFreeze,
    UnableToPreventExtensions: UnableToPreventExtensions,
    UnableToSeal: UnableToSeal,
    UnexpectedEOS: UnexpectedEOS,
    UnexpectedEvalOrArguments: UnexpectedEvalOrArguments,
    UnexpectedReservedWordStrict: UnexpectedReservedWordStrict,
    UnexpectedToken: UnexpectedToken,
    UnknownPrivateName: UnknownPrivateName,
    UnterminatedComment: UnterminatedComment,
    UnterminatedRegExp: UnterminatedRegExp,
    UnterminatedString: UnterminatedString,
    UnterminatedTemplate: UnterminatedTemplate,
    UseStrictNonSimpleParameter: UseStrictNonSimpleParameter,
    WeakCollectionNotObject: WeakCollectionNotObject,
    YieldInFormalParameters: YieldInFormalParameters,
    YieldNotInGenerator: YieldNotInGenerator
  });

  let Flag = /*#__PURE__*/function (Flag) {
    Flag[Flag["return"] = 1] = "return";
    Flag[Flag["await"] = 2] = "await";
    Flag[Flag["yield"] = 4] = "yield";
    Flag[Flag["parameters"] = 8] = "parameters";
    Flag[Flag["newTarget"] = 16] = "newTarget";
    Flag[Flag["importMeta"] = 32] = "importMeta";
    Flag[Flag["superCall"] = 64] = "superCall";
    Flag[Flag["superProperty"] = 128] = "superProperty";
    Flag[Flag["in"] = 256] = "in";
    Flag[Flag["default"] = 512] = "default";
    Flag[Flag["module"] = 1024] = "module";
    Flag[Flag["classStaticBlock"] = 2048] = "classStaticBlock";
    return Flag;
  }({});
  function getDeclarations(node) {
    if (isArray(node)) {
      return node.flatMap(n => getDeclarations(n));
    }
    switch (node.type) {
      case 'LexicalBinding':
      case 'VariableDeclaration':
      case 'BindingRestElement':
      case 'ForBinding':
        if (node.BindingIdentifier) {
          return getDeclarations(node.BindingIdentifier);
        }
        if (node.BindingPattern) {
          return getDeclarations(node.BindingPattern);
        }
        return [];
      case 'BindingRestProperty':
        if (node.BindingIdentifier) {
          return getDeclarations(node.BindingIdentifier);
        }
        return [];
      case 'SingleNameBinding':
        return getDeclarations(node.BindingIdentifier);
      case 'ImportClause':
        {
          const d = [];
          if (node.ImportedDefaultBinding) {
            d.push(...getDeclarations(node.ImportedDefaultBinding));
          }
          if (node.NameSpaceImport) {
            d.push(...getDeclarations(node.NameSpaceImport));
          }
          if (node.NamedImports) {
            d.push(...getDeclarations(node.NamedImports));
          }
          return d;
        }
      case 'ImportSpecifier':
        return getDeclarations(node.ImportedBinding);
      case 'ImportedDefaultBinding':
      case 'NameSpaceImport':
        return getDeclarations(node.ImportedBinding);
      case 'NamedImports':
        return getDeclarations(node.ImportsList);
      case 'ObjectBindingPattern':
        {
          const declarations = getDeclarations(node.BindingPropertyList);
          if (node.BindingRestProperty) {
            declarations.push(...getDeclarations(node.BindingRestProperty));
          }
          return declarations;
        }
      case 'ArrayBindingPattern':
        {
          const declarations = getDeclarations(node.BindingElementList);
          if (node.BindingRestElement) {
            declarations.push(...getDeclarations(node.BindingRestElement));
          }
          return declarations;
        }
      case 'BindingElement':
        return getDeclarations(node.BindingPattern);
      case 'BindingProperty':
        return getDeclarations(node.BindingElement);
      case 'BindingIdentifier':
      case 'IdentifierName':
      case 'LabelIdentifier':
        return [{
          name: node.name,
          node
        }];
      case 'PrivateIdentifier':
        return [{
          name: `#${node.name}`,
          node
        }];
      case 'StringLiteral':
        return [{
          name: node.value,
          node
        }];
      case 'Elision':
        return [];
      case 'ForDeclaration':
        return getDeclarations(node.ForBinding);
      case 'ExportSpecifier':
        return getDeclarations(node.exportName);
      case 'FunctionDeclaration':
      case 'GeneratorDeclaration':
      case 'AsyncFunctionDeclaration':
      case 'AsyncGeneratorDeclaration':
        Assert(!!node.BindingIdentifier, "!!node.BindingIdentifier");
        return getDeclarations(node.BindingIdentifier);
      case 'LexicalDeclaration':
        return getDeclarations(node.BindingList);
      case 'VariableStatement':
        return getDeclarations(node.VariableDeclarationList);
      case 'ClassDeclaration':
        Assert(!!node.BindingIdentifier, "!!node.BindingIdentifier");
        return getDeclarations(node.BindingIdentifier);
      /*c8 ignore next*/default:
        throw new OutOfRange$1('getDeclarations', node);
    }
  }
  class Scope {
    parser;
    scopeStack = [];
    labels = [];
    arrowInfoStack = [];
    assignmentInfoStack = [];
    exports = new Set();
    undefinedExports = new Map();
    privateScope;
    undefinedPrivateAccesses = [];
    flags = 0;
    constructor(parser) {
      this.parser = parser;
    }
    hasReturn() {
      return (this.flags & Flag.return) !== 0;
    }
    hasAwait() {
      return (this.flags & Flag.await) !== 0;
    }
    hasYield() {
      return (this.flags & Flag.yield) !== 0;
    }
    hasNewTarget() {
      return (this.flags & Flag.newTarget) !== 0;
    }
    hasSuperCall() {
      return (this.flags & Flag.superCall) !== 0;
    }
    hasSuperProperty() {
      return (this.flags & Flag.superProperty) !== 0;
    }
    hasImportMeta() {
      return (this.flags & Flag.importMeta) !== 0;
    }
    hasIn() {
      return (this.flags & Flag.in) !== 0;
    }
    inParameters() {
      return (this.flags & Flag.parameters) !== 0;
    }
    inClassStaticBlock() {
      return (this.flags & Flag.classStaticBlock) !== 0;
    }
    isDefault() {
      return (this.flags & Flag.default) !== 0;
    }
    isModule() {
      return (this.flags & Flag.module) !== 0;
    }
    with(flags, f) {
      const oldFlags = this.flags;
      Object.entries(flags).forEach(([k, v]) => {
        if (k in Flag && typeof Flag[k] === 'number') {
          if (v === true) {
            this.flags |= Flag[k];
          } else if (v === false) {
            this.flags &= ~Flag[k];
          }
        }
      });
      if (flags.lexical || flags.variable) {
        this.scopeStack.push({
          flags,
          lexicals: new Set(),
          variables: new Set(),
          functions: new Set(),
          parameters: new Set()
        });
      }
      if (flags.private) {
        this.privateScope = {
          outer: this.privateScope,
          names: new Map()
        };
      }
      const oldLabels = this.labels;
      if (flags.label === 'boundary') {
        this.labels = [];
      } else if (flags.label) {
        this.labels.push({
          type: flags.label
        });
      }
      const oldStrict = this.parser.state.strict;
      if (flags.strict === true) {
        this.parser.state.strict = true;
      } else if (flags.strict === false) {
        this.parser.state.strict = false;
      }
      const r = f();
      if (flags.label === 'boundary') {
        this.labels = oldLabels;
      } else if (flags.label) {
        this.labels.pop();
      }
      if (flags.private) {
        this.privateScope = this.privateScope.outer;
        if (this.privateScope === undefined) {
          this.undefinedPrivateAccesses.forEach(({
            node,
            name,
            scope
          }) => {
            while (scope) {
              if (scope.names.has(name)) {
                return;
              }
              scope = scope.outer;
            }
            this.parser.raiseEarly('NotDefined', node, name);
          });
        }
      }
      if (flags.lexical || flags.variable) {
        this.scopeStack.pop();
      }
      this.parser.state.strict = oldStrict;
      this.flags = oldFlags;
      return r;
    }
    pushArrowInfo(isAsync = false) {
      this.arrowInfoStack.push({
        isAsync,
        hasTrailingComma: false,
        yieldExpressions: [],
        awaitExpressions: [],
        awaitIdentifiers: [],
        merge(other) {
          this.yieldExpressions.push(...other.yieldExpressions);
          this.awaitExpressions.push(...other.awaitExpressions);
          this.awaitIdentifiers.push(...other.awaitIdentifiers);
        }
      });
    }
    popArrowInfo() {
      const arrowInfo = this.arrowInfoStack.pop();
      Assert(!!arrowInfo, "!!arrowInfo");
      return arrowInfo;
    }
    get arrowInfo() {
      if (this.arrowInfoStack.length > 0) {
        return this.arrowInfoStack[this.arrowInfoStack.length - 1];
      }
      return undefined;
    }
    pushAssignmentInfo(type) {
      const parser = this.parser;
      this.assignmentInfoStack.push({
        type,
        earlyErrors: [],
        clear() {
          this.earlyErrors.forEach(e => {
            parser.earlyErrors.delete(e);
          });
        }
      });
    }
    popAssignmentInfo() {
      const assignmentInfo = this.assignmentInfoStack.pop();
      Assert(!!assignmentInfo, "!!assignmentInfo");
      return assignmentInfo;
    }
    registerObjectLiteralEarlyError(error) {
      for (let i = this.assignmentInfoStack.length - 1; i >= 0; i -= 1) {
        const info = this.assignmentInfoStack[i];
        info.earlyErrors.push(error);
        if (info.type !== 'assign') {
          break;
        }
      }
    }
    lexicalScope() {
      for (let i = this.scopeStack.length - 1; i >= 0; i -= 1) {
        const scope = this.scopeStack[i];
        if (scope.flags.lexical) {
          return scope;
        }
      }
      /* c8 ignore next */
      throw new RangeError();
    }
    variableScope() {
      for (let i = this.scopeStack.length - 1; i >= 0; i -= 1) {
        const scope = this.scopeStack[i];
        if (scope.flags.variable) {
          return scope;
        }
      }
      /* c8 ignore next */
      throw new RangeError();
    }
    declare(node, type, extraType) {
      const declarations = getDeclarations(node);
      declarations.forEach(d => {
        switch (type) {
          case 'lexical':
          case 'import':
            {
              if (type === 'lexical' && d.name === 'let') {
                this.parser.raiseEarly('LetInLexicalBinding', d.node);
              }
              const scope = this.lexicalScope();
              if (scope.lexicals.has(d.name) || scope.variables.has(d.name) || scope.functions.has(d.name) || scope.parameters.has(d.name)) {
                this.parser.raiseEarly('AlreadyDeclared', d.node, d.name);
              }
              scope.lexicals.add(d.name);
              if (scope === this.scopeStack[0] && this.undefinedExports.has(d.name)) {
                this.undefinedExports.delete(d.name);
              }
              break;
            }
          case 'function':
            {
              const scope = this.lexicalScope();
              if (scope.lexicals.has(d.name)) {
                this.parser.raiseEarly('AlreadyDeclared', d.node, d.name);
              }
              if (scope.flags.variableFunctions) {
                scope.functions.add(d.name);
              } else {
                if (scope.variables.has(d.name)) {
                  this.parser.raiseEarly('AlreadyDeclared', d.node, d.name);
                }
                scope.lexicals.add(d.name);
              }
              if (scope === this.scopeStack[0] && this.undefinedExports.has(d.name)) {
                this.undefinedExports.delete(d.name);
              }
              break;
            }
          case 'parameter':
            this.variableScope().parameters.add(d.name);
            break;
          case 'variable':
            for (let i = this.scopeStack.length - 1; i >= 0; i -= 1) {
              const scope = this.scopeStack[i];
              scope.variables.add(d.name);
              if (scope.lexicals.has(d.name) || !scope.flags.variableFunctions && scope.functions.has(d.name)) {
                this.parser.raiseEarly('AlreadyDeclared', d.node, d.name);
              }
              if (i === 0 && this.undefinedExports.has(d.name)) {
                this.undefinedExports.delete(d.name);
              }
              if (scope.flags.variable) {
                break;
              }
            }
            break;
          case 'export':
            if (this.exports.has(d.name)) {
              this.parser.raiseEarly('AlreadyDeclared', d.node, d.name);
            } else {
              this.exports.add(d.name);
            }
            break;
          case 'private':
            {
              const types = this.privateScope.names.get(d.name);
              if (types) {
                let duplicate = true;
                switch (extraType) {
                  case 'field':
                  case 'method':
                    break;
                  case 'set':
                  case 'get':
                    duplicate = types.has(extraType) || types.has('field') || types.has('method');
                    types.add(extraType);
                    break;
                }
                if (duplicate) {
                  this.parser.raiseEarly('AlreadyDeclared', d.node, d.name);
                }
              } else if (extraType) {
                this.privateScope.names.set(d.name, new Set([extraType]));
              }
              break;
            }
          default:
            /* c8 ignore next */
            throw new RangeError(type);
        }
      });
    }
    checkUndefinedExports(NamedExports) {
      const scope = this.variableScope();
      NamedExports.ExportsList.forEach(n => {
        const name = n.localName.type === 'IdentifierName' ? n.localName.name : n.localName.value;
        if (!scope.lexicals.has(name) && !scope.variables.has(name)) {
          this.undefinedExports.set(name, n.localName);
        }
      });
    }
    checkUndefinedPrivate(PrivateIdentifier) {
      const [{
        node,
        name
      }] = getDeclarations(PrivateIdentifier);
      if (!this.privateScope) {
        this.parser.raiseEarly('NotDefined', node, name);
        return;
      }
      let scope = this.privateScope;
      while (scope) {
        if (scope.names.has(name)) {
          return;
        }
        scope = scope.outer;
      }
      this.undefinedPrivateAccesses.push({
        node,
        name,
        scope: this.privateScope
      });
    }
  }

  class BaseParser extends Lexer {
    /**
     * Repurpose a {@link ParseNode} of one type as a {@link ParseNode} of another type.
     * @param node The node to repurpose.
     * @param type The name of the new node type.
     * @param update an optional callback that can be used to mutate {@link node} to match the new node type.
     */
    repurpose(node, type, update) {
      // NOTE: must down-cast to `ParseNode` before up-casting to `Unfinished<T>` due to the incompatbile `type` discriminant.
      const unfinished = node;
      unfinished.type = type;
      update?.(unfinished, node, node);
      return unfinished;
    }
  }

  class IdentifierParser extends BaseParser {
    // IdentifierName
    parseIdentifierName() {
      const node = this.startNode();
      const p = this.peek();
      if (p.type === Token.IDENTIFIER || p.type === Token.ESCAPED_KEYWORD || isKeyword(p.type)) {
        node.name = this.next().valueAsString();
      } else {
        this.unexpected();
      }
      return this.finishNode(node, 'IdentifierName');
    }

    // BindingIdentifier :
    //   Identifier
    //   `yield`
    //   `await`
    parseBindingIdentifier() {
      const node = this.startNode();
      const token = this.next();
      switch (token.type) {
        case Token.IDENTIFIER:
          node.name = token.valueAsString();
          break;
        case Token.ESCAPED_KEYWORD:
          node.name = token.valueAsString();
          break;
        case Token.YIELD:
          node.name = 'yield';
          break;
        case Token.AWAIT:
          node.name = 'await';
          for (let i = 0; i < this.scope.arrowInfoStack.length; i += 1) {
            const arrowInfo = this.scope.arrowInfoStack[i];
            if (!arrowInfo) {
              break;
            }
            if (arrowInfo.isAsync) {
              arrowInfo.awaitIdentifiers.push(node);
              break;
            }
          }
          break;
        default:
          this.unexpected(token);
      }
      if (this.isStrictMode() && (node.name === 'eval' || node.name === 'arguments')) {
        this.raiseEarly('UnexpectedEvalOrArguments', token);
      }
      this.validateIdentifierReference(node.name, token);
      return this.finishNode(node, 'BindingIdentifier');
    }

    // IdentifierReference :
    //   Identifier
    //   [~Yield] `yield`
    //   [~Await] `await`
    parseIdentifierReference() {
      const node = this.startNode();
      const token = this.next();
      node.escaped = token.escaped;
      switch (token.type) {
        case Token.IDENTIFIER:
          node.name = token.valueAsString();
          break;
        case Token.ESCAPED_KEYWORD:
          node.name = token.valueAsString();
          break;
        case Token.YIELD:
          if (this.scope.hasYield()) {
            this.unexpected(token);
          }
          node.name = 'yield';
          break;
        case Token.AWAIT:
          if (this.scope.hasAwait()) {
            this.unexpected(token);
          }
          for (let i = 0; i < this.scope.arrowInfoStack.length; i += 1) {
            const arrowInfo = this.scope.arrowInfoStack[i];
            if (!arrowInfo) {
              break;
            }
            if (arrowInfo.isAsync) {
              arrowInfo.awaitIdentifiers.push(node);
              break;
            }
          }
          node.name = 'await';
          break;
        default:
          this.unexpected(token);
      }
      this.validateIdentifierReference(node.name, token);
      return this.finishNode(node, 'IdentifierReference');
    }
    validateIdentifierReference(name, token) {
      if (name === 'yield' && (this.scope.hasYield() || this.scope.isModule())) {
        this.raiseEarly('UnexpectedReservedWordStrict', token);
      }
      if (name === 'await' && (this.scope.hasAwait() || this.scope.isModule())) {
        this.raiseEarly('UnexpectedReservedWordStrict', token);
      }
      if (this.isStrictMode() && isReservedWordStrict(name)) {
        this.raiseEarly('UnexpectedReservedWordStrict', token);
      }
      if (this.scope.inClassStaticBlock() && name === 'arguments') {
        this.raiseEarly('UnexpectedEvalOrArguments', token);
      }
      if (name !== 'yield' && name !== 'await' && isKeywordRaw(name)) {
        this.raiseEarly('UnexpectedToken', token);
      }
    }

    // LabelIdentifier :
    //   Identifier
    //   [~Yield] `yield`
    //   [~Await] `await`
    parseLabelIdentifier() {
      const node = this.parseIdentifierReference();
      return this.repurpose(node, 'LabelIdentifier');
    }

    // PrivateIdentifier ::
    //   `#` IdentifierName
    parsePrivateIdentifier() {
      const node = this.startNode();
      node.name = this.expect(Token.PRIVATE_IDENTIFIER).valueAsString();
      return this.finishNode(node, 'PrivateIdentifier');
    }
  }

  let FunctionKind = /*#__PURE__*/function (FunctionKind) {
    FunctionKind[FunctionKind["NORMAL"] = 0] = "NORMAL";
    FunctionKind[FunctionKind["ASYNC"] = 1] = "ASYNC";
    return FunctionKind;
  }({});
  class FunctionParser extends IdentifierParser {
    // FunctionDeclaration :
    //   `function` BindingIdentifier `(` FormalParameters `)` `{` FunctionBody `}`
    //   [+Default] `function` `(` FormalParameters `)` `{` FunctionBody `}`
    // FunctionExpression :
    //   `function` BindingIdentifier? `(` FormalParameters `)` `{` FunctionBody `}`
    // GeneratorDeclaration :
    //   `function` `*` BindingIdentifier `(` FormalParameters `)` `{` GeneratorBody `}`
    //   [+Default] `function` `*` `(` FormalParameters `)` `{` GeneratorBody `}`
    // GeneratorExpression :
    //   `function` BindingIdentifier? `(` FormalParameters `)` `{` GeneratorBody `}`
    // AsyncGeneratorDeclaration :
    //   `async` `function` `*` BindingIdentifier `(` FormalParameters `)` `{` AsyncGeneratorBody `}`
    //   [+Default] `async` `function` `*` `(` FormalParameters `)` `{` AsyncGeneratorBody `}`
    // AsyncGeneratorExpression :
    //   `async` `function` BindingIdentifier? `(` FormalParameters `)` `{` AsyncGeneratorBody `}`
    // AsyncFunctionDeclaration :
    //   `async` `function` BindingIdentifier `(` FormalParameters `)` `{` FunctionBody `}`
    //   [+Default] `async` `function` `(` FormalParameters `)` `{` AsyncBody `}`
    // Async`FunctionExpression :
    //   `async` `function` BindingIdentifier? `(` FormalParameters `)` `{` AsyncBody `}`
    parseFunction(isExpression, kind) {
      const isAsync = kind === FunctionKind.ASYNC;
      const node = this.startNode();
      if (isAsync) {
        this.expect('async');
      }
      this.expect(Token.FUNCTION);
      const isGenerator = this.eat(Token.MUL);
      if (!this.test(Token.LPAREN)) {
        node.BindingIdentifier = this.scope.with({
          await: isExpression ? false : undefined,
          yield: isExpression ? false : undefined
        }, () => this.parseBindingIdentifier());
        if (!isExpression) {
          this.scope.declare(node.BindingIdentifier, 'function');
        }
      } else if (isExpression === false && !this.scope.isDefault()) {
        this.unexpected();
      } else {
        node.BindingIdentifier = null;
      }
      this.scope.with({
        default: false,
        await: isAsync,
        yield: isGenerator,
        lexical: true,
        variable: true,
        variableFunctions: true,
        parameters: false,
        classStaticBlock: false
      }, () => {
        this.scope.arrowInfoStack.push(null);
        node.FormalParameters = this.parseFormalParameters();
        const body = this.parseFunctionBody(isAsync, isGenerator, false);
        this.setFunctionBodyGeneric(node, body.type, body);
        if (node.BindingIdentifier) {
          if (body.strict && (node.BindingIdentifier.name === 'eval' || node.BindingIdentifier.name === 'arguments')) {
            this.raiseEarly('UnexpectedToken', node.BindingIdentifier);
          }
          if (isExpression) {
            if (this.scope.hasYield() && node.BindingIdentifier.name === 'yield') {
              this.raiseEarly('UnexpectedToken', node.BindingIdentifier);
            }
            if (this.scope.hasAwait() && node.BindingIdentifier.name === 'await') {
              this.raiseEarly('UnexpectedToken', node.BindingIdentifier);
            }
          }
        }
        this.validateFormalParameters(node.FormalParameters, body);
        this.scope.arrowInfoStack.pop();
      });
      const name = `${isAsync ? 'Async' : ''}${isGenerator ? 'Generator' : 'Function'}${isExpression ? 'Expression' : 'Declaration'}`;
      return this.finishNode(node, name);
    }
    setFunctionBodyGeneric(node, type, body) {
      node[type] = body;
    }
    validateFormalParameters(parameters, body, wantsUnique = false) {
      const isStrict = body.strict;
      const hasStrictDirective = body.directives && body.directives.includes('use strict');
      if (wantsUnique === false && !IsSimpleParameterList(parameters)) {
        wantsUnique = true;
      }
      if (hasStrictDirective) {
        parameters.forEach(p => {
          if (p.type !== 'SingleNameBinding' || p.Initializer) {
            this.raiseEarly('UseStrictNonSimpleParameter', p);
          }
        });
      }
      const names = new Set();
      getDeclarations(parameters).forEach(d => {
        if (isStrict) {
          if (d.name === 'arguments' || d.name === 'eval') {
            this.raiseEarly('UnexpectedToken', d.node);
          }
        }
        if (isStrict || wantsUnique) {
          if (names.has(d.name)) {
            this.raiseEarly('AlreadyDeclared', d.node, d.name);
          } else {
            names.add(d.name);
          }
        }
      });
    }
    convertArrowParameter(node) {
      switch (node.type) {
        case 'IdentifierReference':
          {
            const BindingIdentifier = this.repurpose(node, 'BindingIdentifier');
            const SingleNameBinding = this.startNode(node);
            SingleNameBinding.BindingIdentifier = BindingIdentifier;
            SingleNameBinding.Initializer = null;
            this.scope.declare(node, 'parameter');
            return this.finishNode(SingleNameBinding, 'SingleNameBinding');
          }
        case 'BindingRestElement':
          this.scope.declare(node, 'parameter');
          return node;
        case 'Elision':
          return node;
        case 'ArrayLiteral':
          {
            const BindingPattern = this.repurpose(node, 'ArrayBindingPattern', (asNew, asOld, asPartial) => {
              const BindingElementList = [];
              asNew.BindingElementList = BindingElementList;
              for (const [i, p] of asOld.ElementList.entries()) {
                const c = this.convertArrowParameter(p);
                if (c.type === 'BindingRestElement') {
                  if (i !== asOld.ElementList.length - 1) {
                    this.raiseEarly('UnexpectedToken', c);
                  }
                  asNew.BindingRestElement = c;
                } else {
                  BindingElementList.push(c);
                }
              }
              delete asPartial.ElementList;
            });
            const BindingElement = this.startNode(node);
            BindingElement.BindingPattern = BindingPattern;
            BindingElement.Initializer = null;
            return this.finishNode(BindingElement, 'BindingElement');
          }
        case 'ObjectLiteral':
          {
            const BindingPattern = this.repurpose(node, 'ObjectBindingPattern', (asNew, asOld, asPartial) => {
              const BindingPropertyList = [];
              asNew.BindingPropertyList = BindingPropertyList;
              for (const p of asOld.PropertyDefinitionList) {
                const c = this.convertArrowParameter(p);
                if (c.type === 'BindingRestProperty') {
                  asNew.BindingRestProperty = c;
                } else {
                  BindingPropertyList.push(c);
                }
              }
              delete asPartial.PropertyDefinitionList;
            });
            const BindingElement = this.startNode(node);
            BindingElement.BindingPattern = BindingPattern;
            BindingElement.Initializer = null;
            return this.finishNode(BindingElement, 'BindingElement');
          }
        case 'AssignmentExpression':
          {
            const result = this.convertArrowParameter(node.LeftHandSideExpression);
            result.Initializer = node.AssignmentExpression;
            return result;
          }
        case 'CoverInitializedName':
          {
            const SingleNameBinding = this.repurpose(node, 'SingleNameBinding', (asNew, asOld, asPartial) => {
              asNew.BindingIdentifier = this.repurpose(asOld.IdentifierReference, 'BindingIdentifier');
              delete asPartial.IdentifierReference;
            });
            this.scope.declare(SingleNameBinding, 'parameter');
            return SingleNameBinding;
          }
        case 'PropertyDefinition':
          {
            let BindingProperty;
            if (node.PropertyName === null) {
              BindingProperty = this.repurpose(node, 'BindingRestProperty', (asNew, asOld, asPartial) => {
                asNew.BindingIdentifier = this.repurpose(asOld.AssignmentExpression, 'BindingIdentifier');
                delete asPartial.AssignmentExpression;
              });
            } else {
              BindingProperty = this.repurpose(node, 'BindingProperty', (asNew, asOld, asPartial) => {
                asNew.BindingElement = this.convertArrowParameter(asOld.AssignmentExpression);
                delete asPartial.AssignmentExpression;
              });
            }
            this.scope.declare(node, 'parameter');
            return BindingProperty;
          }
        case 'SpreadElement':
        case 'AssignmentRestElement':
          {
            const BindingRestElement = this.repurpose(node, 'BindingRestElement', (asNew, asOld, asPartial) => {
              const {
                AssignmentExpression
              } = asOld;
              if (AssignmentExpression.type === 'AssignmentExpression') {
                this.raiseEarly('UnexpectedToken', node);
              } else if (AssignmentExpression.type === 'IdentifierReference') {
                asNew.BindingIdentifier = this.repurpose(AssignmentExpression, 'BindingIdentifier');
              } else {
                asNew.BindingPattern = this.convertArrowParameter(AssignmentExpression).BindingPattern;
              }
              delete asPartial.AssignmentExpression;
            });
            this.scope.declare(BindingRestElement, 'parameter');
            return BindingRestElement;
          }
        default:
          this.raiseEarly('UnexpectedToken', node);
          return node;
      }
    }
    parseArrowFunction(node, {
      arrowInfo,
      Arguments
    }, kind) {
      const isAsync = kind === FunctionKind.ASYNC;
      this.expect(Token.ARROW);
      if (arrowInfo) {
        arrowInfo.awaitExpressions.forEach(e => {
          this.raiseEarly('AwaitInFormalParameters', e);
        });
        arrowInfo.yieldExpressions.forEach(e => {
          this.raiseEarly('YieldInFormalParameters', e);
        });
        if (isAsync) {
          arrowInfo.awaitIdentifiers.forEach(e => {
            this.raiseEarly('AwaitInFormalParameters', e);
          });
        }
      }
      this.scope.with({
        default: false,
        lexical: true,
        variable: true
      }, () => {
        node.ArrowParameters = this.scope.with({
          parameters: true
        }, () => Arguments.map(p => this.convertArrowParameter(p)));
        const body = this.parseConciseBody(isAsync);
        this.validateFormalParameters(node.ArrowParameters, body, true);
        let bodyType;
        if (body.type === 'FunctionBody') {
          bodyType = 'ConciseBody';
        } else if (body.type === 'AsyncBody') {
          bodyType = 'AsyncConciseBody';
        } else {
          bodyType = body.type;
        }
        this.setConciseBodyGeneric(node, bodyType, body);
      });
      return this.finishNode(node, `${isAsync ? 'Async' : ''}ArrowFunction`);
    }
    setConciseBodyGeneric(node, type, body) {
      node[type] = body;
    }
    parseConciseBody(isAsync) {
      if (this.test(Token.LBRACE)) {
        return this.parseFunctionBody(isAsync, false, true);
      }
      const asyncBody = this.startNode();
      const exprBody = this.startNode();
      this.scope.with({
        await: isAsync
      }, () => {
        exprBody.AssignmentExpression = this.parseAssignmentExpression();
      });
      asyncBody.ExpressionBody = this.finishNode(exprBody, 'ExpressionBody');
      return this.finishNode(asyncBody, `${isAsync ? 'Async' : ''}ConciseBody`);
    }

    // FormalParameter : BindingElement
    parseFormalParameter() {
      return this.parseBindingElement();
    }
    parseFormalParameters() {
      this.expect(Token.LPAREN);
      if (this.eat(Token.RPAREN)) {
        return [];
      }
      const params = [];
      this.scope.with({
        parameters: true
      }, () => {
        while (true) {
          if (this.test(Token.ELLIPSIS)) {
            const element = this.parseBindingRestElement();
            this.scope.declare(element, 'parameter');
            params.push(element);
            this.expect(Token.RPAREN);
            break;
          } else {
            const formal = this.parseFormalParameter();
            this.scope.declare(formal, 'parameter');
            params.push(formal);
          }
          if (this.eat(Token.RPAREN)) {
            break;
          }
          this.expect(Token.COMMA);
          if (this.eat(Token.RPAREN)) {
            break;
          }
        }
      });
      return params;
    }
    parseUniqueFormalParameters() {
      return this.parseFormalParameters();
    }
    parseFunctionBody(isAsync, isGenerator, isArrow) {
      const node = this.startNode();
      this.expect(Token.LBRACE);
      this.scope.with({
        newTarget: isArrow ? undefined : true,
        return: true,
        await: isAsync,
        yield: isGenerator,
        label: 'boundary'
      }, () => {
        node.directives = [];
        node.FunctionStatementList = this.parseStatementList(Token.RBRACE, node.directives);
        node.strict = node.strict || node.directives.includes('use strict');
      });
      let name;
      if (isAsync) {
        name = isGenerator ? 'AsyncGeneratorBody' : 'AsyncBody';
      } else {
        name = isGenerator ? 'GeneratorBody' : 'FunctionBody';
      }
      return this.finishNode(node, name);
    }
  }

  const isSyntaxCharacter = c => '^$\\.*+?()[]{}|'.includes(c);
  const isClosingSyntaxCharacter = c => ')]}|'.includes(c);
  const isDecimalDigit = c => /[0123456789]/u.test(c);
  const isControlLetter = c => /[a-zA-Z]/u.test(c);
  const isIdentifierContinue = c => c && /\p{ID_Continue}/u.test(c);
  var ParserContext = /*#__PURE__*/function (ParserContext) {
    ParserContext[ParserContext["None"] = 0] = "None";
    ParserContext[ParserContext["U"] = 1] = "U";
    ParserContext[ParserContext["N"] = 2] = "N";
    return ParserContext;
  }(ParserContext || {});
  class RegExpParser {
    source;
    position = 0;
    capturingGroups = [];
    groupSpecifiers = new Map();
    decimalEscapes = [];
    groupNameRefs = [];
    state = ParserContext.None;
    constructor(source) {
      this.source = source;
    }
    scope(flags, f) {
      const oldState = this.state;
      if (flags.U === true) {
        this.state |= ParserContext.U;
      } else if (flags.U === false) {
        this.state &= ~ParserContext.U;
      }
      if (flags.N === true) {
        this.state |= ParserContext.N;
      } else if (flags.N === false) {
        this.state &= ~ParserContext.N;
      }
      const r = f();
      this.state = oldState;
      return r;
    }
    get plusU() {
      return (this.state & ParserContext.U) === ParserContext.U;
    }
    get plusN() {
      return (this.state & ParserContext.N) === ParserContext.N;
    }
    raise(message, position = this.position) {
      const e = new SyntaxError(message);
      e.position = position;
      throw e;
    }
    peek() {
      return this.source[this.position];
    }
    test(c) {
      return this.source[this.position] === c;
    }
    eat(c) {
      if (this.test(c)) {
        this.next();
        return true;
      }
      return false;
    }
    next() {
      const c = this.source[this.position];
      this.position += 1;
      return c;
    }
    expect(c) {
      if (!this.eat(c)) {
        this.raise(`Expected ${c} but got ${this.peek()}`);
      }
    }

    // Pattern ::
    //   Disjunction
    parsePattern() {
      const node = {
        type: 'Pattern',
        groupSpecifiers: this.groupSpecifiers,
        capturingGroups: this.capturingGroups,
        Disjunction: this.parseDisjunction()
      };
      if (this.position < this.source.length) {
        this.raise('Unexpected token');
      }
      this.decimalEscapes.forEach(d => {
        if (d.value > node.capturingGroups.length) {
          this.raise('Invalid decimal escape', d.position);
        }
      });
      this.groupNameRefs.forEach(g => {
        if (!node.groupSpecifiers.has(g.GroupName)) {
          this.raise('Invalid group name', g.position);
        }
      });
      return node;
    }

    // Disjunction ::
    //   Alternative
    //   Alternative `|` Disjunction
    parseDisjunction() {
      const node = {
        type: 'Disjunction',
        Alternative: this.parseAlternative(),
        Disjunction: undefined
      };
      if (this.eat('|')) {
        node.Disjunction = this.parseDisjunction();
      }
      return node;
    }

    // Alternative ::
    //   [empty]
    //   Term Alternative
    parseAlternative() {
      let node = {
        type: 'Alternative',
        Term: undefined,
        Alternative: undefined
      };
      while (this.position < this.source.length && !isClosingSyntaxCharacter(this.peek())) {
        node = {
          type: 'Alternative',
          Term: this.parseTerm(),
          Alternative: node
        };
      }
      return node;
    }

    // Term ::
    //   Assertion
    //   Atom
    //   Atom Quantifier
    parseTerm() {
      const assertion = this.maybeParseAssertion();
      if (assertion) {
        return assertion;
      }
      return {
        type: 'Term',
        capturingParenthesesBefore: this.capturingGroups.length,
        Atom: this.parseAtom(),
        Quantifier: this.maybeParseQuantifier()
      };
    }

    // Assertion ::
    //   `^`
    //   `$`
    //   `\` `b`
    //   `\` `B`
    //   `(` `?` `=` Disjunction `)`
    //   `(` `?` `!` Disjunction `)`
    //   `(` `?` `<=` Disjunction `)`
    //   `(` `?` `<!` Disjunction `)`
    maybeParseAssertion() {
      if (this.eat('^')) {
        return {
          type: 'Assertion',
          subtype: '^'
        };
      }
      if (this.eat('$')) {
        return {
          type: 'Assertion',
          subtype: '$'
        };
      }
      const look2 = this.source.slice(this.position, this.position + 2);
      if (look2 === '\\b') {
        this.position += 2;
        return {
          type: 'Assertion',
          subtype: 'b'
        };
      }
      if (look2 === '\\B') {
        this.position += 2;
        return {
          type: 'Assertion',
          subtype: 'B'
        };
      }
      const look3 = this.source.slice(this.position, this.position + 3);
      if (look3 === '(?=') {
        this.position += 3;
        const d = this.parseDisjunction();
        this.expect(')');
        return {
          type: 'Assertion',
          subtype: '?=',
          Disjunction: d
        };
      }
      if (look3 === '(?!') {
        this.position += 3;
        const d = this.parseDisjunction();
        this.expect(')');
        return {
          type: 'Assertion',
          subtype: '?!',
          Disjunction: d
        };
      }
      const look4 = this.source.slice(this.position, this.position + 4);
      if (look4 === '(?<=') {
        this.position += 4;
        const d = this.parseDisjunction();
        this.expect(')');
        return {
          type: 'Assertion',
          subtype: '?<=',
          Disjunction: d
        };
      }
      if (look4 === '(?<!') {
        this.position += 4;
        const d = this.parseDisjunction();
        this.expect(')');
        return {
          type: 'Assertion',
          subtype: '?<!',
          Disjunction: d
        };
      }
      return undefined;
    }

    // Quantifier ::
    //   QuantifierPrefix
    //   QuantifierPrefix `?`
    // QuantifierPrefix ::
    //   `*`
    //   `+`
    //   `?`
    //   `{` DecimalDigits `}`
    //   `{` DecimalDigits `,` `}`
    //   `{` DecimalDigits `,` DecimalDigits `}`
    maybeParseQuantifier() {
      let QuantifierPrefix;
      if (this.eat('*')) {
        QuantifierPrefix = '*';
      } else if (this.eat('+')) {
        QuantifierPrefix = '+';
      } else if (this.eat('?')) {
        QuantifierPrefix = '?';
      } else if (this.eat('{')) {
        const DecimalDigits_a = Number.parseInt(this.parseDecimalDigits(), 10);
        let DecimalDigits_b;
        if (this.eat(',')) {
          if (this.test('}')) {
            DecimalDigits_b = Infinity;
          } else {
            DecimalDigits_b = Number.parseInt(this.parseDecimalDigits(), 10);
          }
          if (DecimalDigits_a > DecimalDigits_b) {
            this.raise('Numbers out of order in quantifier');
          }
        }
        QuantifierPrefix = {
          DecimalDigits_a,
          DecimalDigits_b
        };
        this.expect('}');
      }
      if (QuantifierPrefix) {
        return {
          type: 'Quantifier',
          QuantifierPrefix,
          greedy: !this.eat('?')
        };
      }
      return undefined;
    }

    // Atom ::
    //   PatternCharacter
    //   `.`
    //   `\` AtomEscape
    //   CharacterClass
    //   `(` GroupSpecifier Disjunction `)`
    //   `(` `?` `:` Disjunction `)`
    parseAtom() {
      if (this.eat('.')) {
        return {
          type: 'Atom',
          subtype: '.',
          enclosedCapturingParentheses: 0
        };
      }
      if (this.eat('\\')) {
        return this.parseAtomEscape();
      }
      if (this.eat('(')) {
        const node = {
          type: 'Atom',
          capturingParenthesesBefore: this.capturingGroups.length,
          enclosedCapturingParentheses: 0,
          capturing: true,
          GroupSpecifier: undefined,
          Disjunction: undefined
        };
        if (this.eat('?')) {
          if (this.eat(':')) {
            node.capturing = false;
          } else {
            node.GroupSpecifier = this.parseGroupName();
          }
        }
        if (node.capturing) {
          this.capturingGroups.push(node);
        }
        if (node.GroupSpecifier) {
          if (this.groupSpecifiers.has(node.GroupSpecifier)) {
            this.raise(`Duplicate group specifier '${node.GroupSpecifier}'`);
          }
          this.groupSpecifiers.set(node.GroupSpecifier, node.capturingParenthesesBefore);
        }
        node.Disjunction = this.parseDisjunction();
        this.expect(')');
        node.enclosedCapturingParentheses = this.capturingGroups.length - node.capturingParenthesesBefore - 1;
        return node;
      }
      if (this.test('[')) {
        return {
          type: 'Atom',
          CharacterClass: this.parseCharacterClass()
        };
      }
      if (isSyntaxCharacter(this.peek())) {
        this.raise(`Expected a PatternCharacter but got ${this.peek()}`);
      }
      return {
        type: 'Atom',
        PatternCharacter: this.parseSourceCharacter()
      };
    }

    // AtomEscape ::
    //   DecimalEscape
    //   CharacterClassEscape
    //   CharacterEscape
    //   [+N] `k` GroupName
    parseAtomEscape() {
      if (this.plusN && this.eat('k')) {
        const node = {
          type: 'AtomEscape',
          position: this.position,
          GroupName: this.parseGroupName()
        };
        this.groupNameRefs.push(node);
        return node;
      }
      const CharacterClassEscape = this.maybeParseCharacterClassEscape();
      if (CharacterClassEscape) {
        return {
          type: 'AtomEscape',
          CharacterClassEscape
        };
      }
      const DecimalEscape = this.maybeParseDecimalEscape();
      if (DecimalEscape) {
        return {
          type: 'AtomEscape',
          DecimalEscape
        };
      }
      return {
        type: 'AtomEscape',
        CharacterEscape: this.parseCharacterEscape()
      };
    }

    // CharacterEscape ::
    //   ControlEscape
    //   `c` ControlLetter
    //   `0` [lookahead ∉ DecimalDigit]
    //   HexEscapeSequence
    //   RegExpUnicodeEscapeSequence
    //   IdentityEscape
    //
    // IdentityEscape ::
    //   [+U] SyntaxCharacter
    //   [+U] `/`
    //   [~U] SourceCharacter but not UnicodeIDContinue
    parseCharacterEscape() {
      switch (this.peek()) {
        case 'f':
        case 'n':
        case 'r':
        case 't':
        case 'v':
          return {
            type: 'CharacterEscape',
            ControlEscape: this.next()
          };
        case 'c':
          {
            this.next();
            const c = this.next();
            if (c === undefined) {
              if (this.plusU) {
                this.raise('Invalid identity escape');
              }
              return {
                type: 'CharacterEscape',
                IdentityEscape: 'c'
              };
            }
            const p = c.codePointAt(0);
            if (p >= 65 && p <= 90 || p >= 97 && p <= 122) {
              return {
                type: 'CharacterEscape',
                ControlLetter: c
              };
            }
            if (this.plusU) {
              this.raise('Invalid identity escape');
            }
            return {
              type: 'CharacterEscape',
              IdentityEscape: c
            };
          }
        case 'x':
          if (isHexDigit(this.source[this.position + 1]) && isHexDigit(this.source[this.position + 2])) {
            return {
              type: 'CharacterEscape',
              HexEscapeSequence: this.parseHexEscapeSequence()
            };
          }
          if (this.plusU) {
            this.raise('Invalid identity escape');
          }
          this.next();
          return {
            type: 'CharacterEscape',
            IdentityEscape: 'x'
          };
        case 'u':
          {
            const RegExpUnicodeEscapeSequence = this.maybeParseRegExpUnicodeEscapeSequence();
            if (RegExpUnicodeEscapeSequence) {
              return {
                type: 'CharacterEscape',
                RegExpUnicodeEscapeSequence
              };
            }
            if (this.plusU) {
              this.raise('Invalid identity escape');
            }
            this.next();
            return {
              type: 'CharacterEscape',
              IdentityEscape: 'u'
            };
          }
        default:
          {
            const c = this.peek();
            if (c === undefined) {
              this.raise('Unexpected escape');
            }
            if (c === '0' && !isDecimalDigit(this.source[this.position + 1])) {
              return {
                type: 'CharacterEscape',
                subtype: this.next()
              };
            }
            if (this.plusU) {
              if (c !== '/' && !isSyntaxCharacter(c)) {
                this.raise('Invalid identity escape');
              }
            } else {
              if (isIdentifierContinue(c)) {
                this.raise('Invalid identity escape');
              }
            }
            return {
              type: 'CharacterEscape',
              IdentityEscape: this.next()
            };
          }
      }
    }

    // DecimalEscape ::
    //   NonZeroDigit DecimalDigits? [lookahead != DecimalDigit]
    maybeParseDecimalEscape() {
      if (isDecimalDigit(this.source[this.position]) && this.source[this.position] !== '0') {
        const start = this.position;
        let buffer = this.source[this.position];
        this.position += 1;
        while (isDecimalDigit(this.source[this.position])) {
          buffer += this.source[this.position];
          this.position += 1;
        }
        const node = {
          type: 'DecimalEscape',
          position: start,
          value: Number.parseInt(buffer, 10)
        };
        this.decimalEscapes.push(node);
        return node;
      }
      return undefined;
    }

    // CharacterClassEscape ::
    //   `d`
    //   `D`
    //   `s`
    //   `S`
    //   `w`
    //   `W`
    //   [+U] `p{` UnicodePropertyValueExpression `}`
    //   [+U] `P{` UnicodePropertyValueExpression `}`
    maybeParseCharacterClassEscape() {
      switch (this.peek()) {
        case 'd':
        case 'D':
        case 's':
        case 'S':
        case 'w':
        case 'W':
          return {
            type: 'CharacterClassEscape',
            value: this.next()
          };
        case 'p':
        case 'P':
          {
            if (!this.plusU) {
              return undefined;
            }
            const value = this.next();
            this.expect('{');
            let sawDigit;
            let LoneUnicodePropertyNameOrValue = '';
            while (true) {
              if (this.position >= this.source.length) {
                this.raise('Invalid unicode property name or value');
              }
              const c = this.source[this.position];
              if (isDecimalDigit(c)) {
                sawDigit = true;
                this.position += 1;
                LoneUnicodePropertyNameOrValue += c;
                continue;
              }
              if (c === '_') {
                this.position += 1;
                LoneUnicodePropertyNameOrValue += c;
                continue;
              }
              if (!isControlLetter(c)) {
                break;
              }
              this.position += 1;
              LoneUnicodePropertyNameOrValue += c;
            }
            if (LoneUnicodePropertyNameOrValue.length === 0) {
              this.raise('Invalid unicode property name or value');
            }
            if (sawDigit && this.eat('}')) {
              if (!(LoneUnicodePropertyNameOrValue in UnicodeGeneralCategoryValues || LoneUnicodePropertyNameOrValue in BinaryUnicodeProperties)) {
                this.raise('Invalid unicode property name or value');
              }
              return {
                type: 'CharacterClassEscape',
                value,
                UnicodePropertyValueExpression: {
                  type: 'UnicodePropertyValueExpression',
                  LoneUnicodePropertyNameOrValue
                }
              };
            }
            let UnicodePropertyValue;
            if (this.source[this.position] === '=') {
              this.position += 1;
              UnicodePropertyValue = '';
              while (true) {
                if (this.position >= this.source.length) {
                  this.raise('Invalid unicode property value');
                }
                const c = this.source[this.position];
                if (!isControlLetter(c) && !isDecimalDigit(c) && c !== '_') {
                  break;
                }
                this.position += 1;
                UnicodePropertyValue += c;
              }
              if (UnicodePropertyValue.length === 0) {
                this.raise('Invalid unicode property value');
              }
            }
            this.expect('}');
            if (UnicodePropertyValue) {
              if (!(LoneUnicodePropertyNameOrValue in NonbinaryUnicodeProperties)) {
                this.raise('Invalid unicode property name');
              }
              if (!(UnicodePropertyValue in UnicodeGeneralCategoryValues || UnicodePropertyValue in UnicodeScriptValues)) {
                this.raise('Invalid unicode property value');
              }
              return {
                type: 'CharacterClassEscape',
                value,
                UnicodePropertyValueExpression: {
                  type: 'UnicodePropertyValueExpression',
                  UnicodePropertyName: LoneUnicodePropertyNameOrValue,
                  UnicodePropertyValue
                }
              };
            }
            if (!(LoneUnicodePropertyNameOrValue in UnicodeGeneralCategoryValues || LoneUnicodePropertyNameOrValue in BinaryUnicodeProperties)) {
              this.raise('Invalid unicode property name or value');
            }
            return {
              type: 'CharacterClassEscape',
              value,
              UnicodePropertyValueExpression: {
                type: 'UnicodePropertyValueExpression',
                LoneUnicodePropertyNameOrValue
              }
            };
          }
        default:
          return undefined;
      }
    }

    // CharacterClass ::
    //   `[` ClassRanges `]`
    //   `[` `^` ClassRanges `]`
    parseCharacterClass() {
      this.expect('[');
      const invert = this.eat('^');
      const ClassRanges = this.parseClassRanges();
      const node = {
        type: 'CharacterClass',
        invert,
        ClassRanges
      };
      this.expect(']');
      return node;
    }

    // ClassRanges ::
    //   [empty]
    //   NonemptyClassRanges
    parseClassRanges() {
      const ranges = [];
      while (!this.test(']')) {
        if (this.position >= this.source.length) {
          this.raise('Unexpected end of CharacterClass');
        }
        const atom = this.parseClassAtom();
        if (this.eat('-')) {
          if (atom.type === 'CharacterClassEscape') {
            this.raise('Invalid class range');
          }
          if (this.test(']')) {
            ranges.push(atom);
            ranges.push({
              type: 'ClassAtom',
              value: '-'
            });
          } else {
            const atom2 = this.parseClassAtom();
            if (atom2.type === 'CharacterClassEscape') {
              this.raise('Invalid class range');
            }
            if (CharacterValue(atom) > CharacterValue(atom2)) {
              this.raise('Invalid class range');
            }
            ranges.push([atom, atom2]);
          }
        } else {
          ranges.push(atom);
        }
      }
      return ranges;
    }

    // ClassAtom ::
    //   `-`
    //   ClassAtomNoDash
    // ClassAtomNoDash ::
    //   SourceCharacter but not one of `\` or `]` or `-`
    //   `\` ClassEscape
    // ClassEscape :
    //   `b`
    //   [+U] `-`
    //   CharacterClassEscape
    //   CharacterEscape
    parseClassAtom() {
      if (this.eat('\\')) {
        if (this.eat('b')) {
          return {
            type: 'ClassEscape',
            value: 'b'
          };
        }
        if (this.plusU && this.eat('-')) {
          return {
            type: 'ClassEscape',
            value: '-'
          };
        }
        const CharacterClassEscape = this.maybeParseCharacterClassEscape();
        if (CharacterClassEscape) {
          return CharacterClassEscape;
        }
        return {
          type: 'ClassEscape',
          CharacterEscape: this.parseCharacterEscape()
        };
      }
      return {
        type: 'ClassAtom',
        SourceCharacter: this.parseSourceCharacter()
      };
    }
    parseSourceCharacter() {
      const lead = this.source.charCodeAt(this.position);
      const trail = this.source.charCodeAt(this.position + 1);
      if (trail && isLeadingSurrogate(lead) && isTrailingSurrogate(trail)) {
        return this.next() + this.next();
      }
      return this.next();
    }
    parseGroupName() {
      this.expect('<');
      const RegExpIdentifierName = this.parseRegExpIdentifierName();
      this.expect('>');
      return RegExpIdentifierName;
    }

    // RegExpIdentifierName ::
    //   RegExpIdentifierStart
    //   RegExpIdentifierName RegExpIdentifierPart
    parseRegExpIdentifierName() {
      let buffer = '';
      let check = isIdentifierStart;
      while (this.position < this.source.length) {
        const c = this.source[this.position];
        const code = c.charCodeAt(0);
        if (c === '\\') {
          this.position += 1;
          const RegExpUnicodeEscapeSequence = this.scope({
            U: true
          }, () => this.maybeParseRegExpUnicodeEscapeSequence());
          if (!RegExpUnicodeEscapeSequence) {
            this.raise('Invalid unicode escape');
          }
          const raw = String.fromCodePoint(CharacterValue(RegExpUnicodeEscapeSequence));
          if (!check(raw)) {
            this.raise('Invalid identifier escape');
          }
          buffer += raw;
        } else if (isLeadingSurrogate(code)) {
          const lowSurrogate = this.source.charCodeAt(this.position + 1);
          if (!isTrailingSurrogate(lowSurrogate)) {
            this.raise('Invalid trailing surrogate');
          }
          const codePoint = UTF16SurrogatePairToCodePoint(code, lowSurrogate);
          const raw = String.fromCodePoint(codePoint);
          if (!check(raw)) {
            this.raise('Invalid surrogate pair');
          }
          this.position += 2;
          buffer += raw;
        } else if (check(c)) {
          buffer += c;
          this.position += 1;
        } else {
          break;
        }
        check = isIdentifierPart;
      }
      if (buffer.length === 0) {
        this.raise('Invalid empty identifier');
      }
      return buffer;
    }

    // DecimalDigits ::
    //   DecimalDigit
    //   DecimalDigits DecimalDigit
    parseDecimalDigits() {
      let n = '';
      if (!isDecimalDigit(this.peek())) {
        this.raise('Invalid decimal digits');
      }
      while (isDecimalDigit(this.peek())) {
        n += this.next();
      }
      return n;
    }

    // HexEscapeSequence ::
    //   `x` HexDigit HexDigit
    parseHexEscapeSequence() {
      this.expect('x');
      const HexDigit_a = this.next();
      if (!isHexDigit(HexDigit_a)) {
        this.raise('Not a hex digit');
      }
      const HexDigit_b = this.next();
      if (!isHexDigit(HexDigit_b)) {
        this.raise('Not a hex digit');
      }
      return {
        type: 'HexEscapeSequence',
        HexDigit_a,
        HexDigit_b
      };
    }
    scanHex(length) {
      if (length === 0) {
        this.raise('Invalid code point');
      }
      let n = 0;
      for (let i = 0; i < length; i += 1) {
        const c = this.source[this.position];
        if (isHexDigit(c)) {
          this.position += 1;
          n = n << 4 | Number.parseInt(c, 16);
        } else {
          this.raise('Invalid hex digit');
        }
      }
      return n;
    }

    // RegExpUnicodeEscapeSequence ::
    //   [+U] `u` HexLeadSurrogate `\u` HexTrailSurrogate
    //   [+U] `u` HexLeadSurrogate
    //   [+U] `u` HexTrailSurrogate
    //   [+U] `u` HexNonSurrogate
    //   [~U] `u` Hex4Digits
    //   [+U] `u{` CodePoint `}`
    maybeParseRegExpUnicodeEscapeSequence() {
      const start = this.position;
      if (!this.eat('u')) {
        this.position = start;
        return undefined;
      }
      if (this.plusU && this.eat('{')) {
        const end = this.source.indexOf('}', this.position);
        if (end === -1) {
          this.raise('Invalid code point');
        }
        const code = this.scanHex(end - this.position);
        if (code > 0x10FFFF) {
          this.raise('Invalid code point');
        }
        this.position += 1;
        return {
          type: 'RegExpUnicodeEscapeSequence',
          CodePoint: code
        };
      }
      let lead;
      try {
        lead = this.scanHex(4);
      } catch {
        this.position = start;
        return undefined;
      }
      if (this.plusU && isLeadingSurrogate(lead)) {
        const back = this.position;
        if (this.eat('\\') && this.eat('u')) {
          let trail;
          try {
            trail = this.scanHex(4);
          } catch {
            this.position = back;
          }
          return {
            type: 'RegExpUnicodeEscapeSequence',
            HexLeadSurrogate: lead,
            HexTrailSurrogate: trail
          };
        }
        return {
          type: 'RegExpUnicodeEscapeSequence',
          HexLeadSurrogate: lead
        };
      }
      return {
        type: 'RegExpUnicodeEscapeSequence',
        Hex4Digits: lead
      };
    }
  }

  class ExpressionParser extends FunctionParser {
    // Expression :
    //   AssignmentExpression
    //   Expression `,` AssignmentExpression
    parseExpression() {
      const AssignmentExpression = this.parseAssignmentExpression();
      if (this.eat(Token.COMMA)) {
        const CommaOperator = this.startNode(AssignmentExpression);
        const ExpressionList = [AssignmentExpression];
        do {
          ExpressionList.push(this.parseAssignmentExpression());
        } while (this.eat(Token.COMMA));
        CommaOperator.ExpressionList = ExpressionList;
        return this.finishNode(CommaOperator, 'CommaOperator');
      }
      return AssignmentExpression;
    }

    // AssignmentExpression :
    //   ConditionalExpression
    //   [+Yield] YieldExpression
    //   ArrowFunction
    //   AsyncArrowFunction
    //   LeftHandSideExpression `=` AssignmentExpression
    //   LeftHandSideExpression AssignmentOperator AssignmentExpression
    //   LeftHandSideExpression LogicalAssignmentOperator AssignmentExpression
    //
    // AssignmentOperator : one of
    //   *= /= %= += -= <<= >>= >>>= &= ^= |= **=
    //
    // LogicalAssignmentOperator : one of
    //   &&= ||= ??=
    parseAssignmentExpression() {
      if (this.test(Token.YIELD) && this.scope.hasYield()) {
        return this.parseYieldExpression();
      }
      this.scope.pushAssignmentInfo('assign');
      const left = this.parseConditionalExpression();
      const assignmentInfo = this.scope.popAssignmentInfo();
      if (left.type === 'IdentifierReference') {
        // `async` [no LineTerminator here] IdentifierReference [no LineTerminator here] `=>`
        if (left.name === 'async' && this.test(Token.IDENTIFIER) && !this.peek().hadLineTerminatorBefore && this.testAhead(Token.ARROW) && !this.peekAhead().hadLineTerminatorBefore) {
          assignmentInfo.clear();
          const node = this.startNode(left);
          return this.parseArrowFunction(node, {
            Arguments: [this.parseIdentifierReference()]
          }, FunctionKind.ASYNC);
        }
        // IdentifierReference [no LineTerminator here] `=>`
        if (this.test(Token.ARROW) && !this.peek().hadLineTerminatorBefore) {
          assignmentInfo.clear();
          const node = this.startNode(left);
          return this.parseArrowFunction(node, {
            Arguments: [left]
          }, FunctionKind.NORMAL);
        }
      }

      // `async` [no LineTerminator here] Arguments [no LineTerminator here] `=>`
      if (left.type === 'CallExpression' && left.arrowInfo && this.test(Token.ARROW) && !this.peek().hadLineTerminatorBefore) {
        const last = left.Arguments[left.Arguments.length - 1];
        if (!left.arrowInfo.hasTrailingComma || last && last.type !== 'AssignmentRestElement') {
          assignmentInfo.clear();
          const node = this.startNode(left);
          return this.parseArrowFunction(node, left, FunctionKind.ASYNC);
        }
      }
      if (left.type === 'CoverParenthesizedExpressionAndArrowParameterList') {
        assignmentInfo.clear();
        const node = this.startNode(left);
        return this.parseArrowFunction(node, left, FunctionKind.NORMAL);
      }
      switch (this.peek().type) {
        case Token.ASSIGN:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_SHL:
        case Token.ASSIGN_SAR:
        case Token.ASSIGN_SHR:
        case Token.ASSIGN_BIT_AND:
        case Token.ASSIGN_BIT_XOR:
        case Token.ASSIGN_BIT_OR:
        case Token.ASSIGN_EXP:
        case Token.ASSIGN_AND:
        case Token.ASSIGN_OR:
        case Token.ASSIGN_NULLISH:
          {
            assignmentInfo.clear();
            const node = this.startNode(left);
            this.validateAssignmentTarget(left);
            node.LeftHandSideExpression = left;
            // NOTE: This cast isn't strictly sound as it depends on an expectation that `this.next.value` is correlated
            //       to `this.peek().type` which cannot be verified by the type system.
            node.AssignmentOperator = this.next().value;
            node.AssignmentExpression = this.parseAssignmentExpression();
            return this.finishNode(node, 'AssignmentExpression');
          }
        default:
          return left;
      }
    }
    validateAssignmentTarget(node) {
      switch (node.type) {
        case 'IdentifierReference':
          if (this.isStrictMode() && (node.name === 'eval' || node.name === 'arguments')) {
            break;
          }
          return;
        case 'CoverInitializedName':
          this.validateAssignmentTarget(node.IdentifierReference);
          return;
        case 'MemberExpression':
          return;
        case 'SuperProperty':
          return;
        case 'ParenthesizedExpression':
          if (node.Expression.type === 'ObjectLiteral' || node.Expression.type === 'ArrayLiteral') {
            break;
          }
          this.validateAssignmentTarget(node.Expression);
          return;
        case 'ArrayLiteral':
          node.ElementList.forEach((p, i) => {
            if (p.type === 'SpreadElement' && (i !== node.ElementList.length - 1 || node.hasTrailingComma)) {
              this.raiseEarly('InvalidAssignmentTarget', p);
            }
            if (p.type === 'AssignmentExpression') {
              this.validateAssignmentTarget(p.LeftHandSideExpression);
            } else {
              this.validateAssignmentTarget(p);
            }
          });
          return;
        case 'ObjectLiteral':
          node.PropertyDefinitionList.forEach((p, i) => {
            if (p.type === 'PropertyDefinition' && !p.PropertyName && i !== node.PropertyDefinitionList.length - 1) {
              this.raiseEarly('InvalidAssignmentTarget', p);
            }
            this.validateAssignmentTarget(p);
          });
          return;
        case 'PropertyDefinition':
          if (node.AssignmentExpression.type === 'AssignmentExpression') {
            this.validateAssignmentTarget(node.AssignmentExpression.LeftHandSideExpression);
          } else {
            this.validateAssignmentTarget(node.AssignmentExpression);
          }
          return;
        case 'Elision':
          return;
        case 'SpreadElement':
          if (node.AssignmentExpression.type === 'AssignmentExpression') {
            break;
          }
          this.validateAssignmentTarget(node.AssignmentExpression);
          return;
      }
      this.raiseEarly('InvalidAssignmentTarget', node);
    }

    // YieldExpression :
    //   `yield`
    //   `yield` [no LineTerminator here] AssignmentExpression
    //   `yield` [no LineTerminator here] `*` AssignmentExpression
    parseYieldExpression() {
      if (this.scope.inParameters()) {
        this.raiseEarly('YieldInFormalParameters');
      }
      const node = this.startNode();
      this.expect(Token.YIELD);
      if (this.peek().hadLineTerminatorBefore) {
        node.hasStar = false;
        node.AssignmentExpression = null;
      } else {
        node.hasStar = this.eat(Token.MUL);
        if (node.hasStar) {
          node.AssignmentExpression = this.parseAssignmentExpression();
        } else {
          switch (this.peek().type) {
            case Token.EOS:
            case Token.SEMICOLON:
            case Token.RBRACE:
            case Token.RBRACK:
            case Token.RPAREN:
            case Token.COLON:
            case Token.COMMA:
            case Token.IN:
              node.AssignmentExpression = null;
              break;
            default:
              node.AssignmentExpression = this.parseAssignmentExpression();
          }
        }
      }
      this.scope.arrowInfo?.yieldExpressions.push(node);
      return this.finishNode(node, 'YieldExpression');
    }

    // ConditionalExpression :
    //   ShortCircuitExpression
    //   ShortCircuitExpression `?` AssignmentExpression `:` AssignmentExpression
    parseConditionalExpression() {
      const ShortCircuitExpression = this.parseShortCircuitExpression();
      if (this.eat(Token.CONDITIONAL)) {
        const node = this.startNode(ShortCircuitExpression);
        node.ShortCircuitExpression = ShortCircuitExpression;
        this.scope.with({
          in: true
        }, () => {
          node.AssignmentExpression_a = this.parseAssignmentExpression();
        });
        this.expect(Token.COLON);
        node.AssignmentExpression_b = this.parseAssignmentExpression();
        return this.finishNode(node, 'ConditionalExpression');
      }
      return ShortCircuitExpression;
    }

    // ShortCircuitExpression :
    //   LogicalORExpression
    //   CoalesceExpression
    //
    // CoalesceExpression :
    //   CoalesceExpressionHead `??` BitwiseORExpression
    //
    // CoalesceExpressionHead :
    //   CoalesceExpression
    //   BitwiseORExpression
    parseShortCircuitExpression() {
      // Start parse at BIT_OR, right above AND/OR/NULLISH
      const expression = this.parseBinaryExpression(TokenPrecedence[Token.BIT_OR]);
      switch (this.peek().type) {
        case Token.AND:
        case Token.OR:
          // Drop into normal binary chain starting at OR
          return this.parseBinaryExpression(TokenPrecedence[Token.OR], expression);
        case Token.NULLISH:
          {
            let x = expression;
            while (this.eat(Token.NULLISH)) {
              const node = this.startNode();
              node.CoalesceExpressionHead = x;
              node.BitwiseORExpression = this.parseBinaryExpression(TokenPrecedence[Token.BIT_OR]);
              x = this.finishNode(node, 'CoalesceExpression');
            }
            return x;
          }
        default:
          return expression;
      }
    }
    parseBinaryExpression(precedence, x) {
      if (!x) {
        if (this.test(Token.PRIVATE_IDENTIFIER)) {
          x = this.parsePrivateIdentifier();
          const p = TokenPrecedence[this.peek().type];
          if (!this.test(Token.IN) || p < precedence) {
            this.raise('UnexpectedToken');
          }
          this.scope.checkUndefinedPrivate(x);
          return this.parseBinaryExpression(p, x);
        } else {
          x = this.parseUnaryExpression();
        }
      }

      // NOTE: While the algorithm may be efficient, many casts below are inherently unsound as they depend on assumptions
      //       that cannot be proven in the type system without runtime assertions.
      let p = TokenPrecedence[this.peek().type];
      if (p >= precedence) {
        do {
          while (TokenPrecedence[this.peek().type] === p) {
            const left = x;
            if (p === TokenPrecedence[Token.EXP] && (left.type === 'UnaryExpression' || left.type === 'AwaitExpression')) {
              return left;
            }
            let node;
            if (this.peek().type === Token.IN && !this.scope.hasIn()) {
              return left;
            }
            const op = this.next();
            const right = this.parseBinaryExpression(op.type === Token.EXP ? p : p + 1);
            let name;
            switch (op.type) {
              case Token.EXP:
                name = 'ExponentiationExpression';
                node = this.startNode(left);
                node.UpdateExpression = left; // NOTE: unsound cast
                node.ExponentiationExpression = right; // NOTE: unsound cast
                break;
              case Token.MUL:
              case Token.DIV:
              case Token.MOD:
                name = 'MultiplicativeExpression';
                node = this.startNode(left);
                node.MultiplicativeExpression = left; // NOTE: unsound cast
                node.MultiplicativeOperator = op.value; // NOTE: unsound cast
                node.ExponentiationExpression = right; // NOTE: unsound cast
                break;
              case Token.ADD:
              case Token.SUB:
                name = 'AdditiveExpression';
                node = this.startNode(left);
                node.AdditiveExpression = left; // NOTE: unsound cast
                node.MultiplicativeExpression = right; // NOTE: unsound cast
                node.operator = op.value; // NOTE: unsound cast
                break;
              case Token.SHL:
              case Token.SAR:
              case Token.SHR:
                name = 'ShiftExpression';
                node = this.startNode(left);
                node.ShiftExpression = left; // NOTE: unsound cast
                node.AdditiveExpression = right; // NOTE: unsound cast
                node.operator = op.value; // NOTE: unsound cast
                break;
              case Token.LT:
              case Token.GT:
              case Token.LTE:
              case Token.GTE:
              case Token.INSTANCEOF:
              case Token.IN:
                name = 'RelationalExpression';
                node = this.startNode(left);
                if (left.type === 'PrivateIdentifier') {
                  node.PrivateIdentifier = left;
                } else {
                  node.RelationalExpression = left; // NOTE: unsound cast
                }
                node.ShiftExpression = right; // NOTE: unsound cast
                node.operator = op.value; // NOTE: unsound cast
                break;
              case Token.EQ:
              case Token.NE:
              case Token.EQ_STRICT:
              case Token.NE_STRICT:
                name = 'EqualityExpression';
                node = this.startNode(left);
                node.EqualityExpression = left; // NOTE: unsound cast
                node.RelationalExpression = right; // NOTE: unsound cast
                node.operator = op.value; // NOTE: unsound cast
                break;
              case Token.BIT_AND:
                name = 'BitwiseANDExpression';
                node = this.startNode(left);
                node.A = left; // NOTE: unsound cast
                node.operator = op.value; // NOTE: unsound cast
                node.B = right; // NOTE: unsound cast
                break;
              case Token.BIT_XOR:
                name = 'BitwiseXORExpression';
                node = this.startNode(left);
                node.A = left; // NOTE: unsound cast
                node.operator = op.value; // NOTE: unsound cast
                node.B = right; // NOTE: unsound cast
                break;
              case Token.BIT_OR:
                name = 'BitwiseORExpression';
                node = this.startNode(left);
                node.A = left; // NOTE: unsound cast
                node.operator = op.value; // NOTE: unsound cast
                node.B = right; // NOTE: unsound cast
                break;
              case Token.AND:
                name = 'LogicalANDExpression';
                node = this.startNode(left);
                node.LogicalANDExpression = left; // NOTE: unsound cast
                node.BitwiseORExpression = right; // NOTE: unsound cast
                break;
              case Token.OR:
                name = 'LogicalORExpression';
                node = this.startNode(left);
                node.LogicalORExpression = left; // NOTE: unsound cast
                node.LogicalANDExpression = right; // NOTE: unsound cast
                break;
              default:
                this.unexpected(op);
            }
            x = this.finishNode(node, name);
          }
          p -= 1;
        } while (p >= precedence);
      }
      return x;
    }

    // UnaryExpression :
    //   UpdateExpression
    //   `delete` UnaryExpression
    //   `void` UnaryExpression
    //   `typeof` UnaryExpression
    //   `+` UnaryExpression
    //   `-` UnaryExpression
    //   `~` UnaryExpression
    //   `!` UnaryExpression
    //   [+Await] AwaitExpression
    parseUnaryExpression() {
      return this.scope.with({
        in: true
      }, () => {
        if (this.test(Token.AWAIT) && this.scope.hasAwait()) {
          return this.parseAwaitExpression();
        }
        switch (this.peek().type) {
          case Token.DELETE:
          case Token.VOID:
          case Token.TYPEOF:
          case Token.ADD:
          case Token.SUB:
          case Token.BIT_NOT:
          case Token.NOT:
            {
              const node = this.startNode();
              node.operator = this.next().value; // NOTE: unsound cast
              node.UnaryExpression = this.parseUnaryExpression();
              if (node.operator === 'delete') {
                let target = node.UnaryExpression;
                while (target.type === 'ParenthesizedExpression') {
                  target = target.Expression;
                }
                if (this.isStrictMode() && target.type === 'IdentifierReference') {
                  this.raiseEarly('DeleteIdentifier', target);
                }
                if (target.type === 'MemberExpression' && target.PrivateIdentifier) {
                  this.raiseEarly('DeletePrivateName', target);
                }
              }
              return this.finishNode(node, 'UnaryExpression');
            }
          default:
            return this.parseUpdateExpression();
        }
      });
    }

    // AwaitExpression : `await` UnaryExpression
    parseAwaitExpression() {
      if (this.scope.inParameters()) {
        this.raiseEarly('AwaitInFormalParameters');
      } else if (this.scope.inClassStaticBlock()) {
        this.raiseEarly('AwaitInClassStaticBlock');
      }
      const node = this.startNode();
      this.expect(Token.AWAIT);
      node.UnaryExpression = this.parseUnaryExpression();
      this.scope.arrowInfo?.awaitExpressions.push(node);
      if (!this.scope.hasReturn()) {
        this.state.hasTopLevelAwait = true;
      }
      return this.finishNode(node, 'AwaitExpression');
    }

    // UpdateExpression :
    //   LeftHandSideExpression
    //   LeftHandSideExpression [no LineTerminator here] `++`
    //   LeftHandSideExpression [no LineTerminator here] `--`
    //   `++` UnaryExpression
    //   `--` UnaryExpression
    parseUpdateExpression() {
      if (this.test(Token.INC) || this.test(Token.DEC)) {
        const node = this.startNode();
        node.operator = this.next().value; // NOTE: unsound cast
        node.LeftHandSideExpression = null;
        node.UnaryExpression = this.parseUnaryExpression();
        this.validateAssignmentTarget(node.UnaryExpression);
        return this.finishNode(node, 'UpdateExpression');
      }
      const argument = this.parseLeftHandSideExpression();
      if (!this.peek().hadLineTerminatorBefore) {
        if (this.test(Token.INC) || this.test(Token.DEC)) {
          this.validateAssignmentTarget(argument);
          const node = this.startNode(argument);
          node.operator = this.next().value; // NOTE: unsound cast
          node.LeftHandSideExpression = argument;
          node.UnaryExpression = null;
          return this.finishNode(node, 'UpdateExpression');
        }
      }
      return argument;
    }

    // LeftHandSideExpression
    parseLeftHandSideExpression(allowCalls = true) {
      let result;
      switch (this.peek().type) {
        case Token.NEW:
          result = this.parseNewExpression();
          break;
        case Token.SUPER:
          {
            const node = this.startNode();
            this.next();
            if (this.test(Token.LPAREN)) {
              if (!this.scope.hasSuperCall()) {
                this.raiseEarly('InvalidSuperCall');
              }
              node.Arguments = this.parseArguments().Arguments;
              result = this.finishNode(node, 'SuperCall');
            } else {
              if (!this.scope.hasSuperProperty()) {
                this.raiseEarly('InvalidSuperProperty');
              }
              if (this.eat(Token.LBRACK)) {
                node.Expression = this.parseExpression();
                this.expect(Token.RBRACK);
                node.IdentifierName = null;
              } else {
                this.expect(Token.PERIOD);
                node.Expression = null;
                node.IdentifierName = this.parseIdentifierName();
              }
              result = this.finishNode(node, 'SuperProperty');
            }
            break;
          }
        case Token.IMPORT:
          {
            const node = this.startNode();
            this.next();
            if (this.scope.hasImportMeta() && this.eat(Token.PERIOD)) {
              this.expect('meta');
              result = this.finishNode(node, 'ImportMeta');
            } else {
              if (!allowCalls) {
                this.unexpected();
              }
              this.expect(Token.LPAREN);
              node.AssignmentExpression = this.parseAssignmentExpression();
              this.expect(Token.RPAREN);
              result = this.finishNode(node, 'ImportCall');
            }
            break;
          }
        default:
          result = this.parsePrimaryExpression();
          break;
      }
      const check = allowCalls ? isPropertyOrCall : isMember;
      while (check(this.peek().type)) {
        let finished;
        switch (this.peek().type) {
          case Token.LBRACK:
            {
              const node = this.startNode(result);
              this.next();
              node.MemberExpression = result;
              node.IdentifierName = null;
              node.Expression = this.parseExpression();
              this.expect(Token.RBRACK);
              finished = this.finishNode(node, 'MemberExpression');
              break;
            }
          case Token.PERIOD:
            {
              const node = this.startNode(result);
              this.next();
              node.MemberExpression = result;
              if (this.test(Token.PRIVATE_IDENTIFIER)) {
                node.PrivateIdentifier = this.parsePrivateIdentifier();
                this.scope.checkUndefinedPrivate(node.PrivateIdentifier);
                node.IdentifierName = null;
              } else {
                node.IdentifierName = this.parseIdentifierName();
                node.PrivateIdentifier = null;
              }
              node.Expression = null;
              finished = this.finishNode(node, 'MemberExpression');
              break;
            }
          case Token.LPAREN:
            {
              const node = this.startNode(result);
              // `async` [no LineTerminator here] `(`
              const couldBeArrow = this.matches('async', this.currentToken) && result.type === 'IdentifierReference' && !this.peek().hadLineTerminatorBefore;
              if (couldBeArrow) {
                this.scope.pushArrowInfo(true);
              }
              const {
                Arguments,
                trailingComma
              } = this.parseArguments();
              node.CallExpression = result;
              node.Arguments = Arguments;
              if (couldBeArrow) {
                node.arrowInfo = this.scope.popArrowInfo();
                node.arrowInfo.hasTrailingComma = trailingComma;
              }
              finished = this.finishNode(node, 'CallExpression');
              break;
            }
          case Token.OPTIONAL:
            {
              const node = this.startNode(result);
              node.MemberExpression = result;
              node.OptionalChain = this.parseOptionalChain();
              finished = this.finishNode(node, 'OptionalExpression');
              break;
            }
          case Token.TEMPLATE:
            {
              const node = this.startNode(result);
              node.MemberExpression = result;
              node.TemplateLiteral = this.parseTemplateLiteral(true);
              finished = this.finishNode(node, 'TaggedTemplateExpression');
              break;
            }
          default:
            this.unexpected();
        }
        // NOTE: unwinds ParseNode.Finish type alias to avoid circularity issues in type checker
        result = finished;
      }
      return result;
    }

    // OptionalChain
    parseOptionalChain() {
      this.expect(Token.OPTIONAL);
      const base = this.startNode();
      base.OptionalChain = null;
      if (this.test(Token.LPAREN)) {
        base.Arguments = this.parseArguments().Arguments;
      } else if (this.eat(Token.LBRACK)) {
        base.Expression = this.parseExpression();
        this.expect(Token.RBRACK);
      } else if (this.test(Token.TEMPLATE)) {
        this.raise('TemplateInOptionalChain');
      } else if (this.test(Token.PRIVATE_IDENTIFIER)) {
        base.PrivateIdentifier = this.parsePrivateIdentifier();
        this.scope.checkUndefinedPrivate(base.PrivateIdentifier);
      } else {
        base.IdentifierName = this.parseIdentifierName();
      }
      let chain = this.finishNode(base, 'OptionalChain');
      while (true) {
        const node = this.startNode();
        if (this.test(Token.LPAREN)) {
          node.OptionalChain = chain;
          node.Arguments = this.parseArguments().Arguments;
          chain = this.finishNode(node, 'OptionalChain');
        } else if (this.eat(Token.LBRACK)) {
          node.OptionalChain = chain;
          node.Expression = this.parseExpression();
          this.expect(Token.RBRACK);
          chain = this.finishNode(node, 'OptionalChain');
        } else if (this.test(Token.TEMPLATE)) {
          this.raise('TemplateInOptionalChain');
        } else if (this.eat(Token.PERIOD)) {
          node.OptionalChain = chain;
          if (this.test(Token.PRIVATE_IDENTIFIER)) {
            node.PrivateIdentifier = this.parsePrivateIdentifier();
            this.scope.checkUndefinedPrivate(node.PrivateIdentifier);
          } else {
            node.IdentifierName = this.parseIdentifierName();
          }
          chain = this.finishNode(node, 'OptionalChain');
        } else {
          return chain;
        }
      }
    }

    // NewExpression
    parseNewExpression() {
      const node = this.startNode();
      this.expect(Token.NEW);
      if (this.scope.hasNewTarget() && this.eat(Token.PERIOD)) {
        this.expect('target');
        return this.finishNode(node, 'NewTarget');
      }
      node.MemberExpression = this.parseLeftHandSideExpression(false);
      if (this.test(Token.LPAREN)) {
        node.Arguments = this.parseArguments().Arguments;
      } else {
        node.Arguments = null;
      }
      return this.finishNode(node, 'NewExpression');
    }

    // PrimaryExpression :
    //   ...
    parsePrimaryExpression() {
      switch (this.peek().type) {
        case Token.IDENTIFIER:
        case Token.ESCAPED_KEYWORD:
        case Token.YIELD:
        case Token.AWAIT:
          // `async` [no LineTerminator here] `function`
          if (this.test('async') && this.testAhead(Token.FUNCTION) && !this.peekAhead().hadLineTerminatorBefore) {
            return this.parseFunctionExpression(FunctionKind.ASYNC);
          }
          return this.parseIdentifierReference();
        case Token.THIS:
          {
            const node = this.startNode();
            this.next();
            return this.finishNode(node, 'ThisExpression');
          }
        case Token.NUMBER:
        case Token.BIGINT:
          return this.parseNumericLiteral();
        case Token.STRING:
          return this.parseStringLiteral();
        case Token.NULL:
          {
            const node = this.startNode();
            this.next();
            return this.finishNode(node, 'NullLiteral');
          }
        case Token.TRUE:
        case Token.FALSE:
          return this.parseBooleanLiteral();
        case Token.LBRACK:
          return this.parseArrayLiteral();
        case Token.LBRACE:
          return this.parseObjectLiteral();
        case Token.FUNCTION:
          return this.parseFunctionExpression(FunctionKind.NORMAL);
        case Token.CLASS:
          return this.parseClassExpression();
        case Token.TEMPLATE:
          return this.parseTemplateLiteral();
        case Token.DIV:
        case Token.ASSIGN_DIV:
          return this.parseRegularExpressionLiteral();
        case Token.LPAREN:
          return this.parseCoverParenthesizedExpressionAndArrowParameterList();
        default:
          return this.unexpected();
      }
    }

    // NumericLiteral
    parseNumericLiteral() {
      const node = this.startNode();
      if (!this.test(Token.NUMBER) && !this.test(Token.BIGINT)) {
        this.unexpected();
      }
      node.value = this.next().valueAsNumeric();
      return this.finishNode(node, 'NumericLiteral');
    }

    // StringLiteral
    parseStringLiteral() {
      const node = this.startNode();
      if (!this.test(Token.STRING)) {
        this.unexpected();
      }
      node.value = this.next().valueAsString();
      return this.finishNode(node, 'StringLiteral');
    }

    // BooleanLiteral :
    //   `true`
    //   `false`
    parseBooleanLiteral() {
      const node = this.startNode();
      switch (this.peek().type) {
        case Token.TRUE:
          this.next();
          node.value = true;
          break;
        case Token.FALSE:
          this.next();
          node.value = false;
          break;
        default:
          this.unexpected();
      }
      return this.finishNode(node, 'BooleanLiteral');
    }

    // ArrayLiteral :
    //   `[` `]`
    //   `[` Elision `]`
    //   `[` ElementList `]`
    //   `[` ElementList `,` `]`
    //   `[` ElementList `,` Elision `]`
    parseArrayLiteral() {
      const node = this.startNode();
      this.expect(Token.LBRACK);
      const ElementList = [];
      node.ElementList = ElementList;
      node.hasTrailingComma = false;
      while (true) {
        while (this.test(Token.COMMA)) {
          const elision = this.startNode();
          this.next();
          ElementList.push(this.finishNode(elision, 'Elision'));
        }
        if (this.eat(Token.RBRACK)) {
          break;
        }
        if (this.test(Token.ELLIPSIS)) {
          const spread = this.startNode();
          this.next();
          spread.AssignmentExpression = this.parseAssignmentExpression();
          ElementList.push(this.finishNode(spread, 'SpreadElement'));
        } else {
          ElementList.push(this.parseAssignmentExpression());
        }
        if (this.eat(Token.RBRACK)) {
          node.hasTrailingComma = false;
          break;
        }
        node.hasTrailingComma = true;
        this.expect(Token.COMMA);
      }
      return this.finishNode(node, 'ArrayLiteral');
    }

    // ObjectLiteral :
    //   `{` `}`
    //   `{` PropertyDefinitionList `}`
    //   `{` PropertyDefinitionList `,` `}`
    parseObjectLiteral() {
      const node = this.startNode();
      this.expect(Token.LBRACE);
      const PropertyDefinitionList = [];
      node.PropertyDefinitionList = PropertyDefinitionList;
      let hasProto = false;
      while (true) {
        if (this.eat(Token.RBRACE)) {
          break;
        }
        const PropertyDefinition = this.parsePropertyDefinition();
        if (!this.state.json && PropertyDefinition.type === 'PropertyDefinition' && PropertyDefinition.PropertyName && !IsComputedPropertyKey(PropertyDefinition.PropertyName) && PropertyDefinition.PropertyName.type !== 'NumericLiteral' && StringValue(PropertyDefinition.PropertyName).stringValue() === '__proto__') {
          if (hasProto) {
            this.scope.registerObjectLiteralEarlyError(this.raiseEarly('DuplicateProto', PropertyDefinition.PropertyName));
          } else {
            hasProto = true;
          }
        }
        PropertyDefinitionList.push(PropertyDefinition);
        if (this.eat(Token.RBRACE)) {
          break;
        }
        this.expect(Token.COMMA);
      }
      return this.finishNode(node, 'ObjectLiteral');
    }
    parsePropertyDefinition() {
      return this.parseBracketedDefinition('property');
    }
    parseFunctionExpression(kind) {
      return this.parseFunction(true, kind);
    }
    parseArguments() {
      this.expect(Token.LPAREN);
      if (this.eat(Token.RPAREN)) {
        return {
          Arguments: [],
          trailingComma: false
        };
      }
      const Arguments = [];
      let trailingComma = false;
      while (true) {
        const node = this.startNode();
        if (this.eat(Token.ELLIPSIS)) {
          node.AssignmentExpression = this.parseAssignmentExpression();
          Arguments.push(this.finishNode(node, 'AssignmentRestElement'));
        } else {
          Arguments.push(this.parseAssignmentExpression());
        }
        if (this.eat(Token.RPAREN)) {
          break;
        }
        this.expect(Token.COMMA);
        if (this.eat(Token.RPAREN)) {
          trailingComma = true;
          break;
        }
      }
      return {
        Arguments,
        trailingComma
      };
    }

    /** https://tc39.es/ecma262/#sec-class-definitions */
    // ClassDeclaration :
    //   `class` BindingIdentifier ClassTail
    //   [+Default] `class` ClassTail
    //
    // ClassExpression :
    //   `class` BindingIdentifier? ClassTail
    parseClass(isExpression) {
      const node = this.startNode();
      this.expect(Token.CLASS);
      this.scope.with({
        strict: true
      }, () => {
        if (!this.test(Token.LBRACE) && !this.test(Token.EXTENDS)) {
          node.BindingIdentifier = this.parseBindingIdentifier();
          if (!isExpression) {
            this.scope.declare(node.BindingIdentifier, 'lexical');
          }
        } else if (isExpression === false && !this.scope.isDefault()) {
          this.raise('ClassMissingBindingIdentifier');
        } else {
          node.BindingIdentifier = null;
        }
        node.ClassTail = this.scope.with({
          default: false
        }, () => this.parseClassTail());
      });
      return this.finishNode(node, isExpression ? 'ClassExpression' : 'ClassDeclaration');
    }

    // ClassTail : ClassHeritage? `{` ClassBody? `}`
    // ClassHeritage : `extends` LeftHandSideExpression
    // ClassBody : ClassElementList
    parseClassTail() {
      const node = this.startNode();
      if (this.eat(Token.EXTENDS)) {
        node.ClassHeritage = this.parseLeftHandSideExpression();
      } else {
        node.ClassHeritage = null;
      }
      this.expect(Token.LBRACE);
      if (this.eat(Token.RBRACE)) {
        node.ClassBody = null;
      } else {
        node.ClassBody = this.scope.with({
          superCall: !!node.ClassHeritage,
          private: true
        }, () => {
          const ClassBody = [];
          let hasConstructor = false;
          while (this.eat(Token.SEMICOLON)) {
            // nothing
          }
          const staticPrivates = new Set();
          const instancePrivates = new Set();
          while (!this.eat(Token.RBRACE)) {
            const m = this.parseClassElement();
            ClassBody.push(m);
            while (this.eat(Token.SEMICOLON)) {
              // nothing
            }
            if (m.type === 'ClassStaticBlock') {
              continue;
            }
            if (m.ClassElementName?.type === 'PrivateIdentifier') {
              let type;
              if (m.type === 'FieldDefinition') {
                type = 'field';
              } else if (m.UniqueFormalParameters) {
                type = 'method';
              } else if (m.PropertySetParameterList) {
                type = 'set';
              } else {
                type = 'get';
              }
              if (type === 'get' || type === 'set') {
                if (m.static) {
                  if (instancePrivates.has(m.ClassElementName.name)) {
                    this.raiseEarly('InvalidMethodName', m, m.ClassElementName.name);
                  } else {
                    staticPrivates.add(m.ClassElementName.name);
                  }
                } else {
                  if (staticPrivates.has(m.ClassElementName.name)) {
                    this.raiseEarly('InvalidMethodName', m, m.ClassElementName.name);
                  } else {
                    instancePrivates.add(m.ClassElementName.name);
                  }
                }
              }
              this.scope.declare(m.ClassElementName, 'private', type);
              if (m.ClassElementName.name === 'constructor') {
                this.raiseEarly('InvalidMethodName', m, m.ClassElementName.name);
              }
            }
            const name = PropName(m);
            const isActualConstructor = !m.static && m.type === 'MethodDefinition' && !!m.UniqueFormalParameters && name === 'constructor';
            if (isActualConstructor) {
              if (hasConstructor) {
                this.raiseEarly('DuplicateConstructor', m);
              } else {
                hasConstructor = true;
              }
            }
            if (m.static && name === 'prototype' || !m.static && !isActualConstructor && name === 'constructor') {
              this.raiseEarly('InvalidMethodName', m, name);
            }
            if (m.static && m.type === 'FieldDefinition' && name === 'constructor') {
              this.raiseEarly('InvalidMethodName', m, name);
            }
          }
          return ClassBody;
        });
      }
      return this.finishNode(node, 'ClassTail');
    }
    parseClassElement() {
      let element;
      if (this.test('static') && this.testAhead(Token.LBRACE)) {
        const node = this.startNode();
        this.expect('static');
        node.static = true;
        this.expect(Token.LBRACE);
        const ClassStaticBlockBody = this.startNode();
        ClassStaticBlockBody.ClassStaticBlockStatementList = this.scope.with({
          lexical: true,
          yield: false,
          await: true,
          return: false,
          superProperty: true,
          superCall: false,
          newTarget: true,
          label: 'boundary',
          classStaticBlock: true
        }, () => this.parseStatementList(Token.RBRACE));
        node.ClassStaticBlockBody = this.finishNode(ClassStaticBlockBody, 'ClassStaticBlockBody');
        element = this.finishNode(node, 'ClassStaticBlock');
      } else {
        element = this.parseBracketedDefinition('class element');
      }
      return element;
    }
    parseClassExpression() {
      return this.parseClass(true);
    }
    parseTemplateLiteral(tagged = false) {
      const node = this.startNode();
      const TemplateSpanList = [];
      const ExpressionList = [];
      let buffer = '';
      while (true) {
        if (this.position >= this.source.length) {
          this.raise('UnterminatedTemplate', this.position);
        }
        const c = this.source[this.position];
        switch (c) {
          case '`':
            this.position += 1;
            TemplateSpanList.push(buffer);
            this.next();
            if (!tagged) {
              TemplateSpanList.forEach(s => {
                if (TV(s) === undefined) {
                  this.raise('InvalidTemplateEscape');
                }
              });
            }
            node.TemplateSpanList = TemplateSpanList;
            node.ExpressionList = ExpressionList;
            return this.finishNode(node, 'TemplateLiteral');
          case '$':
            this.position += 1;
            if (this.source[this.position] === '{') {
              this.position += 1;
              TemplateSpanList.push(buffer);
              buffer = '';
              this.next();
              ExpressionList.push(this.parseExpression());
              break;
            }
            buffer += c;
            break;
          default:
            {
              if (c === '\\') {
                buffer += c;
                this.position += 1;
              }
              const l = this.source[this.position];
              this.position += 1;
              if (isLineTerminator(l)) {
                if (l === '\r' && this.source[this.position] === '\n') {
                  this.position += 1;
                }
                if (l === '\u{2028}' || l === '\u{2029}') {
                  buffer += l;
                } else {
                  buffer += '\n';
                }
                this.line += 1;
                this.columnOffset = this.position;
              } else {
                buffer += l;
              }
              break;
            }
        }
      }
    }

    // RegularExpressionLiteral :
    //   `/` RegularExpressionBody `/` RegularExpressionFlags
    parseRegularExpressionLiteral() {
      const node = this.startNode();
      this.scanRegularExpressionBody();
      const body = this.scannedValue; // NOTE: unsound cast
      node.RegularExpressionBody = body;
      this.scanRegularExpressionFlags();
      node.RegularExpressionFlags = this.scannedValue; // NOTE: unsound cast
      try {
        const parse = flags => {
          const p = new RegExpParser(body);
          return p.scope(flags, () => p.parsePattern());
        };
        if (node.RegularExpressionFlags.includes('u')) {
          parse({
            U: true,
            N: true
          });
        } else {
          const pattern = parse({
            U: false,
            N: false
          });
          if (pattern.groupSpecifiers.size > 0) {
            parse({
              U: false,
              N: true
            });
          }
        }
      } catch (e) {
        if (e instanceof SyntaxError) {
          this.raise('Raw', node.location.startIndex + e.position + 1, e.message);
        } else {
          throw e;
        }
      }
      const fakeToken = {
        endIndex: this.position - 1,
        line: this.line - 1,
        column: this.position - this.columnOffset
      }; // NOTE: unsound cast
      this.next();
      this.currentToken = fakeToken;
      return this.finishNode(node, 'RegularExpressionLiteral');
    }

    // CoverParenthesizedExpressionAndArrowParameterList :
    //   `(` Expression `)`
    //   `(` Expression `,` `)`
    //   `(` `)`
    //   `(` `...` BindingIdentifier `)`
    //   `(` `...` BindingPattern `)`
    //   `(` Expression `,` `...` BindingIdentifier `)`
    //   `(` Expression `.` `...` BindingPattern `)`
    parseCoverParenthesizedExpressionAndArrowParameterList() {
      const node = this.startNode();
      const commaOp = this.startNode();
      this.expect(Token.LPAREN);
      if (this.test(Token.RPAREN)) {
        if (!this.testAhead(Token.ARROW) || this.peekAhead().hadLineTerminatorBefore) {
          this.unexpected();
        }
        this.next();
        node.Arguments = [];
        return this.finishNode(node, 'CoverParenthesizedExpressionAndArrowParameterList');
      }
      this.scope.pushArrowInfo();
      this.scope.pushAssignmentInfo('arrow');
      const expressions = [];
      let rparenAfterComma;
      while (true) {
        if (this.test(Token.ELLIPSIS)) {
          const inner = this.startNode();
          this.next();
          switch (this.peek().type) {
            case Token.LBRACE:
            case Token.LBRACK:
              inner.BindingPattern = this.parseBindingPattern();
              break;
            default:
              inner.BindingIdentifier = this.parseBindingIdentifier();
              break;
          }
          expressions.push(this.finishNode(inner, 'BindingRestElement'));
          this.expect(Token.RPAREN);
          break;
        }
        expressions.push(this.parseAssignmentExpression());
        if (this.eat(Token.COMMA)) {
          if (this.eat(Token.RPAREN)) {
            rparenAfterComma = this.currentToken;
            break;
          }
        } else {
          this.expect(Token.RPAREN);
          break;
        }
      }
      const arrowInfo = this.scope.popArrowInfo();
      const assignmentInfo = this.scope.popAssignmentInfo();

      // ArrowParameters :
      //   CoverParenthesizedExpressionAndArrowParameterList
      if (this.test(Token.ARROW) && !this.peek().hadLineTerminatorBefore) {
        node.Arguments = expressions;
        node.arrowInfo = arrowInfo;
        assignmentInfo.clear();
        return this.finishNode(node, 'CoverParenthesizedExpressionAndArrowParameterList');
      } else {
        this.scope.arrowInfo?.merge(arrowInfo);
      }

      // ParenthesizedExpression :
      //   `(` Expression `)`
      if (expressions[expressions.length - 1].type === 'BindingRestElement') {
        this.unexpected(expressions[expressions.length - 1]);
      }
      if (rparenAfterComma) {
        this.unexpected(rparenAfterComma);
      }
      if (expressions.length === 1) {
        node.Expression = expressions[0]; // NOTE: unsound cast due to potential BindingRestElement
      } else {
        commaOp.ExpressionList = expressions; // NOTE: unsound cast
        node.Expression = this.finishNode(commaOp, 'CommaOperator');
      }
      return this.finishNode(node, 'ParenthesizedExpression');
    }

    // PropertyName :
    //   LiteralPropertyName
    //   ComputedPropertyName
    // LiteralPropertyName :
    //   IdentifierName
    //   StringLiteral
    //   NumericLiteral
    // ComputedPropertyName :
    //   `[` AssignmentExpression `]`
    parsePropertyName() {
      if (this.test(Token.LBRACK)) {
        const node = this.startNode();
        this.next();
        node.ComputedPropertyName = this.parseAssignmentExpression();
        this.expect(Token.RBRACK);
        return this.finishNode(node, 'PropertyName');
      }
      if (this.test(Token.STRING)) {
        return this.parseStringLiteral();
      }
      if (this.test(Token.NUMBER) || this.test(Token.BIGINT)) {
        return this.parseNumericLiteral();
      }
      return this.parseIdentifierName();
    }

    // ClassElementName :
    //   PropertyName
    //   PrivateIdentifier
    parseClassElementName() {
      if (this.test(Token.PRIVATE_IDENTIFIER)) {
        return this.parsePrivateIdentifier();
      }
      return this.parsePropertyName();
    }

    // PropertyDefinition :
    //   IdentifierReference
    //   CoverInitializedName
    //   PropertyName `:` AssignmentExpression
    //   MethodDefinition
    //   `...` AssignmentExpression
    // MethodDefinition :
    //   ClassElementName `(` UniqueFormalParameters `)` `{` FunctionBody `}`
    //   GeneratorMethod
    //   AsyncMethod
    //   AsyncGeneratorMethod
    //   `get` ClassElementName `(` `)` `{` FunctionBody `}`
    //   `set` ClassElementName `(` PropertySetParameterList `)` `{` FunctionBody `}`
    // GeneratorMethod :
    //   `*` ClassElementName `(` UniqueFormalParameters `)` `{` GeneratorBody `}`
    // AsyncMethod :
    //   `async` [no LineTerminator here] ClassElementName `(` UniqueFormalParameters `)` `{` AsyncBody `}`
    // AsyncGeneratorMethod :
    //   `async` [no LineTerminator here] `*` ClassElementName `(` UniqueFormalParameters `)` `{` AsyncGeneratorBody `}`

    parseBracketedDefinition(type) {
      const node = this.startNode();
      if (type === 'property' && this.eat(Token.ELLIPSIS)) {
        node.PropertyName = null;
        node.AssignmentExpression = this.parseAssignmentExpression();
        return this.finishNode(node, 'PropertyDefinition');
      }
      let firstFirstName;
      if (type === 'class element') {
        if (this.test('static') && (this.testAhead(Token.ASSIGN) || this.testAhead(Token.SEMICOLON) || this.peekAhead().hadLineTerminatorBefore || isAutomaticSemicolon(this.peekAhead().type))) {
          node.static = false;
          firstFirstName = this.parseIdentifierName();
        } else {
          node.static = this.eat('static');
          this.markNodeStart(node);
        }
      }
      let isGenerator = this.eat(Token.MUL);
      let isGetter = false;
      let isSetter = false;
      let isAsync = false;
      if (!isGenerator) {
        if (this.test('get')) {
          isGetter = true;
        } else if (this.test('set')) {
          isSetter = true;
        } else if (this.test('async') && !this.peekAhead().hadLineTerminatorBefore) {
          isAsync = true;
        }
      }
      const firstName = firstFirstName || (type === 'property' ? this.parsePropertyName() : this.parseClassElementName());
      if (!isGenerator && isAsync) {
        isGenerator = this.eat(Token.MUL);
      }
      const isSpecialMethod = isGenerator || (isSetter || isGetter || isAsync) && !this.test(Token.LPAREN);
      if (!isGenerator) {
        if (type === 'property' && this.eat(Token.COLON)) {
          node.PropertyName = firstName; // NOTE: unsound cast
          node.AssignmentExpression = this.parseAssignmentExpression();
          return this.finishNode(node, 'PropertyDefinition');
        }
        if (type === 'class element' && (this.test(Token.ASSIGN) || this.test(Token.SEMICOLON) || this.peek().hadLineTerminatorBefore || isAutomaticSemicolon(this.peek().type))) {
          node.ClassElementName = firstName;
          node.Initializer = this.scope.with({
            superProperty: true
          }, () => this.parseInitializerOpt());
          const argumentNode = node.Initializer && ContainsArguments(node.Initializer);
          if (argumentNode) {
            this.raiseEarly('UnexpectedToken', argumentNode);
          }
          const finished = this.finishNode(node, 'FieldDefinition');
          this.semicolon();
          return finished;
        }
        if (type === 'property' && this.scope.assignmentInfoStack.length > 0 && this.test(Token.ASSIGN)) {
          // NOTE: The next line is unsafe because firstName could be something other than IdentifierName
          node.IdentifierReference = this.repurpose(firstName, 'IdentifierReference');
          node.Initializer = this.parseInitializerOpt();
          const finished = this.finishNode(node, 'CoverInitializedName');
          this.scope.registerObjectLiteralEarlyError(this.raiseEarly('UnexpectedToken', finished));
          return finished;
        }
        if (type === 'property' && !isSpecialMethod && firstName.type === 'IdentifierName' && !this.test(Token.LPAREN) && (!isKeywordRaw(firstName.name) || firstName.name === 'yield' && !this.scope.hasYield() || firstName.name === 'await' && !this.scope.hasAwait())) {
          const IdentifierReference = this.repurpose(firstName, 'IdentifierReference');
          this.validateIdentifierReference(firstName.name, firstName);
          return IdentifierReference;
        }
      }
      if (isSpecialMethod && (!isGenerator || isAsync)) {
        if (type === 'property') {
          node.ClassElementName = this.parsePropertyName();
        } else {
          node.ClassElementName = this.parseClassElementName();
        }
      } else {
        node.ClassElementName = firstName;
      }
      this.scope.with({
        lexical: true,
        variable: true,
        superProperty: true,
        await: isAsync,
        yield: isGenerator,
        classStaticBlock: false
      }, () => {
        if (isSpecialMethod && isGetter) {
          this.expect(Token.LPAREN);
          this.expect(Token.RPAREN);
          node.PropertySetParameterList = null;
          node.UniqueFormalParameters = null;
        } else if (isSpecialMethod && isSetter) {
          this.expect(Token.LPAREN);
          node.PropertySetParameterList = [this.parseFormalParameter()];
          this.expect(Token.RPAREN);
          node.UniqueFormalParameters = null;
        } else {
          node.PropertySetParameterList = null;
          node.UniqueFormalParameters = this.parseUniqueFormalParameters();
        }
        this.scope.with({
          superCall: !isSpecialMethod && !node.static && node.ClassElementName && (node.ClassElementName.type === 'IdentifierName' && node.ClassElementName.name === 'constructor' || node.ClassElementName.type === 'StringLiteral' && node.ClassElementName.value === 'constructor') && this.scope.hasSuperCall()
        }, () => {
          const body = this.parseFunctionBody(isAsync, isGenerator, false);
          // Unsafe cast below
          if (!isAsync && !isGenerator) {
            node.FunctionBody = body;
          } else if (isAsync && !isGenerator) {
            node.AsyncBody = body;
          } else if (!isAsync && isGenerator) {
            node.GeneratorBody = body;
          } else if (isAsync && isGenerator) {
            node.AsyncGeneratorBody = body;
          }
          if (node.UniqueFormalParameters || node.PropertySetParameterList) {
            this.validateFormalParameters(node.UniqueFormalParameters || node.PropertySetParameterList, body, true);
          }
        });
      });
      let name;
      if (isAsync) {
        name = isGenerator ? 'AsyncGeneratorMethod' : 'AsyncMethod';
      } else {
        name = isGenerator ? 'GeneratorMethod' : 'MethodDefinition';
      }
      return this.finishNode(node, name);
    }
  }

  class StatementParser extends ExpressionParser {
    eatSemicolonWithASI() {
      if (this.eat(Token.SEMICOLON)) {
        return true;
      }
      if (this.peek().hadLineTerminatorBefore || isAutomaticSemicolon(this.peek().type)) {
        return true;
      }
      return false;
    }
    semicolon() {
      if (!this.eatSemicolonWithASI()) {
        this.unexpected();
      }
    }

    // StatementList :
    //   StatementListItem
    //   StatementList StatementListItem
    /**
     * @param endToken endToken
     * @param directives directives, this array will be mutated.
     */
    parseStatementList(endToken, directives) {
      const statementList = [];
      const oldStrict = this.state.strict;
      const directiveData = [];
      while (!this.eat(endToken)) {
        if (directives !== undefined && this.test(Token.STRING)) {
          const token = this.peek();
          const directive = this.source.slice(token.startIndex + 1, token.endIndex - 1);
          if (directive === 'use strict') {
            this.state.strict = true;
            directiveData.forEach(d => {
              if (/\\([1-9]|0\d)/.test(d.directive)) {
                this.raiseEarly('IllegalOctalEscape', d.token);
              }
            });
          }
          directives.push(directive);
          directiveData.push({
            directive,
            token
          });
        } else {
          directives = undefined;
        }
        const stmt = this.parseStatementListItem();
        statementList.push(stmt);
      }
      this.state.strict = oldStrict;
      return statementList;
    }

    // StatementListItem :
    //   Statement
    //   Declaration
    //
    // Declaration :
    //   HoistableDeclaration
    //   ClassDeclaration
    //   LexicalDeclaration
    parseStatementListItem() {
      switch (this.peek().type) {
        case Token.FUNCTION:
          return this.parseHoistableDeclaration();
        case Token.CLASS:
          return this.parseClassDeclaration();
        case Token.CONST:
          return this.parseLexicalDeclaration();
        default:
          if (this.test('let')) {
            switch (this.peekAhead().type) {
              case Token.LBRACE:
              case Token.LBRACK:
              case Token.IDENTIFIER:
              case Token.YIELD:
              case Token.AWAIT:
                return this.parseLexicalDeclaration();
            }
          }
          if (this.test('async') && this.testAhead(Token.FUNCTION) && !this.peekAhead().hadLineTerminatorBefore) {
            return this.parseHoistableDeclaration();
          }
          return this.parseStatement();
      }
    }

    // HoistableDeclaration :
    //   FunctionDeclaration
    //   GeneratorDeclaration
    //   AsyncFunctionDeclaration
    //   AsyncGeneratorDeclaration
    parseHoistableDeclaration() {
      switch (this.peek().type) {
        case Token.FUNCTION:
          return this.parseFunctionDeclaration(FunctionKind.NORMAL);
        default:
          if (this.test('async') && this.testAhead(Token.FUNCTION) && !this.peekAhead().hadLineTerminatorBefore) {
            return this.parseFunctionDeclaration(FunctionKind.ASYNC);
          }
          throw new Error('unreachable');
      }
    }

    // ClassDeclaration :
    //   `class` BindingIdentifier ClassTail
    //   [+Default] `class` ClassTail
    parseClassDeclaration() {
      return this.parseClass(false);
    }

    // LexicalDeclaration : LetOrConst BindingList `;`
    parseLexicalDeclaration() {
      const node = this.startNode();
      const letOrConst = this.eat('let') ? 'let' : this.expect(Token.CONST) && 'const';
      node.LetOrConst = letOrConst;
      node.BindingList = this.parseBindingList();
      this.semicolon();
      this.scope.declare(node.BindingList, 'lexical');
      node.BindingList.forEach(b => {
        if (node.LetOrConst === 'const' && !b.Initializer) {
          this.raiseEarly('ConstDeclarationMissingInitializer', b);
        }
      });
      return this.finishNode(node, 'LexicalDeclaration');
    }

    // BindingList :
    //   LexicalBinding
    //   BindingList `,` LexicalBinding
    //
    // LexicalBinding :
    //   BindingIdentifier Initializer?
    //   BindingPattern Initializer
    parseBindingList() {
      const bindingList = [];
      do {
        const node = this.parseBindingElement();
        bindingList.push(this.repurpose(node, 'LexicalBinding'));
      } while (this.eat(Token.COMMA));
      return bindingList;
    }

    // BindingElement :
    //   SingleNameBinding
    //   BindingPattern Initializer?
    // SingleNameBinding :
    //   BindingIdentifier Initializer?
    parseBindingElement() {
      const node = this.startNode();
      if (this.test(Token.LBRACE) || this.test(Token.LBRACK)) {
        node.BindingPattern = this.parseBindingPattern();
      } else {
        node.BindingIdentifier = this.parseBindingIdentifier();
      }
      node.Initializer = this.parseInitializerOpt();
      return this.finishNode(node, node.BindingPattern ? 'BindingElement' : 'SingleNameBinding');
    }

    // BindingPattern:
    //   ObjectBindingPattern
    //   ArrayBindingPattern
    parseBindingPattern() {
      switch (this.peek().type) {
        case Token.LBRACE:
          return this.parseObjectBindingPattern();
        case Token.LBRACK:
          return this.parseArrayBindingPattern();
        default:
          return this.unexpected();
      }
    }

    // ObjectBindingPattern :
    //   `{` `}`
    //   `{` BindingRestProperty `}`
    //   `{` BindingPropertyList `}`
    //   `{` BindingPropertyList `,` BindingRestProperty? `}`
    parseObjectBindingPattern() {
      const node = this.startNode();
      this.expect(Token.LBRACE);
      const BindingPropertyList = [];
      node.BindingPropertyList = BindingPropertyList;
      while (!this.eat(Token.RBRACE)) {
        if (this.test(Token.ELLIPSIS)) {
          node.BindingRestProperty = this.parseBindingRestProperty();
          this.expect(Token.RBRACE);
          break;
        } else {
          BindingPropertyList.push(this.parseBindingProperty());
          if (!this.eat(Token.COMMA)) {
            this.expect(Token.RBRACE);
            break;
          }
        }
      }
      return this.finishNode(node, 'ObjectBindingPattern');
    }

    // BindingProperty :
    //   SingleNameBinding
    //   PropertyName : BindingElement
    parseBindingProperty() {
      const node = this.startNode();
      const name = this.parsePropertyName();
      if (this.eat(Token.COLON)) {
        node.PropertyName = name;
        node.BindingElement = this.parseBindingElement();
        return this.finishNode(node, 'BindingProperty');
      } else {
        if (name.type !== 'IdentifierName') {
          this.unexpected(name);
        }
        this.validateIdentifierReference(name.name, node);
      }
      node.BindingIdentifier = this.repurpose(name, 'BindingIdentifier');
      node.Initializer = this.parseInitializerOpt();
      return this.finishNode(node, 'SingleNameBinding');
    }

    // BindingRestProperty :
    //  `...` BindingIdentifier
    parseBindingRestProperty() {
      const node = this.startNode();
      this.expect(Token.ELLIPSIS);
      node.BindingIdentifier = this.parseBindingIdentifier();
      return this.finishNode(node, 'BindingRestProperty');
    }

    // ArrayBindingPattern :
    //   `[` Elision? BindingRestElement `]`
    //   `[` BindingElementList `]`
    //   `[` BindingElementList `,` Elision? BindingRestElement `]`
    parseArrayBindingPattern() {
      const node = this.startNode();
      this.expect(Token.LBRACK);
      const BindingElementList = [];
      node.BindingElementList = BindingElementList;
      while (true) {
        while (this.test(Token.COMMA)) {
          const elision = this.startNode();
          this.next();
          BindingElementList.push(this.finishNode(elision, 'Elision'));
        }
        if (this.eat(Token.RBRACK)) {
          break;
        }
        if (this.test(Token.ELLIPSIS)) {
          node.BindingRestElement = this.parseBindingRestElement();
          this.expect(Token.RBRACK);
          break;
        } else {
          BindingElementList.push(this.parseBindingElement());
        }
        if (this.eat(Token.RBRACK)) {
          break;
        }
        this.expect(Token.COMMA);
      }
      return this.finishNode(node, 'ArrayBindingPattern');
    }

    // BindingRestElement :
    //   `...` BindingIdentifier
    //   `...` BindingPattern
    parseBindingRestElement() {
      const node = this.startNode();
      this.expect(Token.ELLIPSIS);
      switch (this.peek().type) {
        case Token.LBRACE:
        case Token.LBRACK:
          node.BindingPattern = this.parseBindingPattern();
          break;
        default:
          node.BindingIdentifier = this.parseBindingIdentifier();
          break;
      }
      return this.finishNode(node, 'BindingRestElement');
    }

    // Initializer : `=` AssignmentExpression
    parseInitializerOpt() {
      if (this.eat(Token.ASSIGN)) {
        return this.parseAssignmentExpression();
      }
      return null;
    }

    // FunctionDeclaration
    parseFunctionDeclaration(kind) {
      return this.parseFunction(false, kind);
    }

    // Statement :
    //   ...
    parseStatement() {
      switch (this.peek().type) {
        case Token.LBRACE:
          return this.parseBlockStatement();
        case Token.VAR:
          return this.parseVariableStatement();
        case Token.SEMICOLON:
          {
            const node = this.startNode();
            this.next();
            return this.finishNode(node, 'EmptyStatement');
          }
        case Token.IF:
          return this.parseIfStatement();
        case Token.DO:
          return this.parseDoWhileStatement();
        case Token.WHILE:
          return this.parseWhileStatement();
        case Token.FOR:
          return this.parseForStatement();
        case Token.SWITCH:
          return this.parseSwitchStatement();
        case Token.CONTINUE:
        case Token.BREAK:
          return this.parseBreakContinueStatement();
        case Token.RETURN:
          return this.parseReturnStatement();
        case Token.WITH:
          return this.parseWithStatement();
        case Token.THROW:
          return this.parseThrowStatement();
        case Token.TRY:
          return this.parseTryStatement();
        case Token.DEBUGGER:
          return this.parseDebuggerStatement();
        default:
          return this.parseExpressionStatement();
      }
    }

    // BlockStatement : Block
    parseBlockStatement() {
      return this.parseBlock();
    }

    // Block : `{` StatementList `}`
    parseBlock(lexical = true) {
      const node = this.startNode();
      this.expect(Token.LBRACE);
      node.StatementList = this.scope.with({
        lexical
      }, () => this.parseStatementList(Token.RBRACE));
      return this.finishNode(node, 'Block');
    }

    // VariableStatement : `var` VariableDeclarationList `;`
    parseVariableStatement() {
      const node = this.startNode();
      this.expect(Token.VAR);
      node.VariableDeclarationList = this.parseVariableDeclarationList();
      this.semicolon();
      this.scope.declare(node.VariableDeclarationList, 'variable');
      return this.finishNode(node, 'VariableStatement');
    }

    // VariableDeclarationList :
    //   VariableDeclaration
    //   VariableDeclarationList `,` VariableDeclaration
    parseVariableDeclarationList(firstDeclarationRequiresInit = true) {
      const declarationList = [];
      do {
        const node = this.parseVariableDeclaration(firstDeclarationRequiresInit);
        declarationList.push(node);
      } while (this.eat(Token.COMMA));
      return declarationList;
    }

    // VariableDeclaration :
    //   BindingIdentifier Initializer?
    //   BindingPattern Initializer
    parseVariableDeclaration(firstDeclarationRequiresInit) {
      const node = this.startNode();
      switch (this.peek().type) {
        case Token.LBRACE:
        case Token.LBRACK:
          node.BindingPattern = this.parseBindingPattern();
          if (firstDeclarationRequiresInit) {
            this.expect(Token.ASSIGN);
            node.Initializer = this.parseAssignmentExpression();
          } else {
            node.Initializer = this.parseInitializerOpt();
          }
          break;
        default:
          node.BindingIdentifier = this.parseBindingIdentifier();
          node.Initializer = this.parseInitializerOpt();
          break;
      }
      return this.finishNode(node, 'VariableDeclaration');
    }

    // IfStatement :
    //  `if` `(` Expression `)` Statement `else` Statement
    //  `if` `(` Expression `)` Statement [lookahead != `else`]
    parseIfStatement() {
      const node = this.startNode();
      this.expect(Token.IF);
      this.expect(Token.LPAREN);
      node.Expression = this.parseExpression();
      this.expect(Token.RPAREN);
      node.Statement_a = this.parseStatement();
      if (this.eat(Token.ELSE)) {
        node.Statement_b = this.parseStatement();
      }
      return this.finishNode(node, 'IfStatement');
    }

    // `while` `(` Expression `)` Statement
    parseWhileStatement() {
      const node = this.startNode();
      this.expect(Token.WHILE);
      this.expect(Token.LPAREN);
      node.Expression = this.parseExpression();
      this.expect(Token.RPAREN);
      this.scope.with({
        label: 'loop'
      }, () => {
        node.Statement = this.parseStatement();
      });
      return this.finishNode(node, 'WhileStatement');
    }

    // `do` Statement `while` `(` Expression `)` `;`
    parseDoWhileStatement() {
      const node = this.startNode();
      this.expect(Token.DO);
      node.Statement = this.scope.with({
        label: 'loop'
      }, () => this.parseStatement());
      this.expect(Token.WHILE);
      this.expect(Token.LPAREN);
      node.Expression = this.parseExpression();
      this.expect(Token.RPAREN);
      // Semicolons are completely optional after a do-while, even without a newline
      this.eat(Token.SEMICOLON);
      return this.finishNode(node, 'DoWhileStatement');
    }

    // `for` `(` [lookahead != `let` `[`] Expression? `;` Expression? `;` Expression? `)` Statement
    // `for` `(` `var` VariableDeclarationList `;` Expression? `;` Expression? `)` Statement
    // `for` `(` LexicalDeclaration Expression? `;` Expression? `)` Statement
    // `for` `(` [lookahead != `let` `[`] LeftHandSideExpression `in` Expression `)` Statement
    // `for` `(` `var` ForBinding `in` Expression `)` Statement
    // `for` `(` ForDeclaration `in` Expression `)` Statement
    // `for` `(` [lookahead != { `let`, `async` `of` }] LeftHandSideExpression `of` AssignmentExpression `)` Statement
    // `for` `(` `var` ForBinding `of` AssignmentExpression `)` Statement
    // `for` `(` ForDeclaration `of` AssignmentExpression `)` Statement
    // `for` `await` `(` [lookahead != `let`] LeftHandSideExpression `of` AssignmentExpression `)` Statement
    // `for` `await` `(` `var` ForBinding `of` AssignmentExpression `)` Statement
    // `for` `await` `(` ForDeclaration `of` AssignmentExpression `)` Statement
    //
    // ForDeclaration : LetOrConst ForBinding
    parseForStatement() {
      return this.scope.with({
        lexical: true,
        label: 'loop'
      }, () => {
        const node = this.startNode();
        this.expect(Token.FOR);
        const isAwait = this.scope.hasAwait() && this.eat(Token.AWAIT);
        if (isAwait && !this.scope.hasReturn()) {
          this.state.hasTopLevelAwait = true;
        }
        this.expect(Token.LPAREN);
        if (isAwait && this.test(Token.SEMICOLON)) {
          this.unexpected();
        }
        if (this.eat(Token.SEMICOLON)) {
          if (!this.test(Token.SEMICOLON)) {
            node.Expression_b = this.parseExpression();
          }
          this.expect(Token.SEMICOLON);
          if (!this.test(Token.RPAREN)) {
            node.Expression_c = this.parseExpression();
          }
          this.expect(Token.RPAREN);
          node.Statement = this.parseStatement();
          return this.finishNode(node, 'ForStatement');
        }
        const isLexicalStart = () => {
          switch (this.peekAhead().type) {
            case Token.LBRACE:
            case Token.LBRACK:
            case Token.IDENTIFIER:
            case Token.YIELD:
            case Token.AWAIT:
              return true;
            default:
              return false;
          }
        };
        if ((this.test('let') || this.test(Token.CONST)) && isLexicalStart()) {
          const inner = this.startNode();
          if (this.eat('let')) {
            inner.LetOrConst = 'let';
          } else {
            this.expect(Token.CONST);
            inner.LetOrConst = 'const';
          }
          const list = this.parseBindingList();
          this.scope.declare(list, 'lexical');
          if (list.length > 1 || this.test(Token.SEMICOLON)) {
            inner.BindingList = list;
            node.LexicalDeclaration = this.finishNode(inner, 'LexicalDeclaration');
            this.expect(Token.SEMICOLON);
            if (!this.test(Token.SEMICOLON)) {
              node.Expression_a = this.parseExpression();
            }
            this.expect(Token.SEMICOLON);
            if (!this.test(Token.RPAREN)) {
              node.Expression_b = this.parseExpression();
            }
            this.expect(Token.RPAREN);
            node.Statement = this.parseStatement();
            return this.finishNode(node, 'ForStatement');
          }
          inner.ForBinding = this.repurpose(list[0], 'ForBinding', (_, oldNode) => {
            if (oldNode.Initializer) {
              this.unexpected(oldNode.Initializer);
            }
          });
          node.ForDeclaration = this.finishNode(inner, 'ForDeclaration');
          getDeclarations(node.ForDeclaration).forEach(d => {
            if (d.name === 'let') {
              this.raiseEarly('UnexpectedToken', d.node);
            }
          });
          if (!isAwait && this.eat(Token.IN)) {
            node.Expression = this.parseExpression();
            this.expect(Token.RPAREN);
            node.Statement = this.parseStatement();
            return this.finishNode(node, 'ForInStatement');
          }
          this.expect('of');
          node.AssignmentExpression = this.parseAssignmentExpression();
          this.expect(Token.RPAREN);
          node.Statement = this.parseStatement();
          return this.finishNode(node, isAwait ? 'ForAwaitStatement' : 'ForOfStatement');
        }
        if (this.eat(Token.VAR)) {
          if (isAwait) {
            node.ForBinding = this.parseForBinding();
            this.expect('of');
            node.AssignmentExpression = this.parseAssignmentExpression();
            this.expect(Token.RPAREN);
            node.Statement = this.parseStatement();
            return this.finishNode(node, 'ForAwaitStatement');
          }
          const list = this.parseVariableDeclarationList(false);
          if (list.length > 1 || this.test(Token.SEMICOLON)) {
            node.VariableDeclarationList = list;
            this.expect(Token.SEMICOLON);
            if (!this.test(Token.SEMICOLON)) {
              node.Expression_a = this.parseExpression();
            }
            this.expect(Token.SEMICOLON);
            if (!this.test(Token.RPAREN)) {
              node.Expression_b = this.parseExpression();
            }
            this.expect(Token.RPAREN);
            node.Statement = this.parseStatement();
            return this.finishNode(node, 'ForStatement');
          }
          node.ForBinding = this.repurpose(list[0], 'ForBinding', (_, oldNode) => {
            if (oldNode.Initializer) {
              this.unexpected(oldNode.Initializer);
            }
          });
          if (this.eat('of')) {
            node.AssignmentExpression = this.parseAssignmentExpression();
          } else {
            this.expect(Token.IN);
            node.Expression = this.parseExpression();
          }
          this.expect(Token.RPAREN);
          node.Statement = this.parseStatement();
          return this.finishNode(node, node.AssignmentExpression ? 'ForOfStatement' : 'ForInStatement');
        }
        this.scope.pushAssignmentInfo('for');
        const expression = this.scope.with({
          in: false
        }, () => this.parseExpression());
        const validateLHS = n => {
          if (n.type === 'AssignmentExpression') {
            this.raiseEarly('UnexpectedToken', n);
          } else {
            this.validateAssignmentTarget(n);
          }
        };
        const assignmentInfo = this.scope.popAssignmentInfo();
        if (!isAwait && this.eat(Token.IN)) {
          assignmentInfo.clear();
          validateLHS(expression);
          node.LeftHandSideExpression = expression; // NOTE: unsound cast
          node.Expression = this.parseExpression();
          this.expect(Token.RPAREN);
          node.Statement = this.parseStatement();
          return this.finishNode(node, 'ForInStatement');
        }
        const isExactlyAsync = expression.type === 'IdentifierReference' && !expression.escaped && expression.name === 'async';
        if ((!isExactlyAsync || isAwait) && this.eat('of')) {
          assignmentInfo.clear();
          validateLHS(expression);
          node.LeftHandSideExpression = expression; // NOTE: unsound cast
          node.AssignmentExpression = this.parseAssignmentExpression();
          this.expect(Token.RPAREN);
          node.Statement = this.parseStatement();
          return this.finishNode(node, isAwait ? 'ForAwaitStatement' : 'ForOfStatement');
        }
        node.Expression_a = expression;
        this.expect(Token.SEMICOLON);
        if (!this.test(Token.SEMICOLON)) {
          node.Expression_b = this.parseExpression();
        }
        this.expect(Token.SEMICOLON);
        if (!this.test(Token.RPAREN)) {
          node.Expression_c = this.parseExpression();
        }
        this.expect(Token.RPAREN);
        node.Statement = this.parseStatement();
        return this.finishNode(node, 'ForStatement');
      });
    }

    // ForBinding :
    //   BindingIdentifier
    //   BindingPattern
    parseForBinding() {
      const node = this.startNode();
      switch (this.peek().type) {
        case Token.LBRACE:
        case Token.LBRACK:
          node.BindingPattern = this.parseBindingPattern();
          break;
        default:
          node.BindingIdentifier = this.parseBindingIdentifier();
          break;
      }
      return this.finishNode(node, 'ForBinding');
    }

    // SwitchStatement :
    //   `switch` `(` Expression `)` CaseBlock
    parseSwitchStatement() {
      const node = this.startNode();
      this.expect(Token.SWITCH);
      this.expect(Token.LPAREN);
      node.Expression = this.parseExpression();
      this.expect(Token.RPAREN);
      this.scope.with({
        lexical: true,
        label: 'switch'
      }, () => {
        node.CaseBlock = this.parseCaseBlock();
      });
      return this.finishNode(node, 'SwitchStatement');
    }

    // CaseBlock :
    //   `{` CaseClauses? `}`
    //   `{` CaseClauses? DefaultClause CaseClauses? `}`
    // CaseClauses :
    //   CaseClause
    //   CaseClauses CauseClause
    // CaseClause :
    //   `case` Expression `:` StatementList?
    // DefaultClause :
    //   `default` `:` StatementList?
    parseCaseBlock() {
      const node = this.startNode();
      let CaseClauses_a;
      let CaseClauses_b;
      this.expect(Token.LBRACE);
      while (!this.eat(Token.RBRACE)) {
        switch (this.peek().type) {
          case Token.CASE:
          case Token.DEFAULT:
            {
              const inner = this.startNode();
              const t = this.next().type;
              if (t === Token.DEFAULT && node.DefaultClause) {
                this.unexpected();
              }
              if (t === Token.CASE) {
                inner.Expression = this.parseExpression();
              }
              this.expect(Token.COLON);
              let StatementList;
              while (!(this.test(Token.CASE) || this.test(Token.DEFAULT) || this.test(Token.RBRACE))) {
                if (!StatementList) {
                  StatementList = [];
                  inner.StatementList = StatementList;
                }
                StatementList.push(this.parseStatementListItem());
              }
              if (t === Token.DEFAULT) {
                node.DefaultClause = this.finishNode(inner, 'DefaultClause');
              } else {
                if (node.DefaultClause) {
                  if (!CaseClauses_b) {
                    CaseClauses_b = [];
                    node.CaseClauses_b = CaseClauses_b;
                  }
                  CaseClauses_b.push(this.finishNode(inner, 'CaseClause'));
                } else {
                  if (!CaseClauses_a) {
                    CaseClauses_a = [];
                    node.CaseClauses_a = CaseClauses_a;
                  }
                  CaseClauses_a.push(this.finishNode(inner, 'CaseClause'));
                }
              }
              break;
            }
          default:
            this.unexpected();
        }
      }
      return this.finishNode(node, 'CaseBlock');
    }

    // BreakStatement :
    //   `break` `;`
    //   `break` [no LineTerminator here] LabelIdentifier `;`
    //
    // ContinueStatement :
    //   `continue` `;`
    //   `continue` [no LineTerminator here] LabelIdentifier `;`
    parseBreakContinueStatement() {
      const node = this.startNode();
      const isBreak = this.eat(Token.BREAK);
      if (!isBreak) {
        this.expect(Token.CONTINUE);
      }
      if (this.eat(Token.SEMICOLON)) {
        node.LabelIdentifier = null;
      } else if (this.peek().hadLineTerminatorBefore) {
        node.LabelIdentifier = null;
        this.semicolon();
      } else {
        if (this.test(Token.IDENTIFIER)) {
          node.LabelIdentifier = this.parseLabelIdentifier();
        } else {
          node.LabelIdentifier = null;
        }
        this.semicolon();
      }
      this.verifyBreakContinue(node, isBreak);
      return this.finishNode(node, isBreak ? 'BreakStatement' : 'ContinueStatement');
    }
    verifyBreakContinue(node, isBreak) {
      let i = 0;
      for (; i < this.scope.labels.length; i += 1) {
        const label = this.scope.labels[i];
        if (!node.LabelIdentifier || node.LabelIdentifier.name === label.name) {
          if (label.type && (isBreak || label.type === 'loop')) {
            break;
          }
          if (node.LabelIdentifier && isBreak) {
            break;
          }
        }
      }
      if (i === this.scope.labels.length) {
        this.raiseEarly('IllegalBreakContinue', node, isBreak);
      }
    }

    // ReturnStatement :
    //   `return` `;`
    //   `return` [no LineTerminator here] Expression `;`
    parseReturnStatement() {
      if (!this.scope.hasReturn()) {
        this.unexpected();
      }
      const node = this.startNode();
      this.expect(Token.RETURN);
      if (this.eatSemicolonWithASI()) {
        node.Expression = null;
      } else {
        node.Expression = this.parseExpression();
        this.semicolon();
      }
      return this.finishNode(node, 'ReturnStatement');
    }

    // WithStatement :
    //   `with` `(` Expression `)` Statement
    parseWithStatement() {
      if (this.isStrictMode()) {
        this.raiseEarly('UnexpectedToken');
      }
      const node = this.startNode();
      this.expect(Token.WITH);
      this.expect(Token.LPAREN);
      node.Expression = this.parseExpression();
      this.expect(Token.RPAREN);
      node.Statement = this.parseStatement();
      return this.finishNode(node, 'WithStatement');
    }

    // ThrowStatement :
    //   `throw` [no LineTerminator here] Expression `;`
    parseThrowStatement() {
      const node = this.startNode();
      this.expect(Token.THROW);
      if (this.peek().hadLineTerminatorBefore) {
        this.raise('NewlineAfterThrow', node);
      }
      node.Expression = this.parseExpression();
      this.semicolon();
      return this.finishNode(node, 'ThrowStatement');
    }

    // TryStatement :
    //   `try` Block Catch
    //   `try` Block Finally
    //   `try` Block Catch Finally
    //
    // Catch :
    //   `catch` `(` CatchParameter `)` Block
    //   `catch` Block
    //
    // Finally :
    //   `finally` Block
    //
    // CatchParameter :
    //   BindingIdentifier
    //   BindingPattern
    parseTryStatement() {
      const node = this.startNode();
      this.expect(Token.TRY);
      node.Block = this.parseBlock();
      if (this.eat(Token.CATCH)) {
        this.scope.with({
          lexical: true
        }, () => {
          const clause = this.startNode();
          if (this.eat(Token.LPAREN)) {
            switch (this.peek().type) {
              case Token.LBRACE:
              case Token.LBRACK:
                clause.CatchParameter = this.parseBindingPattern();
                break;
              default:
                clause.CatchParameter = this.parseBindingIdentifier();
                break;
            }
            this.scope.declare(clause.CatchParameter, 'lexical');
            this.expect(Token.RPAREN);
          } else {
            clause.CatchParameter = null;
          }
          clause.Block = this.parseBlock(false);
          node.Catch = this.finishNode(clause, 'Catch');
        });
      } else {
        node.Catch = null;
      }
      if (this.eat(Token.FINALLY)) {
        node.Finally = this.parseBlock();
      } else {
        node.Finally = null;
      }
      if (!node.Catch && !node.Finally) {
        this.raise('TryMissingCatchOrFinally');
      }
      return this.finishNode(node, 'TryStatement');
    }

    // DebuggerStatement : `debugger` `;`
    parseDebuggerStatement() {
      const node = this.startNode();
      this.expect(Token.DEBUGGER);
      this.semicolon();
      return this.finishNode(node, 'DebuggerStatement');
    }

    // ExpressionStatement :
    //   [lookahead != `{`, `function`, `async` [no LineTerminator here] `function`, `class`, `let` `[` ] Expression `;`
    parseExpressionStatement() {
      switch (this.peek().type) {
        case Token.LBRACE:
        case Token.FUNCTION:
        case Token.CLASS:
          this.unexpected();
          break;
        default:
          if (this.test('async') && this.testAhead(Token.FUNCTION) && !this.peekAhead().hadLineTerminatorBefore) {
            this.unexpected();
          }
          if (this.test('let') && this.testAhead(Token.LBRACK)) {
            this.unexpected();
          }
          break;
      }
      const startToken = this.peek();
      const node = this.startNode();
      const expression = this.parseExpression();
      if (expression.type === 'IdentifierReference' && this.eat(Token.COLON)) {
        const LabelIdentifier = this.repurpose(expression, 'LabelIdentifier');
        node.LabelIdentifier = LabelIdentifier;
        if (this.scope.labels.find(l => l.name === LabelIdentifier.name)) {
          this.raiseEarly('AlreadyDeclared', node.LabelIdentifier, node.LabelIdentifier.name);
        }
        let type = null;
        switch (this.peek().type) {
          case Token.SWITCH:
            type = 'switch';
            break;
          case Token.DO:
          case Token.WHILE:
          case Token.FOR:
            type = 'loop';
            break;
        }
        if (type !== null && this.scope.labels.length > 0) {
          const last = this.scope.labels[this.scope.labels.length - 1];
          if (last.nextToken === startToken) {
            last.type = type;
          }
        }
        this.scope.labels.push({
          name: node.LabelIdentifier.name,
          type,
          nextToken: type === null ? this.peek() : null
        });
        node.LabelledItem = this.parseStatement();
        this.scope.labels.pop();
        return this.finishNode(node, 'LabelledStatement');
      }
      node.Expression = expression;
      this.semicolon();
      return this.finishNode(node, 'ExpressionStatement');
    }
  }

  class ModuleParser extends StatementParser {
    // ImportDeclaration :
    //   `import` ImportClause FromClause `;`
    //   `import` ModuleSpecifier `;`
    parseImportDeclaration() {
      if (this.testAhead(Token.PERIOD) || this.testAhead(Token.LPAREN)) {
        // `import` `(`
        // `import` `.`
        return this.parseExpressionStatement();
      }
      const node = this.startNode();
      this.next();
      if (this.test(Token.STRING)) {
        node.ModuleSpecifier = this.parsePrimaryExpression();
      } else {
        node.ImportClause = this.parseImportClause();
        this.scope.declare(node.ImportClause, 'import');
        node.FromClause = this.parseFromClause();
      }
      this.semicolon();
      return this.finishNode(node, 'ImportDeclaration');
    }

    // ImportClause :
    //   ImportedDefaultBinding
    //   NameSpaceImport
    //   NamedImports
    //   ImportedDefaultBinding `,` NameSpaceImport
    //   ImportedDefaultBinding `,` NamedImports
    //
    // ImportedBinding :
    //   BindingIdentifier
    parseImportClause() {
      const node = this.startNode();
      if (this.test(Token.IDENTIFIER)) {
        node.ImportedDefaultBinding = this.parseImportedDefaultBinding();
        if (!this.eat(Token.COMMA)) {
          return this.finishNode(node, 'ImportClause');
        }
      }
      if (this.test(Token.MUL)) {
        node.NameSpaceImport = this.parseNameSpaceImport();
      } else if (this.eat(Token.LBRACE)) {
        node.NamedImports = this.parseNamedImports();
      } else {
        this.unexpected();
      }
      return this.finishNode(node, 'ImportClause');
    }

    // ImportedDefaultBinding :
    //   ImportedBinding
    parseImportedDefaultBinding() {
      const node = this.startNode();
      node.ImportedBinding = this.parseBindingIdentifier();
      return this.finishNode(node, 'ImportedDefaultBinding');
    }

    // NameSpaceImport :
    //   `*` `as` ImportedBinding
    parseNameSpaceImport() {
      const node = this.startNode();
      this.expect(Token.MUL);
      this.expect('as');
      node.ImportedBinding = this.parseBindingIdentifier();
      return this.finishNode(node, 'NameSpaceImport');
    }

    // NamedImports :
    //   `{` `}`
    //   `{` ImportsList `}`
    //   `{` ImportsList `,` `}`
    parseNamedImports() {
      const node = this.startNode();
      const ImportsList = [];
      node.ImportsList = ImportsList;
      while (!this.eat(Token.RBRACE)) {
        ImportsList.push(this.parseImportSpecifier());
        if (this.eat(Token.RBRACE)) {
          break;
        }
        this.expect(Token.COMMA);
      }
      return this.finishNode(node, 'NamedImports');
    }

    // ImportSpecifier :
    //   ImportedBinding
    //   ModuleExportName `as` ImportedBinding
    parseImportSpecifier() {
      const node = this.startNode();
      const name = this.parseModuleExportName();
      if (name.type === 'StringLiteral' || this.test('as')) {
        this.expect('as');
        node.ModuleExportName = name;
        node.ImportedBinding = this.parseBindingIdentifier();
      } else {
        node.ImportedBinding = this.repurpose(name, 'BindingIdentifier');
        if (isKeywordRaw(node.ImportedBinding.name)) {
          this.raiseEarly('UnexpectedToken', node.ImportedBinding);
        }
        if (node.ImportedBinding.name === 'eval' || node.ImportedBinding.name === 'arguments') {
          this.raiseEarly('UnexpectedToken', node.ImportedBinding);
        }
      }
      return this.finishNode(node, 'ImportSpecifier');
    }

    // ExportDeclaration :
    //   `export` ExportFromClause FromClause `;`
    //   `export` NamedExports `;`
    //   `export` VariableStatement
    //   `export` Declaration
    //   `export` `default` HoistableDeclaration
    //   `export` `default` ClassDeclaration
    //   `export` `default` AssignmentExpression `;`
    //
    // ExportFromClause :
    //   `*`
    //   `*` as ModuleExportName
    //   NamedExports
    parseExportDeclaration() {
      const node = this.startNode();
      this.expect(Token.EXPORT);
      node.default = this.eat(Token.DEFAULT);
      if (node.default) {
        switch (this.peek().type) {
          case Token.FUNCTION:
            node.HoistableDeclaration = this.scope.with({
              default: true
            }, () => this.parseFunctionDeclaration(FunctionKind.NORMAL));
            break;
          case Token.CLASS:
            node.ClassDeclaration = this.scope.with({
              default: true
            }, () => this.parseClassDeclaration());
            break;
          default:
            if (this.test('async') && this.testAhead(Token.FUNCTION) && !this.peekAhead().hadLineTerminatorBefore) {
              node.HoistableDeclaration = this.scope.with({
                default: true
              }, () => this.parseFunctionDeclaration(FunctionKind.ASYNC));
            } else {
              node.AssignmentExpression = this.parseAssignmentExpression();
              this.semicolon();
            }
            break;
        }
        if (this.scope.exports.has('default')) {
          this.raiseEarly('AlreadyDeclared', node, 'default');
        } else {
          this.scope.exports.add('default');
        }
      } else {
        switch (this.peek().type) {
          case Token.CONST:
            node.Declaration = this.parseLexicalDeclaration();
            this.scope.declare(node.Declaration, 'export');
            break;
          case Token.CLASS:
            node.Declaration = this.parseClassDeclaration();
            this.scope.declare(node.Declaration, 'export');
            break;
          case Token.FUNCTION:
            node.Declaration = this.parseHoistableDeclaration();
            this.scope.declare(node.Declaration, 'export');
            break;
          case Token.VAR:
            node.VariableStatement = this.parseVariableStatement();
            this.scope.declare(node.VariableStatement, 'export');
            break;
          case Token.LBRACE:
            {
              const NamedExports = this.parseNamedExports();
              if (this.test('from')) {
                node.ExportFromClause = NamedExports;
                node.FromClause = this.parseFromClause();
              } else {
                NamedExports.ExportsList.forEach(n => {
                  if (n.localName.type === 'StringLiteral') {
                    this.raiseEarly('UnexpectedToken', n.localName);
                  }
                });
                node.NamedExports = NamedExports;
                this.scope.checkUndefinedExports(node.NamedExports);
              }
              this.semicolon();
              break;
            }
          case Token.MUL:
            {
              const inner = this.startNode();
              this.next();
              if (this.eat('as')) {
                inner.ModuleExportName = this.parseModuleExportName();
                this.scope.declare(inner.ModuleExportName, 'export');
              }
              node.ExportFromClause = this.finishNode(inner, 'ExportFromClause');
              node.FromClause = this.parseFromClause();
              this.semicolon();
              break;
            }
          default:
            if (this.test('let')) {
              node.Declaration = this.parseLexicalDeclaration();
              this.scope.declare(node.Declaration, 'export');
            } else if (this.test('async') && this.testAhead(Token.FUNCTION) && !this.peekAhead().hadLineTerminatorBefore) {
              node.Declaration = this.parseHoistableDeclaration();
              this.scope.declare(node.Declaration, 'export');
            } else {
              this.unexpected();
            }
        }
      }
      return this.finishNode(node, 'ExportDeclaration');
    }

    // NamedExports :
    //   `{` `}`
    //   `{` ExportsList `}`
    //   `{` ExportsList `,` `}`
    parseNamedExports() {
      const node = this.startNode();
      this.expect(Token.LBRACE);
      const ExportsList = [];
      node.ExportsList = ExportsList;
      while (!this.eat(Token.RBRACE)) {
        ExportsList.push(this.parseExportSpecifier());
        if (this.eat(Token.RBRACE)) {
          break;
        }
        this.expect(Token.COMMA);
      }
      return this.finishNode(node, 'NamedExports');
    }

    // ExportSpecifier :
    //   ModuleExportName
    //   ModuleExportName `as` ModuleExportName
    parseExportSpecifier() {
      const node = this.startNode();
      node.localName = this.parseModuleExportName();
      if (this.eat('as')) {
        node.exportName = this.parseModuleExportName();
      } else {
        node.exportName = node.localName;
      }
      this.scope.declare(node.exportName, 'export');
      return this.finishNode(node, 'ExportSpecifier');
    }

    // ModuleExportName :
    //   IdentifierName
    //   StringLiteral
    parseModuleExportName() {
      if (this.test(Token.STRING)) {
        const literal = this.parseStringLiteral();
        if (!IsStringWellFormedUnicode(StringValue(literal))) {
          this.raiseEarly('ModuleExportNameInvalidUnicode', literal);
        }
        return literal;
      }
      return this.parseIdentifierName();
    }

    // FromClause :
    //   `from` ModuleSpecifier
    parseFromClause() {
      this.expect('from');
      return this.parseStringLiteral();
    }
  }

  class LanguageParser extends ModuleParser {
    // Script : ScriptBody?
    parseScript() {
      this.skipHashbangComment();
      const node = this.startNode();
      if (this.eat(Token.EOS)) {
        node.ScriptBody = null;
      } else {
        node.ScriptBody = this.parseScriptBody();
      }
      return this.finishNode(node, 'Script');
    }

    // ScriptBody : StatementList
    parseScriptBody() {
      const node = this.startNode();
      this.scope.with({
        in: true,
        lexical: true,
        variable: true,
        variableFunctions: true
      }, () => {
        const directives = [];
        node.StatementList = this.parseStatementList(Token.EOS, directives);
        node.strict = directives.includes('use strict');
      });
      return this.finishNode(node, 'ScriptBody');
    }

    // Module : ModuleBody?
    parseModule() {
      this.skipHashbangComment();
      return this.scope.with({
        module: true,
        strict: true,
        in: true,
        importMeta: true,
        await: true,
        lexical: true,
        variable: true
      }, () => {
        const node = this.startNode();
        if (this.eat(Token.EOS)) {
          node.ModuleBody = null;
        } else {
          node.ModuleBody = this.parseModuleBody();
        }
        this.scope.undefinedExports.forEach((importNode, name) => {
          this.raiseEarly('ModuleUndefinedExport', importNode, name);
        });
        node.hasTopLevelAwait = this.state.hasTopLevelAwait;
        return this.finishNode(node, 'Module');
      });
    }

    // ModuleBody :
    //   ModuleItemList
    parseModuleBody() {
      const node = this.startNode();
      node.ModuleItemList = this.parseModuleItemList();
      return this.finishNode(node, 'ModuleBody');
    }

    // ModuleItemList :
    //   ModuleItem
    //   ModuleItemList ModuleItem
    //
    // ModuleItem :
    //   ImportDeclaration
    //   ExportDeclaration
    //   StatementListItem
    parseModuleItemList() {
      const moduleItemList = [];
      while (!this.eat(Token.EOS)) {
        switch (this.peek().type) {
          case Token.IMPORT:
            moduleItemList.push(this.parseImportDeclaration());
            break;
          case Token.EXPORT:
            moduleItemList.push(this.parseExportDeclaration());
            break;
          default:
            moduleItemList.push(this.parseStatementListItem());
            break;
        }
      }
      return moduleItemList;
    }
  }

  class Parser extends LanguageParser {
    source;
    specifier;
    earlyErrors;
    state;
    scope = new Scope(this);
    constructor({
      source,
      specifier,
      json = false
    }) {
      super();
      this.source = source;
      this.specifier = specifier;
      this.earlyErrors = new Set();
      this.state = {
        hasTopLevelAwait: false,
        strict: false,
        json
      };
    }
    isStrictMode() {
      return this.state.strict;
    }
    feature(name) {
      // eslint-disable-next-line @engine262/valid-feature
      return exports.surroundingAgent.feature(name);
    }
    startNode(inheritStart) {
      this.peek();
      const node = {
        type: undefined,
        location: {
          startIndex: inheritStart ? inheritStart.location.startIndex : this.peekToken.startIndex,
          endIndex: -1,
          start: inheritStart ? {
            ...inheritStart.location.start
          } : {
            line: this.peekToken.line,
            column: this.peekToken.column
          },
          end: {
            line: -1,
            column: -1
          }
        },
        strict: this.state.strict,
        sourceText: () => this.source.slice(node.location.startIndex, node.location.endIndex)
      };
      return node;
    }
    markNodeStart(node) {
      node.location.startIndex = this.peekToken.startIndex;
      node.location.start = {
        line: this.peekToken.line,
        column: this.peekToken.column
      };
    }
    finishNode(node, type) {
      node.type = type;
      node.location.endIndex = this.currentToken.endIndex;
      node.location.end.line = this.currentToken.line;
      node.location.end.column = this.currentToken.column;
      return node;
    }
    createSyntaxError(context = this.peek(), template, templateArgs) {
      if (template === 'UnexpectedToken' && typeof context !== 'number' && 'type' in context && context.type === Token.EOS) {
        return this.createSyntaxError(context, 'UnexpectedEOS', []);
      }
      let startIndex;
      let endIndex;
      let line;
      let column;
      if (typeof context === 'number') {
        line = this.line;
        if (context === this.source.length) {
          while (isLineTerminator(this.source[context - 1])) {
            line -= 1;
            context -= 1;
          }
        }
        startIndex = context;
        endIndex = context + 1;
      } else if ('type' in context && context.type === Token.EOS) {
        line = this.line;
        startIndex = context.startIndex;
        while (isLineTerminator(this.source[startIndex - 1])) {
          line -= 1;
          startIndex -= 1;
        }
        endIndex = startIndex + 1;
      } else {
        if ('location' in context && context.location) {
          context = context.location;
        }
        ({
          startIndex,
          endIndex,
          start: {
            line,
            column
          } = context // NOTE: unsound cast
        } = context); // NOTE: unsound cast
      }

      /*
       * Source looks like:
       *
       *  const a = 1;
       *  const b 'string string string'; // a string
       *  const c = 3;                  |            |
       *  |       |                     |            |
       *  |       | startIndex          | endIndex   |
       *  | lineStart                                | lineEnd
       *
       * Exception looks like:
       *
       *  const b 'string string string'; // a string
       *          ^^^^^^^^^^^^^^^^^^^^^^
       *  SyntaxError: unexpected token
      */

      let lineStart = startIndex;
      while (!isLineTerminator(this.source[lineStart - 1]) && this.source[lineStart - 1] !== undefined) {
        lineStart -= 1;
      }
      let lineEnd = startIndex;
      while (!isLineTerminator(this.source[lineEnd]) && this.source[lineEnd] !== undefined) {
        lineEnd += 1;
      }
      if (column === undefined) {
        column = startIndex - lineStart + 1;
      }
      const message = messages[template];
      const e = new SyntaxError(message(...templateArgs));
      e.decoration = `\
${this.specifier ? `${this.specifier}:${line}:${column}\n` : ''}${this.source.slice(lineStart, lineEnd)}
${' '.repeat(startIndex - lineStart)}${'^'.repeat(Math.max(endIndex - startIndex, 1))}`;
      return e;
    }
    raiseEarly(template, context, ...templateArgs) {
      const e = this.createSyntaxError(context, template, templateArgs);
      this.earlyErrors.add(e);
      return e;
    }
    raise(template, context, ...templateArgs) {
      const e = this.createSyntaxError(context, template, templateArgs);
      throw e;
    }
    unexpected(...args) {
      return this.raise('UnexpectedToken', ...args);
    }
  }

  function handleError(e) {
    if (e instanceof SyntaxError) {
      const v = exports.surroundingAgent.Throw('SyntaxError', 'Raw', e.message).Value;
      if (e.decoration) {
        const stackString = Value('stack');
        let _temp = Get(v, stackString);
        Assert(!(_temp instanceof AbruptCompletion), "Get(v, stackString)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp instanceof Completion) {
          _temp = _temp.Value;
        }
        const stack = _temp;
        const newStackString = `${e.decoration}\n${stack instanceof JSStringValue ? stack.stringValue() : ''}`;
        let _temp2 = Set$1(v, stackString, Value(newStackString), Value.true);
        Assert(!(_temp2 instanceof AbruptCompletion), "Set(v, stackString, Value(newStackString), Value.true)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp2 instanceof Completion) {
          _temp2 = _temp2.Value;
        }
      }
      return v;
    } else {
      throw e;
    }
  }
  function wrappedParse(init, f) {
    const p = new Parser(init);
    try {
      const r = f(p);
      if (p.earlyErrors.size > 0) {
        return [...p.earlyErrors].map(e => handleError(e));
      }
      return r;
    } catch (e) {
      return [handleError(e)];
    }
  }
  function ParseScript(sourceText, realm, hostDefined = {}) {
    // 1. Assert: sourceText is an ECMAScript source text (see clause 10).
    // 2. Parse sourceText using Script as the goal symbol and analyse the parse result for
    //    any Early Error conditions. If the parse was successful and no early errors were found,
    //    let body be the resulting parse tree. Otherwise, let body be a List of one or more
    //    SyntaxError objects representing the parsing errors and/or early errors. Parsing and
    //    early error detection may be interweaved in an implementation-dependent manner. If more
    //    than one parsing error or early error is present, the number and ordering of error
    //    objects in the list is implementation-dependent, but at least one must be present.
    const body = wrappedParse({
      source: sourceText,
      specifier: hostDefined.specifier,
      json: hostDefined[kInternal]?.json
    }, p => p.parseScript());
    // 3. If body is a List of errors, return body.
    if (Array.isArray(body)) {
      return body;
    }
    // 4. Return Script Record { [[Realm]]: realm, [[ECMAScriptCode]]: body, [[HostDefined]]: hostDefined }.
    return {
      Realm: realm,
      ECMAScriptCode: body,
      LoadedModules: [],
      HostDefined: hostDefined,
      mark(m) {
        m(this.Realm);
        m(this.Environment);
        for (const v of this.LoadedModules) {
          m(v.Module);
        }
      }
    };
  }
  function ParseModule(sourceText, realm, hostDefined = {}) {
    // 1. Assert: sourceText is an ECMAScript source text (see clause 10).
    // 2. Parse sourceText using Module as the goal symbol and analyse the parse result for
    //    any Early Error conditions. If the parse was successful and no early errors were found,
    //    let body be the resulting parse tree. Otherwise, let body be a List of one or more
    //    SyntaxError objects representing the parsing errors and/or early errors. Parsing and
    //    early error detection may be interweaved in an implementation-dependent manner. If more
    //    than one parsing error or early error is present, the number and ordering of error
    //    objects in the list is implementation-dependent, but at least one must be present.
    const body = wrappedParse({
      source: sourceText,
      specifier: hostDefined.specifier
    }, p => p.parseModule());
    // 3. If body is a List of errors, return body.
    if (Array.isArray(body)) {
      return body;
    }
    // 4. Let requestedModules be the ModuleRequests of body.
    const requestedModules = ModuleRequests(body);
    // 5. Let importEntries be ImportEntries of body.
    const importEntries = ImportEntries(body);
    // 6. Let importedBoundNames be ImportedLocalNames(importEntries).
    const importedBoundNames = new ValueSet(ImportedLocalNames(importEntries));
    // 7. Let indirectExportEntries be a new empty List.
    const indirectExportEntries = [];
    // 8. Let localExportEntries be a new empty List.
    const localExportEntries = [];
    // 9. Let starExportEntries be a new empty List.
    const starExportEntries = [];
    // 10. Let exportEntries be ExportEntries of body.
    const exportEntries = ExportEntries(body);
    // 11. For each ExportEntry Record ee in exportEntries, do
    for (const ee of exportEntries) {
      // a. If ee.[[ModuleRequest]] is null, then
      if (ee.ModuleRequest === Value.null) {
        // i. If ee.[[LocalName]] is not an element of importedBoundNames, then
        if (!importedBoundNames.has(ee.LocalName)) {
          // 1. Append ee to localExportEntries.
          localExportEntries.push(ee);
        } else {
          // ii. Else,
          // 1. Let ie be the element of importEntries whose [[LocalName]] is the same as ee.[[LocalName]].
          const ie = importEntries.find(e => e.LocalName.stringValue() === ee.LocalName.stringValue());
          // 2. If ie.[[ImportName]] is ~namespace-object~, then
          if (ie.ImportName === 'namespace-object') {
            // a. NOTE: This is a re-export of an imported module namespace object.
            // b. Append ee to localExportEntries.
            localExportEntries.push(ee);
          } else {
            // 3. Else,
            // a. NOTE: This is a re-export of a single name.
            // b. Append the ExportEntry Record { [[ModuleRequest]]: ie.[[ModuleRequest]], [[ImportName]]: ie.[[ImportName]], [[LocalName]]: null, [[ExportName]]: ee.[[ExportName]] } to indirectExportEntries.
            indirectExportEntries.push({
              ModuleRequest: ie.ModuleRequest,
              ImportName: ie.ImportName,
              LocalName: Value.null,
              ExportName: ee.ExportName
            });
          }
        }
      } else if (ee.ImportName && ee.ImportName === 'all-but-default' && ee.ExportName === Value.null) {
        // b. Else if ee.[[ImportName]] is ~all-but-default~ and ee.[[ExportName]] is null, then
        // i. Append ee to starExportEntries.
        starExportEntries.push(ee);
      } else {
        // c. Else,
        // i. Append ee to indirectExportEntries.
        indirectExportEntries.push(ee);
      }
    }
    // 12. Return Source Text Module Record { [[Realm]]: realm, [[Environment]]: undefined, [[Namespace]]: undefined, [[Status]]: unlinked, [[EvaluationError]]: undefined, [[HostDefined]]: hostDefined, [[ECMAScriptCode]]: body, [[Context]]: empty, [[ImportMeta]]: empty, [[RequestedModules]]: requestedModules, [[ImportEntries]]: importEntries, [[LocalExportEntries]]: localExportEntries, [[IndirectExportEntries]]: indirectExportEntries, [[StarExportEntries]]: starExportEntries, [[DFSIndex]]: undefined, [[DFSAncestorIndex]]: undefined }.
    return new (hostDefined.SourceTextModuleRecord || SourceTextModuleRecord)({
      Realm: realm,
      Environment: Value.undefined,
      Namespace: Value.undefined,
      Status: 'new',
      EvaluationError: Value.undefined,
      HostDefined: hostDefined,
      ECMAScriptCode: body,
      Context: undefined,
      ImportMeta: undefined,
      RequestedModules: requestedModules,
      LoadedModules: [],
      ImportEntries: importEntries,
      LocalExportEntries: localExportEntries,
      IndirectExportEntries: indirectExportEntries,
      StarExportEntries: starExportEntries,
      DFSIndex: Value.undefined,
      DFSAncestorIndex: Value.undefined,
      Async: body.hasTopLevelAwait ? Value.true : Value.false,
      AsyncEvaluating: Value.false,
      TopLevelCapability: Value.undefined,
      AsyncParentModules: Value.undefined,
      PendingAsyncDependencies: Value.undefined
    });
  }

  /** https://tc39.es/ecma262/#sec-parsejsonmodule */
  function ParseJSONModule(sourceText, realm, hostDefined) {
    // 1. Let jsonParse be realm's intrinsic object named "%JSON.parse%".
    const jsonParse = realm.Intrinsics['%JSON.parse%'];
    // 1. Let json be ? Call(jsonParse, undefined, « sourceText »).
    let _temp3 = Call(jsonParse, Value.undefined, [sourceText]);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const json = _temp3;
    // 1. Return CreateDefaultExportSyntheticModule(json, realm, hostDefined).
    return CreateDefaultExportSyntheticModule(json, realm, hostDefined);
  }

  /** https://tc39.es/ecma262/#sec-parsepattern */
  function ParsePattern(patternText, u) {
    const parse = flags => {
      const p = new RegExpParser(patternText);
      return p.scope(flags, () => p.parsePattern());
    };
    try {
      // 1. If u is true, then
      if (u) {
        // a. Parse patternText using the grammars in 21.2.1. The goal symbol for the parse is Pattern[+U, +N].
        return parse({
          U: true,
          N: true
        });
      } else {
        // 2. Else
        // a. Parse patternText using the grammars in 21.2.1. The goal symbol for the parse is Pattern[~U, ~N].
        //    If the result of parsing contains a GroupName, reparse with the goal symbol Pattern[~U, +N] and use this result instead.
        const pattern = parse({
          U: false,
          N: false
        });
        if (pattern.groupSpecifiers.size > 0) {
          return parse({
            U: false,
            N: true
          });
        }
        return pattern;
      }
    } catch (e) {
      return [handleError(e)];
    }
  }

  // #table-dynamic-function-sourcetext-prefixes
  const DynamicFunctionSourceTextPrefixes = {
    'normal': 'function',
    'generator': 'function*',
    'async': 'async function',
    'asyncGenerator': 'async function*'
  };
  function CreateDynamicFunction(constructor, newTarget, kind, args) {
    // 1. Assert: The execution context stack has at least two elements.
    Assert(exports.surroundingAgent.executionContextStack.length >= 2, "surroundingAgent.executionContextStack.length >= 2");
    // 2. Let callerContext be the second to top element of the execution context stack.
    const callerContext = exports.surroundingAgent.executionContextStack[exports.surroundingAgent.executionContextStack.length - 2];
    // 3. Let callerRealm be callerContext's Realm.
    const callerRealm = callerContext.Realm;
    // 4. Let calleeRealm be the current Realm Record.
    const calleeRealm = exports.surroundingAgent.currentRealmRecord;
    // 5. Perform ? HostEnsureCanCompileStrings(callerRealm, calleeRealm).
    let _temp = HostEnsureCanCompileStrings(callerRealm, calleeRealm);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 6. If newTarget is undefined, set newTarget to constructor.
    if (newTarget instanceof UndefinedValue) {
      newTarget = constructor;
    }
    // 7. If kind is normal, then
    let fallbackProto;
    if (kind === 'normal') {
      // a. Let goal be the grammar symbol FunctionBody[~Yield, ~Await].
      // b. Let parameterGoal be the grammar symbol FormalParameters[~Yield, ~Await].
      // c. Let fallbackProto be "%Function.prototype%".
      fallbackProto = '%Function.prototype%';
    } else if (kind === 'generator') {
      // 8. Else if kind is generator, then
      // a. Let goal be the grammar symbol GeneratorBody.
      // b. Let parameterGoal be the grammar symbol FormalParameters[+Yield, ~Await].
      // c. Let fallbackProto be "%GeneratorFunction.prototype%".
      fallbackProto = '%GeneratorFunction.prototype%';
    } else if (kind === 'async') {
      // 9. Else if kind is async, then
      // a. Let goal be the grammar symbol AsyncBody.
      // b. Let parameterGoal be the grammar symbol FormalParameters[~Yield, +Await].
      // c. Let fallbackProto be "%AsyncFunction.prototype%".
      fallbackProto = '%AsyncFunction.prototype%';
    } else {
      // 10. Else,
      // a. Assert: kind is asyncGenerator.
      Assert(kind === 'asyncGenerator', "kind === 'asyncGenerator'");
      // b. Let goal be the grammar symbol AsyncGeneratorBody.
      // c. Let parameterGoal be the grammar symbol FormalParameters[+Yield, +Await].
      // d. Let fallbackProto be "%AsyncGeneratorFunction.prototype%".
      fallbackProto = '%AsyncGeneratorFunction.prototype%';
    }
    // 11. Let argCount be the number of elements in args.
    const argCount = args.length;
    // 12. Let P be the empty String.
    let P = '';
    // 13. If argCount = 0, let bodyArg be the empty String.
    let bodyArg;
    if (argCount === 0) {
      bodyArg = Value('');
    } else if (argCount === 1) {
      // 14. Else if argCount = 1, let bodyArg be args[0].
      bodyArg = args[0];
    } else {
      // 15. Else,
      // a. Assert: argCount > 1.
      Assert(argCount > 1, "argCount > 1");
      // b. Let firstArg be args[0].
      const firstArg = args[0];
      // c. Set P to ? ToString(firstArg).
      let _temp2 = ToString(firstArg);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      P = _temp2.stringValue();
      // d. Let k be 1.
      let k = 1;
      // e. Repeat, while k < argCount - 1
      while (k < argCount - 1) {
        // i. Let nextArg be args[k].
        const nextArg = args[k];
        // ii. Let nextArgString be ? ToString(nextArg).
        let _temp3 = ToString(nextArg);
        /* c8 ignore if */
        if (_temp3 instanceof AbruptCompletion) {
          return _temp3;
        }
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
        const nextArgString = _temp3;
        // iii. Set P to the string-concatenation of the previous value of P, "," (a comma), and nextArgString.
        P = `${P},${nextArgString.stringValue()}`;
        // iv. Set k to k + 1.
        k += 1;
      }
      // f. Let bodyArg be args[k].
      bodyArg = args[k];
    }
    // 16. Let bodyString be the string-concatenation of 0x000A (LINE FEED), ? ToString(bodyArg), and 0x000A (LINE FEED).
    let _temp4 = ToString(bodyArg);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const bodyString = `\u{000A}${_temp4.stringValue()}\u{000A}`;
    // 17. Let prefix be the prefix associated with kind in Table 48.
    const prefix = DynamicFunctionSourceTextPrefixes[kind];
    // 18. Let sourceString be the string-concatenation of prefix, " anonymous(", P, 0x000A (LINE FEED), ") {", bodyString, and "}".
    const sourceString = `${prefix} anonymous(${P}\u{000A}) {${bodyString}}`;
    // 19. Let sourceText be ! UTF16DecodeString(sourceString).
    const sourceText = sourceString;
    // 20. Perform the following substeps in an implementation-dependent order, possibly interleaving parsing and error detection:
    //   a. Let parameters be the result of parsing ! UTF16DecodeString(P), using parameterGoal as the goal symbol. Throw a SyntaxError exception if the parse fails.
    //   b. Let body be the result of parsing ! UTF16DecodeString(bodyString), using goal as the goal symbol. Throw a SyntaxError exception if the parse fails.
    //   c. Let strict be ContainsUseStrict of body.
    //   d. If any static semantics errors are detected for parameters or body, throw a SyntaxError exception. If strict is true, the Early Error rules for UniqueFormalParameters:FormalParameters are applied.
    //   e. If strict is true and IsSimpleParameterList of parameters is false, throw a SyntaxError exception.
    //   f. If any element of the BoundNames of parameters also occurs in the LexicallyDeclaredNames of body, throw a SyntaxError exception.
    //   g. If body Contains SuperCall is true, throw a SyntaxError exception.
    //   h. If parameters Contains SuperCall is true, throw a SyntaxError exception.
    //   i. If body Contains SuperProperty is true, throw a SyntaxError exception.
    //   j. If parameters Contains SuperProperty is true, throw a SyntaxError exception.
    //   k. If kind is generator or asyncGenerator, then
    //     i. If parameters Contains YieldExpression is true, throw a SyntaxError exception.
    //   l. If kind is async or asyncGenerator, then
    //     i. If parameters Contains AwaitExpression is true, throw a SyntaxError exception.
    //   m. If strict is true, then
    //     i. If BoundNames of parameters contains any duplicate elements, throw a SyntaxError exception.
    let parameters;
    let body;
    {
      const f = wrappedParse({
        source: sourceString
      }, p => {
        const r = p.parseExpression();
        p.expect(Token.EOS);
        return r;
      });
      if (Array.isArray(f)) {
        return exports.surroundingAgent.Throw(f[0]);
      }
      parameters = f.FormalParameters;
      switch (kind) {
        case 'normal':
          body = f.FunctionBody;
          break;
        case 'generator':
          body = f.GeneratorBody;
          break;
        case 'async':
          body = f.AsyncBody;
          break;
        case 'asyncGenerator':
          body = f.AsyncGeneratorBody;
          break;
        /*c8 ignore next*/default:
          throw new OutOfRange$1('kind', kind);
      }
    }
    // 21. Let proto be ? GetPrototypeFromConstructor(newTarget, fallbackProto).
    let _temp5 = GetPrototypeFromConstructor(newTarget, fallbackProto);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const proto = _temp5;
    // 22. Let realmF be the current Realm Record.
    const realmF = exports.surroundingAgent.currentRealmRecord;
    // 23. Let scope be realmF.[[GlobalEnv]].
    const scope = realmF.GlobalEnv;
    // 24. Let F be ! OrdinaryFunctionCreate(proto, sourceText, parameters, body, non-lexical-this, scope, null).
    let _temp6 = OrdinaryFunctionCreate(proto, sourceText, parameters, body, 'non-lexical-this', scope, Value.null);
    Assert(!(_temp6 instanceof AbruptCompletion), "OrdinaryFunctionCreate(proto, sourceText, parameters, body, 'non-lexical-this', scope, Value.null)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const F = _temp6;
    // 25. Perform SetFunctionName(F, "anonymous").
    SetFunctionName(F, Value('anonymous'));
    // 26. If kind is generator, then
    if (kind === 'generator') {
      // a. Let prototype be OrdinaryObjectCreate(%GeneratorFunction.prototype.prototype%).
      const prototype = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%GeneratorFunction.prototype.prototype%'));
      // b. Perform DefinePropertyOrThrow(F, "prototype", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).
      DefinePropertyOrThrow(F, Value('prototype'), exports.Descriptor({
        Value: prototype,
        Writable: Value.true,
        Enumerable: Value.false,
        Configurable: Value.false
      }));
    } else if (kind === 'asyncGenerator') {
      // 27. Else if kind is asyncGenerator, then
      // a. Let prototype be OrdinaryObjectCreate(%AsyncGeneratorFunction.prototype.prototype%).
      const prototype = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%AsyncGeneratorFunction.prototype.prototype%'));
      // b. Perform DefinePropertyOrThrow(F, "prototype", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).
      DefinePropertyOrThrow(F, Value('prototype'), exports.Descriptor({
        Value: prototype,
        Writable: Value.true,
        Enumerable: Value.false,
        Configurable: Value.false
      }));
    } else if (kind === 'normal') {
      // 28. Else if kind is normal, then perform MakeConstructor(F).
      MakeConstructor(F);
    }
    // 29. NOTE: Functions whose kind is async are not constructible and do not have a [[Construct]] internal method or a "prototype" property.
    // 20. Return F.
    return F;
  }

  // @ts-nocheck


  /** https://tc39.es/ecma262/#sec-generator-function-definitions-runtime-semantics-evaluation */
  //   GeneratorExpression :
  //     `function` `*` `(` FormalParameters `)` `{` GeneratorBody `}`
  //     `function` `*` BindingIdentifier `(` FormalParameters `)` `{` GeneratorBody `}`
  function Evaluate_GeneratorExpression(GeneratorExpression) {
    // 1. Return InstantiateGeneratorFunctionExpression of GeneratorExpression.
    return InstantiateGeneratorFunctionExpression(GeneratorExpression);
  }

  /** https://tc39.es/ecma262/#sec-arrow-function-definitions-runtime-semantics-evaluation */
  function Evaluate_ArrowFunction(ArrowFunction) {
    // 1. Return InstantiateArrowFunctionExpression of ArrowFunction.
    return InstantiateArrowFunctionExpression(ArrowFunction);
  }

  /** https://tc39.es/ecma262/#sec-async-arrow-function-definitions-runtime-semantics-evaluation */
  function Evaluate_AsyncArrowFunction(AsyncArrowFunction) {
    // 1. Return InstantiateAsyncArrowFunctionExpression of AsyncArrowFunction.
    return InstantiateAsyncArrowFunctionExpression(AsyncArrowFunction);
  }

  /** https://tc39.es/ecma262/#sec-break-statement-runtime-semantics-evaluation */
  //   BreakStatement :
  //     `break` `;`
  //     `break` LabelIdentifier `;`
  function Evaluate_BreakStatement({
    LabelIdentifier
  }) {
    if (!LabelIdentifier) {
      // 1. Return Completion { [[Type]]: break, [[Value]]: empty, [[Target]]: empty }.
      return new Completion({
        Type: 'break',
        Value: undefined,
        Target: undefined
      });
    }
    // 1. Let label be the StringValue of LabelIdentifier.
    const label = StringValue(LabelIdentifier);
    // 2. Return Completion { [[Type]]: break, [[Value]]: empty, [[Target]]: label }.
    return new Completion({
      Type: 'break',
      Value: undefined,
      Target: label
    });
  }

  /** https://tc39.es/ecma262/#sec-asyncgenerator-definitions-evaluation */
  //   AsyncGeneratorExpression :
  //     `async` `function` `*` `(` FormalParameters `)` `{` AsyncGeneratorBody `}`
  //     `async` `function` `*` BindingIdentifier `(` FormalParameters `)` `{` AsyncGeneratorBody `}`
  function Evaluate_AsyncGeneratorExpression(AsyncGeneratorExpression) {
    // 1. Return InstantiateAsyncGeneratorFunctionExpression of AsyncGeneratorExpression.
    return InstantiateAsyncGeneratorFunctionExpression(AsyncGeneratorExpression);
  }

  /** https://tc39.es/ecma262/#sec-statement-semantics-runtime-semantics-evaluation */
  //   HoistableDeclaration :
  //     GeneratorDeclaration
  //     AsyncFunctionDeclaration
  //     AsyncGeneratorDeclaration
  function Evaluate_HoistableDeclaration(_HoistableDeclaration) {
    // 1. Return NormalCompletion(empty).
    return NormalCompletion(undefined);
  }

  /** https://tc39.es/ecma262/#sec-comma-operator-runtime-semantics-evaluation */
  //   Expression :
  //     AssignmentExpression
  //     Expression `,` AssignmentExpression
  function* Evaluate_CommaOperator({
    ExpressionList
  }) {
    let result;
    for (const Expression of ExpressionList) {
      const lref = yield* Evaluate(Expression);
      let _temp = GetValue(lref);
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      result = _temp;
    }
    return result;
  }

  /** https://tc39.es/ecma262/#sec-generator-function-definitions-runtime-semantics-evaluation */
  //   YieldExpression :
  //     `yield`
  //     `yield` AssignmentExpression
  //     `yield` `*` AssignmentExpression
  function* Evaluate_YieldExpression({
    hasStar,
    AssignmentExpression
  }) {
    if (hasStar) {
      let _temp = GetGeneratorKind();
      Assert(!(_temp instanceof AbruptCompletion), "GetGeneratorKind()" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      // 1. Let generatorKind be ! GetGeneratorKind().
      const generatorKind = _temp;
      // 2. Let exprRef be the result of evaluating AssignmentExpression.
      const exprRef = yield* Evaluate(AssignmentExpression);
      // 3. Let value be ? GetValue(exprRef).
      let _temp2 = GetValue(exprRef);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      const value = _temp2;
      // 4. Let iteratorRecord be ? GetIterator(value, generatorKind).
      let _temp3 = GetIterator(value, generatorKind);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      const iteratorRecord = _temp3;
      // 5. Let iterator be iteratorRecord.[[Iterator]].
      const iterator = iteratorRecord.Iterator;
      // 6. Let received be NormalCompletion(undefined).
      let received = NormalCompletion(Value.undefined);
      // 7. Repeat,
      while (true) {
        // a. If received.[[Type]] is normal, then
        if (received.Type === 'normal') {
          let _temp4 = Call(iteratorRecord.NextMethod, iteratorRecord.Iterator, [received.Value]);
          /* c8 ignore if */
          if (_temp4 instanceof AbruptCompletion) {
            return _temp4;
          }
          /* c8 ignore if */
          if (_temp4 instanceof Completion) {
            _temp4 = _temp4.Value;
          }
          // i. Let innerResult be ? Call(iteratorRecord.[[NextMethod]], iteratorRecord.[[Iterator]], « received.[[Value]] »).
          let innerResult = _temp4;
          // ii. If generatorKind is async, then set innerResult to ? Await(innerResult).
          if (generatorKind === 'async') {
            let _temp5 = yield* Await(innerResult);
            /* c8 ignore if */
            if (_temp5 instanceof AbruptCompletion) {
              return _temp5;
            }
            /* c8 ignore if */
            if (_temp5 instanceof Completion) {
              _temp5 = _temp5.Value;
            }
            innerResult = _temp5;
          }
          // iii. If Type(innerResult) is not Object, throw a TypeError exception.
          if (!(innerResult instanceof ObjectValue)) {
            return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', innerResult);
          }
          // iv. Let done be ? IteratorComplete(innerResult).
          let _temp6 = IteratorComplete(innerResult);
          /* c8 ignore if */
          if (_temp6 instanceof AbruptCompletion) {
            return _temp6;
          }
          /* c8 ignore if */
          if (_temp6 instanceof Completion) {
            _temp6 = _temp6.Value;
          }
          const done = _temp6;
          // v. If done is true, then
          if (done === Value.true) {
            // 1. Return ? IteratorValue(innerResult).
            return IteratorValue(innerResult);
          }
          // vi. If generatorKind is async, then set received to AsyncGeneratorYield(? IteratorValue(innerResult)).
          if (generatorKind === 'async') {
            let _temp7 = IteratorValue(innerResult);
            /* c8 ignore if */
            if (_temp7 instanceof AbruptCompletion) {
              return _temp7;
            }
            /* c8 ignore if */
            if (_temp7 instanceof Completion) {
              _temp7 = _temp7.Value;
            }
            received = yield* AsyncGeneratorYield(_temp7);
          } else {
            // vii. Else, set received to GeneratorYield(innerResult).
            received = yield* GeneratorYield(innerResult);
          }
        } else if (received.Type === 'throw') {
          let _temp8 = GetMethod(iterator, Value('throw'));
          /* c8 ignore if */
          if (_temp8 instanceof AbruptCompletion) {
            return _temp8;
          }
          /* c8 ignore if */
          if (_temp8 instanceof Completion) {
            _temp8 = _temp8.Value;
          }
          // b. Else if received.[[Type]] is throw, then
          // i. Let throw be ? GetMethod(iterator, "throw").
          const thr = _temp8;
          // ii. If throw is not undefined, then
          if (thr !== Value.undefined) {
            let _temp9 = Call(thr, iterator, [received.Value]);
            /* c8 ignore if */
            if (_temp9 instanceof AbruptCompletion) {
              return _temp9;
            }
            /* c8 ignore if */
            if (_temp9 instanceof Completion) {
              _temp9 = _temp9.Value;
            }
            // 1. Let innerResult be ? Call(throw, iterator, « received.[[Value]] »).
            let innerResult = _temp9;
            // 2. If generatorKind is async, then set innerResult to ? Await(innerResult).
            if (generatorKind === 'async') {
              let _temp10 = yield* Await(innerResult);
              /* c8 ignore if */
              if (_temp10 instanceof AbruptCompletion) {
                return _temp10;
              }
              /* c8 ignore if */
              if (_temp10 instanceof Completion) {
                _temp10 = _temp10.Value;
              }
              innerResult = _temp10;
            }
            // 3. NOTE: Exceptions from the inner iterator throw method are propagated. Normal completions from an inner throw method are processed similarly to an inner next.
            // 4. If Type(innerResult) is not Object, throw a TypeError exception.
            if (!(innerResult instanceof ObjectValue)) {
              return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', innerResult);
            }
            // 5. Let done be ? IteratorComplete(innerResult).
            let _temp11 = IteratorComplete(innerResult);
            /* c8 ignore if */
            if (_temp11 instanceof AbruptCompletion) {
              return _temp11;
            }
            /* c8 ignore if */
            if (_temp11 instanceof Completion) {
              _temp11 = _temp11.Value;
            }
            const done = _temp11;
            // 6. If done is true, then
            if (done === Value.true) {
              // a. Return ? IteratorValue(innerResult).
              return IteratorValue(innerResult);
            }
            // 7. If generatorKind is async, then set received to AsyncGeneratorYield(? IteratorValue(innerResult)).
            if (generatorKind === 'async') {
              let _temp12 = IteratorValue(innerResult);
              /* c8 ignore if */
              if (_temp12 instanceof AbruptCompletion) {
                return _temp12;
              }
              /* c8 ignore if */
              if (_temp12 instanceof Completion) {
                _temp12 = _temp12.Value;
              }
              received = yield* AsyncGeneratorYield(_temp12);
            } else {
              // 8. Else, set received to GeneratorYield(innerResult).
              received = yield* GeneratorYield(innerResult);
            }
          } else {
            // iii. Else,
            // 1. NOTE: If iterator does not have a throw method, this throw is going to terminate the yield* loop. But first we need to give iterator a chance to clean up.
            // 2. Let closeCompletion be Completion { [[Type]]: normal, [[Value]]: empty, [[Target]]: empty }.
            const closeCompletion = NormalCompletion(undefined);
            // 3. If generatorKind is async, perform ? AsyncIteratorClose(iteratorRecord, closeCompletion).
            // 4. Else, perform ? IteratorClose(iteratorRecord, closeCompletion).
            if (generatorKind === 'async') {
              let _temp13 = yield* AsyncIteratorClose(iteratorRecord, closeCompletion);
              /* c8 ignore if */
              if (_temp13 instanceof AbruptCompletion) {
                return _temp13;
              }
              /* c8 ignore if */
              if (_temp13 instanceof Completion) {
                _temp13 = _temp13.Value;
              }
            } else {
              let _temp14 = IteratorClose(iteratorRecord, closeCompletion);
              /* c8 ignore if */
              if (_temp14 instanceof AbruptCompletion) {
                return _temp14;
              }
              /* c8 ignore if */
              if (_temp14 instanceof Completion) {
                _temp14 = _temp14.Value;
              }
            }
            // 5. NOTE: The next step throws a TypeError to indicate that there was a yield* protocol violation: iterator does not have a throw method.
            // 6. Throw a TypeError exception.
            return exports.surroundingAgent.Throw('TypeError', 'IteratorThrowMissing');
          }
        } else {
          // c. Else,
          // i. Assert: received.[[Type]] is return.
          Assert(received.Type === 'return', "received.Type === 'return'");
          // ii. Let return be ? GetMethod(iterator, "return").
          let _temp15 = GetMethod(iterator, Value('return'));
          /* c8 ignore if */
          if (_temp15 instanceof AbruptCompletion) {
            return _temp15;
          }
          /* c8 ignore if */
          if (_temp15 instanceof Completion) {
            _temp15 = _temp15.Value;
          }
          const ret = _temp15;
          // iii. If return is undefined, then
          if (ret === Value.undefined) {
            // 1. If generatorKind is async, then set received.[[Value]] to ? Await(received.[[Value]]).
            if (generatorKind === 'async') {
              let _temp16 = yield* Await(received.Value);
              /* c8 ignore if */
              if (_temp16 instanceof AbruptCompletion) {
                return _temp16;
              }
              /* c8 ignore if */
              if (_temp16 instanceof Completion) {
                _temp16 = _temp16.Value;
              }
              received.Value = _temp16;
            }
            // 2. Return Completion(received).
            return Completion(received);
          }
          // iv. Let innerReturnResult be ? Call(return, iterator, « received.[[Value]] »).
          let _temp17 = Call(ret, iterator, [received.Value]);
          /* c8 ignore if */
          if (_temp17 instanceof AbruptCompletion) {
            return _temp17;
          }
          /* c8 ignore if */
          if (_temp17 instanceof Completion) {
            _temp17 = _temp17.Value;
          }
          let innerReturnResult = _temp17;
          // v. If generatorKind is async, then set innerReturnResult to ? Await(innerReturnResult).
          if (generatorKind === 'async') {
            let _temp18 = yield* Await(innerReturnResult);
            /* c8 ignore if */
            if (_temp18 instanceof AbruptCompletion) {
              return _temp18;
            }
            /* c8 ignore if */
            if (_temp18 instanceof Completion) {
              _temp18 = _temp18.Value;
            }
            innerReturnResult = _temp18;
          }
          // vi. If Type(innerReturnResult) is not Object, throw a TypeError exception.
          if (!(innerReturnResult instanceof ObjectValue)) {
            return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', innerReturnResult);
          }
          // vii. Let done be ? IteratorComplete(innerReturnResult).
          let _temp19 = IteratorComplete(innerReturnResult);
          /* c8 ignore if */
          if (_temp19 instanceof AbruptCompletion) {
            return _temp19;
          }
          /* c8 ignore if */
          if (_temp19 instanceof Completion) {
            _temp19 = _temp19.Value;
          }
          const done = _temp19;
          // viii. If done is true, then
          if (done === Value.true) {
            let _temp20 = IteratorValue(innerReturnResult);
            /* c8 ignore if */
            if (_temp20 instanceof AbruptCompletion) {
              return _temp20;
            }
            /* c8 ignore if */
            if (_temp20 instanceof Completion) {
              _temp20 = _temp20.Value;
            }
            // 1. Let value be ? IteratorValue(innerReturnResult).
            const innerValue = _temp20;
            // 2. Return Completion { [[Type]]: return, [[Value]]: value, [[Target]]: empty }.
            return new Completion({
              Type: 'return',
              Value: innerValue,
              Target: undefined
            });
          }
          // ix. If generatorKind is async, then set received to AsyncGeneratorYield(? IteratorValue(innerResult)).
          if (generatorKind === 'async') {
            let _temp21 = IteratorValue(innerReturnResult);
            /* c8 ignore if */
            if (_temp21 instanceof AbruptCompletion) {
              return _temp21;
            }
            /* c8 ignore if */
            if (_temp21 instanceof Completion) {
              _temp21 = _temp21.Value;
            }
            received = yield* AsyncGeneratorYield(_temp21);
          } else {
            // ixx. Else, set received to GeneratorYield(innerResult).
            received = yield* GeneratorYield(innerReturnResult);
          }
        }
        received = EnsureCompletion(received);
      }
    }
    if (AssignmentExpression) {
      // 1. Let exprRef be the result of evaluating AssignmentExpression.
      const exprRef = yield* Evaluate(AssignmentExpression);
      // 2. Let value be ? GetValue(exprRef).
      let _temp22 = GetValue(exprRef);
      /* c8 ignore if */
      if (_temp22 instanceof AbruptCompletion) {
        return _temp22;
      }
      /* c8 ignore if */
      if (_temp22 instanceof Completion) {
        _temp22 = _temp22.Value;
      }
      const value = _temp22;
      // 3. Return ? Yield(value).
      return yield* Yield(value);
    }
    // 1. Return ? Yield(undefined).
    return yield* Yield(Value.undefined);
  }

  // @ts-nocheck

  // https://tc39.es/proposal-string-replaceall/#sec-stringindexof
  function StringIndexOf(string, searchValue, fromIndex) {
    // 1. Assert: Type(string) is String.
    Assert(string instanceof JSStringValue, "string instanceof JSStringValue");
    // 2. Assert: Type(searchValue) is String.
    Assert(searchValue instanceof JSStringValue, "searchValue instanceof JSStringValue");
    // 3. Assert: fromIndex is a non-negative integer.
    Assert(isNonNegativeInteger(fromIndex), "isNonNegativeInteger(fromIndex)");
    const stringStr = string.stringValue();
    const searchStr = searchValue.stringValue();
    // 4. Let len be the length of string.
    const len = stringStr.length;
    // 5. If searchValue is the empty string, and fromIndex <= len, return 𝔽(fromIndex).
    if (searchStr === '' && fromIndex <= len) {
      return F(fromIndex);
    }
    // 6. Let searchLen be the length of searchValue.
    const searchLen = searchStr.length;
    // 7. If there exists any integer k such that fromIndex ≤ k ≤ len - searchLen and for all nonnegative integers j less than searchLen,
    //    the code unit at index k + j within string is the same as the code unit at index j within searchValue, let pos be the smallest (closest to -∞) such integer.
    //    Otherwise, let pos be -1.
    let k = fromIndex;
    let pos = -1;
    while (k + searchLen <= len) {
      let match = true;
      for (let j = 0; j < searchLen; j += 1) {
        if (searchStr[j] !== stringStr[k + j]) {
          match = false;
          break;
        }
      }
      if (match) {
        pos = k;
        break;
      }
      k += 1;
    }
    // 8. Return 𝔽(pos).
    return F(pos);
  }

  // @ts-nocheck

  /** https://tc39.es/ecma262/#sec-numbertobigint */
  function NumberToBigInt(number) {
    // 1. Assert: Type(number) is Number.
    Assert(number instanceof NumberValue, "number instanceof NumberValue");
    // 2. If IsIntegralNumber(number) is false, throw a RangeError exception.
    if (IsIntegralNumber(number) === Value.false) {
      return exports.surroundingAgent.Throw('RangeError', 'CannotConvertDecimalToBigInt', number);
    }
    // 3. Return the BigInt value that represents the mathematical value of number.
    return Z(BigInt(R(number)));
  }

  /** https://tc39.es/ecma262/#sec-conditional-operator-runtime-semantics-evaluation */
  //   ConditionalExpression :
  //     ShortCircuitExpression `?` AssignmentExpression `:` AssignmentExpression
  function* Evaluate_ConditionalExpression({
    ShortCircuitExpression,
    AssignmentExpression_a,
    AssignmentExpression_b
  }) {
    // 1. Let lref be the result of evaluating ShortCircuitExpression.
    const lref = yield* Evaluate(ShortCircuitExpression);
    // 2. Let lval be ! ToBoolean(? GetValue(lref)).
    let _temp2 = GetValue(lref);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    let _temp = ToBoolean(_temp2);
    Assert(!(_temp instanceof AbruptCompletion), "ToBoolean(Q(GetValue(lref)))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const lval = _temp;
    // 3. If lval is true, then
    if (lval === Value.true) {
      // a. Let trueRef be the result of evaluating the first AssignmentExpression.
      const trueRef = yield* Evaluate(AssignmentExpression_a);
      // b. Return ? GetValue(trueRef).
      return GetValue(trueRef);
    } else {
      // 4. Else,
      // a. Let falseRef be the result of evaluating the second AssignmentExpression.
      const falseRef = yield* Evaluate(AssignmentExpression_b);
      // b. Return ? GetValue(falseRef).
      return GetValue(falseRef);
    }
  }

  // @ts-nocheck
  /** https://tc39.es/ecma262/#sec-regular-expression-literals-runtime-semantics-evaluation */
  //   RegularExpressionLiteral :
  //     `/` RegularExpressionBody `/` RegularExpressionFlags
  function Evaluate_RegularExpressionLiteral(RegularExpressionLiteral) {
    // 1. Let pattern be ! UTF16Encode(BodyText of RegularExpressionLiteral).
    const pattern = Value(BodyText(RegularExpressionLiteral));
    // 2. Let flags be ! UTF16Encode(FlagText of RegularExpressionLiteral).
    const flags = Value(FlagText(RegularExpressionLiteral));
    // 3. Return RegExpCreate(pattern, flags).
    return RegExpCreate(pattern, flags);
  }

  var symbols$1=new Map([['A','a'],['B','b'],['C','c'],['D','d'],['E','e'],['F','f'],['G','g'],['H','h'],['I','i'],['J','j'],['K','k'],['L','l'],['M','m'],['N','n'],['O','o'],['P','p'],['Q','q'],['R','r'],['S','s'],['T','t'],['U','u'],['V','v'],['W','w'],['X','x'],['Y','y'],['Z','z'],['\xB5','\u03BC'],['\xC0','\xE0'],['\xC1','\xE1'],['\xC2','\xE2'],['\xC3','\xE3'],['\xC4','\xE4'],['\xC5','\xE5'],['\xC6','\xE6'],['\xC7','\xE7'],['\xC8','\xE8'],['\xC9','\xE9'],['\xCA','\xEA'],['\xCB','\xEB'],['\xCC','\xEC'],['\xCD','\xED'],['\xCE','\xEE'],['\xCF','\xEF'],['\xD0','\xF0'],['\xD1','\xF1'],['\xD2','\xF2'],['\xD3','\xF3'],['\xD4','\xF4'],['\xD5','\xF5'],['\xD6','\xF6'],['\xD8','\xF8'],['\xD9','\xF9'],['\xDA','\xFA'],['\xDB','\xFB'],['\xDC','\xFC'],['\xDD','\xFD'],['\xDE','\xFE'],['\u0100','\u0101'],['\u0102','\u0103'],['\u0104','\u0105'],['\u0106','\u0107'],['\u0108','\u0109'],['\u010A','\u010B'],['\u010C','\u010D'],['\u010E','\u010F'],['\u0110','\u0111'],['\u0112','\u0113'],['\u0114','\u0115'],['\u0116','\u0117'],['\u0118','\u0119'],['\u011A','\u011B'],['\u011C','\u011D'],['\u011E','\u011F'],['\u0120','\u0121'],['\u0122','\u0123'],['\u0124','\u0125'],['\u0126','\u0127'],['\u0128','\u0129'],['\u012A','\u012B'],['\u012C','\u012D'],['\u012E','\u012F'],['\u0132','\u0133'],['\u0134','\u0135'],['\u0136','\u0137'],['\u0139','\u013A'],['\u013B','\u013C'],['\u013D','\u013E'],['\u013F','\u0140'],['\u0141','\u0142'],['\u0143','\u0144'],['\u0145','\u0146'],['\u0147','\u0148'],['\u014A','\u014B'],['\u014C','\u014D'],['\u014E','\u014F'],['\u0150','\u0151'],['\u0152','\u0153'],['\u0154','\u0155'],['\u0156','\u0157'],['\u0158','\u0159'],['\u015A','\u015B'],['\u015C','\u015D'],['\u015E','\u015F'],['\u0160','\u0161'],['\u0162','\u0163'],['\u0164','\u0165'],['\u0166','\u0167'],['\u0168','\u0169'],['\u016A','\u016B'],['\u016C','\u016D'],['\u016E','\u016F'],['\u0170','\u0171'],['\u0172','\u0173'],['\u0174','\u0175'],['\u0176','\u0177'],['\u0178','\xFF'],['\u0179','\u017A'],['\u017B','\u017C'],['\u017D','\u017E'],['\u017F','s'],['\u0181','\u0253'],['\u0182','\u0183'],['\u0184','\u0185'],['\u0186','\u0254'],['\u0187','\u0188'],['\u0189','\u0256'],['\u018A','\u0257'],['\u018B','\u018C'],['\u018E','\u01DD'],['\u018F','\u0259'],['\u0190','\u025B'],['\u0191','\u0192'],['\u0193','\u0260'],['\u0194','\u0263'],['\u0196','\u0269'],['\u0197','\u0268'],['\u0198','\u0199'],['\u019C','\u026F'],['\u019D','\u0272'],['\u019F','\u0275'],['\u01A0','\u01A1'],['\u01A2','\u01A3'],['\u01A4','\u01A5'],['\u01A6','\u0280'],['\u01A7','\u01A8'],['\u01A9','\u0283'],['\u01AC','\u01AD'],['\u01AE','\u0288'],['\u01AF','\u01B0'],['\u01B1','\u028A'],['\u01B2','\u028B'],['\u01B3','\u01B4'],['\u01B5','\u01B6'],['\u01B7','\u0292'],['\u01B8','\u01B9'],['\u01BC','\u01BD'],['\u01C4','\u01C6'],['\u01C5','\u01C6'],['\u01C7','\u01C9'],['\u01C8','\u01C9'],['\u01CA','\u01CC'],['\u01CB','\u01CC'],['\u01CD','\u01CE'],['\u01CF','\u01D0'],['\u01D1','\u01D2'],['\u01D3','\u01D4'],['\u01D5','\u01D6'],['\u01D7','\u01D8'],['\u01D9','\u01DA'],['\u01DB','\u01DC'],['\u01DE','\u01DF'],['\u01E0','\u01E1'],['\u01E2','\u01E3'],['\u01E4','\u01E5'],['\u01E6','\u01E7'],['\u01E8','\u01E9'],['\u01EA','\u01EB'],['\u01EC','\u01ED'],['\u01EE','\u01EF'],['\u01F1','\u01F3'],['\u01F2','\u01F3'],['\u01F4','\u01F5'],['\u01F6','\u0195'],['\u01F7','\u01BF'],['\u01F8','\u01F9'],['\u01FA','\u01FB'],['\u01FC','\u01FD'],['\u01FE','\u01FF'],['\u0200','\u0201'],['\u0202','\u0203'],['\u0204','\u0205'],['\u0206','\u0207'],['\u0208','\u0209'],['\u020A','\u020B'],['\u020C','\u020D'],['\u020E','\u020F'],['\u0210','\u0211'],['\u0212','\u0213'],['\u0214','\u0215'],['\u0216','\u0217'],['\u0218','\u0219'],['\u021A','\u021B'],['\u021C','\u021D'],['\u021E','\u021F'],['\u0220','\u019E'],['\u0222','\u0223'],['\u0224','\u0225'],['\u0226','\u0227'],['\u0228','\u0229'],['\u022A','\u022B'],['\u022C','\u022D'],['\u022E','\u022F'],['\u0230','\u0231'],['\u0232','\u0233'],['\u023A','\u2C65'],['\u023B','\u023C'],['\u023D','\u019A'],['\u023E','\u2C66'],['\u0241','\u0242'],['\u0243','\u0180'],['\u0244','\u0289'],['\u0245','\u028C'],['\u0246','\u0247'],['\u0248','\u0249'],['\u024A','\u024B'],['\u024C','\u024D'],['\u024E','\u024F'],['\u0345','\u03B9'],['\u0370','\u0371'],['\u0372','\u0373'],['\u0376','\u0377'],['\u037F','\u03F3'],['\u0386','\u03AC'],['\u0388','\u03AD'],['\u0389','\u03AE'],['\u038A','\u03AF'],['\u038C','\u03CC'],['\u038E','\u03CD'],['\u038F','\u03CE'],['\u0391','\u03B1'],['\u0392','\u03B2'],['\u0393','\u03B3'],['\u0394','\u03B4'],['\u0395','\u03B5'],['\u0396','\u03B6'],['\u0397','\u03B7'],['\u0398','\u03B8'],['\u0399','\u03B9'],['\u039A','\u03BA'],['\u039B','\u03BB'],['\u039C','\u03BC'],['\u039D','\u03BD'],['\u039E','\u03BE'],['\u039F','\u03BF'],['\u03A0','\u03C0'],['\u03A1','\u03C1'],['\u03A3','\u03C3'],['\u03A4','\u03C4'],['\u03A5','\u03C5'],['\u03A6','\u03C6'],['\u03A7','\u03C7'],['\u03A8','\u03C8'],['\u03A9','\u03C9'],['\u03AA','\u03CA'],['\u03AB','\u03CB'],['\u03C2','\u03C3'],['\u03CF','\u03D7'],['\u03D0','\u03B2'],['\u03D1','\u03B8'],['\u03D5','\u03C6'],['\u03D6','\u03C0'],['\u03D8','\u03D9'],['\u03DA','\u03DB'],['\u03DC','\u03DD'],['\u03DE','\u03DF'],['\u03E0','\u03E1'],['\u03E2','\u03E3'],['\u03E4','\u03E5'],['\u03E6','\u03E7'],['\u03E8','\u03E9'],['\u03EA','\u03EB'],['\u03EC','\u03ED'],['\u03EE','\u03EF'],['\u03F0','\u03BA'],['\u03F1','\u03C1'],['\u03F4','\u03B8'],['\u03F5','\u03B5'],['\u03F7','\u03F8'],['\u03F9','\u03F2'],['\u03FA','\u03FB'],['\u03FD','\u037B'],['\u03FE','\u037C'],['\u03FF','\u037D'],['\u0400','\u0450'],['\u0401','\u0451'],['\u0402','\u0452'],['\u0403','\u0453'],['\u0404','\u0454'],['\u0405','\u0455'],['\u0406','\u0456'],['\u0407','\u0457'],['\u0408','\u0458'],['\u0409','\u0459'],['\u040A','\u045A'],['\u040B','\u045B'],['\u040C','\u045C'],['\u040D','\u045D'],['\u040E','\u045E'],['\u040F','\u045F'],['\u0410','\u0430'],['\u0411','\u0431'],['\u0412','\u0432'],['\u0413','\u0433'],['\u0414','\u0434'],['\u0415','\u0435'],['\u0416','\u0436'],['\u0417','\u0437'],['\u0418','\u0438'],['\u0419','\u0439'],['\u041A','\u043A'],['\u041B','\u043B'],['\u041C','\u043C'],['\u041D','\u043D'],['\u041E','\u043E'],['\u041F','\u043F'],['\u0420','\u0440'],['\u0421','\u0441'],['\u0422','\u0442'],['\u0423','\u0443'],['\u0424','\u0444'],['\u0425','\u0445'],['\u0426','\u0446'],['\u0427','\u0447'],['\u0428','\u0448'],['\u0429','\u0449'],['\u042A','\u044A'],['\u042B','\u044B'],['\u042C','\u044C'],['\u042D','\u044D'],['\u042E','\u044E'],['\u042F','\u044F'],['\u0460','\u0461'],['\u0462','\u0463'],['\u0464','\u0465'],['\u0466','\u0467'],['\u0468','\u0469'],['\u046A','\u046B'],['\u046C','\u046D'],['\u046E','\u046F'],['\u0470','\u0471'],['\u0472','\u0473'],['\u0474','\u0475'],['\u0476','\u0477'],['\u0478','\u0479'],['\u047A','\u047B'],['\u047C','\u047D'],['\u047E','\u047F'],['\u0480','\u0481'],['\u048A','\u048B'],['\u048C','\u048D'],['\u048E','\u048F'],['\u0490','\u0491'],['\u0492','\u0493'],['\u0494','\u0495'],['\u0496','\u0497'],['\u0498','\u0499'],['\u049A','\u049B'],['\u049C','\u049D'],['\u049E','\u049F'],['\u04A0','\u04A1'],['\u04A2','\u04A3'],['\u04A4','\u04A5'],['\u04A6','\u04A7'],['\u04A8','\u04A9'],['\u04AA','\u04AB'],['\u04AC','\u04AD'],['\u04AE','\u04AF'],['\u04B0','\u04B1'],['\u04B2','\u04B3'],['\u04B4','\u04B5'],['\u04B6','\u04B7'],['\u04B8','\u04B9'],['\u04BA','\u04BB'],['\u04BC','\u04BD'],['\u04BE','\u04BF'],['\u04C0','\u04CF'],['\u04C1','\u04C2'],['\u04C3','\u04C4'],['\u04C5','\u04C6'],['\u04C7','\u04C8'],['\u04C9','\u04CA'],['\u04CB','\u04CC'],['\u04CD','\u04CE'],['\u04D0','\u04D1'],['\u04D2','\u04D3'],['\u04D4','\u04D5'],['\u04D6','\u04D7'],['\u04D8','\u04D9'],['\u04DA','\u04DB'],['\u04DC','\u04DD'],['\u04DE','\u04DF'],['\u04E0','\u04E1'],['\u04E2','\u04E3'],['\u04E4','\u04E5'],['\u04E6','\u04E7'],['\u04E8','\u04E9'],['\u04EA','\u04EB'],['\u04EC','\u04ED'],['\u04EE','\u04EF'],['\u04F0','\u04F1'],['\u04F2','\u04F3'],['\u04F4','\u04F5'],['\u04F6','\u04F7'],['\u04F8','\u04F9'],['\u04FA','\u04FB'],['\u04FC','\u04FD'],['\u04FE','\u04FF'],['\u0500','\u0501'],['\u0502','\u0503'],['\u0504','\u0505'],['\u0506','\u0507'],['\u0508','\u0509'],['\u050A','\u050B'],['\u050C','\u050D'],['\u050E','\u050F'],['\u0510','\u0511'],['\u0512','\u0513'],['\u0514','\u0515'],['\u0516','\u0517'],['\u0518','\u0519'],['\u051A','\u051B'],['\u051C','\u051D'],['\u051E','\u051F'],['\u0520','\u0521'],['\u0522','\u0523'],['\u0524','\u0525'],['\u0526','\u0527'],['\u0528','\u0529'],['\u052A','\u052B'],['\u052C','\u052D'],['\u052E','\u052F'],['\u0531','\u0561'],['\u0532','\u0562'],['\u0533','\u0563'],['\u0534','\u0564'],['\u0535','\u0565'],['\u0536','\u0566'],['\u0537','\u0567'],['\u0538','\u0568'],['\u0539','\u0569'],['\u053A','\u056A'],['\u053B','\u056B'],['\u053C','\u056C'],['\u053D','\u056D'],['\u053E','\u056E'],['\u053F','\u056F'],['\u0540','\u0570'],['\u0541','\u0571'],['\u0542','\u0572'],['\u0543','\u0573'],['\u0544','\u0574'],['\u0545','\u0575'],['\u0546','\u0576'],['\u0547','\u0577'],['\u0548','\u0578'],['\u0549','\u0579'],['\u054A','\u057A'],['\u054B','\u057B'],['\u054C','\u057C'],['\u054D','\u057D'],['\u054E','\u057E'],['\u054F','\u057F'],['\u0550','\u0580'],['\u0551','\u0581'],['\u0552','\u0582'],['\u0553','\u0583'],['\u0554','\u0584'],['\u0555','\u0585'],['\u0556','\u0586'],['\u10A0','\u2D00'],['\u10A1','\u2D01'],['\u10A2','\u2D02'],['\u10A3','\u2D03'],['\u10A4','\u2D04'],['\u10A5','\u2D05'],['\u10A6','\u2D06'],['\u10A7','\u2D07'],['\u10A8','\u2D08'],['\u10A9','\u2D09'],['\u10AA','\u2D0A'],['\u10AB','\u2D0B'],['\u10AC','\u2D0C'],['\u10AD','\u2D0D'],['\u10AE','\u2D0E'],['\u10AF','\u2D0F'],['\u10B0','\u2D10'],['\u10B1','\u2D11'],['\u10B2','\u2D12'],['\u10B3','\u2D13'],['\u10B4','\u2D14'],['\u10B5','\u2D15'],['\u10B6','\u2D16'],['\u10B7','\u2D17'],['\u10B8','\u2D18'],['\u10B9','\u2D19'],['\u10BA','\u2D1A'],['\u10BB','\u2D1B'],['\u10BC','\u2D1C'],['\u10BD','\u2D1D'],['\u10BE','\u2D1E'],['\u10BF','\u2D1F'],['\u10C0','\u2D20'],['\u10C1','\u2D21'],['\u10C2','\u2D22'],['\u10C3','\u2D23'],['\u10C4','\u2D24'],['\u10C5','\u2D25'],['\u10C7','\u2D27'],['\u10CD','\u2D2D'],['\u13F8','\u13F0'],['\u13F9','\u13F1'],['\u13FA','\u13F2'],['\u13FB','\u13F3'],['\u13FC','\u13F4'],['\u13FD','\u13F5'],['\u1C80','\u0432'],['\u1C81','\u0434'],['\u1C82','\u043E'],['\u1C83','\u0441'],['\u1C84','\u0442'],['\u1C85','\u0442'],['\u1C86','\u044A'],['\u1C87','\u0463'],['\u1C88','\uA64B'],['\u1C90','\u10D0'],['\u1C91','\u10D1'],['\u1C92','\u10D2'],['\u1C93','\u10D3'],['\u1C94','\u10D4'],['\u1C95','\u10D5'],['\u1C96','\u10D6'],['\u1C97','\u10D7'],['\u1C98','\u10D8'],['\u1C99','\u10D9'],['\u1C9A','\u10DA'],['\u1C9B','\u10DB'],['\u1C9C','\u10DC'],['\u1C9D','\u10DD'],['\u1C9E','\u10DE'],['\u1C9F','\u10DF'],['\u1CA0','\u10E0'],['\u1CA1','\u10E1'],['\u1CA2','\u10E2'],['\u1CA3','\u10E3'],['\u1CA4','\u10E4'],['\u1CA5','\u10E5'],['\u1CA6','\u10E6'],['\u1CA7','\u10E7'],['\u1CA8','\u10E8'],['\u1CA9','\u10E9'],['\u1CAA','\u10EA'],['\u1CAB','\u10EB'],['\u1CAC','\u10EC'],['\u1CAD','\u10ED'],['\u1CAE','\u10EE'],['\u1CAF','\u10EF'],['\u1CB0','\u10F0'],['\u1CB1','\u10F1'],['\u1CB2','\u10F2'],['\u1CB3','\u10F3'],['\u1CB4','\u10F4'],['\u1CB5','\u10F5'],['\u1CB6','\u10F6'],['\u1CB7','\u10F7'],['\u1CB8','\u10F8'],['\u1CB9','\u10F9'],['\u1CBA','\u10FA'],['\u1CBD','\u10FD'],['\u1CBE','\u10FE'],['\u1CBF','\u10FF'],['\u1E00','\u1E01'],['\u1E02','\u1E03'],['\u1E04','\u1E05'],['\u1E06','\u1E07'],['\u1E08','\u1E09'],['\u1E0A','\u1E0B'],['\u1E0C','\u1E0D'],['\u1E0E','\u1E0F'],['\u1E10','\u1E11'],['\u1E12','\u1E13'],['\u1E14','\u1E15'],['\u1E16','\u1E17'],['\u1E18','\u1E19'],['\u1E1A','\u1E1B'],['\u1E1C','\u1E1D'],['\u1E1E','\u1E1F'],['\u1E20','\u1E21'],['\u1E22','\u1E23'],['\u1E24','\u1E25'],['\u1E26','\u1E27'],['\u1E28','\u1E29'],['\u1E2A','\u1E2B'],['\u1E2C','\u1E2D'],['\u1E2E','\u1E2F'],['\u1E30','\u1E31'],['\u1E32','\u1E33'],['\u1E34','\u1E35'],['\u1E36','\u1E37'],['\u1E38','\u1E39'],['\u1E3A','\u1E3B'],['\u1E3C','\u1E3D'],['\u1E3E','\u1E3F'],['\u1E40','\u1E41'],['\u1E42','\u1E43'],['\u1E44','\u1E45'],['\u1E46','\u1E47'],['\u1E48','\u1E49'],['\u1E4A','\u1E4B'],['\u1E4C','\u1E4D'],['\u1E4E','\u1E4F'],['\u1E50','\u1E51'],['\u1E52','\u1E53'],['\u1E54','\u1E55'],['\u1E56','\u1E57'],['\u1E58','\u1E59'],['\u1E5A','\u1E5B'],['\u1E5C','\u1E5D'],['\u1E5E','\u1E5F'],['\u1E60','\u1E61'],['\u1E62','\u1E63'],['\u1E64','\u1E65'],['\u1E66','\u1E67'],['\u1E68','\u1E69'],['\u1E6A','\u1E6B'],['\u1E6C','\u1E6D'],['\u1E6E','\u1E6F'],['\u1E70','\u1E71'],['\u1E72','\u1E73'],['\u1E74','\u1E75'],['\u1E76','\u1E77'],['\u1E78','\u1E79'],['\u1E7A','\u1E7B'],['\u1E7C','\u1E7D'],['\u1E7E','\u1E7F'],['\u1E80','\u1E81'],['\u1E82','\u1E83'],['\u1E84','\u1E85'],['\u1E86','\u1E87'],['\u1E88','\u1E89'],['\u1E8A','\u1E8B'],['\u1E8C','\u1E8D'],['\u1E8E','\u1E8F'],['\u1E90','\u1E91'],['\u1E92','\u1E93'],['\u1E94','\u1E95'],['\u1E9B','\u1E61'],['\u1EA0','\u1EA1'],['\u1EA2','\u1EA3'],['\u1EA4','\u1EA5'],['\u1EA6','\u1EA7'],['\u1EA8','\u1EA9'],['\u1EAA','\u1EAB'],['\u1EAC','\u1EAD'],['\u1EAE','\u1EAF'],['\u1EB0','\u1EB1'],['\u1EB2','\u1EB3'],['\u1EB4','\u1EB5'],['\u1EB6','\u1EB7'],['\u1EB8','\u1EB9'],['\u1EBA','\u1EBB'],['\u1EBC','\u1EBD'],['\u1EBE','\u1EBF'],['\u1EC0','\u1EC1'],['\u1EC2','\u1EC3'],['\u1EC4','\u1EC5'],['\u1EC6','\u1EC7'],['\u1EC8','\u1EC9'],['\u1ECA','\u1ECB'],['\u1ECC','\u1ECD'],['\u1ECE','\u1ECF'],['\u1ED0','\u1ED1'],['\u1ED2','\u1ED3'],['\u1ED4','\u1ED5'],['\u1ED6','\u1ED7'],['\u1ED8','\u1ED9'],['\u1EDA','\u1EDB'],['\u1EDC','\u1EDD'],['\u1EDE','\u1EDF'],['\u1EE0','\u1EE1'],['\u1EE2','\u1EE3'],['\u1EE4','\u1EE5'],['\u1EE6','\u1EE7'],['\u1EE8','\u1EE9'],['\u1EEA','\u1EEB'],['\u1EEC','\u1EED'],['\u1EEE','\u1EEF'],['\u1EF0','\u1EF1'],['\u1EF2','\u1EF3'],['\u1EF4','\u1EF5'],['\u1EF6','\u1EF7'],['\u1EF8','\u1EF9'],['\u1EFA','\u1EFB'],['\u1EFC','\u1EFD'],['\u1EFE','\u1EFF'],['\u1F08','\u1F00'],['\u1F09','\u1F01'],['\u1F0A','\u1F02'],['\u1F0B','\u1F03'],['\u1F0C','\u1F04'],['\u1F0D','\u1F05'],['\u1F0E','\u1F06'],['\u1F0F','\u1F07'],['\u1F18','\u1F10'],['\u1F19','\u1F11'],['\u1F1A','\u1F12'],['\u1F1B','\u1F13'],['\u1F1C','\u1F14'],['\u1F1D','\u1F15'],['\u1F28','\u1F20'],['\u1F29','\u1F21'],['\u1F2A','\u1F22'],['\u1F2B','\u1F23'],['\u1F2C','\u1F24'],['\u1F2D','\u1F25'],['\u1F2E','\u1F26'],['\u1F2F','\u1F27'],['\u1F38','\u1F30'],['\u1F39','\u1F31'],['\u1F3A','\u1F32'],['\u1F3B','\u1F33'],['\u1F3C','\u1F34'],['\u1F3D','\u1F35'],['\u1F3E','\u1F36'],['\u1F3F','\u1F37'],['\u1F48','\u1F40'],['\u1F49','\u1F41'],['\u1F4A','\u1F42'],['\u1F4B','\u1F43'],['\u1F4C','\u1F44'],['\u1F4D','\u1F45'],['\u1F59','\u1F51'],['\u1F5B','\u1F53'],['\u1F5D','\u1F55'],['\u1F5F','\u1F57'],['\u1F68','\u1F60'],['\u1F69','\u1F61'],['\u1F6A','\u1F62'],['\u1F6B','\u1F63'],['\u1F6C','\u1F64'],['\u1F6D','\u1F65'],['\u1F6E','\u1F66'],['\u1F6F','\u1F67'],['\u1FB8','\u1FB0'],['\u1FB9','\u1FB1'],['\u1FBA','\u1F70'],['\u1FBB','\u1F71'],['\u1FBE','\u03B9'],['\u1FC8','\u1F72'],['\u1FC9','\u1F73'],['\u1FCA','\u1F74'],['\u1FCB','\u1F75'],['\u1FD8','\u1FD0'],['\u1FD9','\u1FD1'],['\u1FDA','\u1F76'],['\u1FDB','\u1F77'],['\u1FE8','\u1FE0'],['\u1FE9','\u1FE1'],['\u1FEA','\u1F7A'],['\u1FEB','\u1F7B'],['\u1FEC','\u1FE5'],['\u1FF8','\u1F78'],['\u1FF9','\u1F79'],['\u1FFA','\u1F7C'],['\u1FFB','\u1F7D'],['\u2126','\u03C9'],['\u212A','k'],['\u212B','\xE5'],['\u2132','\u214E'],['\u2160','\u2170'],['\u2161','\u2171'],['\u2162','\u2172'],['\u2163','\u2173'],['\u2164','\u2174'],['\u2165','\u2175'],['\u2166','\u2176'],['\u2167','\u2177'],['\u2168','\u2178'],['\u2169','\u2179'],['\u216A','\u217A'],['\u216B','\u217B'],['\u216C','\u217C'],['\u216D','\u217D'],['\u216E','\u217E'],['\u216F','\u217F'],['\u2183','\u2184'],['\u24B6','\u24D0'],['\u24B7','\u24D1'],['\u24B8','\u24D2'],['\u24B9','\u24D3'],['\u24BA','\u24D4'],['\u24BB','\u24D5'],['\u24BC','\u24D6'],['\u24BD','\u24D7'],['\u24BE','\u24D8'],['\u24BF','\u24D9'],['\u24C0','\u24DA'],['\u24C1','\u24DB'],['\u24C2','\u24DC'],['\u24C3','\u24DD'],['\u24C4','\u24DE'],['\u24C5','\u24DF'],['\u24C6','\u24E0'],['\u24C7','\u24E1'],['\u24C8','\u24E2'],['\u24C9','\u24E3'],['\u24CA','\u24E4'],['\u24CB','\u24E5'],['\u24CC','\u24E6'],['\u24CD','\u24E7'],['\u24CE','\u24E8'],['\u24CF','\u24E9'],['\u2C00','\u2C30'],['\u2C01','\u2C31'],['\u2C02','\u2C32'],['\u2C03','\u2C33'],['\u2C04','\u2C34'],['\u2C05','\u2C35'],['\u2C06','\u2C36'],['\u2C07','\u2C37'],['\u2C08','\u2C38'],['\u2C09','\u2C39'],['\u2C0A','\u2C3A'],['\u2C0B','\u2C3B'],['\u2C0C','\u2C3C'],['\u2C0D','\u2C3D'],['\u2C0E','\u2C3E'],['\u2C0F','\u2C3F'],['\u2C10','\u2C40'],['\u2C11','\u2C41'],['\u2C12','\u2C42'],['\u2C13','\u2C43'],['\u2C14','\u2C44'],['\u2C15','\u2C45'],['\u2C16','\u2C46'],['\u2C17','\u2C47'],['\u2C18','\u2C48'],['\u2C19','\u2C49'],['\u2C1A','\u2C4A'],['\u2C1B','\u2C4B'],['\u2C1C','\u2C4C'],['\u2C1D','\u2C4D'],['\u2C1E','\u2C4E'],['\u2C1F','\u2C4F'],['\u2C20','\u2C50'],['\u2C21','\u2C51'],['\u2C22','\u2C52'],['\u2C23','\u2C53'],['\u2C24','\u2C54'],['\u2C25','\u2C55'],['\u2C26','\u2C56'],['\u2C27','\u2C57'],['\u2C28','\u2C58'],['\u2C29','\u2C59'],['\u2C2A','\u2C5A'],['\u2C2B','\u2C5B'],['\u2C2C','\u2C5C'],['\u2C2D','\u2C5D'],['\u2C2E','\u2C5E'],['\u2C2F','\u2C5F'],['\u2C60','\u2C61'],['\u2C62','\u026B'],['\u2C63','\u1D7D'],['\u2C64','\u027D'],['\u2C67','\u2C68'],['\u2C69','\u2C6A'],['\u2C6B','\u2C6C'],['\u2C6D','\u0251'],['\u2C6E','\u0271'],['\u2C6F','\u0250'],['\u2C70','\u0252'],['\u2C72','\u2C73'],['\u2C75','\u2C76'],['\u2C7E','\u023F'],['\u2C7F','\u0240'],['\u2C80','\u2C81'],['\u2C82','\u2C83'],['\u2C84','\u2C85'],['\u2C86','\u2C87'],['\u2C88','\u2C89'],['\u2C8A','\u2C8B'],['\u2C8C','\u2C8D'],['\u2C8E','\u2C8F'],['\u2C90','\u2C91'],['\u2C92','\u2C93'],['\u2C94','\u2C95'],['\u2C96','\u2C97'],['\u2C98','\u2C99'],['\u2C9A','\u2C9B'],['\u2C9C','\u2C9D'],['\u2C9E','\u2C9F'],['\u2CA0','\u2CA1'],['\u2CA2','\u2CA3'],['\u2CA4','\u2CA5'],['\u2CA6','\u2CA7'],['\u2CA8','\u2CA9'],['\u2CAA','\u2CAB'],['\u2CAC','\u2CAD'],['\u2CAE','\u2CAF'],['\u2CB0','\u2CB1'],['\u2CB2','\u2CB3'],['\u2CB4','\u2CB5'],['\u2CB6','\u2CB7'],['\u2CB8','\u2CB9'],['\u2CBA','\u2CBB'],['\u2CBC','\u2CBD'],['\u2CBE','\u2CBF'],['\u2CC0','\u2CC1'],['\u2CC2','\u2CC3'],['\u2CC4','\u2CC5'],['\u2CC6','\u2CC7'],['\u2CC8','\u2CC9'],['\u2CCA','\u2CCB'],['\u2CCC','\u2CCD'],['\u2CCE','\u2CCF'],['\u2CD0','\u2CD1'],['\u2CD2','\u2CD3'],['\u2CD4','\u2CD5'],['\u2CD6','\u2CD7'],['\u2CD8','\u2CD9'],['\u2CDA','\u2CDB'],['\u2CDC','\u2CDD'],['\u2CDE','\u2CDF'],['\u2CE0','\u2CE1'],['\u2CE2','\u2CE3'],['\u2CEB','\u2CEC'],['\u2CED','\u2CEE'],['\u2CF2','\u2CF3'],['\uA640','\uA641'],['\uA642','\uA643'],['\uA644','\uA645'],['\uA646','\uA647'],['\uA648','\uA649'],['\uA64A','\uA64B'],['\uA64C','\uA64D'],['\uA64E','\uA64F'],['\uA650','\uA651'],['\uA652','\uA653'],['\uA654','\uA655'],['\uA656','\uA657'],['\uA658','\uA659'],['\uA65A','\uA65B'],['\uA65C','\uA65D'],['\uA65E','\uA65F'],['\uA660','\uA661'],['\uA662','\uA663'],['\uA664','\uA665'],['\uA666','\uA667'],['\uA668','\uA669'],['\uA66A','\uA66B'],['\uA66C','\uA66D'],['\uA680','\uA681'],['\uA682','\uA683'],['\uA684','\uA685'],['\uA686','\uA687'],['\uA688','\uA689'],['\uA68A','\uA68B'],['\uA68C','\uA68D'],['\uA68E','\uA68F'],['\uA690','\uA691'],['\uA692','\uA693'],['\uA694','\uA695'],['\uA696','\uA697'],['\uA698','\uA699'],['\uA69A','\uA69B'],['\uA722','\uA723'],['\uA724','\uA725'],['\uA726','\uA727'],['\uA728','\uA729'],['\uA72A','\uA72B'],['\uA72C','\uA72D'],['\uA72E','\uA72F'],['\uA732','\uA733'],['\uA734','\uA735'],['\uA736','\uA737'],['\uA738','\uA739'],['\uA73A','\uA73B'],['\uA73C','\uA73D'],['\uA73E','\uA73F'],['\uA740','\uA741'],['\uA742','\uA743'],['\uA744','\uA745'],['\uA746','\uA747'],['\uA748','\uA749'],['\uA74A','\uA74B'],['\uA74C','\uA74D'],['\uA74E','\uA74F'],['\uA750','\uA751'],['\uA752','\uA753'],['\uA754','\uA755'],['\uA756','\uA757'],['\uA758','\uA759'],['\uA75A','\uA75B'],['\uA75C','\uA75D'],['\uA75E','\uA75F'],['\uA760','\uA761'],['\uA762','\uA763'],['\uA764','\uA765'],['\uA766','\uA767'],['\uA768','\uA769'],['\uA76A','\uA76B'],['\uA76C','\uA76D'],['\uA76E','\uA76F'],['\uA779','\uA77A'],['\uA77B','\uA77C'],['\uA77D','\u1D79'],['\uA77E','\uA77F'],['\uA780','\uA781'],['\uA782','\uA783'],['\uA784','\uA785'],['\uA786','\uA787'],['\uA78B','\uA78C'],['\uA78D','\u0265'],['\uA790','\uA791'],['\uA792','\uA793'],['\uA796','\uA797'],['\uA798','\uA799'],['\uA79A','\uA79B'],['\uA79C','\uA79D'],['\uA79E','\uA79F'],['\uA7A0','\uA7A1'],['\uA7A2','\uA7A3'],['\uA7A4','\uA7A5'],['\uA7A6','\uA7A7'],['\uA7A8','\uA7A9'],['\uA7AA','\u0266'],['\uA7AB','\u025C'],['\uA7AC','\u0261'],['\uA7AD','\u026C'],['\uA7AE','\u026A'],['\uA7B0','\u029E'],['\uA7B1','\u0287'],['\uA7B2','\u029D'],['\uA7B3','\uAB53'],['\uA7B4','\uA7B5'],['\uA7B6','\uA7B7'],['\uA7B8','\uA7B9'],['\uA7BA','\uA7BB'],['\uA7BC','\uA7BD'],['\uA7BE','\uA7BF'],['\uA7C0','\uA7C1'],['\uA7C2','\uA7C3'],['\uA7C4','\uA794'],['\uA7C5','\u0282'],['\uA7C6','\u1D8E'],['\uA7C7','\uA7C8'],['\uA7C9','\uA7CA'],['\uA7D0','\uA7D1'],['\uA7D6','\uA7D7'],['\uA7D8','\uA7D9'],['\uA7F5','\uA7F6'],['\uAB70','\u13A0'],['\uAB71','\u13A1'],['\uAB72','\u13A2'],['\uAB73','\u13A3'],['\uAB74','\u13A4'],['\uAB75','\u13A5'],['\uAB76','\u13A6'],['\uAB77','\u13A7'],['\uAB78','\u13A8'],['\uAB79','\u13A9'],['\uAB7A','\u13AA'],['\uAB7B','\u13AB'],['\uAB7C','\u13AC'],['\uAB7D','\u13AD'],['\uAB7E','\u13AE'],['\uAB7F','\u13AF'],['\uAB80','\u13B0'],['\uAB81','\u13B1'],['\uAB82','\u13B2'],['\uAB83','\u13B3'],['\uAB84','\u13B4'],['\uAB85','\u13B5'],['\uAB86','\u13B6'],['\uAB87','\u13B7'],['\uAB88','\u13B8'],['\uAB89','\u13B9'],['\uAB8A','\u13BA'],['\uAB8B','\u13BB'],['\uAB8C','\u13BC'],['\uAB8D','\u13BD'],['\uAB8E','\u13BE'],['\uAB8F','\u13BF'],['\uAB90','\u13C0'],['\uAB91','\u13C1'],['\uAB92','\u13C2'],['\uAB93','\u13C3'],['\uAB94','\u13C4'],['\uAB95','\u13C5'],['\uAB96','\u13C6'],['\uAB97','\u13C7'],['\uAB98','\u13C8'],['\uAB99','\u13C9'],['\uAB9A','\u13CA'],['\uAB9B','\u13CB'],['\uAB9C','\u13CC'],['\uAB9D','\u13CD'],['\uAB9E','\u13CE'],['\uAB9F','\u13CF'],['\uABA0','\u13D0'],['\uABA1','\u13D1'],['\uABA2','\u13D2'],['\uABA3','\u13D3'],['\uABA4','\u13D4'],['\uABA5','\u13D5'],['\uABA6','\u13D6'],['\uABA7','\u13D7'],['\uABA8','\u13D8'],['\uABA9','\u13D9'],['\uABAA','\u13DA'],['\uABAB','\u13DB'],['\uABAC','\u13DC'],['\uABAD','\u13DD'],['\uABAE','\u13DE'],['\uABAF','\u13DF'],['\uABB0','\u13E0'],['\uABB1','\u13E1'],['\uABB2','\u13E2'],['\uABB3','\u13E3'],['\uABB4','\u13E4'],['\uABB5','\u13E5'],['\uABB6','\u13E6'],['\uABB7','\u13E7'],['\uABB8','\u13E8'],['\uABB9','\u13E9'],['\uABBA','\u13EA'],['\uABBB','\u13EB'],['\uABBC','\u13EC'],['\uABBD','\u13ED'],['\uABBE','\u13EE'],['\uABBF','\u13EF'],['\uFF21','\uFF41'],['\uFF22','\uFF42'],['\uFF23','\uFF43'],['\uFF24','\uFF44'],['\uFF25','\uFF45'],['\uFF26','\uFF46'],['\uFF27','\uFF47'],['\uFF28','\uFF48'],['\uFF29','\uFF49'],['\uFF2A','\uFF4A'],['\uFF2B','\uFF4B'],['\uFF2C','\uFF4C'],['\uFF2D','\uFF4D'],['\uFF2E','\uFF4E'],['\uFF2F','\uFF4F'],['\uFF30','\uFF50'],['\uFF31','\uFF51'],['\uFF32','\uFF52'],['\uFF33','\uFF53'],['\uFF34','\uFF54'],['\uFF35','\uFF55'],['\uFF36','\uFF56'],['\uFF37','\uFF57'],['\uFF38','\uFF58'],['\uFF39','\uFF59'],['\uFF3A','\uFF5A'],['\uD801\uDC00','\uD801\uDC28'],['\uD801\uDC01','\uD801\uDC29'],['\uD801\uDC02','\uD801\uDC2A'],['\uD801\uDC03','\uD801\uDC2B'],['\uD801\uDC04','\uD801\uDC2C'],['\uD801\uDC05','\uD801\uDC2D'],['\uD801\uDC06','\uD801\uDC2E'],['\uD801\uDC07','\uD801\uDC2F'],['\uD801\uDC08','\uD801\uDC30'],['\uD801\uDC09','\uD801\uDC31'],['\uD801\uDC0A','\uD801\uDC32'],['\uD801\uDC0B','\uD801\uDC33'],['\uD801\uDC0C','\uD801\uDC34'],['\uD801\uDC0D','\uD801\uDC35'],['\uD801\uDC0E','\uD801\uDC36'],['\uD801\uDC0F','\uD801\uDC37'],['\uD801\uDC10','\uD801\uDC38'],['\uD801\uDC11','\uD801\uDC39'],['\uD801\uDC12','\uD801\uDC3A'],['\uD801\uDC13','\uD801\uDC3B'],['\uD801\uDC14','\uD801\uDC3C'],['\uD801\uDC15','\uD801\uDC3D'],['\uD801\uDC16','\uD801\uDC3E'],['\uD801\uDC17','\uD801\uDC3F'],['\uD801\uDC18','\uD801\uDC40'],['\uD801\uDC19','\uD801\uDC41'],['\uD801\uDC1A','\uD801\uDC42'],['\uD801\uDC1B','\uD801\uDC43'],['\uD801\uDC1C','\uD801\uDC44'],['\uD801\uDC1D','\uD801\uDC45'],['\uD801\uDC1E','\uD801\uDC46'],['\uD801\uDC1F','\uD801\uDC47'],['\uD801\uDC20','\uD801\uDC48'],['\uD801\uDC21','\uD801\uDC49'],['\uD801\uDC22','\uD801\uDC4A'],['\uD801\uDC23','\uD801\uDC4B'],['\uD801\uDC24','\uD801\uDC4C'],['\uD801\uDC25','\uD801\uDC4D'],['\uD801\uDC26','\uD801\uDC4E'],['\uD801\uDC27','\uD801\uDC4F'],['\uD801\uDCB0','\uD801\uDCD8'],['\uD801\uDCB1','\uD801\uDCD9'],['\uD801\uDCB2','\uD801\uDCDA'],['\uD801\uDCB3','\uD801\uDCDB'],['\uD801\uDCB4','\uD801\uDCDC'],['\uD801\uDCB5','\uD801\uDCDD'],['\uD801\uDCB6','\uD801\uDCDE'],['\uD801\uDCB7','\uD801\uDCDF'],['\uD801\uDCB8','\uD801\uDCE0'],['\uD801\uDCB9','\uD801\uDCE1'],['\uD801\uDCBA','\uD801\uDCE2'],['\uD801\uDCBB','\uD801\uDCE3'],['\uD801\uDCBC','\uD801\uDCE4'],['\uD801\uDCBD','\uD801\uDCE5'],['\uD801\uDCBE','\uD801\uDCE6'],['\uD801\uDCBF','\uD801\uDCE7'],['\uD801\uDCC0','\uD801\uDCE8'],['\uD801\uDCC1','\uD801\uDCE9'],['\uD801\uDCC2','\uD801\uDCEA'],['\uD801\uDCC3','\uD801\uDCEB'],['\uD801\uDCC4','\uD801\uDCEC'],['\uD801\uDCC5','\uD801\uDCED'],['\uD801\uDCC6','\uD801\uDCEE'],['\uD801\uDCC7','\uD801\uDCEF'],['\uD801\uDCC8','\uD801\uDCF0'],['\uD801\uDCC9','\uD801\uDCF1'],['\uD801\uDCCA','\uD801\uDCF2'],['\uD801\uDCCB','\uD801\uDCF3'],['\uD801\uDCCC','\uD801\uDCF4'],['\uD801\uDCCD','\uD801\uDCF5'],['\uD801\uDCCE','\uD801\uDCF6'],['\uD801\uDCCF','\uD801\uDCF7'],['\uD801\uDCD0','\uD801\uDCF8'],['\uD801\uDCD1','\uD801\uDCF9'],['\uD801\uDCD2','\uD801\uDCFA'],['\uD801\uDCD3','\uD801\uDCFB'],['\uD801\uDD70','\uD801\uDD97'],['\uD801\uDD71','\uD801\uDD98'],['\uD801\uDD72','\uD801\uDD99'],['\uD801\uDD73','\uD801\uDD9A'],['\uD801\uDD74','\uD801\uDD9B'],['\uD801\uDD75','\uD801\uDD9C'],['\uD801\uDD76','\uD801\uDD9D'],['\uD801\uDD77','\uD801\uDD9E'],['\uD801\uDD78','\uD801\uDD9F'],['\uD801\uDD79','\uD801\uDDA0'],['\uD801\uDD7A','\uD801\uDDA1'],['\uD801\uDD7C','\uD801\uDDA3'],['\uD801\uDD7D','\uD801\uDDA4'],['\uD801\uDD7E','\uD801\uDDA5'],['\uD801\uDD7F','\uD801\uDDA6'],['\uD801\uDD80','\uD801\uDDA7'],['\uD801\uDD81','\uD801\uDDA8'],['\uD801\uDD82','\uD801\uDDA9'],['\uD801\uDD83','\uD801\uDDAA'],['\uD801\uDD84','\uD801\uDDAB'],['\uD801\uDD85','\uD801\uDDAC'],['\uD801\uDD86','\uD801\uDDAD'],['\uD801\uDD87','\uD801\uDDAE'],['\uD801\uDD88','\uD801\uDDAF'],['\uD801\uDD89','\uD801\uDDB0'],['\uD801\uDD8A','\uD801\uDDB1'],['\uD801\uDD8C','\uD801\uDDB3'],['\uD801\uDD8D','\uD801\uDDB4'],['\uD801\uDD8E','\uD801\uDDB5'],['\uD801\uDD8F','\uD801\uDDB6'],['\uD801\uDD90','\uD801\uDDB7'],['\uD801\uDD91','\uD801\uDDB8'],['\uD801\uDD92','\uD801\uDDB9'],['\uD801\uDD94','\uD801\uDDBB'],['\uD801\uDD95','\uD801\uDDBC'],['\uD803\uDC80','\uD803\uDCC0'],['\uD803\uDC81','\uD803\uDCC1'],['\uD803\uDC82','\uD803\uDCC2'],['\uD803\uDC83','\uD803\uDCC3'],['\uD803\uDC84','\uD803\uDCC4'],['\uD803\uDC85','\uD803\uDCC5'],['\uD803\uDC86','\uD803\uDCC6'],['\uD803\uDC87','\uD803\uDCC7'],['\uD803\uDC88','\uD803\uDCC8'],['\uD803\uDC89','\uD803\uDCC9'],['\uD803\uDC8A','\uD803\uDCCA'],['\uD803\uDC8B','\uD803\uDCCB'],['\uD803\uDC8C','\uD803\uDCCC'],['\uD803\uDC8D','\uD803\uDCCD'],['\uD803\uDC8E','\uD803\uDCCE'],['\uD803\uDC8F','\uD803\uDCCF'],['\uD803\uDC90','\uD803\uDCD0'],['\uD803\uDC91','\uD803\uDCD1'],['\uD803\uDC92','\uD803\uDCD2'],['\uD803\uDC93','\uD803\uDCD3'],['\uD803\uDC94','\uD803\uDCD4'],['\uD803\uDC95','\uD803\uDCD5'],['\uD803\uDC96','\uD803\uDCD6'],['\uD803\uDC97','\uD803\uDCD7'],['\uD803\uDC98','\uD803\uDCD8'],['\uD803\uDC99','\uD803\uDCD9'],['\uD803\uDC9A','\uD803\uDCDA'],['\uD803\uDC9B','\uD803\uDCDB'],['\uD803\uDC9C','\uD803\uDCDC'],['\uD803\uDC9D','\uD803\uDCDD'],['\uD803\uDC9E','\uD803\uDCDE'],['\uD803\uDC9F','\uD803\uDCDF'],['\uD803\uDCA0','\uD803\uDCE0'],['\uD803\uDCA1','\uD803\uDCE1'],['\uD803\uDCA2','\uD803\uDCE2'],['\uD803\uDCA3','\uD803\uDCE3'],['\uD803\uDCA4','\uD803\uDCE4'],['\uD803\uDCA5','\uD803\uDCE5'],['\uD803\uDCA6','\uD803\uDCE6'],['\uD803\uDCA7','\uD803\uDCE7'],['\uD803\uDCA8','\uD803\uDCE8'],['\uD803\uDCA9','\uD803\uDCE9'],['\uD803\uDCAA','\uD803\uDCEA'],['\uD803\uDCAB','\uD803\uDCEB'],['\uD803\uDCAC','\uD803\uDCEC'],['\uD803\uDCAD','\uD803\uDCED'],['\uD803\uDCAE','\uD803\uDCEE'],['\uD803\uDCAF','\uD803\uDCEF'],['\uD803\uDCB0','\uD803\uDCF0'],['\uD803\uDCB1','\uD803\uDCF1'],['\uD803\uDCB2','\uD803\uDCF2'],['\uD806\uDCA0','\uD806\uDCC0'],['\uD806\uDCA1','\uD806\uDCC1'],['\uD806\uDCA2','\uD806\uDCC2'],['\uD806\uDCA3','\uD806\uDCC3'],['\uD806\uDCA4','\uD806\uDCC4'],['\uD806\uDCA5','\uD806\uDCC5'],['\uD806\uDCA6','\uD806\uDCC6'],['\uD806\uDCA7','\uD806\uDCC7'],['\uD806\uDCA8','\uD806\uDCC8'],['\uD806\uDCA9','\uD806\uDCC9'],['\uD806\uDCAA','\uD806\uDCCA'],['\uD806\uDCAB','\uD806\uDCCB'],['\uD806\uDCAC','\uD806\uDCCC'],['\uD806\uDCAD','\uD806\uDCCD'],['\uD806\uDCAE','\uD806\uDCCE'],['\uD806\uDCAF','\uD806\uDCCF'],['\uD806\uDCB0','\uD806\uDCD0'],['\uD806\uDCB1','\uD806\uDCD1'],['\uD806\uDCB2','\uD806\uDCD2'],['\uD806\uDCB3','\uD806\uDCD3'],['\uD806\uDCB4','\uD806\uDCD4'],['\uD806\uDCB5','\uD806\uDCD5'],['\uD806\uDCB6','\uD806\uDCD6'],['\uD806\uDCB7','\uD806\uDCD7'],['\uD806\uDCB8','\uD806\uDCD8'],['\uD806\uDCB9','\uD806\uDCD9'],['\uD806\uDCBA','\uD806\uDCDA'],['\uD806\uDCBB','\uD806\uDCDB'],['\uD806\uDCBC','\uD806\uDCDC'],['\uD806\uDCBD','\uD806\uDCDD'],['\uD806\uDCBE','\uD806\uDCDE'],['\uD806\uDCBF','\uD806\uDCDF'],['\uD81B\uDE40','\uD81B\uDE60'],['\uD81B\uDE41','\uD81B\uDE61'],['\uD81B\uDE42','\uD81B\uDE62'],['\uD81B\uDE43','\uD81B\uDE63'],['\uD81B\uDE44','\uD81B\uDE64'],['\uD81B\uDE45','\uD81B\uDE65'],['\uD81B\uDE46','\uD81B\uDE66'],['\uD81B\uDE47','\uD81B\uDE67'],['\uD81B\uDE48','\uD81B\uDE68'],['\uD81B\uDE49','\uD81B\uDE69'],['\uD81B\uDE4A','\uD81B\uDE6A'],['\uD81B\uDE4B','\uD81B\uDE6B'],['\uD81B\uDE4C','\uD81B\uDE6C'],['\uD81B\uDE4D','\uD81B\uDE6D'],['\uD81B\uDE4E','\uD81B\uDE6E'],['\uD81B\uDE4F','\uD81B\uDE6F'],['\uD81B\uDE50','\uD81B\uDE70'],['\uD81B\uDE51','\uD81B\uDE71'],['\uD81B\uDE52','\uD81B\uDE72'],['\uD81B\uDE53','\uD81B\uDE73'],['\uD81B\uDE54','\uD81B\uDE74'],['\uD81B\uDE55','\uD81B\uDE75'],['\uD81B\uDE56','\uD81B\uDE76'],['\uD81B\uDE57','\uD81B\uDE77'],['\uD81B\uDE58','\uD81B\uDE78'],['\uD81B\uDE59','\uD81B\uDE79'],['\uD81B\uDE5A','\uD81B\uDE7A'],['\uD81B\uDE5B','\uD81B\uDE7B'],['\uD81B\uDE5C','\uD81B\uDE7C'],['\uD81B\uDE5D','\uD81B\uDE7D'],['\uD81B\uDE5E','\uD81B\uDE7E'],['\uD81B\uDE5F','\uD81B\uDE7F'],['\uD83A\uDD00','\uD83A\uDD22'],['\uD83A\uDD01','\uD83A\uDD23'],['\uD83A\uDD02','\uD83A\uDD24'],['\uD83A\uDD03','\uD83A\uDD25'],['\uD83A\uDD04','\uD83A\uDD26'],['\uD83A\uDD05','\uD83A\uDD27'],['\uD83A\uDD06','\uD83A\uDD28'],['\uD83A\uDD07','\uD83A\uDD29'],['\uD83A\uDD08','\uD83A\uDD2A'],['\uD83A\uDD09','\uD83A\uDD2B'],['\uD83A\uDD0A','\uD83A\uDD2C'],['\uD83A\uDD0B','\uD83A\uDD2D'],['\uD83A\uDD0C','\uD83A\uDD2E'],['\uD83A\uDD0D','\uD83A\uDD2F'],['\uD83A\uDD0E','\uD83A\uDD30'],['\uD83A\uDD0F','\uD83A\uDD31'],['\uD83A\uDD10','\uD83A\uDD32'],['\uD83A\uDD11','\uD83A\uDD33'],['\uD83A\uDD12','\uD83A\uDD34'],['\uD83A\uDD13','\uD83A\uDD35'],['\uD83A\uDD14','\uD83A\uDD36'],['\uD83A\uDD15','\uD83A\uDD37'],['\uD83A\uDD16','\uD83A\uDD38'],['\uD83A\uDD17','\uD83A\uDD39'],['\uD83A\uDD18','\uD83A\uDD3A'],['\uD83A\uDD19','\uD83A\uDD3B'],['\uD83A\uDD1A','\uD83A\uDD3C'],['\uD83A\uDD1B','\uD83A\uDD3D'],['\uD83A\uDD1C','\uD83A\uDD3E'],['\uD83A\uDD1D','\uD83A\uDD3F'],['\uD83A\uDD1E','\uD83A\uDD40'],['\uD83A\uDD1F','\uD83A\uDD41'],['\uD83A\uDD20','\uD83A\uDD42'],['\uD83A\uDD21','\uD83A\uDD43']]);

  var unicodeCaseFoldingCommon = /*@__PURE__*/getDefaultExportFromCjs(symbols$1);

  var symbols=new Map([['\u1E9E','\xDF'],['\u1F88','\u1F80'],['\u1F89','\u1F81'],['\u1F8A','\u1F82'],['\u1F8B','\u1F83'],['\u1F8C','\u1F84'],['\u1F8D','\u1F85'],['\u1F8E','\u1F86'],['\u1F8F','\u1F87'],['\u1F98','\u1F90'],['\u1F99','\u1F91'],['\u1F9A','\u1F92'],['\u1F9B','\u1F93'],['\u1F9C','\u1F94'],['\u1F9D','\u1F95'],['\u1F9E','\u1F96'],['\u1F9F','\u1F97'],['\u1FA8','\u1FA0'],['\u1FA9','\u1FA1'],['\u1FAA','\u1FA2'],['\u1FAB','\u1FA3'],['\u1FAC','\u1FA4'],['\u1FAD','\u1FA5'],['\u1FAE','\u1FA6'],['\u1FAF','\u1FA7'],['\u1FBC','\u1FB3'],['\u1FCC','\u1FC3'],['\u1FFC','\u1FF3']]);

  var unicodeCaseFoldingSimple = /*@__PURE__*/getDefaultExportFromCjs(symbols);

  /** https://tc39.es/ecma262/#sec-pattern */
  class State {
    endIndex;
    captures;
    constructor(endIndex, captures) {
      this.endIndex = endIndex;
      this.captures = captures;
    }
  }
  function isContinuation(v) {
    return typeof v === 'function' && v.length === 1;
  }
  class CharSet {
    union(other) {
      const concrete = new Set();
      const fns = new Set();
      const add = cs => {
        if (cs.fns) {
          cs.fns.forEach(fn => {
            fns.add(fn);
          });
          cs.concrete.forEach(c => {
            concrete.add(c);
          });
        } else if (cs.fn) {
          fns.add(cs.fn);
        } else {
          cs.concrete.forEach(c => {
            concrete.add(c);
          });
        }
      };
      add(this);
      add(other);
      return new UnionCharSet(concrete, fns);
    }
  }
  class UnionCharSet extends CharSet {
    concrete;
    fns;
    constructor(concrete, fns) {
      super();
      this.concrete = concrete;
      this.fns = fns;
    }
    has(c) {
      if (this.concrete.has(c)) {
        return true;
      }
      for (const fn of this.fns) {
        if (fn(c)) {
          return true;
        }
      }
      return false;
    }
  }
  class ConcreteCharSet extends CharSet {
    concrete;
    constructor(items) {
      super();
      this.concrete = items instanceof Set ? items : new Set(items);
    }
    has(c) {
      return this.concrete.has(c);
    }
    get size() {
      return this.concrete.size;
    }
    first() {
      Assert(this.concrete.size >= 1, "this.concrete.size >= 1");
      return this.concrete.values().next().value;
    }
  }
  class VirtualCharSet extends CharSet {
    fn;
    constructor(fn) {
      super();
      this.fn = fn;
    }
    has(c) {
      return this.fn(c);
    }
  }
  class Range {
    startIndex;
    endIndex;
    constructor(startIndex, endIndex) {
      Assert(startIndex <= endIndex, "startIndex <= endIndex");
      this.startIndex = startIndex;
      this.endIndex = endIndex;
    }
  }

  /** https://tc39.es/ecma262/#sec-pattern */
  //   Pattern :: Disjunction
  function Evaluate_Pattern(Pattern, flags) {
    // The descriptions below use the following variables:
    //   * Input is a List consisting of all of the characters, in order, of the String being matched
    //     by the regular expression pattern. Each character is either a code unit or a code point,
    //     depending upon the kind of pattern involved. The notation Input[n] means the nth character
    //     of Input, where n can range between 0 (inclusive) and InputLength (exclusive).
    //   * InputLength is the number of characters in Input.
    //   * NcapturingParens is the total number of left-capturing parentheses (i.e. the total number of
    //     Atom :: `(` GroupSpecifier Disjunction `)` Parse Nodes) in the pattern. A left-capturing parenthesis
    //     is any `(` pattern character that is matched by the `(` terminal of the Atom :: `(` GroupSpecifier Disjunction `)`
    //     production.
    //   * DotAll is true if the RegExp object's [[OriginalFlags]] internal slot contains "s" and otherwise is false.
    //   * IgnoreCase is true if the RegExp object's [[OriginalFlags]] internal slot contains "i" and otherwise is false.
    //   * Multiline is true if the RegExp object's [[OriginalFlags]] internal slot contains "m" and otherwise is false.
    //   * Unicode is true if the RegExp object's [[OriginalFlags]] internal slot contains "u" and otherwise is false.
    let Input;
    let InputLength;
    const NcapturingParens = Pattern.capturingGroups.length;
    const DotAll = flags.includes('s');
    const IgnoreCase = flags.includes('i');
    const Multiline = flags.includes('m');
    const Unicode = flags.includes('u');
    {
      // 1. Evaluate Disjunction with +1 as its direction argument to obtain a Matcher m.
      const m = Evaluate(Pattern.Disjunction, +1);
      // 2. Return a new abstract closure with parameters (str, index) that captures m and performs the following steps when called:
      return (str, index) => {
        // a. Assert: Type(str) is String.
        Assert(str instanceof JSStringValue, "str instanceof JSStringValue");
        // b. Assert: index is a non-negative integer which is ≤ the length of str.
        Assert(isNonNegativeInteger(index) && index <= str.stringValue().length, "isNonNegativeInteger(index) && index <= str.stringValue().length");
        // c. If Unicode is true, let Input be a List consisting of the sequence of code points of ! StringToCodePoints(str).
        //    Otherwise, let Input be a List consisting of the sequence of code units that are the elements of str.
        //    Input will be used throughout the algorithms in 21.2.2. Each element of Input is considered to be a character.
        if (Unicode) {
          let _temp = StringToCodePoints(str.stringValue());
          Assert(!(_temp instanceof AbruptCompletion), "StringToCodePoints(str.stringValue())" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp instanceof Completion) {
            _temp = _temp.Value;
          }
          Input = _temp;
        } else {
          Input = str.stringValue().split('').map(c => c.charCodeAt(0));
        }
        // d. Let InputLength be the number of characters contained in Input. This variable will be used throughout the algorithms in 21.2.2.
        InputLength = Input.length;
        // e. Let listIndex be the index into Input of the character that was obtained from element index of str.
        const listIndex = index;
        // f. Let c be a new Continuation with parameters (y) that captures nothing and performs the following steps when called:
        const c = y => {
          // i. Assert: y is a State.
          Assert(y instanceof State, "y instanceof State");
          // ii. Return y.
          return y;
        };
        // g. Let cap be a List of NcapturingParens undefined values, indexed 1 through NcapturingParens.
        const cap = Array.from({
          length: NcapturingParens + 1
        }, () => Value.undefined);
        // h. Let x be the State (listIndex, cap).
        const x = new State(listIndex, cap);
        // i. Call m(x, c) and return its result.
        return m(x, c);
      };
    }
    function Evaluate(node, ...args) {
      switch (node.type) {
        case 'Disjunction':
          return Evaluate_Disjunction(node, ...args);
        case 'Alternative':
          return Evaluate_Alternative(node, ...args);
        case 'Term':
          return Evaluate_Term(node, ...args);
        case 'Assertion':
          return Evaluate_Assertion(node, ...args);
        case 'Quantifier':
          return Evaluate_Quantifier(node, ...args);
        case 'Atom':
          return Evaluate_Atom(node, ...args);
        case 'AtomEscape':
          return Evaluate_AtomEscape(node, ...args);
        case 'CharacterEscape':
          return Evaluate_CharacterEscape(node, ...args);
        case 'DecimalEscape':
          return Evaluate_DecimalEscape(node, ...args);
        case 'CharacterClassEscape':
          return Evaluate_CharacterClassEscape(node, ...args);
        case 'UnicodePropertyValueExpression':
          return Evaluate_UnicodePropertyValueExpression(node, ...args);
        case 'CharacterClass':
          return Evaluate_CharacterClass(node, ...args);
        case 'ClassAtom':
          return Evaluate_ClassAtom(node, ...args);
        case 'ClassEscape':
          return Evaluate_ClassEscape(node, ...args);
        /*c8 ignore next*/default:
          throw new OutOfRange$1('Evaluate', node);
      }
    }

    /** https://tc39.es/ecma262/#sec-disjunction */
    //   Disjunction ::
    //     Alternative
    //     Alternative `|` Disjunction
    function Evaluate_Disjunction({
      Alternative,
      Disjunction
    }, direction) {
      if (!Disjunction) {
        // 1. Evaluate Alternative with argument direction to obtain a Matcher m.
        const m = Evaluate(Alternative, direction);
        // 2. Return m.
        return m;
      }
      // 1. Evaluate Alternative with argument direction to obtain a Matcher m1.
      const m1 = Evaluate(Alternative, direction);
      // 2. Evaluate Disjunction with argument direction to obtain a Matcher m2.
      const m2 = Evaluate(Disjunction, direction);
      // 3. Return a new Matcher with parameters (x, c) that captures m1 and m2 and performs the following steps when called:
      return (x, c) => {
        // a. Assert: x is a State.
        Assert(x instanceof State, "x instanceof State");
        // b. Assert: c is a Continuation.
        Assert(isContinuation(c), "isContinuation(c)");
        // c. Call m1(x, c) and let r be its result.
        const r = m1(x, c);
        // d. If r is not failure, return r.
        if (r !== 'failure') {
          return r;
        }
        // e. Call m2(x, c) and return its result.
        return m2(x, c);
      };
    }
    function Evaluate_Alternative({
      Alternative,
      Term
    }, direction) {
      if (!Alternative && !Term) {
        // 1. Return a new Matcher with parameters (x, c) that captures nothing and performs the following steps when called:
        return (x, c) => {
          // 1. Assert: x is a State.
          Assert(x instanceof State, "x instanceof State");
          // 2. Assert: c is a Continuation.
          Assert(isContinuation(c), "isContinuation(c)");
          // 3. Call c(x) and return its result.
          return c(x);
        };
      }
      // 1. Evaluate Alternative with argument direction to obtain a Matcher m1.
      const m1 = Evaluate(Alternative, direction);
      // 2. Evaluate Term with argument direction to obtain a Matcher m2.
      const m2 = Evaluate(Term, direction);
      // 3. If direction is equal to +1, then
      if (direction === +1) {
        // a. Return a new Matcher with parameters (x, c) that captures m1 and m2 and performs the following steps when called:
        return (x, c) => {
          // i. Assert: x is a State.
          Assert(x instanceof State, "x instanceof State");
          // ii. Assert: c is a Continuation.
          Assert(isContinuation(c), "isContinuation(c)");
          // iii. Let d be a new Continuation with parameters (y) that captures c and m2 and performs the following steps when called:
          const d = y => {
            // 1. Assert: y is a State.
            Assert(y instanceof State, "y instanceof State");
            // 2. Call m2(y, c) and return its result.
            return m2(y, c);
          };
          // iv. Call m1(x, d) and return its result.
          return m1(x, d);
        };
      } else {
        // 4. Else,
        // a. Assert: direction is equal to -1.
        Assert(direction === -1, "direction === -1");
        // b. Return a new Matcher with parameters (x, c) that captures m1 and m2 and performs the following steps when called:
        return (x, c) => {
          // i. Assert: x is a State.
          Assert(x instanceof State, "x instanceof State");
          // ii. Assert: c is a Continuation.
          Assert(isContinuation(c), "isContinuation(c)");
          // iii. Let d be a new Continuation with parameters (y) that captures c and m1 and performs the following steps when called:
          const d = y => {
            // 1. Assert: y is a State.
            Assert(y instanceof State, "y instanceof State");
            // 2. Call m1(y, c) and return its result.
            return m1(y, c);
          };
          // iv. Call m2(x, d) and return its result.
          return m2(x, d);
        };
      }
    }
    function Evaluate_Term(Term, direction) {
      const {
        Atom,
        Quantifier
      } = Term;
      if (!Quantifier) {
        // 1. Return the Matcher that is the result of evaluating Atom with argument direction.
        return Evaluate(Atom, direction);
      }
      // 1. Evaluate Atom with argument direction to obtain a Matcher m.
      const m = Evaluate(Atom, direction);
      // 2. Evaluate Quantifier to obtain the three results: an integer min, an integer (or ∞) max, and Boolean greedy.
      const [min, max, greedy] = Evaluate(Quantifier);
      // 3. Assert: If max is finite, then max is not less than min.
      Assert(!Number.isFinite(max) || max >= min, "!Number.isFinite(max) || (max >= min)");
      // 4. Let parenIndex be the number of left-capturing parentheses in the entire regular expression that occur to the
      //    left of this Term. This is the total number of Atom :: `(` GroupSpecifier Disjunction `)` Parse Nodes prior to
      //    or enclosing this Term.
      const parenIndex = Term.capturingParenthesesBefore;
      // 5. Let parenCount be the number of left-capturing parentheses in Atom. This is the total number of
      //    Atom :: `(` GroupSpecifier Disjunction `)` Parse Nodes enclosed by Atom.
      const parenCount = Atom.enclosedCapturingParentheses;
      // 6. Return a new Matcher with parameters (x, c) that captures m, min, max, greedy, parenIndex, and parenCount and performs the following steps when called:
      return (x, c) => {
        // a. Assert: x is a State.
        Assert(x instanceof State, "x instanceof State");
        // b. Assert: c is a Continuation.
        Assert(isContinuation(c), "isContinuation(c)");
        // c. Call RepeatMatcher(m, min, max, greedy, x, c, parenIndex, parenCount) and return its result.
        return RepeatMatcher(m, min, max, greedy, x, c, parenIndex, parenCount);
      };
    }
    function RepeatMatcher(m, min, max, greedy, x, c, parenIndex, parenCount) {
      // 1. If max is zero, return c(x).
      if (max === 0) {
        return c(x);
      }
      // 2. Let d be a new Continuation with parameters (y) that captures m, min, max, greedy, x, c, parenIndex, and parenCount and performs the following steps when called:
      const d = y => {
        // a. Assert: y is a State.
        Assert(y instanceof State, "y instanceof State");
        // b. If min is zero and y's endIndex is equal to x's endIndex, return failure.
        if (min === 0 && y.endIndex === x.endIndex) {
          return 'failure';
        }
        // c. If min is zero, let min2 be zero; otherwise let min2 be min - 1.
        let min2;
        if (min === 0) {
          min2 = 0;
        } else {
          min2 = min - 1;
        }
        // d. If max is ∞, let max2 be ∞; otherwise let max2 be max - 1.
        let max2;
        if (max === Infinity) {
          max2 = Infinity;
        } else {
          max2 = max - 1;
        }
        // e. Call RepeatMatcher(m, min2, max2, greedy, y, c, parenIndex, parenCount) and return its result.
        return RepeatMatcher(m, min2, max2, greedy, y, c, parenIndex, parenCount);
      };
      // 3. Let cap be a copy of x's captures List.
      const cap = [...x.captures];
      // 4. For each integer k that satisfies parenIndex < k and k ≤ parenIndex + parenCount, set cap[k] to undefined.
      for (let k = parenIndex + 1; k <= parenIndex + parenCount; k += 1) {
        cap[k] = Value.undefined;
      }
      // 5. Let e be x's endIndex.
      const e = x.endIndex;
      // 6. Let xr be the State (e, cap).
      const xr = new State(e, cap);
      // 7. If min is not zero, return m(xr, d).
      if (min !== 0) {
        return m(xr, d);
      }
      // 8. If greedy is false, then
      if (greedy === false) {
        // a. Call c(x) and let z be its result.
        const z = c(x);
        // b. If z is not failure, return z.
        if (z !== 'failure') {
          return z;
        }
        // c. Call m(xr, d) and return its result.
        return m(xr, d);
      }
      // 9. Call m(xr, d) and let z be its result.
      const z = m(xr, d);
      // 10. If z is not failure, return z.
      if (z !== 'failure') {
        return z;
      }
      // 11. Call c(x) and return its result.
      return c(x);
    }
    function Evaluate_Assertion({
      subtype,
      Disjunction
    }) {
      switch (subtype) {
        case '^':
          // 1. Return a new Matcher with parameters (x, c) that captures nothing and performs the following steps when called:
          return (x, c) => {
            // a. Assert: x is a State.
            Assert(x instanceof State, "x instanceof State");
            // b. Assert: c is a Continuation.
            Assert(isContinuation(c), "isContinuation(c)");
            // c. Let e be x's endIndex.
            const e = x.endIndex;
            // d. If e is zero, or if Multiline is true and the character Input[e - 1] is one of LineTerminator, then
            if (e === 0 || Multiline && isLineTerminator(String.fromCodePoint(Input[e - 1]))) {
              // i. Call c(x) and return its result.
              return c(x);
            }
            // e. Return failure.
            return 'failure';
          };
        case '$':
          // 1. Return a new Matcher with parameters (x, c) that captures nothing and performs the following steps when called:
          return (x, c) => {
            // a. Assert: x is a State.
            Assert(x instanceof State, "x instanceof State");
            // b. Assert: c is a Continuation.
            Assert(isContinuation(c), "isContinuation(c)");
            // c. Let e be x's endIndex.
            const e = x.endIndex;
            // d. If e is equal to InputLength, or if Multiline is true and the character Input[e] is one of LineTerminator, then
            if (e === InputLength || Multiline && isLineTerminator(String.fromCodePoint(Input[e]))) {
              // i. Call c(x) and return its result.
              return c(x);
            }
            // e. Return failure.
            return 'failure';
          };
        case 'b':
          // 1. Return a new Matcher with parameters (x, c) that captures nothing and performs the following steps when called:
          return (x, c) => {
            // a. Assert: x is a State.
            Assert(x instanceof State, "x instanceof State");
            // b. Assert: c is a Continuation.
            Assert(isContinuation(c), "isContinuation(c)");
            // c. Let e be x's endIndex.
            const e = x.endIndex;
            // d. Call IsWordChar(e - 1) and let a be the Boolean result.
            const a = IsWordChar(e - 1);
            // e. Call IsWordChar(e) and let b be the Boolean result.
            const b = IsWordChar(e);
            // f. If a is true and b is false, or if a is false and b is true, then
            if (a && !b || !a && b) {
              // i. Call c(x) and return its result.
              return c(x);
            }
            // g. Return failure.
            return 'failure';
          };
        case 'B':
          // 1. Return a new Matcher with parameters (x, c) that captures nothing and performs the following steps when called:
          return (x, c) => {
            // a. Assert: x is a State.
            Assert(x instanceof State, "x instanceof State");
            // b. Assert: c is a Continuation.
            Assert(isContinuation(c), "isContinuation(c)");
            // c. Let e be x's endIndex.
            const e = x.endIndex;
            // d. Call IsWordChar(e - 1) and let a be the Boolean result.
            const a = IsWordChar(e - 1);
            // e. Call IsWordChar(e) and let b be the Boolean result.
            const b = IsWordChar(e);
            // f. If a is true and b is true, or if a is false and b is false, then
            if (a && b || !a && !b) {
              // i. Call c(x) and return its result.
              return c(x);
            }
            // g. Return failure.
            return 'failure';
          };
        case '?=':
          {
            // 1. Evaluate Disjunction with +1 as its direction argument to obtain a Matcher m.
            const m = Evaluate(Disjunction, +1);
            // 2. Return a new Matcher with parameters (x, c) that captures m and performs the following steps when called:
            return (x, c) => {
              // a. Assert: x is a State.
              Assert(x instanceof State, "x instanceof State");
              // b. Assert: c is a Continuation.
              Assert(isContinuation(c), "isContinuation(c)");
              // c. Let d be a new Continuation with parameters (y) that captures nothing and performs the following steps when called:
              const d = y => {
                // i. Assert: y is a State.
                Assert(y instanceof State, "y instanceof State");
                // ii. Return y.
                return y;
              };
              // d. Call m(x, d) and let r be its result.
              const r = m(x, d);
              // e. If r is failure, return failure.
              if (r === 'failure') {
                return 'failure';
              }
              // f. Let y be r's State.
              const y = r;
              // g. Let cap be y's captures List.
              const cap = y.captures;
              // h. Let xe be x's endIndex.
              const xe = x.endIndex;
              // i. Let z be the State (xe, cap).
              const z = new State(xe, cap);
              // j. Call c(z) and return its result.
              return c(z);
            };
          }
        case '?!':
          {
            // 1. Evaluate Disjunction with +1 as its direction argument to obtain a Matcher m.
            const m = Evaluate(Disjunction, +1);
            // 2. Return a new Matcher with parameters (x, c) that captures m and performs the following steps when called:
            return (x, c) => {
              // a. Assert: x is a State.
              Assert(x instanceof State, "x instanceof State");
              // b. Assert: c is a Continuation.
              Assert(isContinuation(c), "isContinuation(c)");
              // c. Let d be a new Continuation with parameters (y) that captures nothing and performs the following steps when called:
              const d = y => {
                // i. Assert: y is a State.
                Assert(y instanceof State, "y instanceof State");
                // ii. Return y.
                return y;
              };
              // d. Call m(x, d) and let r be its result.
              const r = m(x, d);
              // e. If r is not failure, return failure.
              if (r !== 'failure') {
                return 'failure';
              }
              // f. Call c(x) and return its result.
              return c(x);
            };
          }
        case '?<=':
          {
            // 1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.
            const m = Evaluate(Disjunction, -1);
            // 2. Return a new Matcher with parameters (x, c) that captures m and performs the following steps when called:
            return (x, c) => {
              // a. Assert: x is a State.
              Assert(x instanceof State, "x instanceof State");
              // b. Assert: c is a Continuation.
              Assert(isContinuation(c), "isContinuation(c)");
              // c. Let d be a new Continuation with parameters (y) that captures nothing and performs the following steps when called:
              const d = y => {
                // i. Assert: y is a State.
                Assert(y instanceof State, "y instanceof State");
                // ii. Return y.
                return y;
              };
              // d. Call m(x, d) and let r be its result.
              const r = m(x, d);
              // e. If r is failure, return failure.
              if (r === 'failure') {
                return 'failure';
              }
              // f. Let y be r's State.
              const y = r;
              // g. Let cap be y's captures List.
              const cap = y.captures;
              // h. Let xe be x's endIndex.
              const xe = x.endIndex;
              // i. Let z be the State (xe, cap).
              const z = new State(xe, cap);
              // j. Call c(z) and return its result.
              return c(z);
            };
          }
        case '?<!':
          {
            // 1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.
            const m = Evaluate(Disjunction, -1);
            // 2. Return a new Matcher with parameters (x, c) that captures m and performs the following steps when called:
            return (x, c) => {
              // a. Assert: x is a State.
              Assert(x instanceof State, "x instanceof State");
              // b. Assert: c is a Continuation.
              Assert(isContinuation(c), "isContinuation(c)");
              // c. Let d be a new Continuation with parameters (y) that captures nothing and performs the following steps when called:
              const d = y => {
                // i. Assert: y is a State.
                Assert(y instanceof State, "y instanceof State");
                // ii. Return y.
                return y;
              };
              // d. Call m(x, d) and let r be its result.
              const r = m(x, d);
              // e. If r is not failure, return failure.
              if (r !== 'failure') {
                return 'failure';
              }
              // f. Call c(x) and return its result.
              return c(x);
            };
          }
        /*c8 ignore next*/default:
          throw new OutOfRange$1('Evaluate_Assertion', subtype);
      }
    }
    function WordCharacters() {
      // 1. Let A be a set of characters containing the sixty-three characters:
      //   a b c d e f g h i j k l m n o p q r s t u v w x y z
      //   A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
      //   0 1 2 3 4 5 6 7 8 9 _
      // 2. Let U be an empty set.
      // 3. For each character c not in set A where Canonicalize(c) is in A, add c to U.
      // 4. Assert: Unless Unicode and IgnoreCase are both true, U is empty.
      // 5. Add the characters in set U to set A.
      // Return A.
      const A = new ConcreteCharSet(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '_'].map(c => c.codePointAt(0)));
      if (Unicode && IgnoreCase) {
        return new VirtualCharSet(c => {
          if (A.has(c)) {
            return true;
          }
          if (A.has(Canonicalize(c))) {
            return true;
          }
          return false;
        });
      }
      return A;
    }
    function IsWordChar(e) {
      // 1. If e is -1 or e is InputLength, return false.
      if (e === -1 || e === InputLength) {
        return false;
      }
      // 2. Let c be the character Input[e].
      const c = Input[e];
      // 3. Let wordChars be the result of ! WordCharacters().
      let _temp2 = WordCharacters();
      Assert(!(_temp2 instanceof AbruptCompletion), "WordCharacters()" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      const wordChars = _temp2;
      // 4. If c is in wordChars, return true.
      if (wordChars.has(c)) {
        return true;
      }
      // 5. Return false.
      return false;
    }
    function Evaluate_Quantifier({
      QuantifierPrefix,
      greedy
    }) {
      switch (QuantifierPrefix) {
        case '*':
          return [0, Infinity, greedy];
        case '+':
          return [1, Infinity, greedy];
        case '?':
          return [0, 1, greedy];
      }
      const {
        DecimalDigits_a,
        DecimalDigits_b
      } = QuantifierPrefix;
      return [DecimalDigits_a, DecimalDigits_b || DecimalDigits_a, greedy];
    }
    function Evaluate_Atom(Atom, direction) {
      switch (true) {
        case !!Atom.PatternCharacter:
          {
            // 1. Let ch be the character matched by PatternCharacter.
            const ch = Atom.PatternCharacter.codePointAt(0);
            // 2. Let A be a one-element CharSet containing the character ch.
            const A = new ConcreteCharSet([Canonicalize(ch)]);
            // 3. Call CharacterSetMatcher(A, false, direction) and return its Matcher result.
            return CharacterSetMatcher(A, false, direction);
          }
        case Atom.subtype === '.':
          {
            let A;
            // 1. If DotAll is true, then
            if (DotAll) {
              // a. Let A be the set of all characters.
              A = new VirtualCharSet(_c => true);
            } else {
              // 2. Otherwise, let A be the set of all characters except LineTerminator.
              A = new VirtualCharSet(c => !isLineTerminator(String.fromCodePoint(c)));
            }
            // 3. Call CharacterSetMatcher(A, false, direction) and return its Matcher result.
            return CharacterSetMatcher(A, false, direction);
          }
        case !!Atom.CharacterClass:
          {
            // 1. Evaluate CharacterClass to obtain a CharSet A and a Boolean invert.
            const {
              A,
              invert
            } = Evaluate(Atom.CharacterClass);
            // 2. Call CharacterSetMatcher(A, invert, direction) and return its Matcher result.
            return CharacterSetMatcher(A, invert, direction);
          }
        case Atom.capturing:
          {
            // 1. Evaluate Disjunction with argument direction to obtain a Matcher m.
            const m = Evaluate(Atom.Disjunction, direction);
            // 2. Let parenIndex be the number of left-capturing parentheses in the entire regular expression
            //    that occur to the left of this Atom. This is the total number of Atom :: `(` GroupSpecifier Disjunction `)`
            //    Parse Nodes prior to or enclosing this Atom.
            const parenIndex = Atom.capturingParenthesesBefore;
            // 3. Return a new Matcher with parameters (x, c) that captures direction, m, and parenIndex and performs the following steps when called:
            return (x, c) => {
              // a. Assert: x is a State.
              Assert(x instanceof State, "x instanceof State");
              // b. Assert: c is a Continuation.
              Assert(isContinuation(c), "isContinuation(c)");
              // c. Let d be a new Continuation with parameters (y) that captures x, c, direction, and parenIndex and performs the following steps when called:
              const d = y => {
                // i. Assert: y is a State.
                Assert(y instanceof State, "y instanceof State");
                // ii. Let cap be a copy of y's captures List.
                const cap = [...y.captures];
                // iii. Let xe be x's endIndex.
                const xe = x.endIndex;
                // iv. Let ye be y's endIndex.
                const ye = y.endIndex;
                let s;
                // v. If direction is equal to +1, then
                if (direction === +1) {
                  // 1. Assert: xe ≤ ye.
                  Assert(xe <= ye, "xe <= ye");
                  // 2. Let r be the Range (xe, ye).
                  s = new Range(xe, ye);
                } else {
                  // vi. Else,
                  // 1. Assert: direction is equal to -1.
                  Assert(direction === -1, "direction === -1");
                  // 2. Assert: ye ≤ xe.
                  Assert(ye <= xe, "ye <= xe");
                  // 3. Let r be the Range (ye, xe).
                  s = new Range(ye, xe);
                }
                // vii. Set cap[parenIndex + 1] to s.
                cap[parenIndex + 1] = s;
                // viii. Let z be the State (ye, cap).
                const z = new State(ye, cap);
                // ix. Call c(z) and return its result.
                return c(z);
              };
              // d. Call m(x, d) and return its result.
              return m(x, d);
            };
          }
        case !!Atom.Disjunction:
          return Evaluate(Atom.Disjunction, direction);
        /*c8 ignore next*/default:
          throw new OutOfRange$1('Evaluate_Atom', Atom);
      }
    }
    function CharacterSetMatcher(A, invert, direction) {
      // 1. Return a new Matcher with parameters (x, c) that captures A, invert, and direction and performs the following steps when called:
      return (x, c) => {
        // a. Assert: x is a State.
        Assert(x instanceof State, "x instanceof State");
        // b. Assert: c is a Continuation.
        Assert(isContinuation(c), "isContinuation(c)");
        // c. Let e be x's endIndex.
        const e = x.endIndex;
        // d. Let f be e + direction.
        const f = e + direction;
        // e. If f < 0 or f > InputLength, return failure.
        if (f < 0 || f > InputLength) {
          return 'failure';
        }
        // f. Let index be min(e, f).
        const index = Math.min(e, f);
        // g. Let ch be the character Input[index].
        const ch = Input[index];
        // h. Let cc be Canonicalize(ch).
        const cc = Canonicalize(ch);
        // i. If invert is false, then
        if (invert === false) {
          // i. If there does not exist a member a of set A such that Canonicalize(a) is cc, return failure.
          if (!A.has(cc)) {
            return 'failure';
          }
        } else {
          // j. Else
          // i. Assert: invert is true.
          Assert(invert === true, "invert === true");
          // ii. If there exists a member a of set A such that Canonicalize(a) is cc, return failure.
          if (A.has(cc)) {
            return 'failure';
          }
        }
        // k. Let cap be x's captures List.
        const cap = x.captures;
        // Let y be the State (f, cap).
        const y = new State(f, cap);
        // Call c(y) and return its result.
        return c(y);
      };
    }
    function Canonicalize(ch) {
      // 1. If IgnoreCase is false, return ch.
      if (IgnoreCase === false) {
        return ch;
      }
      // 2. If Unicode is true, then
      if (Unicode === true) {
        const s = String.fromCodePoint(ch);
        // a. If the file CaseFolding.txt of the Unicode Character Database provides a simple or common case folding mapping for ch, return the result of applying that mapping to ch.
        if (unicodeCaseFoldingSimple.has(s)) {
          return unicodeCaseFoldingSimple.get(s).codePointAt(0);
        }
        if (unicodeCaseFoldingCommon.has(s)) {
          return unicodeCaseFoldingCommon.get(s).codePointAt(0);
        }
        // b. Return ch.
        return ch;
      } else {
        // 3. Else
        // a. Assert: ch is a UTF-16 code unit.
        // b. Let s be the String value consisting of the single code unit ch.
        const s = String.fromCodePoint(ch);
        // c. Let u be the same result produced as if by performing the algorithm for String.prototype.toUpperCase using s as the this value.
        const u = s.toUpperCase();
        // d. Assert: Type(u) is String.
        Assert(typeof u === 'string', "typeof u === 'string'");
        // e. If u does not consist of a single code unit, return ch.
        if (u.length !== 1) {
          return ch;
        }
        // f. Let cu be u's single code unit element.
        const cu = u.codePointAt(0);
        // g. If the numeric value of ch ≥ 128 and the numeric value of cu < 128, return ch.
        if (ch >= 128 && cu < 128) {
          return ch;
        }
        // h. Return cu.
        return cu;
      }
    }
    function Evaluate_AtomEscape(AtomEscape, direction) {
      switch (true) {
        case !!AtomEscape.DecimalEscape:
          {
            // 1. Evaluate DecimalEscape to obtain an integer n.
            const n = Evaluate(AtomEscape.DecimalEscape);
            // 2. Assert: n ≤ NcapturingParens.
            Assert(n <= NcapturingParens, "n <= NcapturingParens");
            // 3. Call BackreferenceMatcher(n, direction) and return its Matcher result.
            return BackreferenceMatcher(n, direction);
          }
        case !!AtomEscape.CharacterEscape:
          {
            // 1. Evaluate CharacterEscape to obtain a character ch.
            const ch = Evaluate(AtomEscape.CharacterEscape);
            // 2. Let A be a one-element CharSet containing the character ch.
            const A = new ConcreteCharSet([Canonicalize(ch)]);
            // 3. Call CharacterSetMatcher(A, false, direction) and return its Matcher result.
            return CharacterSetMatcher(A, false, direction);
          }
        case !!AtomEscape.CharacterClassEscape:
          {
            // 1. Evaluate CharacterClassEscape to obtain a CharSet A.
            const A = Evaluate(AtomEscape.CharacterClassEscape);
            // 2. Call CharacterSetMatcher(A, false, direction) and return its Matcher result.
            return CharacterSetMatcher(A, false, direction);
          }
        case !!AtomEscape.GroupName:
          {
            // 1. Search the enclosing Pattern for an instance of a GroupSpecifier for a RegExpIdentifierName which has a StringValue equal to the StringValue of the RegExpIdentifierName contained in GroupName.
            // 2. Assert: A unique such GroupSpecifier is found.
            // 3. Let parenIndex be the number of left-capturing parentheses in the entire regular expression that occur to the left of the located GroupSpecifier. This is the total number of Atom :: `(` GroupSpecifier Disjunction `)` Parse Nodes prior to or enclosing the located GroupSpecifier.
            const parenIndex = Pattern.groupSpecifiers.get(AtomEscape.GroupName);
            Assert(parenIndex !== undefined, "parenIndex !== undefined");
            // 4. Call BackreferenceMatcher(parenIndex, direction) and return its Matcher result.
            return BackreferenceMatcher(parenIndex + 1, direction);
          }
        /*c8 ignore next*/default:
          throw new OutOfRange$1('Evaluate_AtomEscape', AtomEscape);
      }
    }
    function BackreferenceMatcher(n, direction) {
      // 1. Return a new Matcher with parameters (x, c) that captures n and direction and performs the following steps when called:
      return (x, c) => {
        // a. Assert: x is a State.
        Assert(x instanceof State, "x instanceof State");
        // b. Assert: c is a Continuation.
        Assert(isContinuation(c), "isContinuation(c)");
        // c. Let cap be x's captures List.
        const cap = x.captures;
        // d. Let s be cap[n].
        const s = cap[n];
        // e. If s is undefined, return c(x).
        if (s === Value.undefined) {
          return c(x);
        }
        // f. Let e be x's endIndex.
        const e = x.endIndex;
        // g. Let rs be r's startIndex.
        const rs = s.startIndex;
        // h. Let re be r's endIndex.
        const re = s.endIndex;
        // i. Let len be the number of elements in re - rs.
        const len = re - rs;
        // h. Let f be e + direction × len.
        const f = e + direction * len;
        // i. If f < 0 or f > InputLength, return failure.
        if (f < 0 || f > InputLength) {
          return 'failure';
        }
        // j. Let g be min(e, f).
        const g = Math.min(e, f);
        // k. If there exists an integer i between 0 (inclusive) and len (exclusive) such that Canonicalize(s[i]) is not the same character value as Canonicalize(Input[g + i]), return failure.
        for (let i = 0; i < len; i += 1) {
          if (Canonicalize(Input[s.startIndex + i]) !== Canonicalize(Input[g + i])) {
            return 'failure';
          }
        }
        // l. Let y be the State (f, cap).
        const y = new State(f, cap);
        // m. Call c(y) and return its result.
        return c(y);
      };
    }
    function Evaluate_CharacterEscape(CharacterEscape) {
      // 1. Let cv be the CharacterValue of this CharacterEscape.
      const cv = CharacterValue(CharacterEscape);
      // 2. Return the character whose character value is cv.
      return cv;
    }
    function Evaluate_DecimalEscape(DecimalEscape) {
      return DecimalEscape.value;
    }
    function Evaluate_CharacterClassEscape(node) {
      switch (node.value) {
        case 'd':
          // 1. Return the ten-element set of characters containing the characters 0 through 9 inclusive.
          return new ConcreteCharSet(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].map(c => c.codePointAt(0)));
        case 'D':
          // 1. Return the set of all characters not included in the set returned by CharacterClassEscape :: `d`.
          return new VirtualCharSet(c => !isDecimalDigit$1(String.fromCodePoint(c)));
        case 's':
          // 1. Return the set of characters containing the characters that are on the right-hand side of the WhiteSpace or LineTerminator productions.
          return new VirtualCharSet(c => {
            const s = String.fromCodePoint(c);
            return isWhitespace(s) || isLineTerminator(s);
          });
        case 'S':
          // 1. Return the set of all characters not included in the set returned by CharacterClassEscape :: `s`.
          return new VirtualCharSet(c => {
            const s = String.fromCodePoint(c);
            return !isWhitespace(s) && !isLineTerminator(s);
          });
        case 'w':
          // 1. Return the set of all characters returned by WordCharacters().
          return WordCharacters();
        case 'W':
          {
            // 1. Return the set of all characters not included in the set returned by CharacterClassEscape :: `w`.
            const s = WordCharacters();
            return new VirtualCharSet(c => !s.has(c));
          }
        case 'p':
          // 1. Return the CharSet containing all Unicode code points included in the CharSet returned by UnicodePropertyValueExpression.
          return Evaluate(node.UnicodePropertyValueExpression);
        case 'P':
          {
            // 1. Return the CharSet containing all Unicode code points not included in the CharSet returned by UnicodePropertyValueExpression.
            const s = Evaluate(node.UnicodePropertyValueExpression);
            return new VirtualCharSet(c => !s.has(c));
          }
        /*c8 ignore next*/default:
          throw new OutOfRange$1('Evaluate_CharacterClassEscape', node);
      }
    }
    function Evaluate_UnicodePropertyValueExpression(UnicodePropertyValueExpression) {
      if (UnicodePropertyValueExpression.LoneUnicodePropertyNameOrValue) {
        // 1. Let s be SourceText of LoneUnicodePropertyNameOrValue.
        const s = UnicodePropertyValueExpression.LoneUnicodePropertyNameOrValue;
        // 2. If ! UnicodeMatchPropertyValue(General_Category, s) is identical to a List of Unicode code points that is the name of a Unicode general category or general category alias listed in the “Property value and aliases” column of Table 57, then
        let _temp3 = (UnicodeMatchPropertyValue('General_Category', s) in UnicodeGeneralCategoryValues);
        Assert(!(_temp3 instanceof AbruptCompletion), "UnicodeMatchPropertyValue('General_Category', s) in UnicodeGeneralCategoryValues" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
        if (_temp3) {
          // a. Return the CharSet containing all Unicode code points whose character database definition includes the property “General_Category” with value s.
          return new ConcreteCharSet(getUnicodePropertyValueSet('General_Category', UnicodeGeneralCategoryValues[s]));
        }
        // 3. Let p be ! UnicodeMatchProperty(s).
        let _temp4 = UnicodeMatchProperty(s);
        Assert(!(_temp4 instanceof AbruptCompletion), "UnicodeMatchProperty(s)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp4 instanceof Completion) {
          _temp4 = _temp4.Value;
        }
        const p = _temp4;
        // 4. Assert: p is a binary Unicode property or binary property alias listed in the “Property name and aliases” column of Table 56.
        Assert(p in BinaryUnicodeProperties, "p in BinaryUnicodeProperties");
        // 5. Return the CharSet containing all Unicode code points whose character database definition includes the property p with value “True”.
        return new ConcreteCharSet(getUnicodePropertyValueSet(p));
      }
      // 1. Let ps be SourceText of UnicodePropertyName.
      const ps = UnicodePropertyValueExpression.UnicodePropertyName;
      // 2. Let p be ! UnicodeMatchProperty(ps).
      let _temp5 = UnicodeMatchProperty(ps);
      Assert(!(_temp5 instanceof AbruptCompletion), "UnicodeMatchProperty(ps)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      const p = _temp5;
      // 3. Assert: p is a Unicode property name or property alias listed in the “Property name and aliases” column of Table 55.
      Assert(p in NonbinaryUnicodeProperties, "p in NonbinaryUnicodeProperties");
      // 4. Let vs be SourceText of UnicodePropertyValue.
      const vs = UnicodePropertyValueExpression.UnicodePropertyValue;
      // 5. Let v be ! UnicodeMatchPropertyValue(p, vs).
      let _temp6 = UnicodeMatchPropertyValue(p, vs);
      Assert(!(_temp6 instanceof AbruptCompletion), "UnicodeMatchPropertyValue(p, vs)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
      const v = _temp6;
      // 6. Return the CharSet containing all Unicode code points whose character database definition includes the property p with value v.
      return new ConcreteCharSet(getUnicodePropertyValueSet(p, v));
    }

    /** https://tc39.es/ecma262/#sec-characterclass */
    //  CharacterClass ::
    //    `[` ClassRanges `]`
    //    `[` `^` ClassRanges `]`
    function Evaluate_CharacterClass({
      invert,
      ClassRanges
    }) {
      let A = new ConcreteCharSet([]);
      for (const range of ClassRanges) {
        if (Array.isArray(range)) {
          const B = Evaluate(range[0]);
          const C = Evaluate(range[1]);
          const D = CharacterRange(B, C);
          A = A.union(D);
        } else {
          A = A.union(Evaluate(range));
        }
      }
      return {
        A,
        invert
      };
    }
    function CharacterRange(A, B) {
      // 1. Assert: A and B each contain exactly one character.
      Assert(A.size === 1 && B.size === 1, "A.size === 1 && B.size === 1");
      // 2. Let a be the one character in CharSet A.
      const a = A.first();
      // 3. Let b be the one character in CharSet B.
      const b = B.first();
      // 4. Let i be the character value of character a.
      const i = a;
      // 5. Let j be the character value of character b.
      const j = b;
      // 6. Assert: i ≤ j.
      Assert(i <= j, "i <= j");
      // 7. Return the set containing all characters numbered i through j, inclusive.
      const set = new Set();
      for (let k = i; k <= j; k += 1) {
        set.add(Canonicalize(k));
      }
      return new ConcreteCharSet(set);
    }
    function Evaluate_ClassAtom(ClassAtom) {
      switch (true) {
        case !!ClassAtom.SourceCharacter:
          // 1. Return the CharSet containing the character matched by SourceCharacter.
          return new ConcreteCharSet([Canonicalize(ClassAtom.SourceCharacter.codePointAt(0))]);
        case ClassAtom.value === '-':
          // 1. Return the CharSet containing the single character - U+002D (HYPHEN-MINUS).
          return new ConcreteCharSet([0x002D]);
        /*c8 ignore next*/default:
          throw new OutOfRange$1('Evaluate_ClassAtom', ClassAtom);
      }
    }
    function Evaluate_ClassEscape(ClassEscape) {
      switch (true) {
        case ClassEscape.value === 'b':
        case ClassEscape.value === '-':
        case !!ClassEscape.CharacterEscape:
          {
            // 1. Let cv be the CharacterValue of this ClassEscape.
            const cv = CharacterValue(ClassEscape);
            // 2. Let c be the character whose character value is cv.
            const c = cv;
            // 3. Return the CharSet containing the single character c.
            return new ConcreteCharSet([Canonicalize(c)]);
          }
        /*c8 ignore next*/default:
          throw new OutOfRange$1('Evaluate_ClassEscape', ClassEscape);
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-stringpad */
  function StringPad(O, maxLength, fillString, placement) {
    Assert(placement === 'start' || placement === 'end', "placement === 'start' || placement === 'end'");
    let _temp = ToString(O);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const S = _temp;
    let _temp2 = ToLength(maxLength);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const intMaxLength = R(_temp2);
    const stringLength = S.stringValue().length;
    if (intMaxLength <= stringLength) {
      return S;
    }
    let filler;
    if (fillString === Value.undefined) {
      filler = ' ';
    } else {
      let _temp3 = ToString(fillString);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      filler = _temp3.stringValue();
    }
    if (filler === '') {
      return S;
    }
    const fillLen = intMaxLength - stringLength;
    const stringFiller = filler.repeat(Math.ceil(fillLen / filler.length));
    const truncatedStringFiller = stringFiller.slice(0, fillLen);
    if (placement === 'start') {
      return Value(truncatedStringFiller + S.stringValue());
    } else {
      return Value(S.stringValue() + truncatedStringFiller);
    }
  }

  /** https://tc39.es/ecma262/#sec-trimstring */
  function TrimString(string, where) {
    let _temp = RequireObjectCoercible(string);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const str = _temp;
    let _temp2 = ToString(str);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const S = _temp2.stringValue();
    let T;
    if (where === 'start') {
      T = S.trimStart();
    } else if (where === 'end') {
      T = S.trimEnd();
    } else {
      Assert(where === 'start+end', "where === 'start+end'");
      T = S.trim();
    }
    return Value(T);
  }

  /** https://tc39.es/ecma262/#sec-meta-properties-runtime-semantics-evaluation */
  // NewTarget : `new` `.` `target`
  function Evaluate_NewTarget() {
    // 1. Return GetNewTarget().
    return GetNewTarget();
  }

  /** https://tc39.es/ecma262/#sec-async-function-definitions-runtime-semantics-evaluation */
  //   AwaitExpression : `await` UnaryExpression
  function* Evaluate_AwaitExpression({
    UnaryExpression
  }) {
    // 1. Let exprRef be the result of evaluating UnaryExpression.
    const exprRef = yield* Evaluate(UnaryExpression);
    // 2. Let value be ? GetValue(exprRef).
    let _temp = GetValue(exprRef);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const value = _temp;
    // 3. Return ? Await(value).
    return yield* Await(value);
  }

  /** https://tc39.es/ecma262/#sec-runtime-semantics-bindingclassdeclarationevaluation */
  //   ClassDeclaration :
  //     `class` BindingIdentifier ClassTail
  //     `class` ClassTail
  function* BindingClassDeclarationEvaluation(ClassDeclaration) {
    const {
      BindingIdentifier,
      ClassTail
    } = ClassDeclaration;
    if (!BindingIdentifier) {
      let _temp = yield* ClassDefinitionEvaluation(ClassTail, Value.undefined, Value('default'));
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      // 1. Let value be ? ClassDefinitionEvaluation of ClassTail with arguments undefined and "default".
      const value = _temp;
      // 2. Set value.[[SourceText]] to the source text matched by ClassDeclaration.
      value.SourceText = sourceTextMatchedBy(ClassDeclaration);
      // 3. Return value.
      return value;
    }
    // 1. Let className be StringValue of BindingIdentifier.
    const className = StringValue(BindingIdentifier);
    // 2. Let value be ? ClassDefinitionEvaluation of ClassTail with arguments className and className.
    let _temp2 = yield* ClassDefinitionEvaluation(ClassTail, className, className);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const value = _temp2;
    // 3. Set value.[[SourceText]] to the source text matched by ClassDeclaration.
    value.SourceText = sourceTextMatchedBy(ClassDeclaration);
    // 4. Let env be the running execution context's LexicalEnvironment.
    const env = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 5. Perform ? InitializeBoundName(className, value, env).
    let _temp3 = InitializeBoundName(className, value, env);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    // 6. Return value.
    return value;
  }

  /** https://tc39.es/ecma262/#sec-class-definitions-runtime-semantics-evaluation */
  //   ClassDeclaration : `class` BindingIdentifier ClassTAil
  function* Evaluate_ClassDeclaration(ClassDeclaration) {
    let _temp4 = yield* BindingClassDeclarationEvaluation(ClassDeclaration);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 2. Return NormalCompletion(empty).
    return NormalCompletion(undefined);
  }

  /** https://tc39.es/ecma262/#sec-with-statement-runtime-semantics-evaluation */
  //   WithStatement : `with` `(` Expression `)` Statement
  function* Evaluate_WithStatement({
    Expression,
    Statement
  }) {
    // 1. Let val be the result of evaluating Expression.
    const val = yield* Evaluate(Expression);
    // 2. Let obj be ? ToObject(? GetValue(val)).
    let _temp2 = GetValue(val);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    let _temp = ToObject(_temp2);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const obj = _temp;
    // 3. Let oldEnv be the running execution context's LexicalEnvironment.
    const oldEnv = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 4. Let newEnv be NewObjectEnvironment(obj, true, oldEnv).
    const newEnv = new ObjectEnvironmentRecord(obj, Value.true, oldEnv);
    // 5. Set the running execution context's LexicalEnvironment to newEnv.
    exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = newEnv;
    // 6. Let C be the result of evaluating Statement.
    const C = EnsureCompletion(yield* Evaluate(Statement));
    // 7. Set the running execution context's LexicalEnvironment to oldEnv.
    exports.surroundingAgent.runningExecutionContext.LexicalEnvironment = oldEnv;
    // 8. Return Completion(UpdateEmpty(C, undefined)).
    return Completion(UpdateEmpty(C, Value.undefined));
  }

  /** https://tc39.es/ecma262/#sec-module-semantics-runtime-semantics-evaluation */
  // Module :
  //   [empty]
  //   ModuleBody
  function* Evaluate_Module({
    ModuleBody
  }) {
    if (!ModuleBody) {
      return NormalCompletion(Value.undefined);
    }
    return yield* Evaluate(ModuleBody);
  }

  /** https://tc39.es/ecma262/#sec-module-semantics-runtime-semantics-evaluation */
  // ModuleBody : ModuleItemList
  function Evaluate_ModuleBody({
    ModuleItemList
  }) {
    // TODO(ts): ModuleItemList might contain ImportDeclaration or ExportDeclaration which is not accepted by Evaluate_StatementList.
    // @ts-expect-error
    return Evaluate_StatementList(ModuleItemList);
  }

  /** https://tc39.es/ecma262/#sec-module-semantics-runtime-semantics-evaluation */
  // ModuleItem : ImportDeclaration
  function Evaluate_ImportDeclaration(_ImportDeclaration) {
    // 1. Return NormalCompletion(empty).
    return NormalCompletion(undefined);
  }

  /** https://tc39.es/ecma262/#sec-exports-runtime-semantics-evaluation */
  //   ExportDeclaration :
  //     `export` ExportFromClause FromClause `;`
  //     `export` NamedExports `;`
  //     `export` VariableDeclaration
  //     `export` Declaration
  //     `export` `default` HoistableDeclaration
  //     `export` `default` ClassDeclaration
  //     `export` `default` AssignmentExpression `;`
  function* Evaluate_ExportDeclaration(ExportDeclaration) {
    const {
      FromClause,
      NamedExports,
      VariableStatement,
      Declaration,
      default: isDefault,
      HoistableDeclaration,
      ClassDeclaration,
      AssignmentExpression
    } = ExportDeclaration;
    if (FromClause || NamedExports) {
      // 1. Return NormalCompletion(empty).
      return NormalCompletion(undefined);
    }
    if (VariableStatement) {
      // 1. Return the result of evaluating VariableStatement.
      return yield* Evaluate(VariableStatement);
    }
    if (Declaration) {
      // 1. Return the result of evaluating Declaration.
      return yield* Evaluate(ExportDeclaration.Declaration);
    }
    if (!isDefault) {
      throw new OutOfRange$1('Evaluate_ExportDeclaration', ExportDeclaration);
    }
    if (HoistableDeclaration) {
      // 1. Return the result of evaluating HoistableDeclaration.
      return yield* Evaluate(HoistableDeclaration);
    }
    if (ClassDeclaration) {
      let _temp = yield* BindingClassDeclarationEvaluation(ClassDeclaration);
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      // 1. Let value be ? BindingClassDeclarationEvaluation of ClassDeclaration.
      const value = _temp;
      // 2. Let className be the sole element of BoundNames of ClassDeclaration.
      const className = BoundNames(ClassDeclaration)[0];
      // If className is "*default*", then
      if (className.stringValue() === '*default*') {
        // a. Let env be the running execution context's LexicalEnvironment.
        const env = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
        // b. Perform ? InitializeBoundName("*default*", value, env).
        let _temp2 = InitializeBoundName(Value('*default*'), value, env);
        /* c8 ignore if */
        if (_temp2 instanceof AbruptCompletion) {
          return _temp2;
        }
        /* c8 ignore if */
        if (_temp2 instanceof Completion) {
          _temp2 = _temp2.Value;
        }
      }
      // 3. Return NormalCompletion(empty).
      return NormalCompletion(undefined);
    }
    if (AssignmentExpression) {
      let value;
      // 1. If IsAnonymousFunctionDefinition(AssignmentExpression) is true, then
      if (IsAnonymousFunctionDefinition(AssignmentExpression)) {
        // a. Let value be NamedEvaluation of AssignmentExpression with argument "default".
        value = yield* NamedEvaluation(AssignmentExpression, Value('default'));
      } else {
        // 2. Else,
        // a. Let rhs be the result of evaluating AssignmentExpression.
        const rhs = yield* Evaluate(AssignmentExpression);
        // a. Let value be ? GetValue(rhs).
        let _temp3 = GetValue(rhs);
        /* c8 ignore if */
        if (_temp3 instanceof AbruptCompletion) {
          return _temp3;
        }
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
        value = _temp3;
      }
      // 3. Let env be the running execution context's LexicalEnvironment.
      const env = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
      // 4. Perform ? InitializeBoundName("*default*", value, env).
      let _temp4 = InitializeBoundName(Value('*default*'), value, env);
      /* c8 ignore if */
      if (_temp4 instanceof AbruptCompletion) {
        return _temp4;
      }
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      // 5. Return NormalCompletion(empty).
      return NormalCompletion(undefined);
    }
    throw new OutOfRange$1('Evaluate_ExportDeclaration', ExportDeclaration);
  }

  /** https://tc39.es/ecma262/#sec-optional-chaining-evaluation */
  //   OptionalExpression :
  //     MemberExpression OptionalChain
  //     CallExpression OptionalChain
  //     OptionalExpression OptionalChain
  function* Evaluate_OptionalExpression({
    MemberExpression,
    OptionalChain
  }) {
    // 1. Let baseReference be the result of evaluating MemberExpression.
    const baseReference = yield* Evaluate(MemberExpression);
    // 2. Let baseValue be ? GetValue(baseReference).
    let _temp = GetValue(baseReference);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const baseValue = _temp;
    // 3. If baseValue is undefined or null, then
    if (baseValue === Value.undefined || baseValue === Value.null) {
      // a. Return undefined.
      return Value.undefined;
    }
    // 4. Return the result of performing ChainEvaluation of OptionalChain with arguments baseValue and baseReference.
    return yield* ChainEvaluation(OptionalChain, baseValue, baseReference);
  }

  /** https://tc39.es/ecma262/#sec-optional-chaining-chain-evaluation */
  //   OptionalChain :
  //     `?.` Arguments
  //     `?.` `[` Expression `]`
  //     `?.` IdentifierName
  //     `?.` PrivateIdentifier
  //     OptionalChain Arguments
  //     OptionalChain `[` Expression `]`
  //     OptionalChain `.` IdentifierName
  //     OptionalChain `.` PrivateIdentifier
  function* ChainEvaluation(node, baseValue, baseReference) {
    const {
      OptionalChain,
      Arguments,
      Expression,
      IdentifierName,
      PrivateIdentifier
    } = node;
    if (Arguments) {
      if (OptionalChain) {
        // 1. Let optionalChain be OptionalChain.
        const optionalChain = OptionalChain;
        // 2. Let newReference be ? ChainEvaluation of optionalChain with arguments baseValue and baseReference.
        let _temp2 = yield* ChainEvaluation(optionalChain, baseValue, baseReference);
        /* c8 ignore if */
        if (_temp2 instanceof AbruptCompletion) {
          return _temp2;
        }
        /* c8 ignore if */
        if (_temp2 instanceof Completion) {
          _temp2 = _temp2.Value;
        }
        const newReference = _temp2;
        // 3. Let newValue be ? GetValue(newReference).
        let _temp3 = GetValue(newReference);
        /* c8 ignore if */
        if (_temp3 instanceof AbruptCompletion) {
          return _temp3;
        }
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
        const newValue = _temp3;
        // 5. Let tailCall be IsInTailPosition(thisChain).
        const tailCall = IsInTailPosition();
        // 6. Return ? EvaluateCall(newValue, newReference, Arguments, tailCall).
        return yield* EvaluateCall(newValue, newReference, Arguments, tailCall);
      }
      // 2. Let tailCall be IsInTailPosition(thisChain).
      const tailCall = IsInTailPosition();
      // 3. Return ? EvaluateCall(baseValue, baseReference, Arguments, tailCall).
      return yield* EvaluateCall(baseValue, baseReference, Arguments, tailCall);
    }
    if (Expression) {
      if (OptionalChain) {
        // 1. Let optionalChain be OptionalChain.
        const optionalChain = OptionalChain;
        // 2. Let newReference be ? ChainEvaluation of optionalChain with arguments baseValue and baseReference.
        let _temp4 = yield* ChainEvaluation(optionalChain, baseValue, baseReference);
        /* c8 ignore if */
        if (_temp4 instanceof AbruptCompletion) {
          return _temp4;
        }
        /* c8 ignore if */
        if (_temp4 instanceof Completion) {
          _temp4 = _temp4.Value;
        }
        const newReference = _temp4;
        // 3. Let newValue be ? GetValue(newReference).
        let _temp5 = GetValue(newReference);
        /* c8 ignore if */
        if (_temp5 instanceof AbruptCompletion) {
          return _temp5;
        }
        /* c8 ignore if */
        if (_temp5 instanceof Completion) {
          _temp5 = _temp5.Value;
        }
        const newValue = _temp5;
        // 4. If the code matched by this OptionalChain is strict mode code, let strict be true; else let strict be false.
        const strict = node.strict;
        // 5. Return ? EvaluatePropertyAccessWithExpressionKey(newValue, Expression, strict).
        return yield* EvaluatePropertyAccessWithExpressionKey(newValue, Expression, strict);
      }
      // 1. If the code matched by this OptionalChain is strict mode code, let strict be true; else let strict be false.
      const strict = node.strict;
      // 2. Return ? EvaluatePropertyAccessWithExpressionKey(baseValue, Expression, strict).
      return yield* EvaluatePropertyAccessWithExpressionKey(baseValue, Expression, strict);
    }
    if (IdentifierName) {
      if (OptionalChain) {
        // 1. Let optionalChain be OptionalChain.
        const optionalChain = OptionalChain;
        // 2. Let newReference be ? ChainEvaluation of optionalChain with arguments baseValue and baseReference.
        let _temp6 = yield* ChainEvaluation(optionalChain, baseValue, baseReference);
        /* c8 ignore if */
        if (_temp6 instanceof AbruptCompletion) {
          return _temp6;
        }
        /* c8 ignore if */
        if (_temp6 instanceof Completion) {
          _temp6 = _temp6.Value;
        }
        const newReference = _temp6;
        // 3. Let newValue be ? GetValue(newReference).
        let _temp7 = GetValue(newReference);
        /* c8 ignore if */
        if (_temp7 instanceof AbruptCompletion) {
          return _temp7;
        }
        /* c8 ignore if */
        if (_temp7 instanceof Completion) {
          _temp7 = _temp7.Value;
        }
        const newValue = _temp7;
        // 4. If the code matched by this OptionalChain is strict mode code, let strict be true; else let strict be false.
        const strict = node.strict;
        // 5. Return ? EvaluatePropertyAccessWithIdentifierKey(newValue, IdentifierName, strict).
        return EvaluatePropertyAccessWithIdentifierKey(newValue, IdentifierName, strict);
      }
      // 1. If the code matched by this OptionalChain is strict mode code, let strict be true; else let strict be false.
      const strict = node.strict;
      // 2. Return ? EvaluatePropertyAccessWithIdentifierKey(baseValue, IdentifierName, strict).
      return EvaluatePropertyAccessWithIdentifierKey(baseValue, IdentifierName, strict);
    }
    if (PrivateIdentifier) {
      if (OptionalChain) {
        // 1. Let optionalChain be OptionalChain.
        const optionalChain = OptionalChain;
        // 2. Let newReference be ? ChainEvaluation of optionalChain with arguments baseValue and baseReference.
        let _temp8 = yield* ChainEvaluation(optionalChain, baseValue, baseReference);
        /* c8 ignore if */
        if (_temp8 instanceof AbruptCompletion) {
          return _temp8;
        }
        /* c8 ignore if */
        if (_temp8 instanceof Completion) {
          _temp8 = _temp8.Value;
        }
        const newReference = _temp8;
        // 3. Let newValue be ? GetValue(newReference).
        let _temp9 = GetValue(newReference);
        /* c8 ignore if */
        if (_temp9 instanceof AbruptCompletion) {
          return _temp9;
        }
        /* c8 ignore if */
        if (_temp9 instanceof Completion) {
          _temp9 = _temp9.Value;
        }
        const newValue = _temp9;
        // 4. Let nv be ? RequireObjectCoercible(newValue).
        let _temp10 = RequireObjectCoercible(newValue);
        /* c8 ignore if */
        if (_temp10 instanceof AbruptCompletion) {
          return _temp10;
        }
        /* c8 ignore if */
        if (_temp10 instanceof Completion) {
          _temp10 = _temp10.Value;
        }
        const nv = _temp10;
        // 5. Let fieldNameString be the StringValue of PrivateIdentifier.
        const fieldNameString = StringValue(PrivateIdentifier);
        // 6. Return ! MakePrivateReference(nv, fieldNameString).
        let _temp11 = MakePrivateReference(nv, fieldNameString);
        Assert(!(_temp11 instanceof AbruptCompletion), "MakePrivateReference(nv, fieldNameString)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp11 instanceof Completion) {
          _temp11 = _temp11.Value;
        }
        return _temp11;
      }
      // 1. Let bv be ? RequireObjectCoercible(baseValue).
      let _temp12 = RequireObjectCoercible(baseValue);
      /* c8 ignore if */
      if (_temp12 instanceof AbruptCompletion) {
        return _temp12;
      }
      /* c8 ignore if */
      if (_temp12 instanceof Completion) {
        _temp12 = _temp12.Value;
      }
      const bv = _temp12;
      // 2. Let fieldNameString be the StringValue of PrivateIdentifier.
      const fieldNameString = StringValue(PrivateIdentifier);
      // 3. Return ! MakePrivateReference(bv, fieldNameString).
      let _temp13 = MakePrivateReference(bv, fieldNameString);
      Assert(!(_temp13 instanceof AbruptCompletion), "MakePrivateReference(bv, fieldNameString)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp13 instanceof Completion) {
        _temp13 = _temp13.Value;
      }
      return _temp13;
    }
    throw new OutOfRange$1('ChainEvaluation', node);
  }
  ChainEvaluation.section = 'https://tc39.es/ecma262/#sec-optional-chaining-chain-evaluation';

  /** https://tc39.es/ecma262/#sec-tagged-templates-runtime-semantics-evaluation */
  //   MemberExpression :
  //     MemberExpression TemplateLiteral
  function* Evaluate_TaggedTemplateExpression(node) {
    const {
      MemberExpression,
      TemplateLiteral
    } = node;
    // 1. Let tagRef be the result of evaluating MemberExpression.
    const tagRef = yield* Evaluate(MemberExpression);
    // 1. Let tagFunc be ? GetValue(tagRef).
    let _temp = GetValue(tagRef);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const tagFunc = _temp;
    // 1. Let tailCall be IsInTailPosition(thisCall).
    const tailCall = IsInTailPosition();
    // 1. Return ? EvaluateCall(tagFunc, tagRef, TemplateLiteral, tailCall).
    return yield* EvaluateCall(tagFunc, tagRef, TemplateLiteral, tailCall);
  }

  /** https://tc39.es/ecma262/#sec-getsubstitution */
  function GetSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    // 1. Assert: Type(matched) is String.
    Assert(matched instanceof JSStringValue, "matched instanceof JSStringValue");
    // 2. Let matchLength be the number of code units in matched.
    const matchLength = matched.stringValue().length;
    // 3. Assert: Type(str) is String.
    Assert(str instanceof JSStringValue, "str instanceof JSStringValue");
    // 4. Let stringLength be the number of code units in str.
    const stringLength = str.stringValue().length;
    // 5. Assert: position is a non-negative integer.
    Assert(isNonNegativeInteger(position), "isNonNegativeInteger(position)");
    // 6. Assert: position ≤ stringLength.
    Assert(position <= stringLength, "position <= stringLength");
    // 7. Assert: captures is a possibly empty List of Strings.
    Assert(Array.isArray(captures) && captures.every(value => value instanceof JSStringValue || value instanceof UndefinedValue), "Array.isArray(captures) && captures.every((value) => value instanceof JSStringValue || value instanceof UndefinedValue)");
    // 8. Assert: Type(replacement) is String.
    Assert(replacement instanceof JSStringValue, "replacement instanceof JSStringValue");
    // 9. Let tailPos be position + matchLength.
    const tailPos = position + matchLength;
    // 10. Let m be the number of elements in captures.
    const m = captures.length;
    // 11. Let result be the String value derived from replacement by copying code unit elements from replacement
    //     to result while performing replacements as specified in Table 52. These $ replacements are done left-to-right,
    //     and, once such a replacement is performed, the new replacement text is not subject to further replacements.
    const replacementStr = replacement.stringValue();
    let result = '';
    let i = 0;
    while (i < replacementStr.length) {
      const currentChar = replacementStr[i];
      if (currentChar === '$' && i < replacementStr.length - 1) {
        const nextChar = replacementStr[i + 1];
        if (nextChar === '$') {
          result += '$';
          i += 2;
        } else if (nextChar === '&') {
          result += matched.stringValue();
          i += 2;
        } else if (nextChar === '`') {
          if (position === 0) ; else {
            result += str.stringValue().substring(0, position);
          }
          i += 2;
        } else if (nextChar === '\'') {
          if (tailPos >= stringLength) ; else {
            result += str.stringValue().substring(tailPos);
          }
          i += 2;
        } else if ('123456789'.includes(nextChar) && (i === replacementStr.length - 2 || !'0123456789'.includes(replacementStr[i + 2]))) {
          const n = Number(nextChar);
          if (n <= m) {
            const capture = captures[n - 1];
            if (capture !== Value.undefined) {
              result += capture.stringValue();
            }
          } else {
            result += `$${nextChar}`;
          }
          i += 2;
        } else if (i < replacementStr.length - 2 && '0123456789'.includes(nextChar) && '0123456789'.includes(replacementStr[i + 2])) {
          const nextNextChar = replacementStr[i + 2];
          const n = Number(nextChar + nextNextChar);
          if (n !== 0 && n <= m) {
            const capture = captures[n - 1];
            if (capture !== Value.undefined) {
              result += capture.stringValue();
            }
          } else {
            result += `$${nextChar}${nextNextChar}`;
          }
          i += 3;
        } else if (nextChar === '<') {
          if (namedCaptures === Value.undefined) {
            result += '$<';
            i += 2;
          } else {
            Assert(namedCaptures instanceof ObjectValue, "namedCaptures instanceof ObjectValue");
            const nextSign = replacementStr.indexOf('>', i);
            if (nextSign === -1) {
              result += '$<';
              i += 2;
            } else {
              const groupName = Value(replacementStr.substring(i + 2, nextSign));
              let _temp = Get(namedCaptures, groupName);
              /* c8 ignore if */
              if (_temp instanceof AbruptCompletion) {
                return _temp;
              }
              /* c8 ignore if */
              if (_temp instanceof Completion) {
                _temp = _temp.Value;
              }
              const capture = _temp;
              if (capture === Value.undefined) ; else {
                let _temp2 = ToString(capture);
                /* c8 ignore if */
                if (_temp2 instanceof AbruptCompletion) {
                  return _temp2;
                }
                /* c8 ignore if */
                if (_temp2 instanceof Completion) {
                  _temp2 = _temp2.Value;
                }
                result += _temp2.stringValue();
              }
              i = nextSign + 1;
            }
          }
        } else {
          result += '$';
          i += 1;
        }
      } else {
        result += currentChar;
        i += 1;
      }
    }
    // 12. Return result.
    return Value(result);
  }

  /** https://tc39.es/ecma262/#sec-continue-statement-runtime-semantics-evaluation */
  //   ContinueStatement :
  //     `continue` `;`
  //     `continue` LabelIdentifier `;`
  function Evaluate_ContinueStatement({
    LabelIdentifier
  }) {
    if (!LabelIdentifier) {
      // 1. Return Completion { [[Type]]: continue, [[Value]]: empty, [[Target]]: empty }.
      return new Completion({
        Type: 'continue',
        Value: undefined,
        Target: undefined
      });
    }
    // 1. Let label be the StringValue of LabelIdentifier.
    const label = StringValue(LabelIdentifier);
    // 2. Return Completion { [[Type]]: continue, [[Value]]: empty, [[Target]]: label }.
    return new Completion({
      Type: 'continue',
      Value: undefined,
      Target: label
    });
  }

  // @ts-nocheck

  /** https://tc39.es/ecma262/#sec-labelled-statements-runtime-semantics-evaluation */
  function Evaluate_LabelledStatement(LabelledStatement) {
    // 1. Let newLabelSet be a new empty List.
    const newLabelSet = new ValueSet();
    // 2. Return LabelledEvaluation of this LabelledStatement with argument newLabelSet.
    return LabelledEvaluation(LabelledStatement, newLabelSet);
  }

  /** https://tc39.es/ecma262/#sec-runtime-semantics-mv-s */
  //   StringNumericLiteral :::
  //     [empty]
  //     StrWhiteSpace
  //     StrWhiteSpace_opt StrNumericLiteral StrWhiteSpace_opt
  function MV_StringNumericLiteral(StringNumericLiteral) {
    return F(Number(StringNumericLiteral));
  }

  /** https://tc39.es/ecma262/#sec-applystringornumericbinaryoperator */
  function ApplyStringOrNumericBinaryOperator(lval, opText, rval) {
    // 1. If opText is +, then
    if (opText === '+') {
      let _temp = ToPrimitive(lval);
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      // a. Let lprim be ? ToPrimitive(lval).
      const lprim = _temp;
      // b. Let rprim be ? ToPrimitive(rval).
      let _temp2 = ToPrimitive(rval);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      const rprim = _temp2;
      // c. If Type(lprim) is String or Type(rprim) is String, then
      if (lprim instanceof JSStringValue || rprim instanceof JSStringValue) {
        let _temp3 = ToString(lprim);
        /* c8 ignore if */
        if (_temp3 instanceof AbruptCompletion) {
          return _temp3;
        }
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
        // i. Let lstr be ? ToString(lprim).
        const lstr = _temp3;
        // ii. Let rstr be ? ToString(rprim).
        let _temp4 = ToString(rprim);
        /* c8 ignore if */
        if (_temp4 instanceof AbruptCompletion) {
          return _temp4;
        }
        /* c8 ignore if */
        if (_temp4 instanceof Completion) {
          _temp4 = _temp4.Value;
        }
        const rstr = _temp4;
        // iii. Return the string-concatenation of lstr and rstr.
        return Value(lstr.stringValue() + rstr.stringValue());
      }
      // d. Set lval to lprim.
      lval = lprim;
      // e. Set rval to rprim.
      rval = rprim;
    }
    // 2. NOTE: At this point, it must be a numeric operation.
    // 3. Let lnum be ? ToNumeric(lval).
    let _temp5 = ToNumeric(lval);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const lnum = _temp5;
    // 4. Let rnum be ? ToNumeric(rval).
    let _temp6 = ToNumeric(rval);
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const rnum = _temp6;
    // 5. If Type(lnum) is different from Type(rnum), throw a TypeError exception.
    if (Type(lnum) !== Type(rnum)) {
      return exports.surroundingAgent.Throw('TypeError', 'CannotMixBigInts');
    }
    // 6. Let T be Type(lnum).
    const T = TypeForMethod(lnum);
    // 7. Let operation be the abstract operation associated with opText in the following table:
    const operation = {
      '**': T.exponentiate,
      '*': T.multiply,
      '/': T.divide,
      '%': T.remainder,
      '+': T.add,
      '-': T.subtract,
      '<<': T.leftShift,
      '>>': T.signedRightShift,
      '>>>': T.unsignedRightShift,
      '&': T.bitwiseAND,
      '^': T.bitwiseXOR,
      '|': T.bitwiseOR
    }[opText];
    // 8. Return ? operation(lnum, rnum).
    return operation(lnum, rnum);
  }

  /** https://tc39.es/ecma262/#sec-evaluatestringornumericbinaryexpression */
  function* EvaluateStringOrNumericBinaryExpression(leftOperand, opText, rightOperand) {
    // 1. Let lref be the result of evaluating leftOperand.
    const lref = yield* Evaluate(leftOperand);
    // 2. Let lval be ? GetValue(lref).
    let _temp = GetValue(lref);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const lval = _temp;
    // 3. Let rref be the result of evaluating rightOperand.
    const rref = yield* Evaluate(rightOperand);
    // 4. Let rval be ? GetValue(rref).
    let _temp2 = GetValue(rref);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const rval = _temp2;
    // 5. Return ? ApplyStringOrNumericBinaryOperator(lval, opText, rval).
    return ApplyStringOrNumericBinaryOperator(lval, opText, rval);
  }

  /** https://tc39.es/ecma262/#sec-meta-properties */
  //   ImportMeta : `import` `.` `meta`
  function Evaluate_ImportMeta(_ImportMeta) {
    let _temp = GetActiveScriptOrModule();
    Assert(!(_temp instanceof AbruptCompletion), "GetActiveScriptOrModule()" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 1. Let module be ! GetActiveScriptOrModule().
    const module = _temp;
    // 2. Assert: module is a Source Text Module Record.
    Assert(module instanceof SourceTextModuleRecord, "module instanceof SourceTextModuleRecord");
    // 3. Let importMeta be module.[[ImportMeta]].
    let importMeta = module.ImportMeta;
    // 4. If importMeta is empty, then
    if (importMeta === undefined) {
      let _temp2 = OrdinaryObjectCreate(Value.null);
      Assert(!(_temp2 instanceof AbruptCompletion), "OrdinaryObjectCreate(Value.null)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      // a. Set importMeta to ! OrdinaryObjectCreate(null).
      importMeta = _temp2;
      // b. Let importMetaValues be ! HostGetImportMetaProperties(module).
      let _temp3 = HostGetImportMetaProperties(module);
      Assert(!(_temp3 instanceof AbruptCompletion), "HostGetImportMetaProperties(module)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      const importMetaValues = _temp3;
      // c. For each Record { [[Key]], [[Value]] } p that is an element of importMetaValues, do
      for (const p of importMetaValues) {
        let _temp4 = CreateDataPropertyOrThrow(importMeta, p.Key, p.Value);
        Assert(!(_temp4 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(importMeta, p.Key, p.Value)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp4 instanceof Completion) {
          _temp4 = _temp4.Value;
        }
      }
      // d. Perform ! HostFinalizeImportMeta(importMeta, module).
      let _temp5 = HostFinalizeImportMeta(importMeta, module);
      Assert(!(_temp5 instanceof AbruptCompletion), "HostFinalizeImportMeta(importMeta, module)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      // e. Set module.[[ImportMeta]] to importMeta.
      module.ImportMeta = importMeta;
      // f. Return importMeta.
      return importMeta;
    } else {
      // 5. Else,
      // a. Assert: Type(importMeta) is Object.
      Assert(importMeta instanceof ObjectValue, "importMeta instanceof ObjectValue");
      // b. Return importMeta.
      return importMeta;
    }
  }

  // @ts-nocheck
  /** https://tc39.es/ecma262/#sec-debugger-statement-runtime-semantics-evaluation */
  // DebuggerStatement : `debugger` `;`
  function Evaluate_DebuggerStatement(_node) {
    let result;
    // 1. If an implementation-defined debugging facility is available and enabled, then
    if (exports.surroundingAgent.hostDefinedOptions.onDebugger) {
      // a. Perform an implementation-defined debugging action.
      // b. Let result be an implementation-defined Completion value.
      result = EnsureCompletion(exports.surroundingAgent.hostDefinedOptions.onDebugger());
    } else {
      // a. Let result be NormalCompletion(empty).
      result = NormalCompletion(undefined);
    }
    // 2. Return result.
    return result;
  }

  /** https://tc39.es/ecma262/#sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization */
  // BindingPropertyList : BIndingPropertyList `,` BindingProperty
  // BindingProperty :
  //   SingleNameBinding
  //   PropertyName `:` BindingElement
  function* PropertyBindingInitialization(node, value, environment) {
    if (isArray(node)) {
      // 1. Let boundNames be ? PropertyBindingInitialization of BindingPropertyList with arguments value and environment.
      // 2. Let nextNames be ? PropertyBindingInitialization of BindingProperty with arguments value and environment.
      // 3. Append each item in nextNames to the end of boundNames.
      // 4. Return boundNames.
      const boundNames = [];
      for (const item of node) {
        let _temp = yield* PropertyBindingInitialization(item, value, environment);
        /* c8 ignore if */
        if (_temp instanceof AbruptCompletion) {
          return _temp;
        }
        /* c8 ignore if */
        if (_temp instanceof Completion) {
          _temp = _temp.Value;
        }
        const nextNames = _temp;
        boundNames.push(...nextNames);
      }
      return boundNames;
    }
    if (node.PropertyName) {
      // 1. Let P be the result of evaluating PropertyName.
      let P = yield* Evaluate_PropertyName(node.PropertyName);
      // 2. ReturnIfAbrupt(P).
      /* c8 ignore if */
      if (P instanceof AbruptCompletion) {
        return P;
      }
      /* c8 ignore if */
      if (P instanceof Completion) {
        P = P.Value;
      }
      // 3. Perform ? KeyedBindingInitialization of BindingElement with value, environment, and P as the arguments.
      let _temp2 = yield* KeyedBindingInitialization(node.BindingElement, value, environment, P);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      // 4. Return a new List containing P.
      return [P];
    } else {
      // 1. Let name be the string that is the only element of BoundNames of SingleNameBinding.
      const name = BoundNames(node)[0];
      // 2. Perform ? KeyedBindingInitialization for SingleNameBinding using value, environment, and name as the arguments.
      let _temp3 = yield* KeyedBindingInitialization(node, value, environment, name);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      // 3. Return a new List containing name.
      return [name];
    }
  }

  /** https://tc39.es/ecma262/#sec-runtime-semantics-keyedbindinginitialization */
  function* KeyedBindingInitialization(node, value, environment, propertyName) {
    if (node.type === 'BindingElement') {
      let _temp = GetV(value, propertyName);
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      // 1. Let v be ? GetV(value, propertyName).
      let v = _temp;
      // 2. If Initializer is present and v is undefined, then
      if (node.Initializer && v === Value.undefined) {
        // a. Let defaultValue be the result of evaluating Initializer.
        const defaultValue = yield* Evaluate(node.Initializer);
        // b. Set v to ? GetValue(defaultValue).
        let _temp2 = GetValue(defaultValue);
        /* c8 ignore if */
        if (_temp2 instanceof AbruptCompletion) {
          return _temp2;
        }
        /* c8 ignore if */
        if (_temp2 instanceof Completion) {
          _temp2 = _temp2.Value;
        }
        v = _temp2;
      }
      // 2. Return the result of performing BindingInitialization for BindingPattern passing v and environment as arguments.
      return yield* BindingInitialization(node.BindingPattern, v, environment);
    } else {
      // 1. Let bindingId be StringValue of BindingIdentifier.
      const bindingId = StringValue(node.BindingIdentifier);
      // 2. Let lhs be ? ResolveBinding(bindingId, environment).
      let _temp3 = ResolveBinding(bindingId, environment, node.BindingIdentifier.strict);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      const lhs = _temp3;
      // 3. Let v be ? GetV(value, propertyName).
      let _temp4 = GetV(value, propertyName);
      /* c8 ignore if */
      if (_temp4 instanceof AbruptCompletion) {
        return _temp4;
      }
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      let v = _temp4;
      if (node.Initializer && v === Value.undefined) {
        // a. If IsAnonymousFunctionDefinition(Initializer) is true, then
        if (IsAnonymousFunctionDefinition(node.Initializer)) {
          // i. Set v to the result of performing NamedEvaluation for Initializer with argument bindingId.
          v = yield* NamedEvaluation(node.Initializer, bindingId);
        } else {
          // b. Else,
          // i. Let defaultValue be the result of evaluating Initializer.
          const defaultValue = yield* Evaluate(node.Initializer);
          // ii. Set v to ? GetValue(defaultValue).
          let _temp5 = GetValue(defaultValue);
          /* c8 ignore if */
          if (_temp5 instanceof AbruptCompletion) {
            return _temp5;
          }
          /* c8 ignore if */
          if (_temp5 instanceof Completion) {
            _temp5 = _temp5.Value;
          }
          v = _temp5;
        }
      }
      // 5. If environment is undefined, return ? PutValue(lhs, v).
      if (environment === Value.undefined) {
        return PutValue(lhs, v);
      }
      // 6. Return InitializeReferencedBinding(lhs, v).
      return InitializeReferencedBinding(lhs, v);
    }
  }

  // ObjectAssignmentPattern :
  //  `{` `}`
  //  `{` AssignmentPropertyList `}`
  //  `{` AssignmentPropertyList `,` `}`
  //  `{` AssignmentPropertyList `,` AssignmentRestProperty? `}`
  function* DestructuringAssignmentEvaluation_ObjectAssignmentPattern({
    AssignmentPropertyList,
    AssignmentRestProperty
  }, value) {
    let _temp = RequireObjectCoercible(value);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 2. Perform ? PropertyDestructuringAssignmentEvaluation for AssignmentPropertyList using value as the argument.
    let _temp2 = yield* PropertyDestructuringAssignmentEvaluation(AssignmentPropertyList, value);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const excludedNames = _temp2;
    if (AssignmentRestProperty) {
      let _temp3 = yield* RestDestructuringAssignmentEvaluation(AssignmentRestProperty, value, excludedNames);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
    }
    // 3. Return NormalCompletion(empty).
    return NormalCompletion(undefined);
  }

  /** https://tc39.es/ecma262/#sec-runtime-semantics-restdestructuringassignmentevaluation */
  // AssignmentRestProperty : `...` DestructuringAssignmentTarget
  function* RestDestructuringAssignmentEvaluation({
    DestructuringAssignmentTarget
  }, value, excludedNames) {
    // 1. Let lref be the result of evaluating DestructuringAssignmentTarget.
    let lref = yield* Evaluate(DestructuringAssignmentTarget);
    // 2. ReturnIfAbrupt(lref).
    /* c8 ignore if */
    if (lref instanceof AbruptCompletion) {
      return lref;
    }
    /* c8 ignore if */
    if (lref instanceof Completion) {
      lref = lref.Value;
    }
    // 3. Let restObj be OrdinaryObjectCreate(%Object.prototype%).
    const restObj = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%Object.prototype%'));
    // 4. Perform ? CopyDataProperties(restObj, value, excludedNames).
    let _temp4 = CopyDataProperties(restObj, value, excludedNames);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 5. Return PutValue(lref, restObj).
    return PutValue(lref, restObj);
  }
  RestDestructuringAssignmentEvaluation.section = 'https://tc39.es/ecma262/#sec-runtime-semantics-restdestructuringassignmentevaluation';
  function* PropertyDestructuringAssignmentEvaluation(AssignmentPropertyList, value) {
    const propertyNames = [];
    for (const AssignmentProperty of AssignmentPropertyList) {
      if (AssignmentProperty.IdentifierReference) {
        // 1. Let P be StringValue of IdentifierReference.
        const P = StringValue(AssignmentProperty.IdentifierReference);
        // 2. Let lref be ? ResolveBinding(P).
        let _temp5 = ResolveBinding(P, undefined, AssignmentProperty.IdentifierReference.strict);
        /* c8 ignore if */
        if (_temp5 instanceof AbruptCompletion) {
          return _temp5;
        }
        /* c8 ignore if */
        if (_temp5 instanceof Completion) {
          _temp5 = _temp5.Value;
        }
        const lref = _temp5;
        // 3. Let v be ? GetV(value, P).
        let _temp6 = GetV(value, P);
        /* c8 ignore if */
        if (_temp6 instanceof AbruptCompletion) {
          return _temp6;
        }
        /* c8 ignore if */
        if (_temp6 instanceof Completion) {
          _temp6 = _temp6.Value;
        }
        let v = _temp6;
        // 4. If Initializer? is present and v is undefined, then
        if (AssignmentProperty.Initializer && v === Value.undefined) {
          // a. If IsAnonymousFunctionDefinition(Initializer) is true, then
          if (IsAnonymousFunctionDefinition(AssignmentProperty.Initializer)) {
            // i. Set v to the result of performing NamedEvaluation for Initializer with argument P.
            v = yield* NamedEvaluation(AssignmentProperty.Initializer, P);
          } else {
            // b. Else,
            // i. Let defaultValue be the result of evaluating Initializer.
            const defaultValue = yield* Evaluate(AssignmentProperty.Initializer);
            // ii. Set v to ? GetValue(defaultValue)
            let _temp7 = GetValue(defaultValue);
            /* c8 ignore if */
            if (_temp7 instanceof AbruptCompletion) {
              return _temp7;
            }
            /* c8 ignore if */
            if (_temp7 instanceof Completion) {
              _temp7 = _temp7.Value;
            }
            v = _temp7;
          }
        }
        // 5. Perform ? PutValue(lref, v).
        let _temp8 = PutValue(lref, v);
        /* c8 ignore if */
        if (_temp8 instanceof AbruptCompletion) {
          return _temp8;
        }
        /* c8 ignore if */
        if (_temp8 instanceof Completion) {
          _temp8 = _temp8.Value;
        }
        // 6. Return a new List containing P.
        propertyNames.push(P);
      } else {
        // 1. Let name be the result of evaluating PropertyName.
        let name = yield* Evaluate_PropertyName(AssignmentProperty.PropertyName);
        // 2. ReturnIfAbrupt(name).
        /* c8 ignore if */
        if (name instanceof AbruptCompletion) {
          return name;
        }
        /* c8 ignore if */
        if (name instanceof Completion) {
          name = name.Value;
        }
        // 3. Perform ? KeyedDestructuringAssignmentEvaluation of AssignmentElement with value and name as the arguments.
        let _temp9 = yield* KeyedDestructuringAssignmentEvaluation(AssignmentProperty.AssignmentElement, value, name);
        /* c8 ignore if */
        if (_temp9 instanceof AbruptCompletion) {
          return _temp9;
        }
        /* c8 ignore if */
        if (_temp9 instanceof Completion) {
          _temp9 = _temp9.Value;
        }
        // 4. Return a new List containing name.
        propertyNames.push(name);
      }
    }
    return propertyNames;
  }

  // AssignmentElement : DestructuringAssignmentTarget Initializer?
  function* KeyedDestructuringAssignmentEvaluation({
    DestructuringAssignmentTarget,
    Initializer
  }, value, propertyName) {
    // 1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an ArrayLiteral, then
    let lref;
    if (DestructuringAssignmentTarget.type !== 'ObjectLiteral' && DestructuringAssignmentTarget.type !== 'ArrayLiteral') {
      // a. Let lref be the result of evaluating DestructuringAssignmentTarget.
      lref = yield* Evaluate(DestructuringAssignmentTarget);
      // b. ReturnIfAbrupt(lref).
      /* c8 ignore if */
      if (lref instanceof AbruptCompletion) {
        return lref;
      }
      /* c8 ignore if */
      if (lref instanceof Completion) {
        lref = lref.Value;
      }
    }
    // 2. Let v be ? GetV(value, propertyName).
    let _temp10 = GetV(value, propertyName);
    /* c8 ignore if */
    if (_temp10 instanceof AbruptCompletion) {
      return _temp10;
    }
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    const v = _temp10;
    // 3. If Initializer is present and v is undefined, then
    let rhsValue;
    if (Initializer && v === Value.undefined) {
      // a. If IsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of DestructuringAssignmentTarget are both true, then
      if (IsAnonymousFunctionDefinition(Initializer) && IsIdentifierRef(DestructuringAssignmentTarget)) {
        // i. Let rhsValue be NamedEvaluation of Initializer with argument GetReferencedName(lref).
        rhsValue = yield* NamedEvaluation(Initializer, lref.ReferencedName);
      } else {
        // i. Let defaultValue be the result of evaluating Initializer.
        const defaultValue = yield* Evaluate(Initializer);
        // ii. Let rhsValue be ? GetValue(defaultValue).
        let _temp11 = GetValue(defaultValue);
        /* c8 ignore if */
        if (_temp11 instanceof AbruptCompletion) {
          return _temp11;
        }
        /* c8 ignore if */
        if (_temp11 instanceof Completion) {
          _temp11 = _temp11.Value;
        }
        rhsValue = _temp11;
      }
    } else {
      // 4. Else, let rhsValue be v.
      rhsValue = v;
    }
    // 5. If DestructuringAssignmentTarget is an ObjectLiteral or an ArrayLiteral, then
    if (DestructuringAssignmentTarget.type === 'ObjectLiteral' || DestructuringAssignmentTarget.type === 'ArrayLiteral') {
      // a. Let assignmentPattern be the AssignmentPattern that is covered by DestructuringAssignmentTarget.
      const assignmentPattern = refineLeftHandSideExpression(DestructuringAssignmentTarget);
      // b. Return the result of performing DestructuringAssignmentEvaluation of assignmentPattern with rhsValue as the argument.
      return yield* DestructuringAssignmentEvaluation(assignmentPattern, rhsValue);
    }
    // 6. Return ? PutValue(lref, rhsValue).
    return PutValue(lref, rhsValue);
  }

  // ArrayAssignmentPattern :
  //   `[` `]`
  //   `[` AssignmentElementList `]`
  //   `[` AssignmentElementList `,` AssignmentRestElement? `]`
  function* DestructuringAssignmentEvaluation_ArrayAssignmentPattern({
    AssignmentElementList,
    AssignmentRestElement
  }, value) {
    let _temp12 = GetIterator(value);
    /* c8 ignore if */
    if (_temp12 instanceof AbruptCompletion) {
      return _temp12;
    }
    /* c8 ignore if */
    if (_temp12 instanceof Completion) {
      _temp12 = _temp12.Value;
    }
    // 1. Let iteratorRecord be ? GetIterator(value).
    const iteratorRecord = _temp12;
    // 2. Let status be IteratorDestructuringAssignmentEvaluation of AssignmentElementList with argument iteratorRecord.
    let status = EnsureCompletion(yield* IteratorDestructuringAssignmentEvaluation(AssignmentElementList, iteratorRecord));
    // 3. If status is an abrupt completion, then
    if (status instanceof AbruptCompletion) {
      // a. If iteratorRecord.[[Done]] is false, return ? IteratorClose(iteratorRecord, status).
      if (iteratorRecord.Done === Value.false) {
        return IteratorClose(iteratorRecord, status);
      }
      // b. Return Completion(status).
      return Completion(status);
    }
    // 4. If Elision is present, then
    // ...
    // 5. If AssignmentRestElement is present, then
    if (AssignmentRestElement) {
      // a. Set status to the result of performing IteratorDestructuringAssignmentEvaluation of AssignmentRestElement with iteratorRecord as the argument.
      status = EnsureCompletion(yield* IteratorDestructuringAssignmentEvaluation(AssignmentRestElement, iteratorRecord));
    }
    // 6. If iteratorRecord.[[Done]] is false, return ? IteratorClose(iteratorRecord, status).
    if (iteratorRecord.Done === Value.false) {
      return IteratorClose(iteratorRecord, status);
    }
    return Completion(status);
  }
  function* IteratorDestructuringAssignmentEvaluation(node, iteratorRecord) {
    if (Array.isArray(node)) {
      for (const n of node) {
        let _temp13 = yield* IteratorDestructuringAssignmentEvaluation(n, iteratorRecord);
        /* c8 ignore if */
        if (_temp13 instanceof AbruptCompletion) {
          return _temp13;
        }
        /* c8 ignore if */
        if (_temp13 instanceof Completion) {
          _temp13 = _temp13.Value;
        }
      }
      return NormalCompletion(undefined);
    }
    switch (node.type) {
      case 'Elision':
        // 1. If iteratorRecord.[[Done]] is false, then
        if (iteratorRecord.Done === Value.false) {
          // a. Let next be IteratorStep(iteratorRecord).
          let next = IteratorStep(iteratorRecord);
          // b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.
          if (next instanceof AbruptCompletion) {
            iteratorRecord.Done = Value.true;
          }
          // c. ReturnIfAbrupt(next)
          /* c8 ignore if */
          if (next instanceof AbruptCompletion) {
            return next;
          }
          /* c8 ignore if */
          if (next instanceof Completion) {
            next = next.Value;
          }
          // d. If next is false, set iteratorRecord.[[Done]] to true.
          if (next === Value.false) {
            iteratorRecord.Done = Value.true;
          }
        }
        // 2. Return NormalCompletion(empty).
        return NormalCompletion(undefined);
      case 'AssignmentElement':
        {
          const {
            DestructuringAssignmentTarget,
            Initializer
          } = node;
          let lref;
          // 1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an ArrayLiteral, then
          if (DestructuringAssignmentTarget.type !== 'ObjectLiteral' && DestructuringAssignmentTarget.type !== 'ArrayLiteral') {
            lref = yield* Evaluate(DestructuringAssignmentTarget);
            /* c8 ignore if */
            if (lref instanceof AbruptCompletion) {
              return lref;
            }
            /* c8 ignore if */
            if (lref instanceof Completion) {
              lref = lref.Value;
            }
          }
          let value;
          // 2. If iteratorRecord.[[Done]] is false, then
          if (iteratorRecord.Done === Value.false) {
            // a. Let next be IteratorStep(iteratorRecord).
            let next = IteratorStep(iteratorRecord);
            // b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.
            if (next instanceof AbruptCompletion) {
              iteratorRecord.Done = Value.true;
            }
            // c. ReturnIfAbrupt(next);
            /* c8 ignore if */
            if (next instanceof AbruptCompletion) {
              return next;
            }
            /* c8 ignore if */
            if (next instanceof Completion) {
              next = next.Value;
            }
            // d. If next is false, set iteratorRecord.[[Done]] to true.
            if (next === Value.false) {
              iteratorRecord.Done = Value.true;
            } else {
              // e. Else,
              // i. Let value be IteratorValue(next).
              value = IteratorValue(next);
              // ii. If value is an abrupt completion, set iteratorRecord.[[Done]] to true.
              if (value instanceof AbruptCompletion) {
                iteratorRecord.Done = Value.true;
              }
              // iii. ReturnIfAbrupt(value).
              /* c8 ignore if */
              if (value instanceof AbruptCompletion) {
                return value;
              }
              /* c8 ignore if */
              if (value instanceof Completion) {
                value = value.Value;
              }
            }
          }
          // 3. If iteratorRecord.[[Done]] is true, let value be undefined.
          if (iteratorRecord.Done === Value.true) {
            value = Value.undefined;
          }
          let v;
          // 4. If Initializer is present and value is undefined, then
          if (Initializer && value === Value.undefined) {
            // a. If IsAnonymousFunctionDefinition(AssignmentExpression) is true and IsIdentifierRef of LeftHandSideExpression is true, then
            if (IsAnonymousFunctionDefinition(Initializer) && IsIdentifierRef(DestructuringAssignmentTarget)) {
              // i. Let v be NamedEvaluation of Initializer with argument GetReferencedName(lref).
              v = yield* NamedEvaluation(Initializer, lref.ReferencedName);
            } else {
              // b. Else,
              // i. Let defaultValue be the result of evaluating Initializer.
              const defaultValue = yield* Evaluate(Initializer);
              // ii. Let v be ? GetValue(defaultValue).
              let _temp14 = GetValue(defaultValue);
              /* c8 ignore if */
              if (_temp14 instanceof AbruptCompletion) {
                return _temp14;
              }
              /* c8 ignore if */
              if (_temp14 instanceof Completion) {
                _temp14 = _temp14.Value;
              }
              v = _temp14;
            }
          } else {
            // 5. Else, let v be value.
            v = value;
          }
          // 6. If DestructuringAssignmentTarget is an ObjectLiteral or an ArrayLiteral, then
          if (DestructuringAssignmentTarget.type === 'ObjectLiteral' || DestructuringAssignmentTarget.type === 'ArrayLiteral') {
            // a. Let nestedAssignmentPattern be the AssignmentPattern that is covered by DestructuringAssignmentTarget.
            const nestedAssignmentPattern = refineLeftHandSideExpression(DestructuringAssignmentTarget);
            // b. Return the result of performing DestructuringAssignmentEvaluation of nestedAssignmentPattern with v as the argument.
            return yield* DestructuringAssignmentEvaluation(nestedAssignmentPattern, v);
          }
          // 7. Return ? PutValue(lref, v).
          return PutValue(lref, v);
        }
      case 'AssignmentRestElement':
        {
          const {
            DestructuringAssignmentTarget
          } = node;
          let lref;
          // 1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an ArrayLiteral, then
          if (DestructuringAssignmentTarget.type !== 'ObjectLiteral' && DestructuringAssignmentTarget.type !== 'ArrayLiteral') {
            lref = yield* Evaluate(DestructuringAssignmentTarget);
            /* c8 ignore if */
            if (lref instanceof AbruptCompletion) {
              return lref;
            }
            /* c8 ignore if */
            if (lref instanceof Completion) {
              lref = lref.Value;
            }
          }
          // 2. Let A be ! ArrayCreate(0).
          let _temp15 = ArrayCreate(0);
          Assert(!(_temp15 instanceof AbruptCompletion), "ArrayCreate(0)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp15 instanceof Completion) {
            _temp15 = _temp15.Value;
          }
          const A = _temp15;
          // 3. Let n be 0.
          let n = 0;
          // 4. Repeat, while iteratorRecord.[[Done]] is false,
          while (iteratorRecord.Done === Value.false) {
            // a. Let next be IteratorStep(iteratorRecord).
            let next = IteratorStep(iteratorRecord);
            // b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.
            if (next instanceof AbruptCompletion) {
              iteratorRecord.Done = Value.true;
            }
            // c. ReturnIfAbrupt(next);
            /* c8 ignore if */
            if (next instanceof AbruptCompletion) {
              return next;
            }
            /* c8 ignore if */
            if (next instanceof Completion) {
              next = next.Value;
            }
            // d. If next is false, set iteratorRecord.[[Done]] to true.
            if (next === Value.false) {
              iteratorRecord.Done = Value.true;
            } else {
              // e. Else,
              // i. Let nextValue be IteratorValue(next).
              let nextValue = IteratorValue(next);
              // ii. If nextValue is an abrupt completion, set iteratorRecord.[[Done]] to true.
              if (nextValue instanceof AbruptCompletion) {
                iteratorRecord.Done = Value.true;
              }
              // iii. ReturnIfAbrupt(nextValue).
              /* c8 ignore if */
              if (nextValue instanceof AbruptCompletion) {
                return nextValue;
              }
              /* c8 ignore if */
              if (nextValue instanceof Completion) {
                nextValue = nextValue.Value;
              }
              // iv. Perform ! CreateDataPropertyOrThrow(A, ! ToString(𝔽(n)), nextValue).
              let _temp17 = ToString(F(n));
              Assert(!(_temp17 instanceof AbruptCompletion), "ToString(F(n))" + ' returned an abrupt completion');
              /* c8 ignore if */
              if (_temp17 instanceof Completion) {
                _temp17 = _temp17.Value;
              }
              let _temp16 = CreateDataPropertyOrThrow(A, _temp17, nextValue);
              Assert(!(_temp16 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(A, X(ToString(F(n))), nextValue)" + ' returned an abrupt completion');
              /* c8 ignore if */
              if (_temp16 instanceof Completion) {
                _temp16 = _temp16.Value;
              }
              // v. Set n to n + 1.
              n += 1;
            }
          }
          // 5. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an ArrayLiteral, then
          if (DestructuringAssignmentTarget.type !== 'ObjectLiteral' && DestructuringAssignmentTarget.type !== 'ArrayLiteral') {
            return PutValue(lref, A);
          }
          // 6. Let nestedAssignmentPattern be the AssignmentPattern that is covered by DestructuringAssignmentTarget.
          const nestedAssignmentPattern = refineLeftHandSideExpression(DestructuringAssignmentTarget);
          // 7. Return the result of performing DestructuringAssignmentEvaluation of nestedAssignmentPattern with A as the argument.
          return yield* DestructuringAssignmentEvaluation(nestedAssignmentPattern, A);
        }
      /*c8 ignore next*/default:
        throw new OutOfRange$1('IteratorDestructuringAssignmentEvaluation', node);
    }
  }
  function DestructuringAssignmentEvaluation(node, value) {
    switch (node.type) {
      case 'ObjectAssignmentPattern':
        return DestructuringAssignmentEvaluation_ObjectAssignmentPattern(node, value);
      case 'ArrayAssignmentPattern':
        return DestructuringAssignmentEvaluation_ArrayAssignmentPattern(node, value);
      /*c8 ignore next*/default:
        throw new OutOfRange$1('DestructuringAssignmentEvaluation', node);
    }
  }

  // BindingRestProperty : `...` BindingIdentifier
  function RestBindingInitialization({
    BindingIdentifier
  }, value, environment, excludedNames) {
    let _temp = ResolveBinding(StringValue(BindingIdentifier), environment, BindingIdentifier.strict);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 1. Let lhs be ? ResolveBinding(StringValue of BindingIdentifier, environment).
    const lhs = _temp;
    // 2. Let restObj be OrdinaryObjectCreate(%Object.prototype%).
    const restObj = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%Object.prototype%'));
    // 3. Perform ? CopyDataProperties(restObj, value, excludedNames).
    let _temp2 = CopyDataProperties(restObj, value, excludedNames);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 4. If environment is undefined, return PutValue(lhs, restObj).
    if (environment === Value.undefined) {
      return PutValue(lhs, restObj);
    }
    // 5. Return InitializeReferencedBinding(lhs, restObj).
    return InitializeReferencedBinding(lhs, restObj);
  }

  var UnicodeSets = {"Script_Extensions/Javanese":[[43392,43469],[43471,43481],[43486,43487]],"Script_Extensions/Nko":[[1548,1548],[1563,1563],[1567,1567],[1984,2042],[2045,2047],[64830,64831]],"Script_Extensions/Inherited":[[768,833],[835,836],[838,866],[2387,2388],[6832,6862],[7618,7671],[7673,7673],[7675,7679],[8204,8205],[8400,8431],[65024,65039],[65056,65069],[66045,66045],[118528,118573],[118576,118598],[119143,119145],[119163,119170],[119173,119179],[119210,119213],[917760,917999]],"Script_Extensions/Dogra":[[2404,2415],[43056,43065],[71680,71739]],"Script_Extensions/Deseret":[[66560,66639]],"Script_Extensions/Bhaiksuki":[[72704,72712],[72714,72758],[72760,72773],[72784,72812]],"Script_Extensions/Phoenician":[[67840,67867],[67871,67871]],"Script_Extensions/Pau_Cin_Hau":[[72384,72440]],"Script_Extensions/Meroitic_Cursive":[[68000,68023],[68028,68047],[68050,68095]],"Script_Extensions/Warang_Citi":[[71840,71922],[71935,71935]],"Script_Extensions/Balinese":[[6912,6988],[6992,7038]],"Script_Extensions/Khitan_Small_Script":[[94180,94180],[101120,101589]],"Script_Extensions/Tai_Le":[[4160,4169],[6480,6509],[6512,6516]],"Script_Extensions/Modi":[[43056,43065],[71168,71236],[71248,71257]],"Script_Extensions/Psalter_Pahlavi":[[1600,1600],[68480,68497],[68505,68508],[68521,68527]],"Script_Extensions/Old_Italic":[[66304,66339],[66349,66351]],"Script_Extensions/Bamum":[[42656,42743],[92160,92728]],"Script_Extensions/Palmyrene":[[67680,67711]],"Script_Extensions/Batak":[[7104,7155],[7164,7167]],"Script_Extensions/Cham":[[43520,43574],[43584,43597],[43600,43609],[43612,43615]],"Script_Extensions/Pahawh_Hmong":[[92928,92997],[93008,93017],[93019,93025],[93027,93047],[93053,93071]],"Script_Extensions/Canadian_Aboriginal":[[5120,5759],[6320,6389],[72368,72383]],"Script_Extensions/Arabic":[[1536,1540],[1542,1756],[1758,1791],[1872,1919],[2160,2190],[2192,2193],[2200,2273],[2275,2303],[64336,64450],[64467,64911],[64914,64967],[64975,64975],[65008,65023],[65136,65140],[65142,65276],[66272,66299],[69216,69246],[69373,69375],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[126704,126705]],"Script_Extensions/Cypro_Minoan":[[65792,65793],[77712,77810]],"Script_Extensions/Common":[[0,64],[91,96],[123,169],[171,185],[187,191],[215,215],[247,247],[697,735],[741,745],[748,767],[884,884],[894,894],[901,901],[903,903],[1541,1541],[1757,1757],[2274,2274],[3647,3647],[4053,4056],[5867,5869],[8192,8203],[8206,8238],[8240,8292],[8294,8304],[8308,8318],[8320,8334],[8352,8384],[8448,8485],[8487,8489],[8492,8497],[8499,8525],[8527,8543],[8585,8587],[8592,9254],[9280,9290],[9312,10239],[10496,11123],[11126,11157],[11159,11263],[11776,11842],[11844,11869],[12272,12283],[12288,12288],[12292,12292],[12306,12306],[12320,12320],[12342,12342],[12872,12895],[12927,12927],[12977,12991],[13004,13007],[13169,13178],[13184,13279],[13311,13311],[19904,19967],[42760,42785],[42888,42890],[43867,43867],[43882,43883],[65040,65049],[65072,65092],[65095,65106],[65108,65126],[65128,65131],[65279,65279],[65281,65312],[65339,65344],[65371,65376],[65504,65510],[65512,65518],[65529,65533],[65936,65948],[66000,66044],[118608,118723],[118784,119029],[119040,119078],[119081,119142],[119146,119162],[119171,119172],[119180,119209],[119214,119274],[119488,119507],[119520,119539],[119552,119638],[119666,119672],[119808,119892],[119894,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119993],[119995,119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120146,120485],[120488,120779],[120782,120831],[126065,126132],[126209,126269],[126976,127019],[127024,127123],[127136,127150],[127153,127167],[127169,127183],[127185,127221],[127232,127405],[127462,127487],[127489,127490],[127504,127547],[127552,127560],[127584,127589],[127744,128727],[128732,128748],[128752,128764],[128768,128886],[128891,128985],[128992,129003],[129008,129008],[129024,129035],[129040,129095],[129104,129113],[129120,129159],[129168,129197],[129200,129201],[129280,129619],[129632,129645],[129648,129660],[129664,129672],[129680,129725],[129727,129733],[129742,129755],[129760,129768],[129776,129784],[129792,129938],[129940,129994],[130032,130041],[917505,917505],[917536,917631]],"Script_Extensions/Old_Permic":[[1155,1155],[66384,66426]],"Script_Extensions/Devanagari":[[2304,2386],[2389,2431],[7376,7414],[7416,7417],[8432,8432],[43056,43065],[43232,43263],[72448,72457]],"Script_Extensions/Phags_Pa":[[6146,6147],[6149,6149],[43072,43127]],"Script_Extensions/Tangsa":[[92784,92862],[92864,92873]],"Script_Extensions/Duployan":[[113664,113770],[113776,113788],[113792,113800],[113808,113817],[113820,113827]],"Script_Extensions/Han":[[11904,11929],[11931,12019],[12032,12245],[12289,12291],[12293,12305],[12307,12319],[12321,12333],[12336,12336],[12343,12351],[12539,12539],[12688,12703],[12736,12771],[12832,12871],[12928,12976],[12992,13003],[13055,13055],[13144,13168],[13179,13183],[13280,13310],[13312,19903],[19968,40959],[42752,42759],[63744,64109],[64112,64217],[65093,65094],[65377,65381],[94178,94179],[94192,94193],[119648,119665],[127568,127569],[131072,173791],[173824,177977],[177984,178205],[178208,183969],[183984,191456],[194560,195101],[196608,201546],[201552,205743]],"Script_Extensions/Cyrillic":[[1024,1327],[7296,7304],[7467,7467],[7544,7544],[7672,7672],[11744,11775],[11843,11843],[42560,42655],[65070,65071],[122928,122989],[123023,123023]],"Script_Extensions/Inscriptional_Parthian":[[68416,68437],[68440,68447]],"Script_Extensions/Latin":[[65,90],[97,122],[170,170],[186,186],[192,214],[216,246],[248,696],[736,740],[867,879],[1157,1158],[2385,2386],[4347,4347],[7424,7461],[7468,7516],[7522,7525],[7531,7543],[7545,7614],[7680,7935],[8239,8239],[8305,8305],[8319,8319],[8336,8348],[8432,8432],[8490,8491],[8498,8498],[8526,8526],[8544,8584],[11360,11391],[42752,42759],[42786,42887],[42891,42954],[42960,42961],[42963,42963],[42965,42969],[42994,43007],[43310,43310],[43824,43866],[43868,43876],[43878,43881],[64256,64262],[65313,65338],[65345,65370],[67456,67461],[67463,67504],[67506,67514],[122624,122654],[122661,122666]],"Script_Extensions/Multani":[[2662,2671],[70272,70278],[70280,70280],[70282,70285],[70287,70301],[70303,70313]],"Script_Extensions/Old_South_Arabian":[[68192,68223]],"Script_Extensions/Khojki":[[2790,2799],[43056,43065],[70144,70161],[70163,70209]],"Script_Extensions/Gunjala_Gondi":[[2404,2405],[73056,73061],[73063,73064],[73066,73102],[73104,73105],[73107,73112],[73120,73129]],"Script_Extensions/Meroitic_Hieroglyphs":[[67968,67999]],"Script_Extensions/Sundanese":[[7040,7103],[7360,7367]],"Script_Extensions/Hebrew":[[1425,1479],[1488,1514],[1519,1524],[64285,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64335]],"Script_Extensions/Old_Turkic":[[68608,68680]],"Script_Extensions/Coptic":[[994,1007],[11392,11507],[11513,11519],[66272,66299]],"Script_Extensions/Myanmar":[[4096,4255],[43310,43310],[43488,43518],[43616,43647]],"Script_Extensions/Bopomofo":[[746,747],[12289,12291],[12296,12305],[12307,12319],[12330,12333],[12336,12336],[12343,12343],[12539,12539],[12549,12591],[12704,12735],[65093,65094],[65377,65381]],"Script_Extensions/Tagbanwa":[[5941,5942],[5984,5996],[5998,6000],[6002,6003]],"Script_Extensions/Meetei_Mayek":[[43744,43766],[43968,44013],[44016,44025]],"Script_Extensions/Lisu":[[42192,42239],[73648,73648]],"Script_Extensions/Vai":[[42240,42539]],"Script_Extensions/Ol_Chiki":[[7248,7295]],"Script_Extensions/Saurashtra":[[43136,43205],[43214,43225]],"Script_Extensions/Sinhala":[[2404,2405],[3457,3459],[3461,3478],[3482,3505],[3507,3515],[3517,3517],[3520,3526],[3530,3530],[3535,3540],[3542,3542],[3544,3551],[3558,3567],[3570,3572],[70113,70132]],"Script_Extensions/Anatolian_Hieroglyphs":[[82944,83526]],"Script_Extensions/Georgian":[[4256,4293],[4295,4295],[4301,4301],[4304,4351],[7312,7354],[7357,7359],[11520,11557],[11559,11559],[11565,11565]],"Script_Extensions/Malayalam":[[2385,2386],[2404,2405],[3328,3340],[3342,3344],[3346,3396],[3398,3400],[3402,3407],[3412,3427],[3430,3455],[7386,7386],[43056,43058]],"Script_Extensions/Khudawadi":[[2404,2405],[43056,43065],[70320,70378],[70384,70393]],"Script_Extensions/Dives_Akuru":[[71936,71942],[71945,71945],[71948,71955],[71957,71958],[71960,71989],[71991,71992],[71995,72006],[72016,72025]],"Script_Extensions/Kharoshthi":[[68096,68099],[68101,68102],[68108,68115],[68117,68119],[68121,68149],[68152,68154],[68159,68168],[68176,68184]],"Script_Extensions/Miao":[[93952,94026],[94031,94087],[94095,94111]],"Script_Extensions/Gothic":[[66352,66378]],"Script_Extensions/Nabataean":[[67712,67742],[67751,67759]],"Script_Extensions/Tangut":[[94176,94176],[94208,100343],[100352,101119],[101632,101640]],"Script_Extensions/Bassa_Vah":[[92880,92909],[92912,92917]],"Script_Extensions/Buginese":[[6656,6683],[6686,6687],[43471,43471]],"Script_Extensions/Ogham":[[5760,5788]],"Script_Extensions/Buhid":[[5941,5942],[5952,5971]],"Script_Extensions/Lepcha":[[7168,7223],[7227,7241],[7245,7247]],"Script_Extensions/Katakana":[[12289,12291],[12296,12305],[12307,12319],[12336,12341],[12343,12343],[12348,12349],[12441,12444],[12448,12543],[12784,12799],[13008,13054],[13056,13143],[65093,65094],[65377,65439],[110576,110579],[110581,110587],[110589,110590],[110592,110592],[110880,110882],[110933,110933],[110948,110951]],"Script_Extensions/Armenian":[[1329,1366],[1369,1418],[1421,1423],[64275,64279]],"Script_Extensions/Sharada":[[2385,2385],[7383,7383],[7385,7385],[7388,7389],[7392,7392],[70016,70111]],"Script_Extensions/Limbu":[[2405,2405],[6400,6430],[6432,6443],[6448,6459],[6464,6464],[6468,6479]],"Script_Extensions/Thaana":[[1548,1548],[1563,1564],[1567,1567],[1632,1641],[1920,1969],[65010,65010],[65021,65021]],"Script_Extensions/Newa":[[70656,70747],[70749,70753]],"Script_Extensions/Syloti_Nagri":[[2404,2405],[2534,2543],[43008,43052]],"Script_Extensions/SignWriting":[[120832,121483],[121499,121503],[121505,121519]],"Script_Extensions/Lycian":[[66176,66204]],"Script_Extensions/Cuneiform":[[73728,74649],[74752,74862],[74864,74868],[74880,75075]],"Script_Extensions/Toto":[[123536,123566]],"Script_Extensions/Elbasan":[[66816,66855]],"Script_Extensions/Ethiopic":[[4608,4680],[4682,4685],[4688,4694],[4696,4696],[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],[4800,4800],[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4957,4988],[4992,5017],[11648,11670],[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822],[124896,124902],[124904,124907],[124909,124910],[124912,124926]],"Script_Extensions/Siddham":[[71040,71093],[71096,71133]],"Script_Extensions/Old_Hungarian":[[68736,68786],[68800,68850],[68858,68863]],"Script_Extensions/Tai_Tham":[[6688,6750],[6752,6780],[6783,6793],[6800,6809],[6816,6829]],"Script_Extensions/Zanabazar_Square":[[72192,72263]],"Script_Extensions/Nushu":[[94177,94177],[110960,111355]],"Script_Extensions/Bengali":[[2385,2386],[2404,2405],[2432,2435],[2437,2444],[2447,2448],[2451,2472],[2474,2480],[2482,2482],[2486,2489],[2492,2500],[2503,2504],[2507,2510],[2519,2519],[2524,2525],[2527,2531],[2534,2558],[7376,7376],[7378,7378],[7381,7382],[7384,7384],[7393,7393],[7402,7402],[7405,7405],[7410,7410],[7413,7415],[43249,43249]],"Script_Extensions/Vithkuqi":[[66928,66938],[66940,66954],[66956,66962],[66964,66965],[66967,66977],[66979,66993],[66995,67001],[67003,67004]],"Script_Extensions/Ahom":[[71424,71450],[71453,71467],[71472,71494]],"Script_Extensions/Tamil":[[2385,2386],[2404,2405],[2946,2947],[2949,2954],[2958,2960],[2962,2965],[2969,2970],[2972,2972],[2974,2975],[2979,2980],[2984,2986],[2990,3001],[3006,3010],[3014,3016],[3018,3021],[3024,3024],[3031,3031],[3046,3066],[7386,7386],[43251,43251],[70401,70401],[70403,70403],[70459,70460],[73664,73713],[73727,73727]],"Script_Extensions/Kayah_Li":[[43264,43311]],"Script_Extensions/Kawi":[[73472,73488],[73490,73530],[73534,73561]],"Script_Extensions/Brahmi":[[69632,69709],[69714,69749],[69759,69759]],"Script_Extensions/Telugu":[[2385,2386],[2404,2405],[3072,3084],[3086,3088],[3090,3112],[3114,3129],[3132,3140],[3142,3144],[3146,3149],[3157,3158],[3160,3162],[3165,3165],[3168,3171],[3174,3183],[3191,3199],[7386,7386],[7410,7410]],"Script_Extensions/Egyptian_Hieroglyphs":[[77824,78933]],"Script_Extensions/Hanunoo":[[5920,5942]],"Script_Extensions/Tirhuta":[[2385,2386],[2404,2405],[7410,7410],[43056,43065],[70784,70855],[70864,70873]],"Script_Extensions/Caucasian_Albanian":[[66864,66915],[66927,66927]],"Script_Extensions/Old_Sogdian":[[69376,69415]],"Script_Extensions/Thai":[[3585,3642],[3648,3675]],"Script_Extensions/Tifinagh":[[11568,11623],[11631,11632],[11647,11647]],"Script_Extensions/Cypriot":[[65792,65794],[65799,65843],[65847,65855],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67647]],"Script_Extensions/Linear_A":[[65799,65843],[67072,67382],[67392,67413],[67424,67431]],"Script_Extensions/Tibetan":[[3840,3911],[3913,3948],[3953,3991],[3993,4028],[4030,4044],[4046,4052],[4057,4058]],"Script_Extensions/Lydian":[[67872,67897],[67903,67903]],"Script_Extensions/Soyombo":[[72272,72354]],"Script_Extensions/Osage":[[66736,66771],[66776,66811]],"Script_Extensions/Tai_Viet":[[43648,43714],[43739,43743]],"Script_Extensions/Carian":[[66208,66256]],"Script_Extensions/Mandaic":[[1600,1600],[2112,2139],[2142,2142]],"Script_Extensions/Braille":[[10240,10495]],"Script_Extensions/Chorasmian":[[69552,69579]],"Script_Extensions/Sogdian":[[1600,1600],[69424,69465]],"Script_Extensions/Lao":[[3713,3714],[3716,3716],[3718,3722],[3724,3747],[3749,3749],[3751,3773],[3776,3780],[3782,3782],[3784,3790],[3792,3801],[3804,3807]],"Script_Extensions/Nandinagari":[[2404,2405],[3302,3311],[7401,7401],[7410,7410],[7418,7418],[43056,43061],[72096,72103],[72106,72151],[72154,72164]],"Script_Extensions/Khmer":[[6016,6109],[6112,6121],[6128,6137],[6624,6655]],"Script_Extensions/Makasar":[[73440,73464]],"Script_Extensions/Syriac":[[1548,1548],[1563,1564],[1567,1567],[1600,1600],[1611,1621],[1648,1648],[1792,1805],[1807,1866],[1869,1871],[2144,2154],[7672,7672],[7674,7674]],"Script_Extensions/Sora_Sompeng":[[69840,69864],[69872,69881]],"Script_Extensions/Mende_Kikakui":[[124928,125124],[125127,125142]],"Script_Extensions/Samaritan":[[2048,2093],[2096,2110]],"Script_Extensions/Rejang":[[43312,43347],[43359,43359]],"Script_Extensions/Old_North_Arabian":[[68224,68255]],"Script_Extensions/Marchen":[[72816,72847],[72850,72871],[72873,72886]],"Script_Extensions/Wancho":[[123584,123641],[123647,123647]],"Script_Extensions/Gurmukhi":[[2385,2386],[2404,2405],[2561,2563],[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2620,2620],[2622,2626],[2631,2632],[2635,2637],[2641,2641],[2649,2652],[2654,2654],[2662,2678],[43056,43065]],"Script_Extensions/Gujarati":[[2385,2386],[2404,2405],[2689,2691],[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],[2748,2757],[2759,2761],[2763,2765],[2768,2768],[2784,2787],[2790,2801],[2809,2815],[43056,43065]],"Script_Extensions/Linear_B":[[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786],[65792,65794],[65799,65843],[65847,65855]],"Script_Extensions/Imperial_Aramaic":[[67648,67669],[67671,67679]],"Script_Extensions/Runic":[[5792,5866],[5870,5880]],"Script_Extensions/Elymaic":[[69600,69622]],"Script_Extensions/Old_Persian":[[66464,66499],[66504,66517]],"Script_Extensions/Grantha":[[2385,2386],[2404,2405],[3046,3059],[7376,7376],[7378,7379],[7410,7412],[7416,7417],[8432,8432],[70400,70403],[70405,70412],[70415,70416],[70419,70440],[70442,70448],[70450,70451],[70453,70457],[70459,70468],[70471,70472],[70475,70477],[70480,70480],[70487,70487],[70493,70499],[70502,70508],[70512,70516],[73680,73681],[73683,73683]],"Script_Extensions/Yezidi":[[1548,1548],[1563,1563],[1567,1567],[1632,1641],[69248,69289],[69291,69293],[69296,69297]],"Script_Extensions/Chakma":[[2534,2543],[4160,4169],[69888,69940],[69942,69959]],"Script_Extensions/Tagalog":[[5888,5909],[5919,5919],[5941,5942]],"Script_Extensions/Mahajani":[[2404,2415],[43056,43065],[69968,70006]],"Script_Extensions/Old_Uyghur":[[1600,1600],[68338,68338],[69488,69513]],"Script_Extensions/Cherokee":[[5024,5109],[5112,5117],[43888,43967]],"Script_Extensions/Hangul":[[4352,4607],[12289,12291],[12296,12305],[12307,12319],[12334,12336],[12343,12343],[12539,12539],[12593,12686],[12800,12830],[12896,12926],[43360,43388],[44032,55203],[55216,55238],[55243,55291],[65093,65094],[65377,65381],[65440,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500]],"Script_Extensions/New_Tai_Lue":[[6528,6571],[6576,6601],[6608,6618],[6622,6623]],"Script_Extensions/Manichaean":[[1600,1600],[68288,68326],[68331,68342]],"Script_Extensions/Yi":[[12289,12290],[12296,12305],[12308,12315],[12539,12539],[40960,42124],[42128,42182],[65377,65381]],"Script_Extensions/Oriya":[[2385,2386],[2404,2405],[2817,2819],[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2876,2884],[2887,2888],[2891,2893],[2901,2903],[2908,2909],[2911,2915],[2918,2935],[7386,7386],[7410,7410]],"Script_Extensions/Ugaritic":[[66432,66461],[66463,66463]],"Script_Extensions/Avestan":[[68352,68405],[68409,68415]],"Script_Extensions/Glagolitic":[[1156,1156],[1159,1159],[11264,11359],[11843,11843],[42607,42607],[122880,122886],[122888,122904],[122907,122913],[122915,122916],[122918,122922]],"Script_Extensions/Kannada":[[2385,2386],[2404,2405],[3200,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],[3260,3268],[3270,3272],[3274,3277],[3285,3286],[3293,3294],[3296,3299],[3302,3311],[3313,3315],[7376,7376],[7378,7378],[7386,7386],[7410,7410],[7412,7412],[43056,43061]],"Script_Extensions/Nag_Mundari":[[124112,124153]],"Script_Extensions/Osmanya":[[66688,66717],[66720,66729]],"Script_Extensions/Hanifi_Rohingya":[[1548,1548],[1563,1563],[1567,1567],[1600,1600],[1748,1748],[68864,68903],[68912,68921]],"Script_Extensions/Masaram_Gondi":[[2404,2405],[72960,72966],[72968,72969],[72971,73014],[73018,73018],[73020,73021],[73023,73031],[73040,73049]],"Script_Extensions/Mro":[[92736,92766],[92768,92777],[92782,92783]],"Script_Extensions/Mongolian":[[6144,6169],[6176,6264],[6272,6314],[8239,8239],[71264,71276]],"Script_Extensions/Takri":[[2404,2405],[43056,43065],[71296,71353],[71360,71369]],"Script_Extensions/Inscriptional_Pahlavi":[[68448,68466],[68472,68479]],"Script_Extensions/Greek":[[834,834],[837,837],[880,883],[885,887],[890,893],[895,895],[900,900],[902,902],[904,906],[908,908],[910,929],[931,993],[1008,1023],[7462,7466],[7517,7521],[7526,7530],[7615,7617],[7936,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025,8025],[8027,8027],[8029,8029],[8031,8061],[8064,8116],[8118,8132],[8134,8147],[8150,8155],[8157,8175],[8178,8180],[8182,8190],[8486,8486],[43877,43877],[65856,65934],[65952,65952],[119296,119365]],"Script_Extensions/Adlam":[[1567,1567],[1600,1600],[125184,125259],[125264,125273],[125278,125279]],"Script_Extensions/Hiragana":[[12289,12291],[12296,12305],[12307,12319],[12336,12341],[12343,12343],[12348,12349],[12353,12438],[12441,12448],[12539,12540],[65093,65094],[65377,65381],[65392,65392],[65438,65439],[110593,110879],[110898,110898],[110928,110930],[127488,127488]],"Script_Extensions/Nyiakeng_Puachue_Hmong":[[123136,123180],[123184,123197],[123200,123209],[123214,123215]],"Script_Extensions/Shavian":[[66640,66687]],"Script_Extensions/Kaithi":[[2406,2415],[43056,43065],[69760,69826],[69837,69837]],"Script_Extensions/Hatran":[[67808,67826],[67828,67829],[67835,67839]],"Script_Extensions/Medefaidrin":[[93760,93850]],"Word_Break/Format":[[173,173],[1536,1541],[1564,1564],[1757,1757],[1807,1807],[2192,2193],[2274,2274],[6158,6158],[8206,8207],[8234,8238],[8288,8292],[8294,8303],[65279,65279],[65529,65531],[69821,69821],[69837,69837],[78896,78911],[113824,113827],[119155,119162],[917505,917505]],"Word_Break/Hebrew_Letter":[[1488,1514],[1519,1522],[64285,64285],[64287,64296],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64335]],"Word_Break/LF":[[10,10]],"Word_Break/MidNumLet":[[46,46],[8216,8217],[8228,8228],[65106,65106],[65287,65287],[65294,65294]],"Word_Break/Double_Quote":[[34,34]],"Word_Break/CR":[[13,13]],"Word_Break/Newline":[[11,12],[133,133],[8232,8233]],"Word_Break/Katakana":[[12337,12341],[12443,12444],[12448,12538],[12540,12543],[12784,12799],[13008,13054],[13056,13143],[65382,65437],[110576,110579],[110581,110587],[110589,110590],[110592,110592],[110880,110882],[110933,110933],[110948,110951]],"Word_Break/WSegSpace":[[32,32],[5760,5760],[8192,8198],[8200,8202],[8287,8287],[12288,12288]],"Word_Break/MidNum":[[44,44],[59,59],[894,894],[1417,1417],[1548,1549],[1644,1644],[2040,2040],[8260,8260],[65040,65040],[65044,65044],[65104,65104],[65108,65108],[65292,65292],[65307,65307]],"Word_Break/Single_Quote":[[39,39]],"Word_Break/Other":[[0,9],[14,31],[33,33],[35,38],[40,43],[45,45],[47,47],[60,64],[91,94],[96,96],[123,132],[134,159],[161,169],[171,172],[174,180],[182,182],[184,185],[187,191],[215,215],[247,247],[728,733],[885,885],[888,889],[896,901],[907,907],[909,909],[930,930],[1014,1014],[1154,1154],[1328,1328],[1367,1368],[1373,1373],[1419,1424],[1470,1470],[1472,1472],[1475,1475],[1478,1478],[1480,1487],[1515,1518],[1525,1535],[1542,1547],[1550,1551],[1563,1563],[1565,1567],[1642,1642],[1645,1645],[1748,1748],[1769,1769],[1789,1790],[1792,1806],[1867,1868],[1970,1983],[2038,2039],[2041,2041],[2043,2044],[2046,2047],[2094,2111],[2140,2143],[2155,2159],[2184,2184],[2191,2191],[2194,2199],[2404,2405],[2416,2416],[2436,2436],[2445,2446],[2449,2450],[2473,2473],[2481,2481],[2483,2485],[2490,2491],[2501,2502],[2505,2506],[2511,2518],[2520,2523],[2526,2526],[2532,2533],[2546,2555],[2557,2557],[2559,2560],[2564,2564],[2571,2574],[2577,2578],[2601,2601],[2609,2609],[2612,2612],[2615,2615],[2618,2619],[2621,2621],[2627,2630],[2633,2634],[2638,2640],[2642,2648],[2653,2653],[2655,2661],[2678,2688],[2692,2692],[2702,2702],[2706,2706],[2729,2729],[2737,2737],[2740,2740],[2746,2747],[2758,2758],[2762,2762],[2766,2767],[2769,2783],[2788,2789],[2800,2808],[2816,2816],[2820,2820],[2829,2830],[2833,2834],[2857,2857],[2865,2865],[2868,2868],[2874,2875],[2885,2886],[2889,2890],[2894,2900],[2904,2907],[2910,2910],[2916,2917],[2928,2928],[2930,2945],[2948,2948],[2955,2957],[2961,2961],[2966,2968],[2971,2971],[2973,2973],[2976,2978],[2981,2983],[2987,2989],[3002,3005],[3011,3013],[3017,3017],[3022,3023],[3025,3030],[3032,3045],[3056,3071],[3085,3085],[3089,3089],[3113,3113],[3130,3131],[3141,3141],[3145,3145],[3150,3156],[3159,3159],[3163,3164],[3166,3167],[3172,3173],[3184,3199],[3204,3204],[3213,3213],[3217,3217],[3241,3241],[3252,3252],[3258,3259],[3269,3269],[3273,3273],[3278,3284],[3287,3292],[3295,3295],[3300,3301],[3312,3312],[3316,3327],[3341,3341],[3345,3345],[3397,3397],[3401,3401],[3407,3411],[3416,3422],[3428,3429],[3440,3449],[3456,3456],[3460,3460],[3479,3481],[3506,3506],[3516,3516],[3518,3519],[3527,3529],[3531,3534],[3541,3541],[3543,3543],[3552,3557],[3568,3569],[3572,3632],[3634,3635],[3643,3654],[3663,3663],[3674,3760],[3762,3763],[3773,3783],[3791,3791],[3802,3839],[3841,3863],[3866,3871],[3882,3892],[3894,3894],[3896,3896],[3898,3901],[3912,3912],[3949,3952],[3973,3973],[3992,3992],[4029,4037],[4039,4095],[4130,4130],[4136,4136],[4159,4159],[4170,4175],[4186,4189],[4193,4193],[4197,4198],[4206,4208],[4213,4225],[4238,4238],[4254,4255],[4294,4294],[4296,4300],[4302,4303],[4347,4347],[4681,4681],[4686,4687],[4695,4695],[4697,4697],[4702,4703],[4745,4745],[4750,4751],[4785,4785],[4790,4791],[4799,4799],[4801,4801],[4806,4807],[4823,4823],[4881,4881],[4886,4887],[4955,4956],[4960,4991],[5008,5023],[5110,5111],[5118,5120],[5741,5742],[5787,5791],[5867,5869],[5881,5887],[5910,5918],[5941,5951],[5972,5983],[5997,5997],[6001,6001],[6004,6015],[6100,6102],[6104,6107],[6110,6111],[6122,6154],[6170,6175],[6265,6271],[6315,6319],[6390,6399],[6431,6431],[6444,6447],[6460,6469],[6510,6511],[6517,6527],[6570,6575],[6602,6607],[6619,6655],[6684,6740],[6751,6751],[6781,6782],[6794,6799],[6810,6831],[6863,6911],[6989,6991],[7002,7018],[7028,7039],[7156,7167],[7224,7231],[7242,7244],[7294,7295],[7305,7311],[7355,7356],[7360,7375],[7379,7379],[7419,7423],[7958,7959],[7966,7967],[8006,8007],[8014,8015],[8024,8024],[8026,8026],[8028,8028],[8030,8030],[8062,8063],[8117,8117],[8125,8125],[8127,8129],[8133,8133],[8141,8143],[8148,8149],[8156,8159],[8173,8177],[8181,8181],[8189,8191],[8199,8199],[8208,8215],[8218,8227],[8229,8230],[8240,8254],[8257,8259],[8261,8275],[8277,8286],[8293,8293],[8304,8304],[8306,8318],[8320,8335],[8349,8399],[8433,8449],[8451,8454],[8456,8457],[8468,8468],[8470,8472],[8478,8483],[8485,8485],[8487,8487],[8489,8489],[8494,8494],[8506,8507],[8512,8516],[8522,8525],[8527,8543],[8585,9397],[9450,9756],[9758,9791],[9793,9793],[9795,9876],[9879,9976],[9978,9991],[9993,9993],[9998,10083],[10085,11263],[11493,11498],[11508,11519],[11558,11558],[11560,11564],[11566,11567],[11624,11630],[11632,11646],[11671,11679],[11687,11687],[11695,11695],[11703,11703],[11711,11711],[11719,11719],[11727,11727],[11735,11735],[11743,11743],[11776,11822],[11824,12287],[12289,12292],[12294,12329],[12336,12336],[12342,12346],[12349,12440],[12445,12447],[12539,12539],[12544,12548],[12592,12592],[12687,12703],[12736,12783],[12800,13007],[13055,13055],[13144,40959],[42125,42191],[42238,42239],[42509,42511],[42540,42559],[42611,42611],[42622,42622],[42738,42759],[42955,42959],[42962,42962],[42964,42964],[42970,42993],[43048,43051],[43053,43071],[43124,43135],[43206,43215],[43226,43231],[43256,43258],[43260,43260],[43310,43311],[43348,43359],[43389,43391],[43457,43470],[43482,43492],[43494,43503],[43514,43519],[43575,43583],[43598,43599],[43610,43642],[43646,43695],[43697,43697],[43701,43702],[43705,43709],[43712,43712],[43714,43743],[43760,43761],[43767,43776],[43783,43784],[43791,43792],[43799,43807],[43815,43815],[43823,43823],[43882,43887],[44011,44011],[44014,44015],[44026,44031],[55204,55215],[55239,55242],[55292,64047],[64107,64255],[64263,64274],[64280,64284],[64297,64297],[64311,64311],[64317,64317],[64319,64319],[64322,64322],[64325,64325],[64434,64466],[64830,64847],[64912,64913],[64968,65007],[65020,65023],[65041,65042],[65045,65055],[65072,65074],[65077,65100],[65105,65105],[65107,65107],[65110,65135],[65141,65141],[65277,65278],[65280,65286],[65288,65291],[65293,65293],[65295,65295],[65308,65312],[65339,65342],[65344,65344],[65371,65381],[65471,65473],[65480,65481],[65488,65489],[65496,65497],[65501,65528],[65532,65535],[65548,65548],[65575,65575],[65595,65595],[65598,65598],[65614,65615],[65630,65663],[65787,65855],[65909,66044],[66046,66175],[66205,66207],[66257,66271],[66273,66303],[66336,66348],[66379,66383],[66427,66431],[66462,66463],[66500,66503],[66512,66512],[66518,66559],[66718,66719],[66730,66735],[66772,66775],[66812,66815],[66856,66863],[66916,66927],[66939,66939],[66955,66955],[66963,66963],[66966,66966],[66978,66978],[66994,66994],[67002,67002],[67005,67071],[67383,67391],[67414,67423],[67432,67455],[67462,67462],[67505,67505],[67515,67583],[67590,67591],[67593,67593],[67638,67638],[67641,67643],[67645,67646],[67670,67679],[67703,67711],[67743,67807],[67827,67827],[67830,67839],[67862,67871],[67898,67967],[68024,68029],[68032,68095],[68100,68100],[68103,68107],[68116,68116],[68120,68120],[68150,68151],[68155,68158],[68160,68191],[68221,68223],[68253,68287],[68296,68296],[68327,68351],[68406,68415],[68438,68447],[68467,68479],[68498,68607],[68681,68735],[68787,68799],[68851,68863],[68904,68911],[68922,69247],[69290,69290],[69293,69295],[69298,69372],[69405,69414],[69416,69423],[69457,69487],[69510,69551],[69573,69599],[69623,69631],[69703,69733],[69750,69758],[69819,69820],[69822,69825],[69827,69836],[69838,69839],[69865,69871],[69882,69887],[69941,69941],[69952,69955],[69960,69967],[70004,70005],[70007,70015],[70085,70088],[70093,70093],[70107,70107],[70109,70143],[70162,70162],[70200,70205],[70210,70271],[70279,70279],[70281,70281],[70286,70286],[70302,70302],[70313,70319],[70379,70383],[70394,70399],[70404,70404],[70413,70414],[70417,70418],[70441,70441],[70449,70449],[70452,70452],[70458,70458],[70469,70470],[70473,70474],[70478,70479],[70481,70486],[70488,70492],[70500,70501],[70509,70511],[70517,70655],[70731,70735],[70746,70749],[70754,70783],[70854,70854],[70856,70863],[70874,71039],[71094,71095],[71105,71127],[71134,71167],[71233,71235],[71237,71247],[71258,71295],[71353,71359],[71370,71452],[71468,71471],[71482,71679],[71739,71839],[71914,71934],[71943,71944],[71946,71947],[71956,71956],[71959,71959],[71990,71990],[71993,71994],[72004,72015],[72026,72095],[72104,72105],[72152,72153],[72162,72162],[72165,72191],[72255,72262],[72264,72271],[72346,72348],[72350,72367],[72441,72703],[72713,72713],[72759,72759],[72769,72783],[72794,72817],[72848,72849],[72872,72872],[72887,72959],[72967,72967],[72970,72970],[73015,73017],[73019,73019],[73022,73022],[73032,73039],[73050,73055],[73062,73062],[73065,73065],[73103,73103],[73106,73106],[73113,73119],[73130,73439],[73463,73471],[73489,73489],[73531,73533],[73539,73551],[73562,73647],[73649,73727],[74650,74751],[74863,74879],[75076,77711],[77809,77823],[78934,82943],[83527,92159],[92729,92735],[92767,92767],[92778,92783],[92863,92863],[92874,92879],[92910,92911],[92917,92927],[92983,92991],[92996,93007],[93018,93026],[93048,93052],[93072,93759],[93824,93951],[94027,94030],[94088,94094],[94112,94175],[94178,94178],[94181,94191],[94194,110575],[110580,110580],[110588,110588],[110591,110591],[110593,110879],[110883,110932],[110934,110947],[110952,113663],[113771,113775],[113789,113791],[113801,113807],[113818,113820],[113823,113823],[113828,118527],[118574,118575],[118599,119140],[119146,119148],[119171,119172],[119180,119209],[119214,119361],[119365,119807],[119893,119893],[119965,119965],[119968,119969],[119971,119972],[119975,119976],[119981,119981],[119994,119994],[119996,119996],[120004,120004],[120070,120070],[120075,120076],[120085,120085],[120093,120093],[120122,120122],[120127,120127],[120133,120133],[120135,120137],[120145,120145],[120486,120487],[120513,120513],[120539,120539],[120571,120571],[120597,120597],[120629,120629],[120655,120655],[120687,120687],[120713,120713],[120745,120745],[120771,120771],[120780,120781],[120832,121343],[121399,121402],[121453,121460],[121462,121475],[121477,121498],[121504,121504],[121520,122623],[122655,122660],[122667,122879],[122887,122887],[122905,122906],[122914,122914],[122917,122917],[122923,122927],[122990,123022],[123024,123135],[123181,123183],[123198,123199],[123210,123213],[123215,123535],[123567,123583],[123642,124111],[124154,124895],[124903,124903],[124908,124908],[124911,124911],[124927,124927],[125125,125135],[125143,125183],[125260,125263],[125274,126463],[126468,126468],[126496,126496],[126499,126499],[126501,126502],[126504,126504],[126515,126515],[126520,126520],[126522,126522],[126524,126529],[126531,126534],[126536,126536],[126538,126538],[126540,126540],[126544,126544],[126547,126547],[126549,126550],[126552,126552],[126554,126554],[126556,126556],[126558,126558],[126560,126560],[126563,126563],[126565,126566],[126571,126571],[126579,126579],[126584,126584],[126589,126589],[126591,126591],[126602,126602],[126620,126624],[126628,126628],[126634,126634],[126652,127279],[127306,127311],[127338,127343],[127370,127461],[127488,127751],[127753,127805],[127807,127858],[127860,127876],[127878,127890],[127892,127907],[127909,127911],[127913,127937],[127941,127942],[127944,127945],[127949,127978],[127980,127980],[127982,127994],[128000,128065],[128068,128069],[128081,128101],[128106,128109],[128111,128111],[128121,128123],[128125,128128],[128132,128132],[128136,128138],[128140,128169],[128171,128186],[128189,128294],[128296,128299],[128301,128371],[128374,128377],[128379,128399],[128401,128404],[128407,128487],[128489,128580],[128584,128586],[128592,128639],[128641,128657],[128659,128674],[128676,128691],[128695,128703],[128705,128715],[128717,129303],[129312,129317],[129319,129327],[129338,129339],[129343,129488],[129502,130031],[130042,917504],[917506,917535],[917632,917759],[918000,1114111]],"Word_Break/MidLetter":[[58,58],[183,183],[903,903],[1375,1375],[1524,1524],[8231,8231],[65043,65043],[65109,65109],[65306,65306]],"Word_Break/ALetter":[[65,90],[97,122],[170,170],[181,181],[186,186],[192,214],[216,246],[248,727],[734,767],[880,884],[886,887],[890,893],[895,895],[902,902],[904,906],[908,908],[910,929],[931,1013],[1015,1153],[1162,1327],[1329,1366],[1369,1372],[1374,1374],[1376,1416],[1418,1418],[1523,1523],[1568,1610],[1646,1647],[1649,1747],[1749,1749],[1765,1766],[1774,1775],[1786,1788],[1791,1791],[1808,1808],[1810,1839],[1869,1957],[1969,1969],[1994,2026],[2036,2037],[2042,2042],[2048,2069],[2074,2074],[2084,2084],[2088,2088],[2112,2136],[2144,2154],[2160,2183],[2185,2190],[2208,2249],[2308,2361],[2365,2365],[2384,2384],[2392,2401],[2417,2432],[2437,2444],[2447,2448],[2451,2472],[2474,2480],[2482,2482],[2486,2489],[2493,2493],[2510,2510],[2524,2525],[2527,2529],[2544,2545],[2556,2556],[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2649,2652],[2654,2654],[2674,2676],[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],[2749,2749],[2768,2768],[2784,2785],[2809,2809],[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2877,2877],[2908,2909],[2911,2913],[2929,2929],[2947,2947],[2949,2954],[2958,2960],[2962,2965],[2969,2970],[2972,2972],[2974,2975],[2979,2980],[2984,2986],[2990,3001],[3024,3024],[3077,3084],[3086,3088],[3090,3112],[3114,3129],[3133,3133],[3160,3162],[3165,3165],[3168,3169],[3200,3200],[3205,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],[3261,3261],[3293,3294],[3296,3297],[3313,3314],[3332,3340],[3342,3344],[3346,3386],[3389,3389],[3406,3406],[3412,3414],[3423,3425],[3450,3455],[3461,3478],[3482,3505],[3507,3515],[3517,3517],[3520,3526],[3840,3840],[3904,3911],[3913,3948],[3976,3980],[4256,4293],[4295,4295],[4301,4301],[4304,4346],[4348,4680],[4682,4685],[4688,4694],[4696,4696],[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],[4800,4800],[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4992,5007],[5024,5109],[5112,5117],[5121,5740],[5743,5759],[5761,5786],[5792,5866],[5870,5880],[5888,5905],[5919,5937],[5952,5969],[5984,5996],[5998,6000],[6176,6264],[6272,6276],[6279,6312],[6314,6314],[6320,6389],[6400,6430],[6656,6678],[6917,6963],[6981,6988],[7043,7072],[7086,7087],[7098,7141],[7168,7203],[7245,7247],[7258,7293],[7296,7304],[7312,7354],[7357,7359],[7401,7404],[7406,7411],[7413,7414],[7418,7418],[7424,7615],[7680,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025,8025],[8027,8027],[8029,8029],[8031,8061],[8064,8116],[8118,8124],[8126,8126],[8130,8132],[8134,8140],[8144,8147],[8150,8155],[8160,8172],[8178,8180],[8182,8188],[8305,8305],[8319,8319],[8336,8348],[8450,8450],[8455,8455],[8458,8467],[8469,8469],[8473,8477],[8484,8484],[8486,8486],[8488,8488],[8490,8493],[8495,8505],[8508,8511],[8517,8521],[8526,8526],[8544,8584],[9398,9449],[11264,11492],[11499,11502],[11506,11507],[11520,11557],[11559,11559],[11565,11565],[11568,11623],[11631,11631],[11648,11670],[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[11823,11823],[12293,12293],[12347,12348],[12549,12591],[12593,12686],[12704,12735],[40960,42124],[42192,42237],[42240,42508],[42512,42527],[42538,42539],[42560,42606],[42623,42653],[42656,42735],[42760,42954],[42960,42961],[42963,42963],[42965,42969],[42994,43009],[43011,43013],[43015,43018],[43020,43042],[43072,43123],[43138,43187],[43250,43255],[43259,43259],[43261,43262],[43274,43301],[43312,43334],[43360,43388],[43396,43442],[43471,43471],[43520,43560],[43584,43586],[43588,43595],[43744,43754],[43762,43764],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822],[43824,43881],[43888,44002],[44032,55203],[55216,55238],[55243,55291],[64256,64262],[64275,64279],[64336,64433],[64467,64829],[64848,64911],[64914,64967],[65008,65019],[65136,65140],[65142,65276],[65313,65338],[65345,65370],[65440,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500],[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786],[65856,65908],[66176,66204],[66208,66256],[66304,66335],[66349,66378],[66384,66421],[66432,66461],[66464,66499],[66504,66511],[66513,66517],[66560,66717],[66736,66771],[66776,66811],[66816,66855],[66864,66915],[66928,66938],[66940,66954],[66956,66962],[66964,66965],[66967,66977],[66979,66993],[66995,67001],[67003,67004],[67072,67382],[67392,67413],[67424,67431],[67456,67461],[67463,67504],[67506,67514],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67669],[67680,67702],[67712,67742],[67808,67826],[67828,67829],[67840,67861],[67872,67897],[67968,68023],[68030,68031],[68096,68096],[68112,68115],[68117,68119],[68121,68149],[68192,68220],[68224,68252],[68288,68295],[68297,68324],[68352,68405],[68416,68437],[68448,68466],[68480,68497],[68608,68680],[68736,68786],[68800,68850],[68864,68899],[69248,69289],[69296,69297],[69376,69404],[69415,69415],[69424,69445],[69488,69505],[69552,69572],[69600,69622],[69635,69687],[69745,69746],[69749,69749],[69763,69807],[69840,69864],[69891,69926],[69956,69956],[69959,69959],[69968,70002],[70006,70006],[70019,70066],[70081,70084],[70106,70106],[70108,70108],[70144,70161],[70163,70187],[70207,70208],[70272,70278],[70280,70280],[70282,70285],[70287,70301],[70303,70312],[70320,70366],[70405,70412],[70415,70416],[70419,70440],[70442,70448],[70450,70451],[70453,70457],[70461,70461],[70480,70480],[70493,70497],[70656,70708],[70727,70730],[70751,70753],[70784,70831],[70852,70853],[70855,70855],[71040,71086],[71128,71131],[71168,71215],[71236,71236],[71296,71338],[71352,71352],[71680,71723],[71840,71903],[71935,71942],[71945,71945],[71948,71955],[71957,71958],[71960,71983],[71999,71999],[72001,72001],[72096,72103],[72106,72144],[72161,72161],[72163,72163],[72192,72192],[72203,72242],[72250,72250],[72272,72272],[72284,72329],[72349,72349],[72368,72440],[72704,72712],[72714,72750],[72768,72768],[72818,72847],[72960,72966],[72968,72969],[72971,73008],[73030,73030],[73056,73061],[73063,73064],[73066,73097],[73112,73112],[73440,73458],[73474,73474],[73476,73488],[73490,73523],[73648,73648],[73728,74649],[74752,74862],[74880,75075],[77712,77808],[77824,78895],[78913,78918],[82944,83526],[92160,92728],[92736,92766],[92784,92862],[92880,92909],[92928,92975],[92992,92995],[93027,93047],[93053,93071],[93760,93823],[93952,94026],[94032,94032],[94099,94111],[94176,94177],[94179,94179],[113664,113770],[113776,113788],[113792,113800],[113808,113817],[119808,119892],[119894,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119993],[119995,119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120146,120485],[120488,120512],[120514,120538],[120540,120570],[120572,120596],[120598,120628],[120630,120654],[120656,120686],[120688,120712],[120714,120744],[120746,120770],[120772,120779],[122624,122654],[122661,122666],[122928,122989],[123136,123180],[123191,123197],[123214,123214],[123536,123565],[123584,123627],[124112,124139],[124896,124902],[124904,124907],[124909,124910],[124912,124926],[124928,125124],[125184,125251],[125259,125259],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[127280,127305],[127312,127337],[127344,127369]],"Word_Break/ZWJ":[[8205,8205]],"Word_Break/ExtendNumLet":[[95,95],[8239,8239],[8255,8256],[8276,8276],[65075,65076],[65101,65103],[65343,65343]],"Word_Break/Numeric":[[48,57],[1632,1641],[1643,1643],[1776,1785],[1984,1993],[2406,2415],[2534,2543],[2662,2671],[2790,2799],[2918,2927],[3046,3055],[3174,3183],[3302,3311],[3430,3439],[3558,3567],[3664,3673],[3792,3801],[3872,3881],[4160,4169],[4240,4249],[6112,6121],[6160,6169],[6470,6479],[6608,6617],[6784,6793],[6800,6809],[6992,7001],[7088,7097],[7232,7241],[7248,7257],[42528,42537],[43216,43225],[43264,43273],[43472,43481],[43504,43513],[43600,43609],[44016,44025],[65296,65305],[66720,66729],[68912,68921],[69734,69743],[69872,69881],[69942,69951],[70096,70105],[70384,70393],[70736,70745],[70864,70873],[71248,71257],[71360,71369],[71472,71481],[71904,71913],[72016,72025],[72784,72793],[73040,73049],[73120,73129],[73552,73561],[92768,92777],[92864,92873],[93008,93017],[120782,120831],[123200,123209],[123632,123641],[124144,124153],[125264,125273],[130032,130041]],"Word_Break/Regional_Indicator":[[127462,127487]],"Word_Break/Extend":[[768,879],[1155,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1552,1562],[1611,1631],[1648,1648],[1750,1756],[1759,1764],[1767,1768],[1770,1773],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2045,2045],[2070,2073],[2075,2083],[2085,2087],[2089,2093],[2137,2139],[2200,2207],[2250,2273],[2275,2307],[2362,2364],[2366,2383],[2385,2391],[2402,2403],[2433,2435],[2492,2492],[2494,2500],[2503,2504],[2507,2509],[2519,2519],[2530,2531],[2558,2558],[2561,2563],[2620,2620],[2622,2626],[2631,2632],[2635,2637],[2641,2641],[2672,2673],[2677,2677],[2689,2691],[2748,2748],[2750,2757],[2759,2761],[2763,2765],[2786,2787],[2810,2815],[2817,2819],[2876,2876],[2878,2884],[2887,2888],[2891,2893],[2901,2903],[2914,2915],[2946,2946],[3006,3010],[3014,3016],[3018,3021],[3031,3031],[3072,3076],[3132,3132],[3134,3140],[3142,3144],[3146,3149],[3157,3158],[3170,3171],[3201,3203],[3260,3260],[3262,3268],[3270,3272],[3274,3277],[3285,3286],[3298,3299],[3315,3315],[3328,3331],[3387,3388],[3390,3396],[3398,3400],[3402,3405],[3415,3415],[3426,3427],[3457,3459],[3530,3530],[3535,3540],[3542,3542],[3544,3551],[3570,3571],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3772],[3784,3790],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3902,3903],[3953,3972],[3974,3975],[3981,3991],[3993,4028],[4038,4038],[4139,4158],[4182,4185],[4190,4192],[4194,4196],[4199,4205],[4209,4212],[4226,4237],[4239,4239],[4250,4253],[4957,4959],[5906,5909],[5938,5940],[5970,5971],[6002,6003],[6068,6099],[6109,6109],[6155,6157],[6159,6159],[6277,6278],[6313,6313],[6432,6443],[6448,6459],[6679,6683],[6741,6750],[6752,6780],[6783,6783],[6832,6862],[6912,6916],[6964,6980],[7019,7027],[7040,7042],[7073,7085],[7142,7155],[7204,7223],[7376,7378],[7380,7400],[7405,7405],[7412,7412],[7415,7417],[7616,7679],[8204,8204],[8400,8432],[11503,11505],[11647,11647],[11744,11775],[12330,12335],[12441,12442],[42607,42610],[42612,42621],[42654,42655],[42736,42737],[43010,43010],[43014,43014],[43019,43019],[43043,43047],[43052,43052],[43136,43137],[43188,43205],[43232,43249],[43263,43263],[43302,43309],[43335,43347],[43392,43395],[43443,43456],[43493,43493],[43561,43574],[43587,43587],[43596,43597],[43643,43645],[43696,43696],[43698,43700],[43703,43704],[43710,43711],[43713,43713],[43755,43759],[43765,43766],[44003,44010],[44012,44013],[64286,64286],[65024,65039],[65056,65071],[65438,65439],[66045,66045],[66272,66272],[66422,66426],[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[68325,68326],[68900,68903],[69291,69292],[69373,69375],[69446,69456],[69506,69509],[69632,69634],[69688,69702],[69744,69744],[69747,69748],[69759,69762],[69808,69818],[69826,69826],[69888,69890],[69927,69940],[69957,69958],[70003,70003],[70016,70018],[70067,70080],[70089,70092],[70094,70095],[70188,70199],[70206,70206],[70209,70209],[70367,70378],[70400,70403],[70459,70460],[70462,70468],[70471,70472],[70475,70477],[70487,70487],[70498,70499],[70502,70508],[70512,70516],[70709,70726],[70750,70750],[70832,70851],[71087,71093],[71096,71104],[71132,71133],[71216,71232],[71339,71351],[71453,71467],[71724,71738],[71984,71989],[71991,71992],[71995,71998],[72000,72000],[72002,72003],[72145,72151],[72154,72160],[72164,72164],[72193,72202],[72243,72249],[72251,72254],[72263,72263],[72273,72283],[72330,72345],[72751,72758],[72760,72767],[72850,72871],[72873,72886],[73009,73014],[73018,73018],[73020,73021],[73023,73029],[73031,73031],[73098,73102],[73104,73105],[73107,73111],[73459,73462],[73472,73473],[73475,73475],[73524,73530],[73534,73538],[78912,78912],[78919,78933],[92912,92916],[92976,92982],[94031,94031],[94033,94087],[94095,94098],[94180,94180],[94192,94193],[113821,113822],[118528,118573],[118576,118598],[119141,119145],[119149,119154],[119163,119170],[119173,119179],[119210,119213],[119362,119364],[121344,121398],[121403,121452],[121461,121461],[121476,121476],[121499,121503],[121505,121519],[122880,122886],[122888,122904],[122907,122913],[122915,122916],[122918,122922],[123023,123023],[123184,123190],[123566,123566],[123628,123631],[124140,124143],[125136,125142],[125252,125258],[127995,127999],[917536,917631],[917760,917999]],"General_Category/Initial_Punctuation":[[171,171],[8216,8216],[8219,8220],[8223,8223],[8249,8249],[11778,11778],[11780,11780],[11785,11785],[11788,11788],[11804,11804],[11808,11808]],"General_Category/Number":[[48,57],[178,179],[185,185],[188,190],[1632,1641],[1776,1785],[1984,1993],[2406,2415],[2534,2543],[2548,2553],[2662,2671],[2790,2799],[2918,2927],[2930,2935],[3046,3058],[3174,3183],[3192,3198],[3302,3311],[3416,3422],[3430,3448],[3558,3567],[3664,3673],[3792,3801],[3872,3891],[4160,4169],[4240,4249],[4969,4988],[5870,5872],[6112,6121],[6128,6137],[6160,6169],[6470,6479],[6608,6618],[6784,6793],[6800,6809],[6992,7001],[7088,7097],[7232,7241],[7248,7257],[8304,8304],[8308,8313],[8320,8329],[8528,8578],[8581,8585],[9312,9371],[9450,9471],[10102,10131],[11517,11517],[12295,12295],[12321,12329],[12344,12346],[12690,12693],[12832,12841],[12872,12879],[12881,12895],[12928,12937],[12977,12991],[42528,42537],[42726,42735],[43056,43061],[43216,43225],[43264,43273],[43472,43481],[43504,43513],[43600,43609],[44016,44025],[65296,65305],[65799,65843],[65856,65912],[65930,65931],[66273,66299],[66336,66339],[66369,66369],[66378,66378],[66513,66517],[66720,66729],[67672,67679],[67705,67711],[67751,67759],[67835,67839],[67862,67867],[68028,68029],[68032,68047],[68050,68095],[68160,68168],[68221,68222],[68253,68255],[68331,68335],[68440,68447],[68472,68479],[68521,68527],[68858,68863],[68912,68921],[69216,69246],[69405,69414],[69457,69460],[69573,69579],[69714,69743],[69872,69881],[69942,69951],[70096,70105],[70113,70132],[70384,70393],[70736,70745],[70864,70873],[71248,71257],[71360,71369],[71472,71483],[71904,71922],[72016,72025],[72784,72812],[73040,73049],[73120,73129],[73552,73561],[73664,73684],[74752,74862],[92768,92777],[92864,92873],[93008,93017],[93019,93025],[93824,93846],[119488,119507],[119520,119539],[119648,119672],[120782,120831],[123200,123209],[123632,123641],[124144,124153],[125127,125135],[125264,125273],[126065,126123],[126125,126127],[126129,126132],[126209,126253],[126255,126269],[127232,127244],[130032,130041]],"General_Category/Decimal_Number":[[48,57],[1632,1641],[1776,1785],[1984,1993],[2406,2415],[2534,2543],[2662,2671],[2790,2799],[2918,2927],[3046,3055],[3174,3183],[3302,3311],[3430,3439],[3558,3567],[3664,3673],[3792,3801],[3872,3881],[4160,4169],[4240,4249],[6112,6121],[6160,6169],[6470,6479],[6608,6617],[6784,6793],[6800,6809],[6992,7001],[7088,7097],[7232,7241],[7248,7257],[42528,42537],[43216,43225],[43264,43273],[43472,43481],[43504,43513],[43600,43609],[44016,44025],[65296,65305],[66720,66729],[68912,68921],[69734,69743],[69872,69881],[69942,69951],[70096,70105],[70384,70393],[70736,70745],[70864,70873],[71248,71257],[71360,71369],[71472,71481],[71904,71913],[72016,72025],[72784,72793],[73040,73049],[73120,73129],[73552,73561],[92768,92777],[92864,92873],[93008,93017],[120782,120831],[123200,123209],[123632,123641],[124144,124153],[125264,125273],[130032,130041]],"General_Category/Format":[[173,173],[1536,1541],[1564,1564],[1757,1757],[1807,1807],[2192,2193],[2274,2274],[6158,6158],[8203,8207],[8234,8238],[8288,8292],[8294,8303],[65279,65279],[65529,65531],[69821,69821],[69837,69837],[78896,78911],[113824,113827],[119155,119162],[917505,917505],[917536,917631]],"General_Category/Math_Symbol":[[43,43],[60,62],[124,124],[126,126],[172,172],[177,177],[215,215],[247,247],[1014,1014],[1542,1544],[8260,8260],[8274,8274],[8314,8316],[8330,8332],[8472,8472],[8512,8516],[8523,8523],[8592,8596],[8602,8603],[8608,8608],[8611,8611],[8614,8614],[8622,8622],[8654,8655],[8658,8658],[8660,8660],[8692,8959],[8992,8993],[9084,9084],[9115,9139],[9180,9185],[9655,9655],[9665,9665],[9720,9727],[9839,9839],[10176,10180],[10183,10213],[10224,10239],[10496,10626],[10649,10711],[10716,10747],[10750,11007],[11056,11076],[11079,11084],[64297,64297],[65122,65122],[65124,65126],[65291,65291],[65308,65310],[65372,65372],[65374,65374],[65506,65506],[65513,65516],[120513,120513],[120539,120539],[120571,120571],[120597,120597],[120629,120629],[120655,120655],[120687,120687],[120713,120713],[120745,120745],[120771,120771],[126704,126705]],"General_Category/Lowercase_Letter":[[97,122],[181,181],[223,246],[248,255],[257,257],[259,259],[261,261],[263,263],[265,265],[267,267],[269,269],[271,271],[273,273],[275,275],[277,277],[279,279],[281,281],[283,283],[285,285],[287,287],[289,289],[291,291],[293,293],[295,295],[297,297],[299,299],[301,301],[303,303],[305,305],[307,307],[309,309],[311,312],[314,314],[316,316],[318,318],[320,320],[322,322],[324,324],[326,326],[328,329],[331,331],[333,333],[335,335],[337,337],[339,339],[341,341],[343,343],[345,345],[347,347],[349,349],[351,351],[353,353],[355,355],[357,357],[359,359],[361,361],[363,363],[365,365],[367,367],[369,369],[371,371],[373,373],[375,375],[378,378],[380,380],[382,384],[387,387],[389,389],[392,392],[396,397],[402,402],[405,405],[409,411],[414,414],[417,417],[419,419],[421,421],[424,424],[426,427],[429,429],[432,432],[436,436],[438,438],[441,442],[445,447],[454,454],[457,457],[460,460],[462,462],[464,464],[466,466],[468,468],[470,470],[472,472],[474,474],[476,477],[479,479],[481,481],[483,483],[485,485],[487,487],[489,489],[491,491],[493,493],[495,496],[499,499],[501,501],[505,505],[507,507],[509,509],[511,511],[513,513],[515,515],[517,517],[519,519],[521,521],[523,523],[525,525],[527,527],[529,529],[531,531],[533,533],[535,535],[537,537],[539,539],[541,541],[543,543],[545,545],[547,547],[549,549],[551,551],[553,553],[555,555],[557,557],[559,559],[561,561],[563,569],[572,572],[575,576],[578,578],[583,583],[585,585],[587,587],[589,589],[591,659],[661,687],[881,881],[883,883],[887,887],[891,893],[912,912],[940,974],[976,977],[981,983],[985,985],[987,987],[989,989],[991,991],[993,993],[995,995],[997,997],[999,999],[1001,1001],[1003,1003],[1005,1005],[1007,1011],[1013,1013],[1016,1016],[1019,1020],[1072,1119],[1121,1121],[1123,1123],[1125,1125],[1127,1127],[1129,1129],[1131,1131],[1133,1133],[1135,1135],[1137,1137],[1139,1139],[1141,1141],[1143,1143],[1145,1145],[1147,1147],[1149,1149],[1151,1151],[1153,1153],[1163,1163],[1165,1165],[1167,1167],[1169,1169],[1171,1171],[1173,1173],[1175,1175],[1177,1177],[1179,1179],[1181,1181],[1183,1183],[1185,1185],[1187,1187],[1189,1189],[1191,1191],[1193,1193],[1195,1195],[1197,1197],[1199,1199],[1201,1201],[1203,1203],[1205,1205],[1207,1207],[1209,1209],[1211,1211],[1213,1213],[1215,1215],[1218,1218],[1220,1220],[1222,1222],[1224,1224],[1226,1226],[1228,1228],[1230,1231],[1233,1233],[1235,1235],[1237,1237],[1239,1239],[1241,1241],[1243,1243],[1245,1245],[1247,1247],[1249,1249],[1251,1251],[1253,1253],[1255,1255],[1257,1257],[1259,1259],[1261,1261],[1263,1263],[1265,1265],[1267,1267],[1269,1269],[1271,1271],[1273,1273],[1275,1275],[1277,1277],[1279,1279],[1281,1281],[1283,1283],[1285,1285],[1287,1287],[1289,1289],[1291,1291],[1293,1293],[1295,1295],[1297,1297],[1299,1299],[1301,1301],[1303,1303],[1305,1305],[1307,1307],[1309,1309],[1311,1311],[1313,1313],[1315,1315],[1317,1317],[1319,1319],[1321,1321],[1323,1323],[1325,1325],[1327,1327],[1376,1416],[4304,4346],[4349,4351],[5112,5117],[7296,7304],[7424,7467],[7531,7543],[7545,7578],[7681,7681],[7683,7683],[7685,7685],[7687,7687],[7689,7689],[7691,7691],[7693,7693],[7695,7695],[7697,7697],[7699,7699],[7701,7701],[7703,7703],[7705,7705],[7707,7707],[7709,7709],[7711,7711],[7713,7713],[7715,7715],[7717,7717],[7719,7719],[7721,7721],[7723,7723],[7725,7725],[7727,7727],[7729,7729],[7731,7731],[7733,7733],[7735,7735],[7737,7737],[7739,7739],[7741,7741],[7743,7743],[7745,7745],[7747,7747],[7749,7749],[7751,7751],[7753,7753],[7755,7755],[7757,7757],[7759,7759],[7761,7761],[7763,7763],[7765,7765],[7767,7767],[7769,7769],[7771,7771],[7773,7773],[7775,7775],[7777,7777],[7779,7779],[7781,7781],[7783,7783],[7785,7785],[7787,7787],[7789,7789],[7791,7791],[7793,7793],[7795,7795],[7797,7797],[7799,7799],[7801,7801],[7803,7803],[7805,7805],[7807,7807],[7809,7809],[7811,7811],[7813,7813],[7815,7815],[7817,7817],[7819,7819],[7821,7821],[7823,7823],[7825,7825],[7827,7827],[7829,7837],[7839,7839],[7841,7841],[7843,7843],[7845,7845],[7847,7847],[7849,7849],[7851,7851],[7853,7853],[7855,7855],[7857,7857],[7859,7859],[7861,7861],[7863,7863],[7865,7865],[7867,7867],[7869,7869],[7871,7871],[7873,7873],[7875,7875],[7877,7877],[7879,7879],[7881,7881],[7883,7883],[7885,7885],[7887,7887],[7889,7889],[7891,7891],[7893,7893],[7895,7895],[7897,7897],[7899,7899],[7901,7901],[7903,7903],[7905,7905],[7907,7907],[7909,7909],[7911,7911],[7913,7913],[7915,7915],[7917,7917],[7919,7919],[7921,7921],[7923,7923],[7925,7925],[7927,7927],[7929,7929],[7931,7931],[7933,7933],[7935,7943],[7952,7957],[7968,7975],[7984,7991],[8000,8005],[8016,8023],[8032,8039],[8048,8061],[8064,8071],[8080,8087],[8096,8103],[8112,8116],[8118,8119],[8126,8126],[8130,8132],[8134,8135],[8144,8147],[8150,8151],[8160,8167],[8178,8180],[8182,8183],[8458,8458],[8462,8463],[8467,8467],[8495,8495],[8500,8500],[8505,8505],[8508,8509],[8518,8521],[8526,8526],[8580,8580],[11312,11359],[11361,11361],[11365,11366],[11368,11368],[11370,11370],[11372,11372],[11377,11377],[11379,11380],[11382,11387],[11393,11393],[11395,11395],[11397,11397],[11399,11399],[11401,11401],[11403,11403],[11405,11405],[11407,11407],[11409,11409],[11411,11411],[11413,11413],[11415,11415],[11417,11417],[11419,11419],[11421,11421],[11423,11423],[11425,11425],[11427,11427],[11429,11429],[11431,11431],[11433,11433],[11435,11435],[11437,11437],[11439,11439],[11441,11441],[11443,11443],[11445,11445],[11447,11447],[11449,11449],[11451,11451],[11453,11453],[11455,11455],[11457,11457],[11459,11459],[11461,11461],[11463,11463],[11465,11465],[11467,11467],[11469,11469],[11471,11471],[11473,11473],[11475,11475],[11477,11477],[11479,11479],[11481,11481],[11483,11483],[11485,11485],[11487,11487],[11489,11489],[11491,11492],[11500,11500],[11502,11502],[11507,11507],[11520,11557],[11559,11559],[11565,11565],[42561,42561],[42563,42563],[42565,42565],[42567,42567],[42569,42569],[42571,42571],[42573,42573],[42575,42575],[42577,42577],[42579,42579],[42581,42581],[42583,42583],[42585,42585],[42587,42587],[42589,42589],[42591,42591],[42593,42593],[42595,42595],[42597,42597],[42599,42599],[42601,42601],[42603,42603],[42605,42605],[42625,42625],[42627,42627],[42629,42629],[42631,42631],[42633,42633],[42635,42635],[42637,42637],[42639,42639],[42641,42641],[42643,42643],[42645,42645],[42647,42647],[42649,42649],[42651,42651],[42787,42787],[42789,42789],[42791,42791],[42793,42793],[42795,42795],[42797,42797],[42799,42801],[42803,42803],[42805,42805],[42807,42807],[42809,42809],[42811,42811],[42813,42813],[42815,42815],[42817,42817],[42819,42819],[42821,42821],[42823,42823],[42825,42825],[42827,42827],[42829,42829],[42831,42831],[42833,42833],[42835,42835],[42837,42837],[42839,42839],[42841,42841],[42843,42843],[42845,42845],[42847,42847],[42849,42849],[42851,42851],[42853,42853],[42855,42855],[42857,42857],[42859,42859],[42861,42861],[42863,42863],[42865,42872],[42874,42874],[42876,42876],[42879,42879],[42881,42881],[42883,42883],[42885,42885],[42887,42887],[42892,42892],[42894,42894],[42897,42897],[42899,42901],[42903,42903],[42905,42905],[42907,42907],[42909,42909],[42911,42911],[42913,42913],[42915,42915],[42917,42917],[42919,42919],[42921,42921],[42927,42927],[42933,42933],[42935,42935],[42937,42937],[42939,42939],[42941,42941],[42943,42943],[42945,42945],[42947,42947],[42952,42952],[42954,42954],[42961,42961],[42963,42963],[42965,42965],[42967,42967],[42969,42969],[42998,42998],[43002,43002],[43824,43866],[43872,43880],[43888,43967],[64256,64262],[64275,64279],[65345,65370],[66600,66639],[66776,66811],[66967,66977],[66979,66993],[66995,67001],[67003,67004],[68800,68850],[71872,71903],[93792,93823],[119834,119859],[119886,119892],[119894,119911],[119938,119963],[119990,119993],[119995,119995],[119997,120003],[120005,120015],[120042,120067],[120094,120119],[120146,120171],[120198,120223],[120250,120275],[120302,120327],[120354,120379],[120406,120431],[120458,120485],[120514,120538],[120540,120545],[120572,120596],[120598,120603],[120630,120654],[120656,120661],[120688,120712],[120714,120719],[120746,120770],[120772,120777],[120779,120779],[122624,122633],[122635,122654],[122661,122666],[125218,125251]],"General_Category/Other_Symbol":[[166,166],[169,169],[174,174],[176,176],[1154,1154],[1421,1422],[1550,1551],[1758,1758],[1769,1769],[1789,1790],[2038,2038],[2554,2554],[2928,2928],[3059,3064],[3066,3066],[3199,3199],[3407,3407],[3449,3449],[3841,3843],[3859,3859],[3861,3863],[3866,3871],[3892,3892],[3894,3894],[3896,3896],[4030,4037],[4039,4044],[4046,4047],[4053,4056],[4254,4255],[5008,5017],[5741,5741],[6464,6464],[6622,6655],[7009,7018],[7028,7036],[8448,8449],[8451,8454],[8456,8457],[8468,8468],[8470,8471],[8478,8483],[8485,8485],[8487,8487],[8489,8489],[8494,8494],[8506,8507],[8522,8522],[8524,8525],[8527,8527],[8586,8587],[8597,8601],[8604,8607],[8609,8610],[8612,8613],[8615,8621],[8623,8653],[8656,8657],[8659,8659],[8661,8691],[8960,8967],[8972,8991],[8994,9000],[9003,9083],[9085,9114],[9140,9179],[9186,9254],[9280,9290],[9372,9449],[9472,9654],[9656,9664],[9666,9719],[9728,9838],[9840,10087],[10132,10175],[10240,10495],[11008,11055],[11077,11078],[11085,11123],[11126,11157],[11159,11263],[11493,11498],[11856,11857],[11904,11929],[11931,12019],[12032,12245],[12272,12283],[12292,12292],[12306,12307],[12320,12320],[12342,12343],[12350,12351],[12688,12689],[12694,12703],[12736,12771],[12800,12830],[12842,12871],[12880,12880],[12896,12927],[12938,12976],[12992,13311],[19904,19967],[42128,42182],[43048,43051],[43062,43063],[43065,43065],[43639,43641],[64832,64847],[64975,64975],[65021,65023],[65508,65508],[65512,65512],[65517,65518],[65532,65533],[65847,65855],[65913,65929],[65932,65934],[65936,65948],[65952,65952],[66000,66044],[67703,67704],[68296,68296],[71487,71487],[73685,73692],[73697,73713],[92988,92991],[92997,92997],[113820,113820],[118608,118723],[118784,119029],[119040,119078],[119081,119140],[119146,119148],[119171,119172],[119180,119209],[119214,119274],[119296,119361],[119365,119365],[119552,119638],[120832,121343],[121399,121402],[121453,121460],[121462,121475],[121477,121478],[123215,123215],[126124,126124],[126254,126254],[126976,127019],[127024,127123],[127136,127150],[127153,127167],[127169,127183],[127185,127221],[127245,127405],[127462,127490],[127504,127547],[127552,127560],[127568,127569],[127584,127589],[127744,127994],[128000,128727],[128732,128748],[128752,128764],[128768,128886],[128891,128985],[128992,129003],[129008,129008],[129024,129035],[129040,129095],[129104,129113],[129120,129159],[129168,129197],[129200,129201],[129280,129619],[129632,129645],[129648,129660],[129664,129672],[129680,129725],[129727,129733],[129742,129755],[129760,129768],[129776,129784],[129792,129938],[129940,129994]],"General_Category/Space_Separator":[[32,32],[160,160],[5760,5760],[8192,8202],[8239,8239],[8287,8287],[12288,12288]],"General_Category/Modifier_Letter":[[688,705],[710,721],[736,740],[748,748],[750,750],[884,884],[890,890],[1369,1369],[1600,1600],[1765,1766],[2036,2037],[2042,2042],[2074,2074],[2084,2084],[2088,2088],[2249,2249],[2417,2417],[3654,3654],[3782,3782],[4348,4348],[6103,6103],[6211,6211],[6823,6823],[7288,7293],[7468,7530],[7544,7544],[7579,7615],[8305,8305],[8319,8319],[8336,8348],[11388,11389],[11631,11631],[11823,11823],[12293,12293],[12337,12341],[12347,12347],[12445,12446],[12540,12542],[40981,40981],[42232,42237],[42508,42508],[42623,42623],[42652,42653],[42775,42783],[42864,42864],[42888,42888],[42994,42996],[43000,43001],[43471,43471],[43494,43494],[43632,43632],[43741,43741],[43763,43764],[43868,43871],[43881,43881],[65392,65392],[65438,65439],[67456,67461],[67463,67504],[67506,67514],[92992,92995],[94099,94111],[94176,94177],[94179,94179],[110576,110579],[110581,110587],[110589,110590],[122928,122989],[123191,123197],[124139,124139],[125259,125259]],"General_Category/Uppercase_Letter":[[65,90],[192,214],[216,222],[256,256],[258,258],[260,260],[262,262],[264,264],[266,266],[268,268],[270,270],[272,272],[274,274],[276,276],[278,278],[280,280],[282,282],[284,284],[286,286],[288,288],[290,290],[292,292],[294,294],[296,296],[298,298],[300,300],[302,302],[304,304],[306,306],[308,308],[310,310],[313,313],[315,315],[317,317],[319,319],[321,321],[323,323],[325,325],[327,327],[330,330],[332,332],[334,334],[336,336],[338,338],[340,340],[342,342],[344,344],[346,346],[348,348],[350,350],[352,352],[354,354],[356,356],[358,358],[360,360],[362,362],[364,364],[366,366],[368,368],[370,370],[372,372],[374,374],[376,377],[379,379],[381,381],[385,386],[388,388],[390,391],[393,395],[398,401],[403,404],[406,408],[412,413],[415,416],[418,418],[420,420],[422,423],[425,425],[428,428],[430,431],[433,435],[437,437],[439,440],[444,444],[452,452],[455,455],[458,458],[461,461],[463,463],[465,465],[467,467],[469,469],[471,471],[473,473],[475,475],[478,478],[480,480],[482,482],[484,484],[486,486],[488,488],[490,490],[492,492],[494,494],[497,497],[500,500],[502,504],[506,506],[508,508],[510,510],[512,512],[514,514],[516,516],[518,518],[520,520],[522,522],[524,524],[526,526],[528,528],[530,530],[532,532],[534,534],[536,536],[538,538],[540,540],[542,542],[544,544],[546,546],[548,548],[550,550],[552,552],[554,554],[556,556],[558,558],[560,560],[562,562],[570,571],[573,574],[577,577],[579,582],[584,584],[586,586],[588,588],[590,590],[880,880],[882,882],[886,886],[895,895],[902,902],[904,906],[908,908],[910,911],[913,929],[931,939],[975,975],[978,980],[984,984],[986,986],[988,988],[990,990],[992,992],[994,994],[996,996],[998,998],[1000,1000],[1002,1002],[1004,1004],[1006,1006],[1012,1012],[1015,1015],[1017,1018],[1021,1071],[1120,1120],[1122,1122],[1124,1124],[1126,1126],[1128,1128],[1130,1130],[1132,1132],[1134,1134],[1136,1136],[1138,1138],[1140,1140],[1142,1142],[1144,1144],[1146,1146],[1148,1148],[1150,1150],[1152,1152],[1162,1162],[1164,1164],[1166,1166],[1168,1168],[1170,1170],[1172,1172],[1174,1174],[1176,1176],[1178,1178],[1180,1180],[1182,1182],[1184,1184],[1186,1186],[1188,1188],[1190,1190],[1192,1192],[1194,1194],[1196,1196],[1198,1198],[1200,1200],[1202,1202],[1204,1204],[1206,1206],[1208,1208],[1210,1210],[1212,1212],[1214,1214],[1216,1217],[1219,1219],[1221,1221],[1223,1223],[1225,1225],[1227,1227],[1229,1229],[1232,1232],[1234,1234],[1236,1236],[1238,1238],[1240,1240],[1242,1242],[1244,1244],[1246,1246],[1248,1248],[1250,1250],[1252,1252],[1254,1254],[1256,1256],[1258,1258],[1260,1260],[1262,1262],[1264,1264],[1266,1266],[1268,1268],[1270,1270],[1272,1272],[1274,1274],[1276,1276],[1278,1278],[1280,1280],[1282,1282],[1284,1284],[1286,1286],[1288,1288],[1290,1290],[1292,1292],[1294,1294],[1296,1296],[1298,1298],[1300,1300],[1302,1302],[1304,1304],[1306,1306],[1308,1308],[1310,1310],[1312,1312],[1314,1314],[1316,1316],[1318,1318],[1320,1320],[1322,1322],[1324,1324],[1326,1326],[1329,1366],[4256,4293],[4295,4295],[4301,4301],[5024,5109],[7312,7354],[7357,7359],[7680,7680],[7682,7682],[7684,7684],[7686,7686],[7688,7688],[7690,7690],[7692,7692],[7694,7694],[7696,7696],[7698,7698],[7700,7700],[7702,7702],[7704,7704],[7706,7706],[7708,7708],[7710,7710],[7712,7712],[7714,7714],[7716,7716],[7718,7718],[7720,7720],[7722,7722],[7724,7724],[7726,7726],[7728,7728],[7730,7730],[7732,7732],[7734,7734],[7736,7736],[7738,7738],[7740,7740],[7742,7742],[7744,7744],[7746,7746],[7748,7748],[7750,7750],[7752,7752],[7754,7754],[7756,7756],[7758,7758],[7760,7760],[7762,7762],[7764,7764],[7766,7766],[7768,7768],[7770,7770],[7772,7772],[7774,7774],[7776,7776],[7778,7778],[7780,7780],[7782,7782],[7784,7784],[7786,7786],[7788,7788],[7790,7790],[7792,7792],[7794,7794],[7796,7796],[7798,7798],[7800,7800],[7802,7802],[7804,7804],[7806,7806],[7808,7808],[7810,7810],[7812,7812],[7814,7814],[7816,7816],[7818,7818],[7820,7820],[7822,7822],[7824,7824],[7826,7826],[7828,7828],[7838,7838],[7840,7840],[7842,7842],[7844,7844],[7846,7846],[7848,7848],[7850,7850],[7852,7852],[7854,7854],[7856,7856],[7858,7858],[7860,7860],[7862,7862],[7864,7864],[7866,7866],[7868,7868],[7870,7870],[7872,7872],[7874,7874],[7876,7876],[7878,7878],[7880,7880],[7882,7882],[7884,7884],[7886,7886],[7888,7888],[7890,7890],[7892,7892],[7894,7894],[7896,7896],[7898,7898],[7900,7900],[7902,7902],[7904,7904],[7906,7906],[7908,7908],[7910,7910],[7912,7912],[7914,7914],[7916,7916],[7918,7918],[7920,7920],[7922,7922],[7924,7924],[7926,7926],[7928,7928],[7930,7930],[7932,7932],[7934,7934],[7944,7951],[7960,7965],[7976,7983],[7992,7999],[8008,8013],[8025,8025],[8027,8027],[8029,8029],[8031,8031],[8040,8047],[8120,8123],[8136,8139],[8152,8155],[8168,8172],[8184,8187],[8450,8450],[8455,8455],[8459,8461],[8464,8466],[8469,8469],[8473,8477],[8484,8484],[8486,8486],[8488,8488],[8490,8493],[8496,8499],[8510,8511],[8517,8517],[8579,8579],[11264,11311],[11360,11360],[11362,11364],[11367,11367],[11369,11369],[11371,11371],[11373,11376],[11378,11378],[11381,11381],[11390,11392],[11394,11394],[11396,11396],[11398,11398],[11400,11400],[11402,11402],[11404,11404],[11406,11406],[11408,11408],[11410,11410],[11412,11412],[11414,11414],[11416,11416],[11418,11418],[11420,11420],[11422,11422],[11424,11424],[11426,11426],[11428,11428],[11430,11430],[11432,11432],[11434,11434],[11436,11436],[11438,11438],[11440,11440],[11442,11442],[11444,11444],[11446,11446],[11448,11448],[11450,11450],[11452,11452],[11454,11454],[11456,11456],[11458,11458],[11460,11460],[11462,11462],[11464,11464],[11466,11466],[11468,11468],[11470,11470],[11472,11472],[11474,11474],[11476,11476],[11478,11478],[11480,11480],[11482,11482],[11484,11484],[11486,11486],[11488,11488],[11490,11490],[11499,11499],[11501,11501],[11506,11506],[42560,42560],[42562,42562],[42564,42564],[42566,42566],[42568,42568],[42570,42570],[42572,42572],[42574,42574],[42576,42576],[42578,42578],[42580,42580],[42582,42582],[42584,42584],[42586,42586],[42588,42588],[42590,42590],[42592,42592],[42594,42594],[42596,42596],[42598,42598],[42600,42600],[42602,42602],[42604,42604],[42624,42624],[42626,42626],[42628,42628],[42630,42630],[42632,42632],[42634,42634],[42636,42636],[42638,42638],[42640,42640],[42642,42642],[42644,42644],[42646,42646],[42648,42648],[42650,42650],[42786,42786],[42788,42788],[42790,42790],[42792,42792],[42794,42794],[42796,42796],[42798,42798],[42802,42802],[42804,42804],[42806,42806],[42808,42808],[42810,42810],[42812,42812],[42814,42814],[42816,42816],[42818,42818],[42820,42820],[42822,42822],[42824,42824],[42826,42826],[42828,42828],[42830,42830],[42832,42832],[42834,42834],[42836,42836],[42838,42838],[42840,42840],[42842,42842],[42844,42844],[42846,42846],[42848,42848],[42850,42850],[42852,42852],[42854,42854],[42856,42856],[42858,42858],[42860,42860],[42862,42862],[42873,42873],[42875,42875],[42877,42878],[42880,42880],[42882,42882],[42884,42884],[42886,42886],[42891,42891],[42893,42893],[42896,42896],[42898,42898],[42902,42902],[42904,42904],[42906,42906],[42908,42908],[42910,42910],[42912,42912],[42914,42914],[42916,42916],[42918,42918],[42920,42920],[42922,42926],[42928,42932],[42934,42934],[42936,42936],[42938,42938],[42940,42940],[42942,42942],[42944,42944],[42946,42946],[42948,42951],[42953,42953],[42960,42960],[42966,42966],[42968,42968],[42997,42997],[65313,65338],[66560,66599],[66736,66771],[66928,66938],[66940,66954],[66956,66962],[66964,66965],[68736,68786],[71840,71871],[93760,93791],[119808,119833],[119860,119885],[119912,119937],[119964,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119989],[120016,120041],[120068,120069],[120071,120074],[120077,120084],[120086,120092],[120120,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120172,120197],[120224,120249],[120276,120301],[120328,120353],[120380,120405],[120432,120457],[120488,120512],[120546,120570],[120604,120628],[120662,120686],[120720,120744],[120778,120778],[125184,125217]],"General_Category/Cased_Letter":[[65,90],[97,122],[181,181],[192,214],[216,246],[248,442],[444,447],[452,659],[661,687],[880,883],[886,887],[891,893],[895,895],[902,902],[904,906],[908,908],[910,929],[931,1013],[1015,1153],[1162,1327],[1329,1366],[1376,1416],[4256,4293],[4295,4295],[4301,4301],[4304,4346],[4349,4351],[5024,5109],[5112,5117],[7296,7304],[7312,7354],[7357,7359],[7424,7467],[7531,7543],[7545,7578],[7680,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025,8025],[8027,8027],[8029,8029],[8031,8061],[8064,8116],[8118,8124],[8126,8126],[8130,8132],[8134,8140],[8144,8147],[8150,8155],[8160,8172],[8178,8180],[8182,8188],[8450,8450],[8455,8455],[8458,8467],[8469,8469],[8473,8477],[8484,8484],[8486,8486],[8488,8488],[8490,8493],[8495,8500],[8505,8505],[8508,8511],[8517,8521],[8526,8526],[8579,8580],[11264,11387],[11390,11492],[11499,11502],[11506,11507],[11520,11557],[11559,11559],[11565,11565],[42560,42605],[42624,42651],[42786,42863],[42865,42887],[42891,42894],[42896,42954],[42960,42961],[42963,42963],[42965,42969],[42997,42998],[43002,43002],[43824,43866],[43872,43880],[43888,43967],[64256,64262],[64275,64279],[65313,65338],[65345,65370],[66560,66639],[66736,66771],[66776,66811],[66928,66938],[66940,66954],[66956,66962],[66964,66965],[66967,66977],[66979,66993],[66995,67001],[67003,67004],[68736,68786],[68800,68850],[71840,71903],[93760,93823],[119808,119892],[119894,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119993],[119995,119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120146,120485],[120488,120512],[120514,120538],[120540,120570],[120572,120596],[120598,120628],[120630,120654],[120656,120686],[120688,120712],[120714,120744],[120746,120770],[120772,120779],[122624,122633],[122635,122654],[122661,122666],[125184,125251]],"General_Category/Dash_Punctuation":[[45,45],[1418,1418],[1470,1470],[5120,5120],[6150,6150],[8208,8213],[11799,11799],[11802,11802],[11834,11835],[11840,11840],[11869,11869],[12316,12316],[12336,12336],[12448,12448],[65073,65074],[65112,65112],[65123,65123],[65293,65293],[69293,69293]],"General_Category/Punctuation":[[33,35],[37,42],[44,47],[58,59],[63,64],[91,93],[95,95],[123,123],[125,125],[161,161],[167,167],[171,171],[182,183],[187,187],[191,191],[894,894],[903,903],[1370,1375],[1417,1418],[1470,1470],[1472,1472],[1475,1475],[1478,1478],[1523,1524],[1545,1546],[1548,1549],[1563,1563],[1565,1567],[1642,1645],[1748,1748],[1792,1805],[2039,2041],[2096,2110],[2142,2142],[2404,2405],[2416,2416],[2557,2557],[2678,2678],[2800,2800],[3191,3191],[3204,3204],[3572,3572],[3663,3663],[3674,3675],[3844,3858],[3860,3860],[3898,3901],[3973,3973],[4048,4052],[4057,4058],[4170,4175],[4347,4347],[4960,4968],[5120,5120],[5742,5742],[5787,5788],[5867,5869],[5941,5942],[6100,6102],[6104,6106],[6144,6154],[6468,6469],[6686,6687],[6816,6822],[6824,6829],[7002,7008],[7037,7038],[7164,7167],[7227,7231],[7294,7295],[7360,7367],[7379,7379],[8208,8231],[8240,8259],[8261,8273],[8275,8286],[8317,8318],[8333,8334],[8968,8971],[9001,9002],[10088,10101],[10181,10182],[10214,10223],[10627,10648],[10712,10715],[10748,10749],[11513,11516],[11518,11519],[11632,11632],[11776,11822],[11824,11855],[11858,11869],[12289,12291],[12296,12305],[12308,12319],[12336,12336],[12349,12349],[12448,12448],[12539,12539],[42238,42239],[42509,42511],[42611,42611],[42622,42622],[42738,42743],[43124,43127],[43214,43215],[43256,43258],[43260,43260],[43310,43311],[43359,43359],[43457,43469],[43486,43487],[43612,43615],[43742,43743],[43760,43761],[44011,44011],[64830,64831],[65040,65049],[65072,65106],[65108,65121],[65123,65123],[65128,65128],[65130,65131],[65281,65283],[65285,65290],[65292,65295],[65306,65307],[65311,65312],[65339,65341],[65343,65343],[65371,65371],[65373,65373],[65375,65381],[65792,65794],[66463,66463],[66512,66512],[66927,66927],[67671,67671],[67871,67871],[67903,67903],[68176,68184],[68223,68223],[68336,68342],[68409,68415],[68505,68508],[69293,69293],[69461,69465],[69510,69513],[69703,69709],[69819,69820],[69822,69825],[69952,69955],[70004,70005],[70085,70088],[70093,70093],[70107,70107],[70109,70111],[70200,70205],[70313,70313],[70731,70735],[70746,70747],[70749,70749],[70854,70854],[71105,71127],[71233,71235],[71264,71276],[71353,71353],[71484,71486],[71739,71739],[72004,72006],[72162,72162],[72255,72262],[72346,72348],[72350,72354],[72448,72457],[72769,72773],[72816,72817],[73463,73464],[73539,73551],[73727,73727],[74864,74868],[77809,77810],[92782,92783],[92917,92917],[92983,92987],[92996,92996],[93847,93850],[94178,94178],[113823,113823],[121479,121483],[125278,125279]],"General_Category/Connector_Punctuation":[[95,95],[8255,8256],[8276,8276],[65075,65076],[65101,65103],[65343,65343]],"General_Category/Enclosing_Mark":[[1160,1161],[6846,6846],[8413,8416],[8418,8420],[42608,42610]],"General_Category/Surrogate":[[55296,57343]],"General_Category/Other_Punctuation":[[33,35],[37,39],[42,42],[44,44],[46,47],[58,59],[63,64],[92,92],[161,161],[167,167],[182,183],[191,191],[894,894],[903,903],[1370,1375],[1417,1417],[1472,1472],[1475,1475],[1478,1478],[1523,1524],[1545,1546],[1548,1549],[1563,1563],[1565,1567],[1642,1645],[1748,1748],[1792,1805],[2039,2041],[2096,2110],[2142,2142],[2404,2405],[2416,2416],[2557,2557],[2678,2678],[2800,2800],[3191,3191],[3204,3204],[3572,3572],[3663,3663],[3674,3675],[3844,3858],[3860,3860],[3973,3973],[4048,4052],[4057,4058],[4170,4175],[4347,4347],[4960,4968],[5742,5742],[5867,5869],[5941,5942],[6100,6102],[6104,6106],[6144,6149],[6151,6154],[6468,6469],[6686,6687],[6816,6822],[6824,6829],[7002,7008],[7037,7038],[7164,7167],[7227,7231],[7294,7295],[7360,7367],[7379,7379],[8214,8215],[8224,8231],[8240,8248],[8251,8254],[8257,8259],[8263,8273],[8275,8275],[8277,8286],[11513,11516],[11518,11519],[11632,11632],[11776,11777],[11782,11784],[11787,11787],[11790,11798],[11800,11801],[11803,11803],[11806,11807],[11818,11822],[11824,11833],[11836,11839],[11841,11841],[11843,11855],[11858,11860],[12289,12291],[12349,12349],[12539,12539],[42238,42239],[42509,42511],[42611,42611],[42622,42622],[42738,42743],[43124,43127],[43214,43215],[43256,43258],[43260,43260],[43310,43311],[43359,43359],[43457,43469],[43486,43487],[43612,43615],[43742,43743],[43760,43761],[44011,44011],[65040,65046],[65049,65049],[65072,65072],[65093,65094],[65097,65100],[65104,65106],[65108,65111],[65119,65121],[65128,65128],[65130,65131],[65281,65283],[65285,65287],[65290,65290],[65292,65292],[65294,65295],[65306,65307],[65311,65312],[65340,65340],[65377,65377],[65380,65381],[65792,65794],[66463,66463],[66512,66512],[66927,66927],[67671,67671],[67871,67871],[67903,67903],[68176,68184],[68223,68223],[68336,68342],[68409,68415],[68505,68508],[69461,69465],[69510,69513],[69703,69709],[69819,69820],[69822,69825],[69952,69955],[70004,70005],[70085,70088],[70093,70093],[70107,70107],[70109,70111],[70200,70205],[70313,70313],[70731,70735],[70746,70747],[70749,70749],[70854,70854],[71105,71127],[71233,71235],[71264,71276],[71353,71353],[71484,71486],[71739,71739],[72004,72006],[72162,72162],[72255,72262],[72346,72348],[72350,72354],[72448,72457],[72769,72773],[72816,72817],[73463,73464],[73539,73551],[73727,73727],[74864,74868],[77809,77810],[92782,92783],[92917,92917],[92983,92987],[92996,92996],[93847,93850],[94178,94178],[113823,113823],[121479,121483],[125278,125279]],"General_Category/Letter_Number":[[5870,5872],[8544,8578],[8581,8584],[12295,12295],[12321,12329],[12344,12346],[42726,42735],[65856,65908],[66369,66369],[66378,66378],[66513,66517],[74752,74862]],"General_Category/Other_Letter":[[170,170],[186,186],[443,443],[448,451],[660,660],[1488,1514],[1519,1522],[1568,1599],[1601,1610],[1646,1647],[1649,1747],[1749,1749],[1774,1775],[1786,1788],[1791,1791],[1808,1808],[1810,1839],[1869,1957],[1969,1969],[1994,2026],[2048,2069],[2112,2136],[2144,2154],[2160,2183],[2185,2190],[2208,2248],[2308,2361],[2365,2365],[2384,2384],[2392,2401],[2418,2432],[2437,2444],[2447,2448],[2451,2472],[2474,2480],[2482,2482],[2486,2489],[2493,2493],[2510,2510],[2524,2525],[2527,2529],[2544,2545],[2556,2556],[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2649,2652],[2654,2654],[2674,2676],[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],[2749,2749],[2768,2768],[2784,2785],[2809,2809],[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2877,2877],[2908,2909],[2911,2913],[2929,2929],[2947,2947],[2949,2954],[2958,2960],[2962,2965],[2969,2970],[2972,2972],[2974,2975],[2979,2980],[2984,2986],[2990,3001],[3024,3024],[3077,3084],[3086,3088],[3090,3112],[3114,3129],[3133,3133],[3160,3162],[3165,3165],[3168,3169],[3200,3200],[3205,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],[3261,3261],[3293,3294],[3296,3297],[3313,3314],[3332,3340],[3342,3344],[3346,3386],[3389,3389],[3406,3406],[3412,3414],[3423,3425],[3450,3455],[3461,3478],[3482,3505],[3507,3515],[3517,3517],[3520,3526],[3585,3632],[3634,3635],[3648,3653],[3713,3714],[3716,3716],[3718,3722],[3724,3747],[3749,3749],[3751,3760],[3762,3763],[3773,3773],[3776,3780],[3804,3807],[3840,3840],[3904,3911],[3913,3948],[3976,3980],[4096,4138],[4159,4159],[4176,4181],[4186,4189],[4193,4193],[4197,4198],[4206,4208],[4213,4225],[4238,4238],[4352,4680],[4682,4685],[4688,4694],[4696,4696],[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],[4800,4800],[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4992,5007],[5121,5740],[5743,5759],[5761,5786],[5792,5866],[5873,5880],[5888,5905],[5919,5937],[5952,5969],[5984,5996],[5998,6000],[6016,6067],[6108,6108],[6176,6210],[6212,6264],[6272,6276],[6279,6312],[6314,6314],[6320,6389],[6400,6430],[6480,6509],[6512,6516],[6528,6571],[6576,6601],[6656,6678],[6688,6740],[6917,6963],[6981,6988],[7043,7072],[7086,7087],[7098,7141],[7168,7203],[7245,7247],[7258,7287],[7401,7404],[7406,7411],[7413,7414],[7418,7418],[8501,8504],[11568,11623],[11648,11670],[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[12294,12294],[12348,12348],[12353,12438],[12447,12447],[12449,12538],[12543,12543],[12549,12591],[12593,12686],[12704,12735],[12784,12799],[13312,19903],[19968,40980],[40982,42124],[42192,42231],[42240,42507],[42512,42527],[42538,42539],[42606,42606],[42656,42725],[42895,42895],[42999,42999],[43003,43009],[43011,43013],[43015,43018],[43020,43042],[43072,43123],[43138,43187],[43250,43255],[43259,43259],[43261,43262],[43274,43301],[43312,43334],[43360,43388],[43396,43442],[43488,43492],[43495,43503],[43514,43518],[43520,43560],[43584,43586],[43588,43595],[43616,43631],[43633,43638],[43642,43642],[43646,43695],[43697,43697],[43701,43702],[43705,43709],[43712,43712],[43714,43714],[43739,43740],[43744,43754],[43762,43762],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822],[43968,44002],[44032,55203],[55216,55238],[55243,55291],[63744,64109],[64112,64217],[64285,64285],[64287,64296],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64433],[64467,64829],[64848,64911],[64914,64967],[65008,65019],[65136,65140],[65142,65276],[65382,65391],[65393,65437],[65440,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500],[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786],[66176,66204],[66208,66256],[66304,66335],[66349,66368],[66370,66377],[66384,66421],[66432,66461],[66464,66499],[66504,66511],[66640,66717],[66816,66855],[66864,66915],[67072,67382],[67392,67413],[67424,67431],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67669],[67680,67702],[67712,67742],[67808,67826],[67828,67829],[67840,67861],[67872,67897],[67968,68023],[68030,68031],[68096,68096],[68112,68115],[68117,68119],[68121,68149],[68192,68220],[68224,68252],[68288,68295],[68297,68324],[68352,68405],[68416,68437],[68448,68466],[68480,68497],[68608,68680],[68864,68899],[69248,69289],[69296,69297],[69376,69404],[69415,69415],[69424,69445],[69488,69505],[69552,69572],[69600,69622],[69635,69687],[69745,69746],[69749,69749],[69763,69807],[69840,69864],[69891,69926],[69956,69956],[69959,69959],[69968,70002],[70006,70006],[70019,70066],[70081,70084],[70106,70106],[70108,70108],[70144,70161],[70163,70187],[70207,70208],[70272,70278],[70280,70280],[70282,70285],[70287,70301],[70303,70312],[70320,70366],[70405,70412],[70415,70416],[70419,70440],[70442,70448],[70450,70451],[70453,70457],[70461,70461],[70480,70480],[70493,70497],[70656,70708],[70727,70730],[70751,70753],[70784,70831],[70852,70853],[70855,70855],[71040,71086],[71128,71131],[71168,71215],[71236,71236],[71296,71338],[71352,71352],[71424,71450],[71488,71494],[71680,71723],[71935,71942],[71945,71945],[71948,71955],[71957,71958],[71960,71983],[71999,71999],[72001,72001],[72096,72103],[72106,72144],[72161,72161],[72163,72163],[72192,72192],[72203,72242],[72250,72250],[72272,72272],[72284,72329],[72349,72349],[72368,72440],[72704,72712],[72714,72750],[72768,72768],[72818,72847],[72960,72966],[72968,72969],[72971,73008],[73030,73030],[73056,73061],[73063,73064],[73066,73097],[73112,73112],[73440,73458],[73474,73474],[73476,73488],[73490,73523],[73648,73648],[73728,74649],[74880,75075],[77712,77808],[77824,78895],[78913,78918],[82944,83526],[92160,92728],[92736,92766],[92784,92862],[92880,92909],[92928,92975],[93027,93047],[93053,93071],[93952,94026],[94032,94032],[94208,100343],[100352,101589],[101632,101640],[110592,110882],[110898,110898],[110928,110930],[110933,110933],[110948,110951],[110960,111355],[113664,113770],[113776,113788],[113792,113800],[113808,113817],[122634,122634],[123136,123180],[123214,123214],[123536,123565],[123584,123627],[124112,124138],[124896,124902],[124904,124907],[124909,124910],[124912,124926],[124928,125124],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[131072,173791],[173824,177977],[177984,178205],[178208,183969],[183984,191456],[194560,195101],[196608,201546],[201552,205743]],"General_Category/Control":[[0,31],[127,159]],"General_Category/Open_Punctuation":[[40,40],[91,91],[123,123],[3898,3898],[3900,3900],[5787,5787],[8218,8218],[8222,8222],[8261,8261],[8317,8317],[8333,8333],[8968,8968],[8970,8970],[9001,9001],[10088,10088],[10090,10090],[10092,10092],[10094,10094],[10096,10096],[10098,10098],[10100,10100],[10181,10181],[10214,10214],[10216,10216],[10218,10218],[10220,10220],[10222,10222],[10627,10627],[10629,10629],[10631,10631],[10633,10633],[10635,10635],[10637,10637],[10639,10639],[10641,10641],[10643,10643],[10645,10645],[10647,10647],[10712,10712],[10714,10714],[10748,10748],[11810,11810],[11812,11812],[11814,11814],[11816,11816],[11842,11842],[11861,11861],[11863,11863],[11865,11865],[11867,11867],[12296,12296],[12298,12298],[12300,12300],[12302,12302],[12304,12304],[12308,12308],[12310,12310],[12312,12312],[12314,12314],[12317,12317],[64831,64831],[65047,65047],[65077,65077],[65079,65079],[65081,65081],[65083,65083],[65085,65085],[65087,65087],[65089,65089],[65091,65091],[65095,65095],[65113,65113],[65115,65115],[65117,65117],[65288,65288],[65339,65339],[65371,65371],[65375,65375],[65378,65378]],"General_Category/Mark":[[768,879],[1155,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1552,1562],[1611,1631],[1648,1648],[1750,1756],[1759,1764],[1767,1768],[1770,1773],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2045,2045],[2070,2073],[2075,2083],[2085,2087],[2089,2093],[2137,2139],[2200,2207],[2250,2273],[2275,2307],[2362,2364],[2366,2383],[2385,2391],[2402,2403],[2433,2435],[2492,2492],[2494,2500],[2503,2504],[2507,2509],[2519,2519],[2530,2531],[2558,2558],[2561,2563],[2620,2620],[2622,2626],[2631,2632],[2635,2637],[2641,2641],[2672,2673],[2677,2677],[2689,2691],[2748,2748],[2750,2757],[2759,2761],[2763,2765],[2786,2787],[2810,2815],[2817,2819],[2876,2876],[2878,2884],[2887,2888],[2891,2893],[2901,2903],[2914,2915],[2946,2946],[3006,3010],[3014,3016],[3018,3021],[3031,3031],[3072,3076],[3132,3132],[3134,3140],[3142,3144],[3146,3149],[3157,3158],[3170,3171],[3201,3203],[3260,3260],[3262,3268],[3270,3272],[3274,3277],[3285,3286],[3298,3299],[3315,3315],[3328,3331],[3387,3388],[3390,3396],[3398,3400],[3402,3405],[3415,3415],[3426,3427],[3457,3459],[3530,3530],[3535,3540],[3542,3542],[3544,3551],[3570,3571],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3772],[3784,3790],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3902,3903],[3953,3972],[3974,3975],[3981,3991],[3993,4028],[4038,4038],[4139,4158],[4182,4185],[4190,4192],[4194,4196],[4199,4205],[4209,4212],[4226,4237],[4239,4239],[4250,4253],[4957,4959],[5906,5909],[5938,5940],[5970,5971],[6002,6003],[6068,6099],[6109,6109],[6155,6157],[6159,6159],[6277,6278],[6313,6313],[6432,6443],[6448,6459],[6679,6683],[6741,6750],[6752,6780],[6783,6783],[6832,6862],[6912,6916],[6964,6980],[7019,7027],[7040,7042],[7073,7085],[7142,7155],[7204,7223],[7376,7378],[7380,7400],[7405,7405],[7412,7412],[7415,7417],[7616,7679],[8400,8432],[11503,11505],[11647,11647],[11744,11775],[12330,12335],[12441,12442],[42607,42610],[42612,42621],[42654,42655],[42736,42737],[43010,43010],[43014,43014],[43019,43019],[43043,43047],[43052,43052],[43136,43137],[43188,43205],[43232,43249],[43263,43263],[43302,43309],[43335,43347],[43392,43395],[43443,43456],[43493,43493],[43561,43574],[43587,43587],[43596,43597],[43643,43645],[43696,43696],[43698,43700],[43703,43704],[43710,43711],[43713,43713],[43755,43759],[43765,43766],[44003,44010],[44012,44013],[64286,64286],[65024,65039],[65056,65071],[66045,66045],[66272,66272],[66422,66426],[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[68325,68326],[68900,68903],[69291,69292],[69373,69375],[69446,69456],[69506,69509],[69632,69634],[69688,69702],[69744,69744],[69747,69748],[69759,69762],[69808,69818],[69826,69826],[69888,69890],[69927,69940],[69957,69958],[70003,70003],[70016,70018],[70067,70080],[70089,70092],[70094,70095],[70188,70199],[70206,70206],[70209,70209],[70367,70378],[70400,70403],[70459,70460],[70462,70468],[70471,70472],[70475,70477],[70487,70487],[70498,70499],[70502,70508],[70512,70516],[70709,70726],[70750,70750],[70832,70851],[71087,71093],[71096,71104],[71132,71133],[71216,71232],[71339,71351],[71453,71467],[71724,71738],[71984,71989],[71991,71992],[71995,71998],[72000,72000],[72002,72003],[72145,72151],[72154,72160],[72164,72164],[72193,72202],[72243,72249],[72251,72254],[72263,72263],[72273,72283],[72330,72345],[72751,72758],[72760,72767],[72850,72871],[72873,72886],[73009,73014],[73018,73018],[73020,73021],[73023,73029],[73031,73031],[73098,73102],[73104,73105],[73107,73111],[73459,73462],[73472,73473],[73475,73475],[73524,73530],[73534,73538],[78912,78912],[78919,78933],[92912,92916],[92976,92982],[94031,94031],[94033,94087],[94095,94098],[94180,94180],[94192,94193],[113821,113822],[118528,118573],[118576,118598],[119141,119145],[119149,119154],[119163,119170],[119173,119179],[119210,119213],[119362,119364],[121344,121398],[121403,121452],[121461,121461],[121476,121476],[121499,121503],[121505,121519],[122880,122886],[122888,122904],[122907,122913],[122915,122916],[122918,122922],[123023,123023],[123184,123190],[123566,123566],[123628,123631],[124140,124143],[125136,125142],[125252,125258],[917760,917999]],"General_Category/Other":[[0,31],[127,159],[173,173],[888,889],[896,899],[907,907],[909,909],[930,930],[1328,1328],[1367,1368],[1419,1420],[1424,1424],[1480,1487],[1515,1518],[1525,1541],[1564,1564],[1757,1757],[1806,1807],[1867,1868],[1970,1983],[2043,2044],[2094,2095],[2111,2111],[2140,2141],[2143,2143],[2155,2159],[2191,2199],[2274,2274],[2436,2436],[2445,2446],[2449,2450],[2473,2473],[2481,2481],[2483,2485],[2490,2491],[2501,2502],[2505,2506],[2511,2518],[2520,2523],[2526,2526],[2532,2533],[2559,2560],[2564,2564],[2571,2574],[2577,2578],[2601,2601],[2609,2609],[2612,2612],[2615,2615],[2618,2619],[2621,2621],[2627,2630],[2633,2634],[2638,2640],[2642,2648],[2653,2653],[2655,2661],[2679,2688],[2692,2692],[2702,2702],[2706,2706],[2729,2729],[2737,2737],[2740,2740],[2746,2747],[2758,2758],[2762,2762],[2766,2767],[2769,2783],[2788,2789],[2802,2808],[2816,2816],[2820,2820],[2829,2830],[2833,2834],[2857,2857],[2865,2865],[2868,2868],[2874,2875],[2885,2886],[2889,2890],[2894,2900],[2904,2907],[2910,2910],[2916,2917],[2936,2945],[2948,2948],[2955,2957],[2961,2961],[2966,2968],[2971,2971],[2973,2973],[2976,2978],[2981,2983],[2987,2989],[3002,3005],[3011,3013],[3017,3017],[3022,3023],[3025,3030],[3032,3045],[3067,3071],[3085,3085],[3089,3089],[3113,3113],[3130,3131],[3141,3141],[3145,3145],[3150,3156],[3159,3159],[3163,3164],[3166,3167],[3172,3173],[3184,3190],[3213,3213],[3217,3217],[3241,3241],[3252,3252],[3258,3259],[3269,3269],[3273,3273],[3278,3284],[3287,3292],[3295,3295],[3300,3301],[3312,3312],[3316,3327],[3341,3341],[3345,3345],[3397,3397],[3401,3401],[3408,3411],[3428,3429],[3456,3456],[3460,3460],[3479,3481],[3506,3506],[3516,3516],[3518,3519],[3527,3529],[3531,3534],[3541,3541],[3543,3543],[3552,3557],[3568,3569],[3573,3584],[3643,3646],[3676,3712],[3715,3715],[3717,3717],[3723,3723],[3748,3748],[3750,3750],[3774,3775],[3781,3781],[3783,3783],[3791,3791],[3802,3803],[3808,3839],[3912,3912],[3949,3952],[3992,3992],[4029,4029],[4045,4045],[4059,4095],[4294,4294],[4296,4300],[4302,4303],[4681,4681],[4686,4687],[4695,4695],[4697,4697],[4702,4703],[4745,4745],[4750,4751],[4785,4785],[4790,4791],[4799,4799],[4801,4801],[4806,4807],[4823,4823],[4881,4881],[4886,4887],[4955,4956],[4989,4991],[5018,5023],[5110,5111],[5118,5119],[5789,5791],[5881,5887],[5910,5918],[5943,5951],[5972,5983],[5997,5997],[6001,6001],[6004,6015],[6110,6111],[6122,6127],[6138,6143],[6158,6158],[6170,6175],[6265,6271],[6315,6319],[6390,6399],[6431,6431],[6444,6447],[6460,6463],[6465,6467],[6510,6511],[6517,6527],[6572,6575],[6602,6607],[6619,6621],[6684,6685],[6751,6751],[6781,6782],[6794,6799],[6810,6815],[6830,6831],[6863,6911],[6989,6991],[7039,7039],[7156,7163],[7224,7226],[7242,7244],[7305,7311],[7355,7356],[7368,7375],[7419,7423],[7958,7959],[7966,7967],[8006,8007],[8014,8015],[8024,8024],[8026,8026],[8028,8028],[8030,8030],[8062,8063],[8117,8117],[8133,8133],[8148,8149],[8156,8156],[8176,8177],[8181,8181],[8191,8191],[8203,8207],[8234,8238],[8288,8303],[8306,8307],[8335,8335],[8349,8351],[8385,8399],[8433,8447],[8588,8591],[9255,9279],[9291,9311],[11124,11125],[11158,11158],[11508,11512],[11558,11558],[11560,11564],[11566,11567],[11624,11630],[11633,11646],[11671,11679],[11687,11687],[11695,11695],[11703,11703],[11711,11711],[11719,11719],[11727,11727],[11735,11735],[11743,11743],[11870,11903],[11930,11930],[12020,12031],[12246,12271],[12284,12287],[12352,12352],[12439,12440],[12544,12548],[12592,12592],[12687,12687],[12772,12783],[12831,12831],[42125,42127],[42183,42191],[42540,42559],[42744,42751],[42955,42959],[42962,42962],[42964,42964],[42970,42993],[43053,43055],[43066,43071],[43128,43135],[43206,43213],[43226,43231],[43348,43358],[43389,43391],[43470,43470],[43482,43485],[43519,43519],[43575,43583],[43598,43599],[43610,43611],[43715,43738],[43767,43776],[43783,43784],[43791,43792],[43799,43807],[43815,43815],[43823,43823],[43884,43887],[44014,44015],[44026,44031],[55204,55215],[55239,55242],[55292,63743],[64110,64111],[64218,64255],[64263,64274],[64280,64284],[64311,64311],[64317,64317],[64319,64319],[64322,64322],[64325,64325],[64451,64466],[64912,64913],[64968,64974],[64976,65007],[65050,65055],[65107,65107],[65127,65127],[65132,65135],[65141,65141],[65277,65280],[65471,65473],[65480,65481],[65488,65489],[65496,65497],[65501,65503],[65511,65511],[65519,65531],[65534,65535],[65548,65548],[65575,65575],[65595,65595],[65598,65598],[65614,65615],[65630,65663],[65787,65791],[65795,65798],[65844,65846],[65935,65935],[65949,65951],[65953,65999],[66046,66175],[66205,66207],[66257,66271],[66300,66303],[66340,66348],[66379,66383],[66427,66431],[66462,66462],[66500,66503],[66518,66559],[66718,66719],[66730,66735],[66772,66775],[66812,66815],[66856,66863],[66916,66926],[66939,66939],[66955,66955],[66963,66963],[66966,66966],[66978,66978],[66994,66994],[67002,67002],[67005,67071],[67383,67391],[67414,67423],[67432,67455],[67462,67462],[67505,67505],[67515,67583],[67590,67591],[67593,67593],[67638,67638],[67641,67643],[67645,67646],[67670,67670],[67743,67750],[67760,67807],[67827,67827],[67830,67834],[67868,67870],[67898,67902],[67904,67967],[68024,68027],[68048,68049],[68100,68100],[68103,68107],[68116,68116],[68120,68120],[68150,68151],[68155,68158],[68169,68175],[68185,68191],[68256,68287],[68327,68330],[68343,68351],[68406,68408],[68438,68439],[68467,68471],[68498,68504],[68509,68520],[68528,68607],[68681,68735],[68787,68799],[68851,68857],[68904,68911],[68922,69215],[69247,69247],[69290,69290],[69294,69295],[69298,69372],[69416,69423],[69466,69487],[69514,69551],[69580,69599],[69623,69631],[69710,69713],[69750,69758],[69821,69821],[69827,69839],[69865,69871],[69882,69887],[69941,69941],[69960,69967],[70007,70015],[70112,70112],[70133,70143],[70162,70162],[70210,70271],[70279,70279],[70281,70281],[70286,70286],[70302,70302],[70314,70319],[70379,70383],[70394,70399],[70404,70404],[70413,70414],[70417,70418],[70441,70441],[70449,70449],[70452,70452],[70458,70458],[70469,70470],[70473,70474],[70478,70479],[70481,70486],[70488,70492],[70500,70501],[70509,70511],[70517,70655],[70748,70748],[70754,70783],[70856,70863],[70874,71039],[71094,71095],[71134,71167],[71237,71247],[71258,71263],[71277,71295],[71354,71359],[71370,71423],[71451,71452],[71468,71471],[71495,71679],[71740,71839],[71923,71934],[71943,71944],[71946,71947],[71956,71956],[71959,71959],[71990,71990],[71993,71994],[72007,72015],[72026,72095],[72104,72105],[72152,72153],[72165,72191],[72264,72271],[72355,72367],[72441,72447],[72458,72703],[72713,72713],[72759,72759],[72774,72783],[72813,72815],[72848,72849],[72872,72872],[72887,72959],[72967,72967],[72970,72970],[73015,73017],[73019,73019],[73022,73022],[73032,73039],[73050,73055],[73062,73062],[73065,73065],[73103,73103],[73106,73106],[73113,73119],[73130,73439],[73465,73471],[73489,73489],[73531,73533],[73562,73647],[73649,73663],[73714,73726],[74650,74751],[74863,74863],[74869,74879],[75076,77711],[77811,77823],[78896,78911],[78934,82943],[83527,92159],[92729,92735],[92767,92767],[92778,92781],[92863,92863],[92874,92879],[92910,92911],[92918,92927],[92998,93007],[93018,93018],[93026,93026],[93048,93052],[93072,93759],[93851,93951],[94027,94030],[94088,94094],[94112,94175],[94181,94191],[94194,94207],[100344,100351],[101590,101631],[101641,110575],[110580,110580],[110588,110588],[110591,110591],[110883,110897],[110899,110927],[110931,110932],[110934,110947],[110952,110959],[111356,113663],[113771,113775],[113789,113791],[113801,113807],[113818,113819],[113824,118527],[118574,118575],[118599,118607],[118724,118783],[119030,119039],[119079,119080],[119155,119162],[119275,119295],[119366,119487],[119508,119519],[119540,119551],[119639,119647],[119673,119807],[119893,119893],[119965,119965],[119968,119969],[119971,119972],[119975,119976],[119981,119981],[119994,119994],[119996,119996],[120004,120004],[120070,120070],[120075,120076],[120085,120085],[120093,120093],[120122,120122],[120127,120127],[120133,120133],[120135,120137],[120145,120145],[120486,120487],[120780,120781],[121484,121498],[121504,121504],[121520,122623],[122655,122660],[122667,122879],[122887,122887],[122905,122906],[122914,122914],[122917,122917],[122923,122927],[122990,123022],[123024,123135],[123181,123183],[123198,123199],[123210,123213],[123216,123535],[123567,123583],[123642,123646],[123648,124111],[124154,124895],[124903,124903],[124908,124908],[124911,124911],[124927,124927],[125125,125126],[125143,125183],[125260,125263],[125274,125277],[125280,126064],[126133,126208],[126270,126463],[126468,126468],[126496,126496],[126499,126499],[126501,126502],[126504,126504],[126515,126515],[126520,126520],[126522,126522],[126524,126529],[126531,126534],[126536,126536],[126538,126538],[126540,126540],[126544,126544],[126547,126547],[126549,126550],[126552,126552],[126554,126554],[126556,126556],[126558,126558],[126560,126560],[126563,126563],[126565,126566],[126571,126571],[126579,126579],[126584,126584],[126589,126589],[126591,126591],[126602,126602],[126620,126624],[126628,126628],[126634,126634],[126652,126703],[126706,126975],[127020,127023],[127124,127135],[127151,127152],[127168,127168],[127184,127184],[127222,127231],[127406,127461],[127491,127503],[127548,127551],[127561,127567],[127570,127583],[127590,127743],[128728,128731],[128749,128751],[128765,128767],[128887,128890],[128986,128991],[129004,129007],[129009,129023],[129036,129039],[129096,129103],[129114,129119],[129160,129167],[129198,129199],[129202,129279],[129620,129631],[129646,129647],[129661,129663],[129673,129679],[129726,129726],[129734,129741],[129756,129759],[129769,129775],[129785,129791],[129939,129939],[129995,130031],[130042,131071],[173792,173823],[177978,177983],[178206,178207],[183970,183983],[191457,194559],[195102,196607],[201547,201551],[205744,917759],[918000,1114111]],"General_Category/Private_Use":[[57344,63743],[983040,1048573],[1048576,1114109]],"General_Category/Titlecase_Letter":[[453,453],[456,456],[459,459],[498,498],[8072,8079],[8088,8095],[8104,8111],[8124,8124],[8140,8140],[8188,8188]],"General_Category/Line_Separator":[[8232,8232]],"General_Category/Unassigned":[[888,889],[896,899],[907,907],[909,909],[930,930],[1328,1328],[1367,1368],[1419,1420],[1424,1424],[1480,1487],[1515,1518],[1525,1535],[1806,1806],[1867,1868],[1970,1983],[2043,2044],[2094,2095],[2111,2111],[2140,2141],[2143,2143],[2155,2159],[2191,2191],[2194,2199],[2436,2436],[2445,2446],[2449,2450],[2473,2473],[2481,2481],[2483,2485],[2490,2491],[2501,2502],[2505,2506],[2511,2518],[2520,2523],[2526,2526],[2532,2533],[2559,2560],[2564,2564],[2571,2574],[2577,2578],[2601,2601],[2609,2609],[2612,2612],[2615,2615],[2618,2619],[2621,2621],[2627,2630],[2633,2634],[2638,2640],[2642,2648],[2653,2653],[2655,2661],[2679,2688],[2692,2692],[2702,2702],[2706,2706],[2729,2729],[2737,2737],[2740,2740],[2746,2747],[2758,2758],[2762,2762],[2766,2767],[2769,2783],[2788,2789],[2802,2808],[2816,2816],[2820,2820],[2829,2830],[2833,2834],[2857,2857],[2865,2865],[2868,2868],[2874,2875],[2885,2886],[2889,2890],[2894,2900],[2904,2907],[2910,2910],[2916,2917],[2936,2945],[2948,2948],[2955,2957],[2961,2961],[2966,2968],[2971,2971],[2973,2973],[2976,2978],[2981,2983],[2987,2989],[3002,3005],[3011,3013],[3017,3017],[3022,3023],[3025,3030],[3032,3045],[3067,3071],[3085,3085],[3089,3089],[3113,3113],[3130,3131],[3141,3141],[3145,3145],[3150,3156],[3159,3159],[3163,3164],[3166,3167],[3172,3173],[3184,3190],[3213,3213],[3217,3217],[3241,3241],[3252,3252],[3258,3259],[3269,3269],[3273,3273],[3278,3284],[3287,3292],[3295,3295],[3300,3301],[3312,3312],[3316,3327],[3341,3341],[3345,3345],[3397,3397],[3401,3401],[3408,3411],[3428,3429],[3456,3456],[3460,3460],[3479,3481],[3506,3506],[3516,3516],[3518,3519],[3527,3529],[3531,3534],[3541,3541],[3543,3543],[3552,3557],[3568,3569],[3573,3584],[3643,3646],[3676,3712],[3715,3715],[3717,3717],[3723,3723],[3748,3748],[3750,3750],[3774,3775],[3781,3781],[3783,3783],[3791,3791],[3802,3803],[3808,3839],[3912,3912],[3949,3952],[3992,3992],[4029,4029],[4045,4045],[4059,4095],[4294,4294],[4296,4300],[4302,4303],[4681,4681],[4686,4687],[4695,4695],[4697,4697],[4702,4703],[4745,4745],[4750,4751],[4785,4785],[4790,4791],[4799,4799],[4801,4801],[4806,4807],[4823,4823],[4881,4881],[4886,4887],[4955,4956],[4989,4991],[5018,5023],[5110,5111],[5118,5119],[5789,5791],[5881,5887],[5910,5918],[5943,5951],[5972,5983],[5997,5997],[6001,6001],[6004,6015],[6110,6111],[6122,6127],[6138,6143],[6170,6175],[6265,6271],[6315,6319],[6390,6399],[6431,6431],[6444,6447],[6460,6463],[6465,6467],[6510,6511],[6517,6527],[6572,6575],[6602,6607],[6619,6621],[6684,6685],[6751,6751],[6781,6782],[6794,6799],[6810,6815],[6830,6831],[6863,6911],[6989,6991],[7039,7039],[7156,7163],[7224,7226],[7242,7244],[7305,7311],[7355,7356],[7368,7375],[7419,7423],[7958,7959],[7966,7967],[8006,8007],[8014,8015],[8024,8024],[8026,8026],[8028,8028],[8030,8030],[8062,8063],[8117,8117],[8133,8133],[8148,8149],[8156,8156],[8176,8177],[8181,8181],[8191,8191],[8293,8293],[8306,8307],[8335,8335],[8349,8351],[8385,8399],[8433,8447],[8588,8591],[9255,9279],[9291,9311],[11124,11125],[11158,11158],[11508,11512],[11558,11558],[11560,11564],[11566,11567],[11624,11630],[11633,11646],[11671,11679],[11687,11687],[11695,11695],[11703,11703],[11711,11711],[11719,11719],[11727,11727],[11735,11735],[11743,11743],[11870,11903],[11930,11930],[12020,12031],[12246,12271],[12284,12287],[12352,12352],[12439,12440],[12544,12548],[12592,12592],[12687,12687],[12772,12783],[12831,12831],[42125,42127],[42183,42191],[42540,42559],[42744,42751],[42955,42959],[42962,42962],[42964,42964],[42970,42993],[43053,43055],[43066,43071],[43128,43135],[43206,43213],[43226,43231],[43348,43358],[43389,43391],[43470,43470],[43482,43485],[43519,43519],[43575,43583],[43598,43599],[43610,43611],[43715,43738],[43767,43776],[43783,43784],[43791,43792],[43799,43807],[43815,43815],[43823,43823],[43884,43887],[44014,44015],[44026,44031],[55204,55215],[55239,55242],[55292,55295],[64110,64111],[64218,64255],[64263,64274],[64280,64284],[64311,64311],[64317,64317],[64319,64319],[64322,64322],[64325,64325],[64451,64466],[64912,64913],[64968,64974],[64976,65007],[65050,65055],[65107,65107],[65127,65127],[65132,65135],[65141,65141],[65277,65278],[65280,65280],[65471,65473],[65480,65481],[65488,65489],[65496,65497],[65501,65503],[65511,65511],[65519,65528],[65534,65535],[65548,65548],[65575,65575],[65595,65595],[65598,65598],[65614,65615],[65630,65663],[65787,65791],[65795,65798],[65844,65846],[65935,65935],[65949,65951],[65953,65999],[66046,66175],[66205,66207],[66257,66271],[66300,66303],[66340,66348],[66379,66383],[66427,66431],[66462,66462],[66500,66503],[66518,66559],[66718,66719],[66730,66735],[66772,66775],[66812,66815],[66856,66863],[66916,66926],[66939,66939],[66955,66955],[66963,66963],[66966,66966],[66978,66978],[66994,66994],[67002,67002],[67005,67071],[67383,67391],[67414,67423],[67432,67455],[67462,67462],[67505,67505],[67515,67583],[67590,67591],[67593,67593],[67638,67638],[67641,67643],[67645,67646],[67670,67670],[67743,67750],[67760,67807],[67827,67827],[67830,67834],[67868,67870],[67898,67902],[67904,67967],[68024,68027],[68048,68049],[68100,68100],[68103,68107],[68116,68116],[68120,68120],[68150,68151],[68155,68158],[68169,68175],[68185,68191],[68256,68287],[68327,68330],[68343,68351],[68406,68408],[68438,68439],[68467,68471],[68498,68504],[68509,68520],[68528,68607],[68681,68735],[68787,68799],[68851,68857],[68904,68911],[68922,69215],[69247,69247],[69290,69290],[69294,69295],[69298,69372],[69416,69423],[69466,69487],[69514,69551],[69580,69599],[69623,69631],[69710,69713],[69750,69758],[69827,69836],[69838,69839],[69865,69871],[69882,69887],[69941,69941],[69960,69967],[70007,70015],[70112,70112],[70133,70143],[70162,70162],[70210,70271],[70279,70279],[70281,70281],[70286,70286],[70302,70302],[70314,70319],[70379,70383],[70394,70399],[70404,70404],[70413,70414],[70417,70418],[70441,70441],[70449,70449],[70452,70452],[70458,70458],[70469,70470],[70473,70474],[70478,70479],[70481,70486],[70488,70492],[70500,70501],[70509,70511],[70517,70655],[70748,70748],[70754,70783],[70856,70863],[70874,71039],[71094,71095],[71134,71167],[71237,71247],[71258,71263],[71277,71295],[71354,71359],[71370,71423],[71451,71452],[71468,71471],[71495,71679],[71740,71839],[71923,71934],[71943,71944],[71946,71947],[71956,71956],[71959,71959],[71990,71990],[71993,71994],[72007,72015],[72026,72095],[72104,72105],[72152,72153],[72165,72191],[72264,72271],[72355,72367],[72441,72447],[72458,72703],[72713,72713],[72759,72759],[72774,72783],[72813,72815],[72848,72849],[72872,72872],[72887,72959],[72967,72967],[72970,72970],[73015,73017],[73019,73019],[73022,73022],[73032,73039],[73050,73055],[73062,73062],[73065,73065],[73103,73103],[73106,73106],[73113,73119],[73130,73439],[73465,73471],[73489,73489],[73531,73533],[73562,73647],[73649,73663],[73714,73726],[74650,74751],[74863,74863],[74869,74879],[75076,77711],[77811,77823],[78934,82943],[83527,92159],[92729,92735],[92767,92767],[92778,92781],[92863,92863],[92874,92879],[92910,92911],[92918,92927],[92998,93007],[93018,93018],[93026,93026],[93048,93052],[93072,93759],[93851,93951],[94027,94030],[94088,94094],[94112,94175],[94181,94191],[94194,94207],[100344,100351],[101590,101631],[101641,110575],[110580,110580],[110588,110588],[110591,110591],[110883,110897],[110899,110927],[110931,110932],[110934,110947],[110952,110959],[111356,113663],[113771,113775],[113789,113791],[113801,113807],[113818,113819],[113828,118527],[118574,118575],[118599,118607],[118724,118783],[119030,119039],[119079,119080],[119275,119295],[119366,119487],[119508,119519],[119540,119551],[119639,119647],[119673,119807],[119893,119893],[119965,119965],[119968,119969],[119971,119972],[119975,119976],[119981,119981],[119994,119994],[119996,119996],[120004,120004],[120070,120070],[120075,120076],[120085,120085],[120093,120093],[120122,120122],[120127,120127],[120133,120133],[120135,120137],[120145,120145],[120486,120487],[120780,120781],[121484,121498],[121504,121504],[121520,122623],[122655,122660],[122667,122879],[122887,122887],[122905,122906],[122914,122914],[122917,122917],[122923,122927],[122990,123022],[123024,123135],[123181,123183],[123198,123199],[123210,123213],[123216,123535],[123567,123583],[123642,123646],[123648,124111],[124154,124895],[124903,124903],[124908,124908],[124911,124911],[124927,124927],[125125,125126],[125143,125183],[125260,125263],[125274,125277],[125280,126064],[126133,126208],[126270,126463],[126468,126468],[126496,126496],[126499,126499],[126501,126502],[126504,126504],[126515,126515],[126520,126520],[126522,126522],[126524,126529],[126531,126534],[126536,126536],[126538,126538],[126540,126540],[126544,126544],[126547,126547],[126549,126550],[126552,126552],[126554,126554],[126556,126556],[126558,126558],[126560,126560],[126563,126563],[126565,126566],[126571,126571],[126579,126579],[126584,126584],[126589,126589],[126591,126591],[126602,126602],[126620,126624],[126628,126628],[126634,126634],[126652,126703],[126706,126975],[127020,127023],[127124,127135],[127151,127152],[127168,127168],[127184,127184],[127222,127231],[127406,127461],[127491,127503],[127548,127551],[127561,127567],[127570,127583],[127590,127743],[128728,128731],[128749,128751],[128765,128767],[128887,128890],[128986,128991],[129004,129007],[129009,129023],[129036,129039],[129096,129103],[129114,129119],[129160,129167],[129198,129199],[129202,129279],[129620,129631],[129646,129647],[129661,129663],[129673,129679],[129726,129726],[129734,129741],[129756,129759],[129769,129775],[129785,129791],[129939,129939],[129995,130031],[130042,131071],[173792,173823],[177978,177983],[178206,178207],[183970,183983],[191457,194559],[195102,196607],[201547,201551],[205744,917504],[917506,917535],[917632,917759],[918000,983039],[1048574,1048575],[1114110,1114111]],"General_Category/Currency_Symbol":[[36,36],[162,165],[1423,1423],[1547,1547],[2046,2047],[2546,2547],[2555,2555],[2801,2801],[3065,3065],[3647,3647],[6107,6107],[8352,8384],[43064,43064],[65020,65020],[65129,65129],[65284,65284],[65504,65505],[65509,65510],[73693,73696],[123647,123647],[126128,126128]],"General_Category/Paragraph_Separator":[[8233,8233]],"General_Category/Modifier_Symbol":[[94,94],[96,96],[168,168],[175,175],[180,180],[184,184],[706,709],[722,735],[741,747],[749,749],[751,767],[885,885],[900,901],[2184,2184],[8125,8125],[8127,8129],[8141,8143],[8157,8159],[8173,8175],[8189,8190],[12443,12444],[42752,42774],[42784,42785],[42889,42890],[43867,43867],[43882,43883],[64434,64450],[65342,65342],[65344,65344],[65507,65507],[127995,127999]],"General_Category/Final_Punctuation":[[187,187],[8217,8217],[8221,8221],[8250,8250],[11779,11779],[11781,11781],[11786,11786],[11789,11789],[11805,11805],[11809,11809]],"General_Category/Letter":[[65,90],[97,122],[170,170],[181,181],[186,186],[192,214],[216,246],[248,705],[710,721],[736,740],[748,748],[750,750],[880,884],[886,887],[890,893],[895,895],[902,902],[904,906],[908,908],[910,929],[931,1013],[1015,1153],[1162,1327],[1329,1366],[1369,1369],[1376,1416],[1488,1514],[1519,1522],[1568,1610],[1646,1647],[1649,1747],[1749,1749],[1765,1766],[1774,1775],[1786,1788],[1791,1791],[1808,1808],[1810,1839],[1869,1957],[1969,1969],[1994,2026],[2036,2037],[2042,2042],[2048,2069],[2074,2074],[2084,2084],[2088,2088],[2112,2136],[2144,2154],[2160,2183],[2185,2190],[2208,2249],[2308,2361],[2365,2365],[2384,2384],[2392,2401],[2417,2432],[2437,2444],[2447,2448],[2451,2472],[2474,2480],[2482,2482],[2486,2489],[2493,2493],[2510,2510],[2524,2525],[2527,2529],[2544,2545],[2556,2556],[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2649,2652],[2654,2654],[2674,2676],[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],[2749,2749],[2768,2768],[2784,2785],[2809,2809],[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2877,2877],[2908,2909],[2911,2913],[2929,2929],[2947,2947],[2949,2954],[2958,2960],[2962,2965],[2969,2970],[2972,2972],[2974,2975],[2979,2980],[2984,2986],[2990,3001],[3024,3024],[3077,3084],[3086,3088],[3090,3112],[3114,3129],[3133,3133],[3160,3162],[3165,3165],[3168,3169],[3200,3200],[3205,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],[3261,3261],[3293,3294],[3296,3297],[3313,3314],[3332,3340],[3342,3344],[3346,3386],[3389,3389],[3406,3406],[3412,3414],[3423,3425],[3450,3455],[3461,3478],[3482,3505],[3507,3515],[3517,3517],[3520,3526],[3585,3632],[3634,3635],[3648,3654],[3713,3714],[3716,3716],[3718,3722],[3724,3747],[3749,3749],[3751,3760],[3762,3763],[3773,3773],[3776,3780],[3782,3782],[3804,3807],[3840,3840],[3904,3911],[3913,3948],[3976,3980],[4096,4138],[4159,4159],[4176,4181],[4186,4189],[4193,4193],[4197,4198],[4206,4208],[4213,4225],[4238,4238],[4256,4293],[4295,4295],[4301,4301],[4304,4346],[4348,4680],[4682,4685],[4688,4694],[4696,4696],[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],[4800,4800],[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4992,5007],[5024,5109],[5112,5117],[5121,5740],[5743,5759],[5761,5786],[5792,5866],[5873,5880],[5888,5905],[5919,5937],[5952,5969],[5984,5996],[5998,6000],[6016,6067],[6103,6103],[6108,6108],[6176,6264],[6272,6276],[6279,6312],[6314,6314],[6320,6389],[6400,6430],[6480,6509],[6512,6516],[6528,6571],[6576,6601],[6656,6678],[6688,6740],[6823,6823],[6917,6963],[6981,6988],[7043,7072],[7086,7087],[7098,7141],[7168,7203],[7245,7247],[7258,7293],[7296,7304],[7312,7354],[7357,7359],[7401,7404],[7406,7411],[7413,7414],[7418,7418],[7424,7615],[7680,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025,8025],[8027,8027],[8029,8029],[8031,8061],[8064,8116],[8118,8124],[8126,8126],[8130,8132],[8134,8140],[8144,8147],[8150,8155],[8160,8172],[8178,8180],[8182,8188],[8305,8305],[8319,8319],[8336,8348],[8450,8450],[8455,8455],[8458,8467],[8469,8469],[8473,8477],[8484,8484],[8486,8486],[8488,8488],[8490,8493],[8495,8505],[8508,8511],[8517,8521],[8526,8526],[8579,8580],[11264,11492],[11499,11502],[11506,11507],[11520,11557],[11559,11559],[11565,11565],[11568,11623],[11631,11631],[11648,11670],[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[11823,11823],[12293,12294],[12337,12341],[12347,12348],[12353,12438],[12445,12447],[12449,12538],[12540,12543],[12549,12591],[12593,12686],[12704,12735],[12784,12799],[13312,19903],[19968,42124],[42192,42237],[42240,42508],[42512,42527],[42538,42539],[42560,42606],[42623,42653],[42656,42725],[42775,42783],[42786,42888],[42891,42954],[42960,42961],[42963,42963],[42965,42969],[42994,43009],[43011,43013],[43015,43018],[43020,43042],[43072,43123],[43138,43187],[43250,43255],[43259,43259],[43261,43262],[43274,43301],[43312,43334],[43360,43388],[43396,43442],[43471,43471],[43488,43492],[43494,43503],[43514,43518],[43520,43560],[43584,43586],[43588,43595],[43616,43638],[43642,43642],[43646,43695],[43697,43697],[43701,43702],[43705,43709],[43712,43712],[43714,43714],[43739,43741],[43744,43754],[43762,43764],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822],[43824,43866],[43868,43881],[43888,44002],[44032,55203],[55216,55238],[55243,55291],[63744,64109],[64112,64217],[64256,64262],[64275,64279],[64285,64285],[64287,64296],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64433],[64467,64829],[64848,64911],[64914,64967],[65008,65019],[65136,65140],[65142,65276],[65313,65338],[65345,65370],[65382,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500],[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786],[66176,66204],[66208,66256],[66304,66335],[66349,66368],[66370,66377],[66384,66421],[66432,66461],[66464,66499],[66504,66511],[66560,66717],[66736,66771],[66776,66811],[66816,66855],[66864,66915],[66928,66938],[66940,66954],[66956,66962],[66964,66965],[66967,66977],[66979,66993],[66995,67001],[67003,67004],[67072,67382],[67392,67413],[67424,67431],[67456,67461],[67463,67504],[67506,67514],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67669],[67680,67702],[67712,67742],[67808,67826],[67828,67829],[67840,67861],[67872,67897],[67968,68023],[68030,68031],[68096,68096],[68112,68115],[68117,68119],[68121,68149],[68192,68220],[68224,68252],[68288,68295],[68297,68324],[68352,68405],[68416,68437],[68448,68466],[68480,68497],[68608,68680],[68736,68786],[68800,68850],[68864,68899],[69248,69289],[69296,69297],[69376,69404],[69415,69415],[69424,69445],[69488,69505],[69552,69572],[69600,69622],[69635,69687],[69745,69746],[69749,69749],[69763,69807],[69840,69864],[69891,69926],[69956,69956],[69959,69959],[69968,70002],[70006,70006],[70019,70066],[70081,70084],[70106,70106],[70108,70108],[70144,70161],[70163,70187],[70207,70208],[70272,70278],[70280,70280],[70282,70285],[70287,70301],[70303,70312],[70320,70366],[70405,70412],[70415,70416],[70419,70440],[70442,70448],[70450,70451],[70453,70457],[70461,70461],[70480,70480],[70493,70497],[70656,70708],[70727,70730],[70751,70753],[70784,70831],[70852,70853],[70855,70855],[71040,71086],[71128,71131],[71168,71215],[71236,71236],[71296,71338],[71352,71352],[71424,71450],[71488,71494],[71680,71723],[71840,71903],[71935,71942],[71945,71945],[71948,71955],[71957,71958],[71960,71983],[71999,71999],[72001,72001],[72096,72103],[72106,72144],[72161,72161],[72163,72163],[72192,72192],[72203,72242],[72250,72250],[72272,72272],[72284,72329],[72349,72349],[72368,72440],[72704,72712],[72714,72750],[72768,72768],[72818,72847],[72960,72966],[72968,72969],[72971,73008],[73030,73030],[73056,73061],[73063,73064],[73066,73097],[73112,73112],[73440,73458],[73474,73474],[73476,73488],[73490,73523],[73648,73648],[73728,74649],[74880,75075],[77712,77808],[77824,78895],[78913,78918],[82944,83526],[92160,92728],[92736,92766],[92784,92862],[92880,92909],[92928,92975],[92992,92995],[93027,93047],[93053,93071],[93760,93823],[93952,94026],[94032,94032],[94099,94111],[94176,94177],[94179,94179],[94208,100343],[100352,101589],[101632,101640],[110576,110579],[110581,110587],[110589,110590],[110592,110882],[110898,110898],[110928,110930],[110933,110933],[110948,110951],[110960,111355],[113664,113770],[113776,113788],[113792,113800],[113808,113817],[119808,119892],[119894,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119993],[119995,119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120146,120485],[120488,120512],[120514,120538],[120540,120570],[120572,120596],[120598,120628],[120630,120654],[120656,120686],[120688,120712],[120714,120744],[120746,120770],[120772,120779],[122624,122654],[122661,122666],[122928,122989],[123136,123180],[123191,123197],[123214,123214],[123536,123565],[123584,123627],[124112,124139],[124896,124902],[124904,124907],[124909,124910],[124912,124926],[124928,125124],[125184,125251],[125259,125259],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[131072,173791],[173824,177977],[177984,178205],[178208,183969],[183984,191456],[194560,195101],[196608,201546],[201552,205743]],"General_Category/Close_Punctuation":[[41,41],[93,93],[125,125],[3899,3899],[3901,3901],[5788,5788],[8262,8262],[8318,8318],[8334,8334],[8969,8969],[8971,8971],[9002,9002],[10089,10089],[10091,10091],[10093,10093],[10095,10095],[10097,10097],[10099,10099],[10101,10101],[10182,10182],[10215,10215],[10217,10217],[10219,10219],[10221,10221],[10223,10223],[10628,10628],[10630,10630],[10632,10632],[10634,10634],[10636,10636],[10638,10638],[10640,10640],[10642,10642],[10644,10644],[10646,10646],[10648,10648],[10713,10713],[10715,10715],[10749,10749],[11811,11811],[11813,11813],[11815,11815],[11817,11817],[11862,11862],[11864,11864],[11866,11866],[11868,11868],[12297,12297],[12299,12299],[12301,12301],[12303,12303],[12305,12305],[12309,12309],[12311,12311],[12313,12313],[12315,12315],[12318,12319],[64830,64830],[65048,65048],[65078,65078],[65080,65080],[65082,65082],[65084,65084],[65086,65086],[65088,65088],[65090,65090],[65092,65092],[65096,65096],[65114,65114],[65116,65116],[65118,65118],[65289,65289],[65341,65341],[65373,65373],[65376,65376],[65379,65379]],"General_Category/Spacing_Mark":[[2307,2307],[2363,2363],[2366,2368],[2377,2380],[2382,2383],[2434,2435],[2494,2496],[2503,2504],[2507,2508],[2519,2519],[2563,2563],[2622,2624],[2691,2691],[2750,2752],[2761,2761],[2763,2764],[2818,2819],[2878,2878],[2880,2880],[2887,2888],[2891,2892],[2903,2903],[3006,3007],[3009,3010],[3014,3016],[3018,3020],[3031,3031],[3073,3075],[3137,3140],[3202,3203],[3262,3262],[3264,3268],[3271,3272],[3274,3275],[3285,3286],[3315,3315],[3330,3331],[3390,3392],[3398,3400],[3402,3404],[3415,3415],[3458,3459],[3535,3537],[3544,3551],[3570,3571],[3902,3903],[3967,3967],[4139,4140],[4145,4145],[4152,4152],[4155,4156],[4182,4183],[4194,4196],[4199,4205],[4227,4228],[4231,4236],[4239,4239],[4250,4252],[5909,5909],[5940,5940],[6070,6070],[6078,6085],[6087,6088],[6435,6438],[6441,6443],[6448,6449],[6451,6456],[6681,6682],[6741,6741],[6743,6743],[6753,6753],[6755,6756],[6765,6770],[6916,6916],[6965,6965],[6971,6971],[6973,6977],[6979,6980],[7042,7042],[7073,7073],[7078,7079],[7082,7082],[7143,7143],[7146,7148],[7150,7150],[7154,7155],[7204,7211],[7220,7221],[7393,7393],[7415,7415],[12334,12335],[43043,43044],[43047,43047],[43136,43137],[43188,43203],[43346,43347],[43395,43395],[43444,43445],[43450,43451],[43454,43456],[43567,43568],[43571,43572],[43597,43597],[43643,43643],[43645,43645],[43755,43755],[43758,43759],[43765,43765],[44003,44004],[44006,44007],[44009,44010],[44012,44012],[69632,69632],[69634,69634],[69762,69762],[69808,69810],[69815,69816],[69932,69932],[69957,69958],[70018,70018],[70067,70069],[70079,70080],[70094,70094],[70188,70190],[70194,70195],[70197,70197],[70368,70370],[70402,70403],[70462,70463],[70465,70468],[70471,70472],[70475,70477],[70487,70487],[70498,70499],[70709,70711],[70720,70721],[70725,70725],[70832,70834],[70841,70841],[70843,70846],[70849,70849],[71087,71089],[71096,71099],[71102,71102],[71216,71218],[71227,71228],[71230,71230],[71340,71340],[71342,71343],[71350,71350],[71456,71457],[71462,71462],[71724,71726],[71736,71736],[71984,71989],[71991,71992],[71997,71997],[72000,72000],[72002,72002],[72145,72147],[72156,72159],[72164,72164],[72249,72249],[72279,72280],[72343,72343],[72751,72751],[72766,72766],[72873,72873],[72881,72881],[72884,72884],[73098,73102],[73107,73108],[73110,73110],[73461,73462],[73475,73475],[73524,73525],[73534,73535],[73537,73537],[94033,94087],[94192,94193],[119141,119142],[119149,119154]],"General_Category/Separator":[[32,32],[160,160],[5760,5760],[8192,8202],[8232,8233],[8239,8239],[8287,8287],[12288,12288]],"General_Category/Symbol":[[36,36],[43,43],[60,62],[94,94],[96,96],[124,124],[126,126],[162,166],[168,169],[172,172],[174,177],[180,180],[184,184],[215,215],[247,247],[706,709],[722,735],[741,747],[749,749],[751,767],[885,885],[900,901],[1014,1014],[1154,1154],[1421,1423],[1542,1544],[1547,1547],[1550,1551],[1758,1758],[1769,1769],[1789,1790],[2038,2038],[2046,2047],[2184,2184],[2546,2547],[2554,2555],[2801,2801],[2928,2928],[3059,3066],[3199,3199],[3407,3407],[3449,3449],[3647,3647],[3841,3843],[3859,3859],[3861,3863],[3866,3871],[3892,3892],[3894,3894],[3896,3896],[4030,4037],[4039,4044],[4046,4047],[4053,4056],[4254,4255],[5008,5017],[5741,5741],[6107,6107],[6464,6464],[6622,6655],[7009,7018],[7028,7036],[8125,8125],[8127,8129],[8141,8143],[8157,8159],[8173,8175],[8189,8190],[8260,8260],[8274,8274],[8314,8316],[8330,8332],[8352,8384],[8448,8449],[8451,8454],[8456,8457],[8468,8468],[8470,8472],[8478,8483],[8485,8485],[8487,8487],[8489,8489],[8494,8494],[8506,8507],[8512,8516],[8522,8525],[8527,8527],[8586,8587],[8592,8967],[8972,9000],[9003,9254],[9280,9290],[9372,9449],[9472,10087],[10132,10180],[10183,10213],[10224,10626],[10649,10711],[10716,10747],[10750,11123],[11126,11157],[11159,11263],[11493,11498],[11856,11857],[11904,11929],[11931,12019],[12032,12245],[12272,12283],[12292,12292],[12306,12307],[12320,12320],[12342,12343],[12350,12351],[12443,12444],[12688,12689],[12694,12703],[12736,12771],[12800,12830],[12842,12871],[12880,12880],[12896,12927],[12938,12976],[12992,13311],[19904,19967],[42128,42182],[42752,42774],[42784,42785],[42889,42890],[43048,43051],[43062,43065],[43639,43641],[43867,43867],[43882,43883],[64297,64297],[64434,64450],[64832,64847],[64975,64975],[65020,65023],[65122,65122],[65124,65126],[65129,65129],[65284,65284],[65291,65291],[65308,65310],[65342,65342],[65344,65344],[65372,65372],[65374,65374],[65504,65510],[65512,65518],[65532,65533],[65847,65855],[65913,65929],[65932,65934],[65936,65948],[65952,65952],[66000,66044],[67703,67704],[68296,68296],[71487,71487],[73685,73713],[92988,92991],[92997,92997],[113820,113820],[118608,118723],[118784,119029],[119040,119078],[119081,119140],[119146,119148],[119171,119172],[119180,119209],[119214,119274],[119296,119361],[119365,119365],[119552,119638],[120513,120513],[120539,120539],[120571,120571],[120597,120597],[120629,120629],[120655,120655],[120687,120687],[120713,120713],[120745,120745],[120771,120771],[120832,121343],[121399,121402],[121453,121460],[121462,121475],[121477,121478],[123215,123215],[123647,123647],[126124,126124],[126128,126128],[126254,126254],[126704,126705],[126976,127019],[127024,127123],[127136,127150],[127153,127167],[127169,127183],[127185,127221],[127245,127405],[127462,127490],[127504,127547],[127552,127560],[127568,127569],[127584,127589],[127744,128727],[128732,128748],[128752,128764],[128768,128886],[128891,128985],[128992,129003],[129008,129008],[129024,129035],[129040,129095],[129104,129113],[129120,129159],[129168,129197],[129200,129201],[129280,129619],[129632,129645],[129648,129660],[129664,129672],[129680,129725],[129727,129733],[129742,129755],[129760,129768],[129776,129784],[129792,129938],[129940,129994]],"General_Category/Nonspacing_Mark":[[768,879],[1155,1159],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1552,1562],[1611,1631],[1648,1648],[1750,1756],[1759,1764],[1767,1768],[1770,1773],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2045,2045],[2070,2073],[2075,2083],[2085,2087],[2089,2093],[2137,2139],[2200,2207],[2250,2273],[2275,2306],[2362,2362],[2364,2364],[2369,2376],[2381,2381],[2385,2391],[2402,2403],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2558,2558],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2641,2641],[2672,2673],[2677,2677],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2810,2815],[2817,2817],[2876,2876],[2879,2879],[2881,2884],[2893,2893],[2901,2902],[2914,2915],[2946,2946],[3008,3008],[3021,3021],[3072,3072],[3076,3076],[3132,3132],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3170,3171],[3201,3201],[3260,3260],[3263,3263],[3270,3270],[3276,3277],[3298,3299],[3328,3329],[3387,3388],[3393,3396],[3405,3405],[3426,3427],[3457,3457],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3772],[3784,3790],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3981,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4151],[4153,4154],[4157,4158],[4184,4185],[4190,4192],[4209,4212],[4226,4226],[4229,4230],[4237,4237],[4253,4253],[4957,4959],[5906,5908],[5938,5939],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6157],[6159,6159],[6277,6278],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6683,6683],[6742,6742],[6744,6750],[6752,6752],[6754,6754],[6757,6764],[6771,6780],[6783,6783],[6832,6845],[6847,6862],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7040,7041],[7074,7077],[7080,7081],[7083,7085],[7142,7142],[7144,7145],[7149,7149],[7151,7153],[7212,7219],[7222,7223],[7376,7378],[7380,7392],[7394,7400],[7405,7405],[7412,7412],[7416,7417],[7616,7679],[8400,8412],[8417,8417],[8421,8432],[11503,11505],[11647,11647],[11744,11775],[12330,12333],[12441,12442],[42607,42607],[42612,42621],[42654,42655],[42736,42737],[43010,43010],[43014,43014],[43019,43019],[43045,43046],[43052,43052],[43204,43205],[43232,43249],[43263,43263],[43302,43309],[43335,43345],[43392,43394],[43443,43443],[43446,43449],[43452,43453],[43493,43493],[43561,43566],[43569,43570],[43573,43574],[43587,43587],[43596,43596],[43644,43644],[43696,43696],[43698,43700],[43703,43704],[43710,43711],[43713,43713],[43756,43757],[43766,43766],[44005,44005],[44008,44008],[44013,44013],[64286,64286],[65024,65039],[65056,65071],[66045,66045],[66272,66272],[66422,66426],[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[68325,68326],[68900,68903],[69291,69292],[69373,69375],[69446,69456],[69506,69509],[69633,69633],[69688,69702],[69744,69744],[69747,69748],[69759,69761],[69811,69814],[69817,69818],[69826,69826],[69888,69890],[69927,69931],[69933,69940],[70003,70003],[70016,70017],[70070,70078],[70089,70092],[70095,70095],[70191,70193],[70196,70196],[70198,70199],[70206,70206],[70209,70209],[70367,70367],[70371,70378],[70400,70401],[70459,70460],[70464,70464],[70502,70508],[70512,70516],[70712,70719],[70722,70724],[70726,70726],[70750,70750],[70835,70840],[70842,70842],[70847,70848],[70850,70851],[71090,71093],[71100,71101],[71103,71104],[71132,71133],[71219,71226],[71229,71229],[71231,71232],[71339,71339],[71341,71341],[71344,71349],[71351,71351],[71453,71455],[71458,71461],[71463,71467],[71727,71735],[71737,71738],[71995,71996],[71998,71998],[72003,72003],[72148,72151],[72154,72155],[72160,72160],[72193,72202],[72243,72248],[72251,72254],[72263,72263],[72273,72278],[72281,72283],[72330,72342],[72344,72345],[72752,72758],[72760,72765],[72767,72767],[72850,72871],[72874,72880],[72882,72883],[72885,72886],[73009,73014],[73018,73018],[73020,73021],[73023,73029],[73031,73031],[73104,73105],[73109,73109],[73111,73111],[73459,73460],[73472,73473],[73526,73530],[73536,73536],[73538,73538],[78912,78912],[78919,78933],[92912,92916],[92976,92982],[94031,94031],[94095,94098],[94180,94180],[113821,113822],[118528,118573],[118576,118598],[119143,119145],[119163,119170],[119173,119179],[119210,119213],[119362,119364],[121344,121398],[121403,121452],[121461,121461],[121476,121476],[121499,121503],[121505,121519],[122880,122886],[122888,122904],[122907,122913],[122915,122916],[122918,122922],[123023,123023],[123184,123190],[123566,123566],[123628,123631],[124140,124143],[125136,125142],[125252,125258],[917760,917999]],"General_Category/Other_Number":[[178,179],[185,185],[188,190],[2548,2553],[2930,2935],[3056,3058],[3192,3198],[3416,3422],[3440,3448],[3882,3891],[4969,4988],[6128,6137],[6618,6618],[8304,8304],[8308,8313],[8320,8329],[8528,8543],[8585,8585],[9312,9371],[9450,9471],[10102,10131],[11517,11517],[12690,12693],[12832,12841],[12872,12879],[12881,12895],[12928,12937],[12977,12991],[43056,43061],[65799,65843],[65909,65912],[65930,65931],[66273,66299],[66336,66339],[67672,67679],[67705,67711],[67751,67759],[67835,67839],[67862,67867],[68028,68029],[68032,68047],[68050,68095],[68160,68168],[68221,68222],[68253,68255],[68331,68335],[68440,68447],[68472,68479],[68521,68527],[68858,68863],[69216,69246],[69405,69414],[69457,69460],[69573,69579],[69714,69733],[70113,70132],[71482,71483],[71914,71922],[72794,72812],[73664,73684],[93019,93025],[93824,93846],[119488,119507],[119520,119539],[119648,119672],[125127,125135],[126065,126123],[126125,126127],[126129,126132],[126209,126253],[126255,126269],[127232,127244]],"Line_Break/Contingent_Break":[[65532,65532]],"Line_Break/H3":[[44033,44059],[44061,44087],[44089,44115],[44117,44143],[44145,44171],[44173,44199],[44201,44227],[44229,44255],[44257,44283],[44285,44311],[44313,44339],[44341,44367],[44369,44395],[44397,44423],[44425,44451],[44453,44479],[44481,44507],[44509,44535],[44537,44563],[44565,44591],[44593,44619],[44621,44647],[44649,44675],[44677,44703],[44705,44731],[44733,44759],[44761,44787],[44789,44815],[44817,44843],[44845,44871],[44873,44899],[44901,44927],[44929,44955],[44957,44983],[44985,45011],[45013,45039],[45041,45067],[45069,45095],[45097,45123],[45125,45151],[45153,45179],[45181,45207],[45209,45235],[45237,45263],[45265,45291],[45293,45319],[45321,45347],[45349,45375],[45377,45403],[45405,45431],[45433,45459],[45461,45487],[45489,45515],[45517,45543],[45545,45571],[45573,45599],[45601,45627],[45629,45655],[45657,45683],[45685,45711],[45713,45739],[45741,45767],[45769,45795],[45797,45823],[45825,45851],[45853,45879],[45881,45907],[45909,45935],[45937,45963],[45965,45991],[45993,46019],[46021,46047],[46049,46075],[46077,46103],[46105,46131],[46133,46159],[46161,46187],[46189,46215],[46217,46243],[46245,46271],[46273,46299],[46301,46327],[46329,46355],[46357,46383],[46385,46411],[46413,46439],[46441,46467],[46469,46495],[46497,46523],[46525,46551],[46553,46579],[46581,46607],[46609,46635],[46637,46663],[46665,46691],[46693,46719],[46721,46747],[46749,46775],[46777,46803],[46805,46831],[46833,46859],[46861,46887],[46889,46915],[46917,46943],[46945,46971],[46973,46999],[47001,47027],[47029,47055],[47057,47083],[47085,47111],[47113,47139],[47141,47167],[47169,47195],[47197,47223],[47225,47251],[47253,47279],[47281,47307],[47309,47335],[47337,47363],[47365,47391],[47393,47419],[47421,47447],[47449,47475],[47477,47503],[47505,47531],[47533,47559],[47561,47587],[47589,47615],[47617,47643],[47645,47671],[47673,47699],[47701,47727],[47729,47755],[47757,47783],[47785,47811],[47813,47839],[47841,47867],[47869,47895],[47897,47923],[47925,47951],[47953,47979],[47981,48007],[48009,48035],[48037,48063],[48065,48091],[48093,48119],[48121,48147],[48149,48175],[48177,48203],[48205,48231],[48233,48259],[48261,48287],[48289,48315],[48317,48343],[48345,48371],[48373,48399],[48401,48427],[48429,48455],[48457,48483],[48485,48511],[48513,48539],[48541,48567],[48569,48595],[48597,48623],[48625,48651],[48653,48679],[48681,48707],[48709,48735],[48737,48763],[48765,48791],[48793,48819],[48821,48847],[48849,48875],[48877,48903],[48905,48931],[48933,48959],[48961,48987],[48989,49015],[49017,49043],[49045,49071],[49073,49099],[49101,49127],[49129,49155],[49157,49183],[49185,49211],[49213,49239],[49241,49267],[49269,49295],[49297,49323],[49325,49351],[49353,49379],[49381,49407],[49409,49435],[49437,49463],[49465,49491],[49493,49519],[49521,49547],[49549,49575],[49577,49603],[49605,49631],[49633,49659],[49661,49687],[49689,49715],[49717,49743],[49745,49771],[49773,49799],[49801,49827],[49829,49855],[49857,49883],[49885,49911],[49913,49939],[49941,49967],[49969,49995],[49997,50023],[50025,50051],[50053,50079],[50081,50107],[50109,50135],[50137,50163],[50165,50191],[50193,50219],[50221,50247],[50249,50275],[50277,50303],[50305,50331],[50333,50359],[50361,50387],[50389,50415],[50417,50443],[50445,50471],[50473,50499],[50501,50527],[50529,50555],[50557,50583],[50585,50611],[50613,50639],[50641,50667],[50669,50695],[50697,50723],[50725,50751],[50753,50779],[50781,50807],[50809,50835],[50837,50863],[50865,50891],[50893,50919],[50921,50947],[50949,50975],[50977,51003],[51005,51031],[51033,51059],[51061,51087],[51089,51115],[51117,51143],[51145,51171],[51173,51199],[51201,51227],[51229,51255],[51257,51283],[51285,51311],[51313,51339],[51341,51367],[51369,51395],[51397,51423],[51425,51451],[51453,51479],[51481,51507],[51509,51535],[51537,51563],[51565,51591],[51593,51619],[51621,51647],[51649,51675],[51677,51703],[51705,51731],[51733,51759],[51761,51787],[51789,51815],[51817,51843],[51845,51871],[51873,51899],[51901,51927],[51929,51955],[51957,51983],[51985,52011],[52013,52039],[52041,52067],[52069,52095],[52097,52123],[52125,52151],[52153,52179],[52181,52207],[52209,52235],[52237,52263],[52265,52291],[52293,52319],[52321,52347],[52349,52375],[52377,52403],[52405,52431],[52433,52459],[52461,52487],[52489,52515],[52517,52543],[52545,52571],[52573,52599],[52601,52627],[52629,52655],[52657,52683],[52685,52711],[52713,52739],[52741,52767],[52769,52795],[52797,52823],[52825,52851],[52853,52879],[52881,52907],[52909,52935],[52937,52963],[52965,52991],[52993,53019],[53021,53047],[53049,53075],[53077,53103],[53105,53131],[53133,53159],[53161,53187],[53189,53215],[53217,53243],[53245,53271],[53273,53299],[53301,53327],[53329,53355],[53357,53383],[53385,53411],[53413,53439],[53441,53467],[53469,53495],[53497,53523],[53525,53551],[53553,53579],[53581,53607],[53609,53635],[53637,53663],[53665,53691],[53693,53719],[53721,53747],[53749,53775],[53777,53803],[53805,53831],[53833,53859],[53861,53887],[53889,53915],[53917,53943],[53945,53971],[53973,53999],[54001,54027],[54029,54055],[54057,54083],[54085,54111],[54113,54139],[54141,54167],[54169,54195],[54197,54223],[54225,54251],[54253,54279],[54281,54307],[54309,54335],[54337,54363],[54365,54391],[54393,54419],[54421,54447],[54449,54475],[54477,54503],[54505,54531],[54533,54559],[54561,54587],[54589,54615],[54617,54643],[54645,54671],[54673,54699],[54701,54727],[54729,54755],[54757,54783],[54785,54811],[54813,54839],[54841,54867],[54869,54895],[54897,54923],[54925,54951],[54953,54979],[54981,55007],[55009,55035],[55037,55063],[55065,55091],[55093,55119],[55121,55147],[55149,55175],[55177,55203]],"Line_Break/Combining_Mark":[[0,8],[14,31],[127,132],[134,159],[768,846],[848,859],[867,879],[1155,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1552,1562],[1564,1564],[1611,1631],[1648,1648],[1750,1756],[1759,1764],[1767,1768],[1770,1773],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2045,2045],[2070,2073],[2075,2083],[2085,2087],[2089,2093],[2137,2139],[2200,2207],[2250,2273],[2275,2307],[2362,2364],[2366,2383],[2385,2391],[2402,2403],[2433,2435],[2492,2492],[2494,2500],[2503,2504],[2507,2509],[2519,2519],[2530,2531],[2558,2558],[2561,2563],[2620,2620],[2622,2626],[2631,2632],[2635,2637],[2641,2641],[2672,2673],[2677,2677],[2689,2691],[2748,2748],[2750,2757],[2759,2761],[2763,2765],[2786,2787],[2810,2815],[2817,2819],[2876,2876],[2878,2884],[2887,2888],[2891,2893],[2901,2903],[2914,2915],[2946,2946],[3006,3010],[3014,3016],[3018,3021],[3031,3031],[3072,3076],[3132,3132],[3134,3140],[3142,3144],[3146,3149],[3157,3158],[3170,3171],[3201,3203],[3260,3260],[3262,3268],[3270,3272],[3274,3277],[3285,3286],[3298,3299],[3315,3315],[3328,3331],[3387,3388],[3390,3396],[3398,3400],[3402,3405],[3415,3415],[3426,3427],[3457,3459],[3530,3530],[3535,3540],[3542,3542],[3544,3551],[3570,3571],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3902,3903],[3953,3966],[3968,3972],[3974,3975],[3981,3991],[3993,4028],[4038,4038],[4957,4959],[5906,5909],[5938,5940],[5970,5971],[6002,6003],[6155,6157],[6159,6159],[6277,6278],[6313,6313],[6432,6443],[6448,6459],[6679,6683],[6783,6783],[6832,6862],[6912,6916],[6964,6980],[7019,7027],[7040,7042],[7073,7085],[7142,7155],[7204,7223],[7376,7378],[7380,7400],[7405,7405],[7412,7412],[7415,7417],[7616,7628],[7630,7675],[7677,7679],[8204,8204],[8206,8207],[8234,8238],[8294,8303],[8400,8432],[11503,11505],[11647,11647],[11744,11775],[12330,12335],[12341,12341],[12441,12442],[42607,42610],[42612,42621],[42654,42655],[42736,42737],[43010,43010],[43014,43014],[43019,43019],[43043,43047],[43052,43052],[43136,43137],[43188,43205],[43232,43249],[43263,43263],[43302,43309],[43335,43347],[43392,43395],[43443,43456],[43561,43574],[43587,43587],[43596,43597],[43755,43759],[43765,43766],[44003,44010],[44012,44013],[64286,64286],[65024,65039],[65056,65071],[65529,65531],[66045,66045],[66272,66272],[66422,66426],[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[68325,68326],[68900,68903],[69291,69292],[69373,69375],[69446,69456],[69506,69509],[69632,69634],[69688,69702],[69744,69744],[69747,69748],[69759,69762],[69808,69818],[69826,69826],[69888,69890],[69927,69940],[69957,69958],[70003,70003],[70016,70018],[70067,70080],[70089,70092],[70094,70095],[70188,70199],[70206,70206],[70209,70209],[70367,70378],[70400,70403],[70459,70460],[70462,70468],[70471,70472],[70475,70477],[70487,70487],[70498,70499],[70502,70508],[70512,70516],[70709,70726],[70750,70750],[70832,70851],[71087,71093],[71096,71104],[71132,71133],[71216,71232],[71339,71351],[71724,71738],[71984,71989],[71991,71992],[71995,71998],[72000,72000],[72002,72003],[72145,72151],[72154,72160],[72164,72164],[72193,72202],[72243,72249],[72251,72254],[72263,72263],[72273,72283],[72330,72345],[72751,72758],[72760,72767],[72850,72871],[72873,72886],[73009,73014],[73018,73018],[73020,73021],[73023,73029],[73031,73031],[73098,73102],[73104,73105],[73107,73111],[73459,73462],[73472,73473],[73475,73475],[73524,73530],[73534,73538],[78912,78912],[78919,78933],[92912,92916],[92976,92982],[94031,94031],[94033,94087],[94095,94098],[94192,94193],[113821,113822],[113824,113827],[118528,118573],[118576,118598],[119141,119145],[119149,119170],[119173,119179],[119210,119213],[119362,119364],[121344,121398],[121403,121452],[121461,121461],[121476,121476],[121499,121503],[121505,121519],[122880,122886],[122888,122904],[122907,122913],[122915,122916],[122918,122922],[123023,123023],[123184,123190],[123566,123566],[123628,123631],[124140,124143],[125136,125142],[125252,125258],[917505,917505],[917536,917631],[917760,917999]],"Line_Break/Break_Both":[[8212,8212],[11834,11835]],"Line_Break/JT":[[4520,4607],[55243,55291]],"Line_Break/Line_Feed":[[10,10]],"Line_Break/Glue":[[160,160],[847,847],[860,866],[3848,3848],[3852,3852],[3858,3858],[4057,4058],[6158,6158],[7629,7629],[7676,7676],[8199,8199],[8209,8209],[8239,8239],[78896,78902],[78905,78907],[94180,94180]],"Line_Break/Hebrew_Letter":[[1488,1514],[1519,1522],[64285,64285],[64287,64296],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64335]],"Line_Break/Alphabetic":[[35,35],[38,38],[42,42],[60,62],[64,90],[94,122],[126,126],[166,166],[169,169],[172,172],[174,175],[181,181],[192,214],[216,246],[248,710],[718,719],[721,727],[732,732],[734,734],[736,767],[880,887],[890,893],[895,895],[900,906],[908,908],[910,929],[931,1154],[1162,1327],[1329,1366],[1369,1416],[1421,1422],[1472,1472],[1475,1475],[1523,1524],[1536,1544],[1550,1551],[1568,1610],[1645,1647],[1649,1747],[1749,1749],[1757,1758],[1765,1766],[1769,1769],[1774,1775],[1786,1805],[1807,1808],[1810,1839],[1869,1957],[1969,1969],[1994,2026],[2036,2039],[2042,2042],[2048,2069],[2074,2074],[2084,2084],[2088,2088],[2096,2110],[2112,2136],[2142,2142],[2144,2154],[2160,2190],[2192,2193],[2208,2249],[2274,2274],[2308,2361],[2365,2365],[2384,2384],[2392,2401],[2416,2432],[2437,2444],[2447,2448],[2451,2472],[2474,2480],[2482,2482],[2486,2489],[2493,2493],[2510,2510],[2524,2525],[2527,2529],[2544,2545],[2548,2552],[2554,2554],[2556,2557],[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2649,2652],[2654,2654],[2674,2676],[2678,2678],[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],[2749,2749],[2768,2768],[2784,2785],[2800,2800],[2809,2809],[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2877,2877],[2908,2909],[2911,2913],[2928,2935],[2947,2947],[2949,2954],[2958,2960],[2962,2965],[2969,2970],[2972,2972],[2974,2975],[2979,2980],[2984,2986],[2990,3001],[3024,3024],[3056,3064],[3066,3066],[3077,3084],[3086,3088],[3090,3112],[3114,3129],[3133,3133],[3160,3162],[3165,3165],[3168,3169],[3192,3200],[3205,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],[3261,3261],[3293,3294],[3296,3297],[3313,3314],[3332,3340],[3342,3344],[3346,3386],[3389,3389],[3406,3407],[3412,3414],[3416,3425],[3440,3448],[3450,3455],[3461,3478],[3482,3505],[3507,3515],[3517,3517],[3520,3526],[3572,3572],[3663,3663],[3840,3840],[3845,3845],[3859,3859],[3861,3863],[3866,3871],[3882,3891],[3894,3894],[3896,3896],[3904,3911],[3913,3948],[3976,3980],[4032,4037],[4039,4044],[4046,4047],[4052,4056],[4172,4175],[4256,4293],[4295,4295],[4301,4301],[4304,4351],[4608,4680],[4682,4685],[4688,4694],[4696,4696],[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],[4800,4800],[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4960,4960],[4962,4988],[4992,5017],[5024,5109],[5112,5117],[5121,5759],[5761,5786],[5792,5866],[5870,5880],[5888,5905],[5919,5937],[5952,5969],[5984,5996],[5998,6000],[6105,6105],[6128,6137],[6144,6145],[6151,6151],[6154,6154],[6176,6264],[6272,6276],[6279,6312],[6314,6314],[6320,6389],[6400,6430],[6464,6464],[6624,6678],[6686,6687],[6917,6963],[6981,6988],[7004,7004],[7009,7018],[7028,7036],[7043,7072],[7086,7087],[7098,7141],[7164,7203],[7245,7247],[7258,7293],[7296,7304],[7312,7354],[7357,7367],[7379,7379],[7401,7404],[7406,7411],[7413,7414],[7418,7418],[7424,7615],[7680,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025,8025],[8027,8027],[8029,8029],[8031,8061],[8064,8116],[8118,8132],[8134,8147],[8150,8155],[8157,8175],[8178,8180],[8182,8188],[8190,8190],[8215,8215],[8226,8227],[8248,8248],[8254,8259],[8266,8277],[8284,8284],[8289,8292],[8304,8305],[8309,8316],[8320,8320],[8325,8332],[8336,8348],[8448,8450],[8452,8452],[8454,8456],[8458,8466],[8468,8469],[8471,8480],[8483,8490],[8492,8531],[8534,8538],[8540,8541],[8543,8543],[8556,8559],[8570,8584],[8586,8587],[8602,8657],[8659,8659],[8661,8703],[8705,8705],[8708,8710],[8713,8714],[8716,8718],[8720,8720],[8724,8724],[8726,8729],[8731,8732],[8737,8738],[8740,8740],[8742,8742],[8749,8749],[8751,8755],[8760,8763],[8766,8775],[8777,8779],[8781,8785],[8787,8799],[8802,8803],[8808,8809],[8812,8813],[8816,8833],[8836,8837],[8840,8852],[8854,8856],[8858,8868],[8870,8894],[8896,8942],[8944,8967],[8972,8977],[8979,8985],[8988,9000],[9003,9199],[9204,9254],[9280,9290],[9471,9471],[9548,9551],[9589,9599],[9616,9617],[9622,9631],[9634,9634],[9642,9649],[9652,9653],[9656,9659],[9662,9663],[9666,9669],[9673,9674],[9676,9677],[9682,9697],[9702,9710],[9712,9727],[9732,9732],[9735,9736],[9738,9741],[9744,9747],[9753,9753],[9760,9784],[9788,9791],[9793,9793],[9795,9823],[9826,9826],[9830,9830],[9835,9835],[9838,9838],[9840,9854],[9856,9885],[9888,9916],[9934,9934],[9954,9954],[9956,9959],[9989,9991],[9998,10070],[10072,10074],[10081,10081],[10085,10087],[10132,10180],[10183,10213],[10224,10626],[10649,10711],[10716,10747],[10750,11092],[11098,11123],[11126,11157],[11159,11502],[11506,11507],[11517,11517],[11520,11557],[11559,11559],[11565,11565],[11568,11623],[11631,11631],[11648,11670],[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[11798,11798],[11802,11803],[11806,11807],[11823,11823],[11826,11826],[11829,11833],[11839,11839],[11851,11851],[11853,11853],[11856,11858],[19904,19967],[42192,42237],[42240,42508],[42512,42527],[42538,42539],[42560,42606],[42611,42611],[42622,42653],[42656,42735],[42738,42738],[42752,42954],[42960,42961],[42963,42963],[42965,42969],[42994,43009],[43011,43013],[43015,43018],[43020,43042],[43048,43051],[43056,43063],[43065,43065],[43072,43123],[43138,43187],[43250,43259],[43261,43262],[43274,43301],[43312,43334],[43359,43359],[43396,43442],[43457,43462],[43466,43469],[43471,43471],[43486,43487],[43520,43560],[43584,43586],[43588,43595],[43612,43612],[43744,43754],[43762,43764],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822],[43824,43883],[43888,44002],[64256,64262],[64275,64279],[64297,64297],[64336,64450],[64467,64829],[64832,64911],[64914,64967],[64975,64975],[65008,65019],[65021,65023],[65136,65140],[65142,65276],[65512,65518],[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786],[65799,65843],[65847,65934],[65936,65948],[65952,65952],[66000,66044],[66176,66204],[66208,66256],[66273,66299],[66304,66339],[66349,66378],[66384,66421],[66432,66461],[66464,66499],[66504,66511],[66513,66517],[66560,66717],[66736,66771],[66776,66811],[66816,66855],[66864,66915],[66927,66938],[66940,66954],[66956,66962],[66964,66965],[66967,66977],[66979,66993],[66995,67001],[67003,67004],[67072,67382],[67392,67413],[67424,67431],[67456,67461],[67463,67504],[67506,67514],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67669],[67672,67742],[67751,67759],[67808,67826],[67828,67829],[67835,67867],[67872,67897],[67903,67903],[67968,68023],[68028,68047],[68050,68096],[68112,68115],[68117,68119],[68121,68149],[68160,68168],[68184,68184],[68192,68255],[68288,68324],[68331,68335],[68352,68405],[68416,68437],[68440,68466],[68472,68497],[68505,68508],[68521,68527],[68608,68680],[68736,68786],[68800,68850],[68858,68899],[69216,69246],[69248,69289],[69296,69297],[69376,69415],[69424,69445],[69457,69465],[69488,69505],[69510,69513],[69552,69579],[69600,69622],[69635,69687],[69705,69709],[69714,69733],[69745,69746],[69749,69749],[69763,69807],[69819,69821],[69837,69837],[69840,69864],[69891,69926],[69956,69956],[69959,69959],[69968,70002],[70004,70004],[70006,70006],[70019,70066],[70081,70084],[70087,70087],[70093,70093],[70106,70106],[70108,70108],[70113,70132],[70144,70161],[70163,70187],[70202,70202],[70205,70205],[70207,70208],[70272,70278],[70280,70280],[70282,70285],[70287,70301],[70303,70312],[70320,70366],[70405,70412],[70415,70416],[70419,70440],[70442,70448],[70450,70451],[70453,70457],[70461,70461],[70480,70480],[70493,70497],[70656,70708],[70727,70730],[70735,70735],[70749,70749],[70751,70753],[70784,70831],[70852,70855],[71040,71086],[71110,71112],[71128,71131],[71168,71215],[71235,71236],[71296,71338],[71352,71353],[71680,71723],[71739,71739],[71840,71903],[71914,71922],[71935,71942],[71945,71945],[71948,71955],[71957,71958],[71960,71983],[71999,71999],[72001,72001],[72096,72103],[72106,72144],[72161,72161],[72163,72163],[72192,72192],[72203,72242],[72250,72250],[72256,72256],[72262,72262],[72272,72272],[72284,72329],[72349,72349],[72368,72440],[72704,72712],[72714,72750],[72768,72768],[72794,72812],[72818,72847],[72960,72966],[72968,72969],[72971,73008],[73030,73030],[73056,73061],[73063,73064],[73066,73097],[73112,73112],[73440,73458],[73463,73464],[73474,73474],[73476,73488],[73490,73523],[73648,73648],[73664,73692],[73697,73713],[73728,74649],[74752,74862],[74880,75075],[77712,77810],[77824,78423],[78430,78465],[78467,78469],[78474,78712],[78716,78895],[78913,78918],[82944,83405],[83408,83526],[92160,92728],[92736,92766],[92784,92862],[92880,92909],[92928,92975],[92986,92995],[92997,92997],[93019,93025],[93027,93047],[93053,93071],[93760,93846],[93849,93850],[93952,94026],[94032,94032],[94099,94111],[101120,101589],[110576,110579],[110581,110587],[110589,110590],[113664,113770],[113776,113788],[113792,113800],[113808,113817],[113820,113820],[118608,118723],[118784,119029],[119040,119078],[119081,119140],[119146,119148],[119171,119172],[119180,119209],[119214,119274],[119296,119361],[119365,119365],[119488,119507],[119520,119539],[119552,119638],[119648,119672],[119808,119892],[119894,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119993],[119995,119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120146,120485],[120488,120779],[120832,121343],[121399,121402],[121453,121460],[121462,121475],[121477,121478],[121483,121483],[122624,122654],[122661,122666],[122928,122989],[123136,123180],[123191,123197],[123214,123215],[123536,123565],[123584,123627],[124112,124139],[124896,124902],[124904,124907],[124909,124910],[124912,124926],[124928,125124],[125127,125135],[125184,125251],[125259,125259],[126065,126123],[126125,126127],[126129,126132],[126209,126269],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[126704,126705],[127278,127279],[127338,127340],[127900,127901],[127925,127926],[127932,127932],[128160,128160],[128162,128162],[128164,128164],[128175,128175],[128177,128178],[128256,128262],[128279,128292],[128306,128329],[128468,128475],[128500,128505],[128592,128629],[128636,128639],[128768,128883],[128896,128980],[129024,129035],[129040,129095],[129104,129113],[129120,129159],[129168,129197],[129280,129291],[129536,129619],[129792,129938],[129940,129994]],"Line_Break/H2":[[44032,44032],[44060,44060],[44088,44088],[44116,44116],[44144,44144],[44172,44172],[44200,44200],[44228,44228],[44256,44256],[44284,44284],[44312,44312],[44340,44340],[44368,44368],[44396,44396],[44424,44424],[44452,44452],[44480,44480],[44508,44508],[44536,44536],[44564,44564],[44592,44592],[44620,44620],[44648,44648],[44676,44676],[44704,44704],[44732,44732],[44760,44760],[44788,44788],[44816,44816],[44844,44844],[44872,44872],[44900,44900],[44928,44928],[44956,44956],[44984,44984],[45012,45012],[45040,45040],[45068,45068],[45096,45096],[45124,45124],[45152,45152],[45180,45180],[45208,45208],[45236,45236],[45264,45264],[45292,45292],[45320,45320],[45348,45348],[45376,45376],[45404,45404],[45432,45432],[45460,45460],[45488,45488],[45516,45516],[45544,45544],[45572,45572],[45600,45600],[45628,45628],[45656,45656],[45684,45684],[45712,45712],[45740,45740],[45768,45768],[45796,45796],[45824,45824],[45852,45852],[45880,45880],[45908,45908],[45936,45936],[45964,45964],[45992,45992],[46020,46020],[46048,46048],[46076,46076],[46104,46104],[46132,46132],[46160,46160],[46188,46188],[46216,46216],[46244,46244],[46272,46272],[46300,46300],[46328,46328],[46356,46356],[46384,46384],[46412,46412],[46440,46440],[46468,46468],[46496,46496],[46524,46524],[46552,46552],[46580,46580],[46608,46608],[46636,46636],[46664,46664],[46692,46692],[46720,46720],[46748,46748],[46776,46776],[46804,46804],[46832,46832],[46860,46860],[46888,46888],[46916,46916],[46944,46944],[46972,46972],[47000,47000],[47028,47028],[47056,47056],[47084,47084],[47112,47112],[47140,47140],[47168,47168],[47196,47196],[47224,47224],[47252,47252],[47280,47280],[47308,47308],[47336,47336],[47364,47364],[47392,47392],[47420,47420],[47448,47448],[47476,47476],[47504,47504],[47532,47532],[47560,47560],[47588,47588],[47616,47616],[47644,47644],[47672,47672],[47700,47700],[47728,47728],[47756,47756],[47784,47784],[47812,47812],[47840,47840],[47868,47868],[47896,47896],[47924,47924],[47952,47952],[47980,47980],[48008,48008],[48036,48036],[48064,48064],[48092,48092],[48120,48120],[48148,48148],[48176,48176],[48204,48204],[48232,48232],[48260,48260],[48288,48288],[48316,48316],[48344,48344],[48372,48372],[48400,48400],[48428,48428],[48456,48456],[48484,48484],[48512,48512],[48540,48540],[48568,48568],[48596,48596],[48624,48624],[48652,48652],[48680,48680],[48708,48708],[48736,48736],[48764,48764],[48792,48792],[48820,48820],[48848,48848],[48876,48876],[48904,48904],[48932,48932],[48960,48960],[48988,48988],[49016,49016],[49044,49044],[49072,49072],[49100,49100],[49128,49128],[49156,49156],[49184,49184],[49212,49212],[49240,49240],[49268,49268],[49296,49296],[49324,49324],[49352,49352],[49380,49380],[49408,49408],[49436,49436],[49464,49464],[49492,49492],[49520,49520],[49548,49548],[49576,49576],[49604,49604],[49632,49632],[49660,49660],[49688,49688],[49716,49716],[49744,49744],[49772,49772],[49800,49800],[49828,49828],[49856,49856],[49884,49884],[49912,49912],[49940,49940],[49968,49968],[49996,49996],[50024,50024],[50052,50052],[50080,50080],[50108,50108],[50136,50136],[50164,50164],[50192,50192],[50220,50220],[50248,50248],[50276,50276],[50304,50304],[50332,50332],[50360,50360],[50388,50388],[50416,50416],[50444,50444],[50472,50472],[50500,50500],[50528,50528],[50556,50556],[50584,50584],[50612,50612],[50640,50640],[50668,50668],[50696,50696],[50724,50724],[50752,50752],[50780,50780],[50808,50808],[50836,50836],[50864,50864],[50892,50892],[50920,50920],[50948,50948],[50976,50976],[51004,51004],[51032,51032],[51060,51060],[51088,51088],[51116,51116],[51144,51144],[51172,51172],[51200,51200],[51228,51228],[51256,51256],[51284,51284],[51312,51312],[51340,51340],[51368,51368],[51396,51396],[51424,51424],[51452,51452],[51480,51480],[51508,51508],[51536,51536],[51564,51564],[51592,51592],[51620,51620],[51648,51648],[51676,51676],[51704,51704],[51732,51732],[51760,51760],[51788,51788],[51816,51816],[51844,51844],[51872,51872],[51900,51900],[51928,51928],[51956,51956],[51984,51984],[52012,52012],[52040,52040],[52068,52068],[52096,52096],[52124,52124],[52152,52152],[52180,52180],[52208,52208],[52236,52236],[52264,52264],[52292,52292],[52320,52320],[52348,52348],[52376,52376],[52404,52404],[52432,52432],[52460,52460],[52488,52488],[52516,52516],[52544,52544],[52572,52572],[52600,52600],[52628,52628],[52656,52656],[52684,52684],[52712,52712],[52740,52740],[52768,52768],[52796,52796],[52824,52824],[52852,52852],[52880,52880],[52908,52908],[52936,52936],[52964,52964],[52992,52992],[53020,53020],[53048,53048],[53076,53076],[53104,53104],[53132,53132],[53160,53160],[53188,53188],[53216,53216],[53244,53244],[53272,53272],[53300,53300],[53328,53328],[53356,53356],[53384,53384],[53412,53412],[53440,53440],[53468,53468],[53496,53496],[53524,53524],[53552,53552],[53580,53580],[53608,53608],[53636,53636],[53664,53664],[53692,53692],[53720,53720],[53748,53748],[53776,53776],[53804,53804],[53832,53832],[53860,53860],[53888,53888],[53916,53916],[53944,53944],[53972,53972],[54000,54000],[54028,54028],[54056,54056],[54084,54084],[54112,54112],[54140,54140],[54168,54168],[54196,54196],[54224,54224],[54252,54252],[54280,54280],[54308,54308],[54336,54336],[54364,54364],[54392,54392],[54420,54420],[54448,54448],[54476,54476],[54504,54504],[54532,54532],[54560,54560],[54588,54588],[54616,54616],[54644,54644],[54672,54672],[54700,54700],[54728,54728],[54756,54756],[54784,54784],[54812,54812],[54840,54840],[54868,54868],[54896,54896],[54924,54924],[54952,54952],[54980,54980],[55008,55008],[55036,55036],[55064,55064],[55092,55092],[55120,55120],[55148,55148],[55176,55176]],"Line_Break/Break_Before":[[180,180],[712,712],[716,716],[735,735],[3191,3191],[3204,3204],[3841,3844],[3846,3847],[3849,3850],[4048,4049],[4051,4051],[6150,6150],[8189,8189],[43124,43125],[43260,43260],[70005,70005],[70107,70107],[71105,71105],[71264,71276],[72162,72162],[72255,72255],[72261,72261],[72350,72352],[72448,72457],[72816,72816]],"Line_Break/Unknown":[[888,889],[896,899],[907,907],[909,909],[930,930],[1328,1328],[1367,1368],[1419,1420],[1424,1424],[1480,1487],[1515,1518],[1525,1535],[1806,1806],[1867,1868],[1970,1983],[2043,2044],[2094,2095],[2111,2111],[2140,2141],[2143,2143],[2155,2159],[2191,2191],[2194,2199],[2436,2436],[2445,2446],[2449,2450],[2473,2473],[2481,2481],[2483,2485],[2490,2491],[2501,2502],[2505,2506],[2511,2518],[2520,2523],[2526,2526],[2532,2533],[2559,2560],[2564,2564],[2571,2574],[2577,2578],[2601,2601],[2609,2609],[2612,2612],[2615,2615],[2618,2619],[2621,2621],[2627,2630],[2633,2634],[2638,2640],[2642,2648],[2653,2653],[2655,2661],[2679,2688],[2692,2692],[2702,2702],[2706,2706],[2729,2729],[2737,2737],[2740,2740],[2746,2747],[2758,2758],[2762,2762],[2766,2767],[2769,2783],[2788,2789],[2802,2808],[2816,2816],[2820,2820],[2829,2830],[2833,2834],[2857,2857],[2865,2865],[2868,2868],[2874,2875],[2885,2886],[2889,2890],[2894,2900],[2904,2907],[2910,2910],[2916,2917],[2936,2945],[2948,2948],[2955,2957],[2961,2961],[2966,2968],[2971,2971],[2973,2973],[2976,2978],[2981,2983],[2987,2989],[3002,3005],[3011,3013],[3017,3017],[3022,3023],[3025,3030],[3032,3045],[3067,3071],[3085,3085],[3089,3089],[3113,3113],[3130,3131],[3141,3141],[3145,3145],[3150,3156],[3159,3159],[3163,3164],[3166,3167],[3172,3173],[3184,3190],[3213,3213],[3217,3217],[3241,3241],[3252,3252],[3258,3259],[3269,3269],[3273,3273],[3278,3284],[3287,3292],[3295,3295],[3300,3301],[3312,3312],[3316,3327],[3341,3341],[3345,3345],[3397,3397],[3401,3401],[3408,3411],[3428,3429],[3456,3456],[3460,3460],[3479,3481],[3506,3506],[3516,3516],[3518,3519],[3527,3529],[3531,3534],[3541,3541],[3543,3543],[3552,3557],[3568,3569],[3573,3584],[3643,3646],[3676,3712],[3715,3715],[3717,3717],[3723,3723],[3748,3748],[3750,3750],[3774,3775],[3781,3781],[3783,3783],[3791,3791],[3802,3803],[3808,3839],[3912,3912],[3949,3952],[3992,3992],[4029,4029],[4045,4045],[4059,4095],[4294,4294],[4296,4300],[4302,4303],[4681,4681],[4686,4687],[4695,4695],[4697,4697],[4702,4703],[4745,4745],[4750,4751],[4785,4785],[4790,4791],[4799,4799],[4801,4801],[4806,4807],[4823,4823],[4881,4881],[4886,4887],[4955,4956],[4989,4991],[5018,5023],[5110,5111],[5118,5119],[5789,5791],[5881,5887],[5910,5918],[5943,5951],[5972,5983],[5997,5997],[6001,6001],[6004,6015],[6110,6111],[6122,6127],[6138,6143],[6170,6175],[6265,6271],[6315,6319],[6390,6399],[6431,6431],[6444,6447],[6460,6463],[6465,6467],[6510,6511],[6517,6527],[6572,6575],[6602,6607],[6619,6621],[6684,6685],[6751,6751],[6781,6782],[6794,6799],[6810,6815],[6830,6831],[6863,6911],[6989,6991],[7039,7039],[7156,7163],[7224,7226],[7242,7244],[7305,7311],[7355,7356],[7368,7375],[7419,7423],[7958,7959],[7966,7967],[8006,8007],[8014,8015],[8024,8024],[8026,8026],[8028,8028],[8030,8030],[8062,8063],[8117,8117],[8133,8133],[8148,8149],[8156,8156],[8176,8177],[8181,8181],[8191,8191],[8293,8293],[8306,8307],[8335,8335],[8349,8351],[8433,8447],[8588,8591],[9255,9279],[9291,9311],[11124,11125],[11158,11158],[11508,11512],[11558,11558],[11560,11564],[11566,11567],[11624,11630],[11633,11646],[11671,11679],[11687,11687],[11695,11695],[11703,11703],[11711,11711],[11719,11719],[11727,11727],[11735,11735],[11743,11743],[11870,11903],[11930,11930],[12020,12031],[12246,12271],[12284,12287],[12352,12352],[12439,12440],[12544,12548],[12592,12592],[12687,12687],[12772,12783],[12831,12831],[42125,42127],[42183,42191],[42540,42559],[42744,42751],[42955,42959],[42962,42962],[42964,42964],[42970,42993],[43053,43055],[43066,43071],[43128,43135],[43206,43213],[43226,43231],[43348,43358],[43389,43391],[43470,43470],[43482,43485],[43519,43519],[43575,43583],[43598,43599],[43610,43611],[43715,43738],[43767,43776],[43783,43784],[43791,43792],[43799,43807],[43815,43815],[43823,43823],[43884,43887],[44014,44015],[44026,44031],[55204,55215],[55239,55242],[55292,55295],[57344,63743],[64263,64274],[64280,64284],[64311,64311],[64317,64317],[64319,64319],[64322,64322],[64325,64325],[64451,64466],[64912,64913],[64968,64974],[64976,65007],[65050,65055],[65107,65107],[65127,65127],[65132,65135],[65141,65141],[65277,65278],[65280,65280],[65471,65473],[65480,65481],[65488,65489],[65496,65497],[65501,65503],[65511,65511],[65519,65528],[65534,65535],[65548,65548],[65575,65575],[65595,65595],[65598,65598],[65614,65615],[65630,65663],[65787,65791],[65795,65798],[65844,65846],[65935,65935],[65949,65951],[65953,65999],[66046,66175],[66205,66207],[66257,66271],[66300,66303],[66340,66348],[66379,66383],[66427,66431],[66462,66462],[66500,66503],[66518,66559],[66718,66719],[66730,66735],[66772,66775],[66812,66815],[66856,66863],[66916,66926],[66939,66939],[66955,66955],[66963,66963],[66966,66966],[66978,66978],[66994,66994],[67002,67002],[67005,67071],[67383,67391],[67414,67423],[67432,67455],[67462,67462],[67505,67505],[67515,67583],[67590,67591],[67593,67593],[67638,67638],[67641,67643],[67645,67646],[67670,67670],[67743,67750],[67760,67807],[67827,67827],[67830,67834],[67868,67870],[67898,67902],[67904,67967],[68024,68027],[68048,68049],[68100,68100],[68103,68107],[68116,68116],[68120,68120],[68150,68151],[68155,68158],[68169,68175],[68185,68191],[68256,68287],[68327,68330],[68343,68351],[68406,68408],[68438,68439],[68467,68471],[68498,68504],[68509,68520],[68528,68607],[68681,68735],[68787,68799],[68851,68857],[68904,68911],[68922,69215],[69247,69247],[69290,69290],[69294,69295],[69298,69372],[69416,69423],[69466,69487],[69514,69551],[69580,69599],[69623,69631],[69710,69713],[69750,69758],[69827,69836],[69838,69839],[69865,69871],[69882,69887],[69941,69941],[69960,69967],[70007,70015],[70112,70112],[70133,70143],[70162,70162],[70210,70271],[70279,70279],[70281,70281],[70286,70286],[70302,70302],[70314,70319],[70379,70383],[70394,70399],[70404,70404],[70413,70414],[70417,70418],[70441,70441],[70449,70449],[70452,70452],[70458,70458],[70469,70470],[70473,70474],[70478,70479],[70481,70486],[70488,70492],[70500,70501],[70509,70511],[70517,70655],[70748,70748],[70754,70783],[70856,70863],[70874,71039],[71094,71095],[71134,71167],[71237,71247],[71258,71263],[71277,71295],[71354,71359],[71370,71423],[71451,71452],[71468,71471],[71495,71679],[71740,71839],[71923,71934],[71943,71944],[71946,71947],[71956,71956],[71959,71959],[71990,71990],[71993,71994],[72007,72015],[72026,72095],[72104,72105],[72152,72153],[72165,72191],[72264,72271],[72355,72367],[72441,72447],[72458,72703],[72713,72713],[72759,72759],[72774,72783],[72813,72815],[72848,72849],[72872,72872],[72887,72959],[72967,72967],[72970,72970],[73015,73017],[73019,73019],[73022,73022],[73032,73039],[73050,73055],[73062,73062],[73065,73065],[73103,73103],[73106,73106],[73113,73119],[73130,73439],[73465,73471],[73489,73489],[73531,73533],[73562,73647],[73649,73663],[73714,73726],[74650,74751],[74863,74863],[74869,74879],[75076,77711],[77811,77823],[78934,82943],[83527,92159],[92729,92735],[92767,92767],[92778,92781],[92863,92863],[92874,92879],[92910,92911],[92918,92927],[92998,93007],[93018,93018],[93026,93026],[93048,93052],[93072,93759],[93851,93951],[94027,94030],[94088,94094],[94112,94175],[94181,94191],[94194,94207],[100344,100351],[101590,101631],[101641,110575],[110580,110580],[110588,110588],[110591,110591],[110883,110897],[110899,110927],[110931,110932],[110934,110947],[110952,110959],[111356,113663],[113771,113775],[113789,113791],[113801,113807],[113818,113819],[113828,118527],[118574,118575],[118599,118607],[118724,118783],[119030,119039],[119079,119080],[119275,119295],[119366,119487],[119508,119519],[119540,119551],[119639,119647],[119673,119807],[119893,119893],[119965,119965],[119968,119969],[119971,119972],[119975,119976],[119981,119981],[119994,119994],[119996,119996],[120004,120004],[120070,120070],[120075,120076],[120085,120085],[120093,120093],[120122,120122],[120127,120127],[120133,120133],[120135,120137],[120145,120145],[120486,120487],[120780,120781],[121484,121498],[121504,121504],[121520,122623],[122655,122660],[122667,122879],[122887,122887],[122905,122906],[122914,122914],[122917,122917],[122923,122927],[122990,123022],[123024,123135],[123181,123183],[123198,123199],[123210,123213],[123216,123535],[123567,123583],[123642,123646],[123648,124111],[124154,124895],[124903,124903],[124908,124908],[124911,124911],[124927,124927],[125125,125126],[125143,125183],[125260,125263],[125274,125277],[125280,126064],[126133,126208],[126270,126463],[126468,126468],[126496,126496],[126499,126499],[126501,126502],[126504,126504],[126515,126515],[126520,126520],[126522,126522],[126524,126529],[126531,126534],[126536,126536],[126538,126538],[126540,126540],[126544,126544],[126547,126547],[126549,126550],[126552,126552],[126554,126554],[126556,126556],[126558,126558],[126560,126560],[126563,126563],[126565,126566],[126571,126571],[126579,126579],[126584,126584],[126589,126589],[126591,126591],[126602,126602],[126620,126624],[126628,126628],[126634,126634],[126652,126703],[126706,126975],[131070,131071],[196606,196607],[262142,917504],[917506,917535],[917632,917759],[918000,1114111]],"Line_Break/Prefix_Numeric":[[36,36],[43,43],[92,92],[163,165],[177,177],[1423,1423],[2046,2047],[2555,2555],[2801,2801],[3065,3065],[3647,3647],[6107,6107],[8352,8358],[8360,8373],[8375,8378],[8380,8381],[8383,8383],[8385,8399],[8470,8470],[8722,8723],[65129,65129],[65284,65284],[65505,65505],[65509,65510],[123647,123647]],"Line_Break/Ideographic":[[8986,8987],[9200,9203],[9728,9731],[9748,9749],[9752,9752],[9754,9756],[9758,9759],[9785,9787],[9832,9832],[9855,9855],[9917,9928],[9933,9933],[9935,9937],[9939,9940],[9944,9945],[9948,9948],[9951,9953],[9962,9962],[9969,9973],[9975,9976],[9978,9978],[9981,9988],[9992,9993],[10084,10084],[11904,11929],[11931,12019],[12032,12245],[12272,12283],[12291,12292],[12294,12295],[12306,12307],[12320,12329],[12336,12340],[12342,12346],[12349,12351],[12354,12354],[12356,12356],[12358,12358],[12360,12360],[12362,12386],[12388,12418],[12420,12420],[12422,12422],[12424,12429],[12431,12436],[12447,12447],[12450,12450],[12452,12452],[12454,12454],[12456,12456],[12458,12482],[12484,12514],[12516,12516],[12518,12518],[12520,12525],[12527,12532],[12535,12538],[12543,12543],[12549,12591],[12593,12686],[12688,12771],[12800,12830],[12832,12871],[12880,19903],[19968,40980],[40982,42124],[42128,42182],[63744,64255],[65072,65076],[65093,65094],[65097,65103],[65105,65105],[65112,65112],[65119,65126],[65128,65128],[65131,65131],[65282,65283],[65286,65287],[65290,65291],[65293,65293],[65295,65305],[65308,65310],[65312,65338],[65340,65340],[65342,65370],[65372,65372],[65374,65374],[65382,65382],[65393,65437],[65440,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500],[65506,65508],[73541,73551],[94208,100343],[100352,101119],[101632,101640],[110592,110882],[110960,111355],[126976,127231],[127245,127247],[127341,127343],[127405,127461],[127488,127876],[127878,127899],[127902,127924],[127927,127931],[127933,127937],[127941,127942],[127944,127945],[127949,127994],[128000,128065],[128068,128069],[128081,128101],[128121,128123],[128125,128128],[128132,128132],[128136,128142],[128144,128144],[128146,128159],[128161,128161],[128163,128163],[128165,128169],[128171,128174],[128176,128176],[128179,128255],[128263,128278],[128293,128305],[128330,128371],[128374,128377],[128379,128399],[128401,128404],[128407,128467],[128476,128499],[128506,128580],[128584,128586],[128640,128674],[128676,128691],[128695,128703],[128705,128715],[128717,128767],[128884,128895],[128981,129023],[129036,129039],[129096,129103],[129114,129119],[129160,129167],[129198,129279],[129293,129294],[129296,129303],[129312,129317],[129319,129327],[129338,129339],[129343,129398],[129400,129460],[129463,129463],[129466,129466],[129468,129484],[129488,129488],[129502,129535],[129620,129730],[129734,129775],[129785,129791],[130048,131069],[131072,196605],[196608,262141]],"Line_Break/Surrogate":[[55296,57343]],"Line_Break/JL":[[4352,4447],[43360,43388]],"Line_Break/E_Base":[[9757,9757],[9977,9977],[9994,9997],[127877,127877],[127938,127940],[127943,127943],[127946,127948],[128066,128067],[128070,128080],[128102,128120],[128124,128124],[128129,128131],[128133,128135],[128143,128143],[128145,128145],[128170,128170],[128372,128373],[128378,128378],[128400,128400],[128405,128406],[128581,128583],[128587,128591],[128675,128675],[128692,128694],[128704,128704],[128716,128716],[129292,129292],[129295,129295],[129304,129311],[129318,129318],[129328,129337],[129340,129342],[129399,129399],[129461,129462],[129464,129465],[129467,129467],[129485,129487],[129489,129501],[129731,129733],[129776,129784]],"Line_Break/JV":[[4448,4519],[55216,55238]],"Line_Break/Mandatory_Break":[[11,12],[8232,8233]],"Line_Break/Space":[[32,32]],"Line_Break/Infix_Numeric":[[44,44],[46,46],[58,59],[894,894],[1417,1417],[1548,1549],[2040,2040],[8260,8260],[65040,65040],[65043,65044]],"Line_Break/Next_Line":[[133,133]],"Line_Break/Open_Punctuation":[[40,40],[91,91],[123,123],[161,161],[191,191],[3898,3898],[3900,3900],[5787,5787],[8218,8218],[8222,8222],[8261,8261],[8317,8317],[8333,8333],[8968,8968],[8970,8970],[9001,9001],[10088,10088],[10090,10090],[10092,10092],[10094,10094],[10096,10096],[10098,10098],[10100,10100],[10181,10181],[10214,10214],[10216,10216],[10218,10218],[10220,10220],[10222,10222],[10627,10627],[10629,10629],[10631,10631],[10633,10633],[10635,10635],[10637,10637],[10639,10639],[10641,10641],[10643,10643],[10645,10645],[10647,10647],[10712,10712],[10714,10714],[10748,10748],[11800,11800],[11810,11810],[11812,11812],[11814,11814],[11816,11816],[11842,11842],[11861,11861],[11863,11863],[11865,11865],[11867,11867],[12296,12296],[12298,12298],[12300,12300],[12302,12302],[12304,12304],[12308,12308],[12310,12310],[12312,12312],[12314,12314],[12317,12317],[64831,64831],[65047,65047],[65077,65077],[65079,65079],[65081,65081],[65083,65083],[65085,65085],[65087,65087],[65089,65089],[65091,65091],[65095,65095],[65113,65113],[65115,65115],[65117,65117],[65288,65288],[65339,65339],[65371,65371],[65375,65375],[65378,65378],[78424,78426],[78470,78470],[78472,78472],[78713,78713],[78903,78903],[78908,78908],[78910,78910],[83406,83406],[125278,125279]],"Line_Break/Inseparable":[[8228,8230],[8943,8943],[65049,65049],[68342,68342]],"Line_Break/Break_After":[[9,9],[124,124],[173,173],[1418,1418],[1470,1470],[2404,2405],[3674,3675],[3851,3851],[3892,3892],[3967,3967],[3973,3973],[4030,4031],[4050,4050],[4170,4171],[4961,4961],[5120,5120],[5760,5760],[5867,5869],[5941,5942],[6100,6101],[6104,6104],[6106,6106],[6148,6149],[7002,7003],[7005,7008],[7037,7038],[7227,7231],[7294,7295],[8192,8198],[8200,8202],[8208,8208],[8210,8211],[8231,8231],[8278,8278],[8280,8283],[8285,8287],[11514,11516],[11519,11519],[11632,11632],[11790,11797],[11799,11799],[11801,11801],[11818,11821],[11824,11825],[11827,11828],[11836,11838],[11840,11841],[11843,11850],[11852,11852],[11854,11855],[11869,11869],[12288,12288],[42238,42239],[42509,42509],[42511,42511],[42739,42743],[43214,43215],[43310,43311],[43463,43465],[43613,43615],[43760,43761],[44011,44011],[65792,65794],[66463,66463],[66512,66512],[67671,67671],[67871,67871],[68176,68183],[68336,68341],[68409,68415],[69293,69293],[69703,69704],[69822,69825],[69952,69955],[70085,70086],[70088,70088],[70109,70111],[70200,70201],[70203,70204],[70313,70313],[70731,70734],[70746,70747],[71106,71107],[71113,71127],[71233,71234],[71484,71486],[72004,72006],[72257,72260],[72346,72348],[72353,72354],[72769,72773],[73539,73540],[73727,73727],[74864,74868],[92782,92783],[92917,92917],[92983,92985],[92996,92996],[93847,93848],[113823,113823],[121479,121482]],"Line_Break/Ambiguous":[[167,168],[170,170],[178,179],[182,186],[188,190],[215,215],[247,247],[711,711],[713,715],[717,717],[720,720],[728,731],[733,733],[8213,8214],[8224,8225],[8251,8251],[8308,8308],[8319,8319],[8321,8324],[8453,8453],[8467,8467],[8481,8482],[8491,8491],[8532,8533],[8539,8539],[8542,8542],[8544,8555],[8560,8569],[8585,8585],[8592,8601],[8658,8658],[8660,8660],[8704,8704],[8706,8707],[8711,8712],[8715,8715],[8719,8719],[8721,8721],[8725,8725],[8730,8730],[8733,8736],[8739,8739],[8741,8741],[8743,8748],[8750,8750],[8756,8759],[8764,8765],[8776,8776],[8780,8780],[8786,8786],[8800,8801],[8804,8807],[8810,8811],[8814,8815],[8834,8835],[8838,8839],[8853,8853],[8857,8857],[8869,8869],[8895,8895],[8978,8978],[9312,9470],[9472,9547],[9552,9588],[9600,9615],[9618,9621],[9632,9633],[9635,9641],[9650,9651],[9654,9655],[9660,9661],[9664,9665],[9670,9672],[9675,9675],[9678,9681],[9698,9701],[9711,9711],[9733,9734],[9737,9737],[9742,9743],[9750,9751],[9792,9792],[9794,9794],[9824,9825],[9827,9829],[9831,9831],[9833,9834],[9836,9837],[9839,9839],[9886,9887],[9929,9932],[9938,9938],[9941,9943],[9946,9947],[9949,9950],[9955,9955],[9960,9961],[9963,9968],[9974,9974],[9979,9980],[10071,10071],[10102,10131],[11093,11097],[12872,12879],[65533,65533],[127232,127244],[127248,127277],[127280,127337],[127344,127404]],"Line_Break/ZWJ":[[8205,8205]],"Line_Break/Close_Parenthesis":[[41,41],[93,93]],"Line_Break/ZWSpace":[[8203,8203]],"Line_Break/Hyphen":[[45,45]],"Line_Break/Numeric":[[48,57],[1632,1641],[1643,1644],[1776,1785],[1984,1993],[2406,2415],[2534,2543],[2662,2671],[2790,2799],[2918,2927],[3046,3055],[3174,3183],[3302,3311],[3430,3439],[3558,3567],[3664,3673],[3792,3801],[3872,3881],[4160,4169],[4240,4249],[6112,6121],[6160,6169],[6470,6479],[6608,6617],[6784,6793],[6800,6809],[6992,7001],[7088,7097],[7232,7241],[7248,7257],[42528,42537],[43216,43225],[43264,43273],[43472,43481],[43504,43513],[43600,43609],[44016,44025],[66720,66729],[68912,68921],[69734,69743],[69872,69881],[69942,69951],[70096,70105],[70384,70393],[70736,70745],[70864,70873],[71248,71257],[71360,71369],[71472,71481],[71904,71913],[72016,72025],[72784,72793],[73040,73049],[73120,73129],[73552,73561],[92768,92777],[92864,92873],[93008,93017],[120782,120831],[123200,123209],[123632,123641],[124144,124153],[125264,125273],[130032,130041]],"Line_Break/Word_Joiner":[[8288,8288],[65279,65279]],"Line_Break/Regional_Indicator":[[127462,127487]],"Line_Break/Exclamation":[[33,33],[63,63],[1478,1478],[1563,1563],[1565,1567],[1748,1748],[2041,2041],[3853,3857],[3860,3860],[6146,6147],[6152,6153],[6468,6469],[10082,10083],[11513,11513],[11518,11518],[11822,11822],[11859,11860],[42510,42510],[43126,43127],[65045,65046],[65110,65111],[65281,65281],[65311,65311],[71108,71109],[72817,72817]],"Line_Break/Postfix_Numeric":[[37,37],[162,162],[176,176],[1545,1547],[1642,1642],[2546,2547],[2553,2553],[3449,3449],[8240,8247],[8279,8279],[8359,8359],[8374,8374],[8379,8379],[8382,8382],[8384,8384],[8451,8451],[8457,8457],[43064,43064],[65020,65020],[65130,65130],[65285,65285],[65504,65504],[73693,73696],[126124,126124],[126128,126128]],"Line_Break/Close_Punctuation":[[125,125],[3899,3899],[3901,3901],[5788,5788],[8262,8262],[8318,8318],[8334,8334],[8969,8969],[8971,8971],[9002,9002],[10089,10089],[10091,10091],[10093,10093],[10095,10095],[10097,10097],[10099,10099],[10101,10101],[10182,10182],[10215,10215],[10217,10217],[10219,10219],[10221,10221],[10223,10223],[10628,10628],[10630,10630],[10632,10632],[10634,10634],[10636,10636],[10638,10638],[10640,10640],[10642,10642],[10644,10644],[10646,10646],[10648,10648],[10713,10713],[10715,10715],[10749,10749],[11811,11811],[11813,11813],[11815,11815],[11817,11817],[11862,11862],[11864,11864],[11866,11866],[11868,11868],[12289,12290],[12297,12297],[12299,12299],[12301,12301],[12303,12303],[12305,12305],[12309,12309],[12311,12311],[12313,12313],[12315,12315],[12318,12319],[64830,64830],[65041,65042],[65048,65048],[65078,65078],[65080,65080],[65082,65082],[65084,65084],[65086,65086],[65088,65088],[65090,65090],[65092,65092],[65096,65096],[65104,65104],[65106,65106],[65114,65114],[65116,65116],[65118,65118],[65289,65289],[65292,65292],[65294,65294],[65341,65341],[65373,65373],[65376,65377],[65379,65380],[78427,78429],[78466,78466],[78471,78471],[78473,78473],[78714,78715],[78904,78904],[78909,78909],[78911,78911],[83407,83407]],"Line_Break/Nonstarter":[[6102,6102],[8252,8253],[8263,8265],[12293,12293],[12316,12316],[12347,12348],[12443,12446],[12448,12448],[12539,12539],[12541,12542],[40981,40981],[65108,65109],[65306,65307],[65381,65381],[65438,65439],[94176,94179],[128633,128635]],"Line_Break/Conditional_Japanese_Starter":[[12353,12353],[12355,12355],[12357,12357],[12359,12359],[12361,12361],[12387,12387],[12419,12419],[12421,12421],[12423,12423],[12430,12430],[12437,12438],[12449,12449],[12451,12451],[12453,12453],[12455,12455],[12457,12457],[12483,12483],[12515,12515],[12517,12517],[12519,12519],[12526,12526],[12533,12534],[12540,12540],[12784,12799],[65383,65392],[110898,110898],[110928,110930],[110933,110933],[110948,110951]],"Line_Break/Carriage_Return":[[13,13]],"Line_Break/E_Modifier":[[127995,127999]],"Line_Break/Complex_Context":[[3585,3642],[3648,3662],[3713,3714],[3716,3716],[3718,3722],[3724,3747],[3749,3749],[3751,3773],[3776,3780],[3782,3782],[3784,3790],[3804,3807],[4096,4159],[4176,4239],[4250,4255],[6016,6099],[6103,6103],[6108,6109],[6480,6509],[6512,6516],[6528,6571],[6576,6601],[6618,6618],[6622,6623],[6688,6750],[6752,6780],[6816,6829],[43488,43503],[43514,43518],[43616,43714],[43739,43743],[71424,71450],[71453,71467],[71482,71483],[71487,71494]],"Line_Break/Break_Symbols":[[47,47]],"Line_Break/Quotation":[[34,34],[39,39],[171,171],[187,187],[8216,8217],[8219,8221],[8223,8223],[8249,8250],[10075,10080],[11776,11789],[11804,11805],[11808,11809],[128630,128632]],"Bidi_Paired_Bracket_Type/Close":[[41,41],[93,93],[125,125],[3899,3899],[3901,3901],[5788,5788],[8262,8262],[8318,8318],[8334,8334],[8969,8969],[8971,8971],[9002,9002],[10089,10089],[10091,10091],[10093,10093],[10095,10095],[10097,10097],[10099,10099],[10101,10101],[10182,10182],[10215,10215],[10217,10217],[10219,10219],[10221,10221],[10223,10223],[10628,10628],[10630,10630],[10632,10632],[10634,10634],[10636,10636],[10638,10638],[10640,10640],[10642,10642],[10644,10644],[10646,10646],[10648,10648],[10713,10713],[10715,10715],[10749,10749],[11811,11811],[11813,11813],[11815,11815],[11817,11817],[11862,11862],[11864,11864],[11866,11866],[11868,11868],[12297,12297],[12299,12299],[12301,12301],[12303,12303],[12305,12305],[12309,12309],[12311,12311],[12313,12313],[12315,12315],[65114,65114],[65116,65116],[65118,65118],[65289,65289],[65341,65341],[65373,65373],[65376,65376],[65379,65379]],"Bidi_Paired_Bracket_Type/None":[[0,39],[42,90],[92,92],[94,122],[124,124],[126,3897],[3902,5786],[5789,8260],[8263,8316],[8319,8332],[8335,8967],[8972,9000],[9003,10087],[10102,10180],[10183,10213],[10224,10626],[10649,10711],[10716,10747],[10750,11809],[11818,11860],[11869,12295],[12306,12307],[12316,65112],[65119,65287],[65290,65338],[65340,65340],[65342,65370],[65372,65372],[65374,65374],[65377,65377],[65380,1114111]],"Bidi_Paired_Bracket_Type/Open":[[40,40],[91,91],[123,123],[3898,3898],[3900,3900],[5787,5787],[8261,8261],[8317,8317],[8333,8333],[8968,8968],[8970,8970],[9001,9001],[10088,10088],[10090,10090],[10092,10092],[10094,10094],[10096,10096],[10098,10098],[10100,10100],[10181,10181],[10214,10214],[10216,10216],[10218,10218],[10220,10220],[10222,10222],[10627,10627],[10629,10629],[10631,10631],[10633,10633],[10635,10635],[10637,10637],[10639,10639],[10641,10641],[10643,10643],[10645,10645],[10647,10647],[10712,10712],[10714,10714],[10748,10748],[11810,11810],[11812,11812],[11814,11814],[11816,11816],[11861,11861],[11863,11863],[11865,11865],[11867,11867],[12296,12296],[12298,12298],[12300,12300],[12302,12302],[12304,12304],[12308,12308],[12310,12310],[12312,12312],[12314,12314],[65113,65113],[65115,65115],[65117,65117],[65288,65288],[65339,65339],[65371,65371],[65375,65375],[65378,65378]],"Binary_Property/Changes_When_Casefolded":[[65,90],[181,181],[192,214],[216,223],[256,256],[258,258],[260,260],[262,262],[264,264],[266,266],[268,268],[270,270],[272,272],[274,274],[276,276],[278,278],[280,280],[282,282],[284,284],[286,286],[288,288],[290,290],[292,292],[294,294],[296,296],[298,298],[300,300],[302,302],[304,304],[306,306],[308,308],[310,310],[313,313],[315,315],[317,317],[319,319],[321,321],[323,323],[325,325],[327,327],[329,330],[332,332],[334,334],[336,336],[338,338],[340,340],[342,342],[344,344],[346,346],[348,348],[350,350],[352,352],[354,354],[356,356],[358,358],[360,360],[362,362],[364,364],[366,366],[368,368],[370,370],[372,372],[374,374],[376,377],[379,379],[381,381],[383,383],[385,386],[388,388],[390,391],[393,395],[398,401],[403,404],[406,408],[412,413],[415,416],[418,418],[420,420],[422,423],[425,425],[428,428],[430,431],[433,435],[437,437],[439,440],[444,444],[452,453],[455,456],[458,459],[461,461],[463,463],[465,465],[467,467],[469,469],[471,471],[473,473],[475,475],[478,478],[480,480],[482,482],[484,484],[486,486],[488,488],[490,490],[492,492],[494,494],[497,498],[500,500],[502,504],[506,506],[508,508],[510,510],[512,512],[514,514],[516,516],[518,518],[520,520],[522,522],[524,524],[526,526],[528,528],[530,530],[532,532],[534,534],[536,536],[538,538],[540,540],[542,542],[544,544],[546,546],[548,548],[550,550],[552,552],[554,554],[556,556],[558,558],[560,560],[562,562],[570,571],[573,574],[577,577],[579,582],[584,584],[586,586],[588,588],[590,590],[837,837],[880,880],[882,882],[886,886],[895,895],[902,902],[904,906],[908,908],[910,911],[913,929],[931,939],[962,962],[975,977],[981,982],[984,984],[986,986],[988,988],[990,990],[992,992],[994,994],[996,996],[998,998],[1000,1000],[1002,1002],[1004,1004],[1006,1006],[1008,1009],[1012,1013],[1015,1015],[1017,1018],[1021,1071],[1120,1120],[1122,1122],[1124,1124],[1126,1126],[1128,1128],[1130,1130],[1132,1132],[1134,1134],[1136,1136],[1138,1138],[1140,1140],[1142,1142],[1144,1144],[1146,1146],[1148,1148],[1150,1150],[1152,1152],[1162,1162],[1164,1164],[1166,1166],[1168,1168],[1170,1170],[1172,1172],[1174,1174],[1176,1176],[1178,1178],[1180,1180],[1182,1182],[1184,1184],[1186,1186],[1188,1188],[1190,1190],[1192,1192],[1194,1194],[1196,1196],[1198,1198],[1200,1200],[1202,1202],[1204,1204],[1206,1206],[1208,1208],[1210,1210],[1212,1212],[1214,1214],[1216,1217],[1219,1219],[1221,1221],[1223,1223],[1225,1225],[1227,1227],[1229,1229],[1232,1232],[1234,1234],[1236,1236],[1238,1238],[1240,1240],[1242,1242],[1244,1244],[1246,1246],[1248,1248],[1250,1250],[1252,1252],[1254,1254],[1256,1256],[1258,1258],[1260,1260],[1262,1262],[1264,1264],[1266,1266],[1268,1268],[1270,1270],[1272,1272],[1274,1274],[1276,1276],[1278,1278],[1280,1280],[1282,1282],[1284,1284],[1286,1286],[1288,1288],[1290,1290],[1292,1292],[1294,1294],[1296,1296],[1298,1298],[1300,1300],[1302,1302],[1304,1304],[1306,1306],[1308,1308],[1310,1310],[1312,1312],[1314,1314],[1316,1316],[1318,1318],[1320,1320],[1322,1322],[1324,1324],[1326,1326],[1329,1366],[1415,1415],[4256,4293],[4295,4295],[4301,4301],[5112,5117],[7296,7304],[7312,7354],[7357,7359],[7680,7680],[7682,7682],[7684,7684],[7686,7686],[7688,7688],[7690,7690],[7692,7692],[7694,7694],[7696,7696],[7698,7698],[7700,7700],[7702,7702],[7704,7704],[7706,7706],[7708,7708],[7710,7710],[7712,7712],[7714,7714],[7716,7716],[7718,7718],[7720,7720],[7722,7722],[7724,7724],[7726,7726],[7728,7728],[7730,7730],[7732,7732],[7734,7734],[7736,7736],[7738,7738],[7740,7740],[7742,7742],[7744,7744],[7746,7746],[7748,7748],[7750,7750],[7752,7752],[7754,7754],[7756,7756],[7758,7758],[7760,7760],[7762,7762],[7764,7764],[7766,7766],[7768,7768],[7770,7770],[7772,7772],[7774,7774],[7776,7776],[7778,7778],[7780,7780],[7782,7782],[7784,7784],[7786,7786],[7788,7788],[7790,7790],[7792,7792],[7794,7794],[7796,7796],[7798,7798],[7800,7800],[7802,7802],[7804,7804],[7806,7806],[7808,7808],[7810,7810],[7812,7812],[7814,7814],[7816,7816],[7818,7818],[7820,7820],[7822,7822],[7824,7824],[7826,7826],[7828,7828],[7834,7835],[7838,7838],[7840,7840],[7842,7842],[7844,7844],[7846,7846],[7848,7848],[7850,7850],[7852,7852],[7854,7854],[7856,7856],[7858,7858],[7860,7860],[7862,7862],[7864,7864],[7866,7866],[7868,7868],[7870,7870],[7872,7872],[7874,7874],[7876,7876],[7878,7878],[7880,7880],[7882,7882],[7884,7884],[7886,7886],[7888,7888],[7890,7890],[7892,7892],[7894,7894],[7896,7896],[7898,7898],[7900,7900],[7902,7902],[7904,7904],[7906,7906],[7908,7908],[7910,7910],[7912,7912],[7914,7914],[7916,7916],[7918,7918],[7920,7920],[7922,7922],[7924,7924],[7926,7926],[7928,7928],[7930,7930],[7932,7932],[7934,7934],[7944,7951],[7960,7965],[7976,7983],[7992,7999],[8008,8013],[8025,8025],[8027,8027],[8029,8029],[8031,8031],[8040,8047],[8064,8111],[8114,8116],[8119,8124],[8130,8132],[8135,8140],[8152,8155],[8168,8172],[8178,8180],[8183,8188],[8486,8486],[8490,8491],[8498,8498],[8544,8559],[8579,8579],[9398,9423],[11264,11311],[11360,11360],[11362,11364],[11367,11367],[11369,11369],[11371,11371],[11373,11376],[11378,11378],[11381,11381],[11390,11392],[11394,11394],[11396,11396],[11398,11398],[11400,11400],[11402,11402],[11404,11404],[11406,11406],[11408,11408],[11410,11410],[11412,11412],[11414,11414],[11416,11416],[11418,11418],[11420,11420],[11422,11422],[11424,11424],[11426,11426],[11428,11428],[11430,11430],[11432,11432],[11434,11434],[11436,11436],[11438,11438],[11440,11440],[11442,11442],[11444,11444],[11446,11446],[11448,11448],[11450,11450],[11452,11452],[11454,11454],[11456,11456],[11458,11458],[11460,11460],[11462,11462],[11464,11464],[11466,11466],[11468,11468],[11470,11470],[11472,11472],[11474,11474],[11476,11476],[11478,11478],[11480,11480],[11482,11482],[11484,11484],[11486,11486],[11488,11488],[11490,11490],[11499,11499],[11501,11501],[11506,11506],[42560,42560],[42562,42562],[42564,42564],[42566,42566],[42568,42568],[42570,42570],[42572,42572],[42574,42574],[42576,42576],[42578,42578],[42580,42580],[42582,42582],[42584,42584],[42586,42586],[42588,42588],[42590,42590],[42592,42592],[42594,42594],[42596,42596],[42598,42598],[42600,42600],[42602,42602],[42604,42604],[42624,42624],[42626,42626],[42628,42628],[42630,42630],[42632,42632],[42634,42634],[42636,42636],[42638,42638],[42640,42640],[42642,42642],[42644,42644],[42646,42646],[42648,42648],[42650,42650],[42786,42786],[42788,42788],[42790,42790],[42792,42792],[42794,42794],[42796,42796],[42798,42798],[42802,42802],[42804,42804],[42806,42806],[42808,42808],[42810,42810],[42812,42812],[42814,42814],[42816,42816],[42818,42818],[42820,42820],[42822,42822],[42824,42824],[42826,42826],[42828,42828],[42830,42830],[42832,42832],[42834,42834],[42836,42836],[42838,42838],[42840,42840],[42842,42842],[42844,42844],[42846,42846],[42848,42848],[42850,42850],[42852,42852],[42854,42854],[42856,42856],[42858,42858],[42860,42860],[42862,42862],[42873,42873],[42875,42875],[42877,42878],[42880,42880],[42882,42882],[42884,42884],[42886,42886],[42891,42891],[42893,42893],[42896,42896],[42898,42898],[42902,42902],[42904,42904],[42906,42906],[42908,42908],[42910,42910],[42912,42912],[42914,42914],[42916,42916],[42918,42918],[42920,42920],[42922,42926],[42928,42932],[42934,42934],[42936,42936],[42938,42938],[42940,42940],[42942,42942],[42944,42944],[42946,42946],[42948,42951],[42953,42953],[42960,42960],[42966,42966],[42968,42968],[42997,42997],[43888,43967],[64256,64262],[64275,64279],[65313,65338],[66560,66599],[66736,66771],[66928,66938],[66940,66954],[66956,66962],[66964,66965],[68736,68786],[71840,71871],[93760,93791],[125184,125217]],"Binary_Property/IDS_Binary_Operator":[[12272,12273],[12276,12283]],"Binary_Property/Changes_When_Lowercased":[[65,90],[192,214],[216,222],[256,256],[258,258],[260,260],[262,262],[264,264],[266,266],[268,268],[270,270],[272,272],[274,274],[276,276],[278,278],[280,280],[282,282],[284,284],[286,286],[288,288],[290,290],[292,292],[294,294],[296,296],[298,298],[300,300],[302,302],[304,304],[306,306],[308,308],[310,310],[313,313],[315,315],[317,317],[319,319],[321,321],[323,323],[325,325],[327,327],[330,330],[332,332],[334,334],[336,336],[338,338],[340,340],[342,342],[344,344],[346,346],[348,348],[350,350],[352,352],[354,354],[356,356],[358,358],[360,360],[362,362],[364,364],[366,366],[368,368],[370,370],[372,372],[374,374],[376,377],[379,379],[381,381],[385,386],[388,388],[390,391],[393,395],[398,401],[403,404],[406,408],[412,413],[415,416],[418,418],[420,420],[422,423],[425,425],[428,428],[430,431],[433,435],[437,437],[439,440],[444,444],[452,453],[455,456],[458,459],[461,461],[463,463],[465,465],[467,467],[469,469],[471,471],[473,473],[475,475],[478,478],[480,480],[482,482],[484,484],[486,486],[488,488],[490,490],[492,492],[494,494],[497,498],[500,500],[502,504],[506,506],[508,508],[510,510],[512,512],[514,514],[516,516],[518,518],[520,520],[522,522],[524,524],[526,526],[528,528],[530,530],[532,532],[534,534],[536,536],[538,538],[540,540],[542,542],[544,544],[546,546],[548,548],[550,550],[552,552],[554,554],[556,556],[558,558],[560,560],[562,562],[570,571],[573,574],[577,577],[579,582],[584,584],[586,586],[588,588],[590,590],[880,880],[882,882],[886,886],[895,895],[902,902],[904,906],[908,908],[910,911],[913,929],[931,939],[975,975],[984,984],[986,986],[988,988],[990,990],[992,992],[994,994],[996,996],[998,998],[1000,1000],[1002,1002],[1004,1004],[1006,1006],[1012,1012],[1015,1015],[1017,1018],[1021,1071],[1120,1120],[1122,1122],[1124,1124],[1126,1126],[1128,1128],[1130,1130],[1132,1132],[1134,1134],[1136,1136],[1138,1138],[1140,1140],[1142,1142],[1144,1144],[1146,1146],[1148,1148],[1150,1150],[1152,1152],[1162,1162],[1164,1164],[1166,1166],[1168,1168],[1170,1170],[1172,1172],[1174,1174],[1176,1176],[1178,1178],[1180,1180],[1182,1182],[1184,1184],[1186,1186],[1188,1188],[1190,1190],[1192,1192],[1194,1194],[1196,1196],[1198,1198],[1200,1200],[1202,1202],[1204,1204],[1206,1206],[1208,1208],[1210,1210],[1212,1212],[1214,1214],[1216,1217],[1219,1219],[1221,1221],[1223,1223],[1225,1225],[1227,1227],[1229,1229],[1232,1232],[1234,1234],[1236,1236],[1238,1238],[1240,1240],[1242,1242],[1244,1244],[1246,1246],[1248,1248],[1250,1250],[1252,1252],[1254,1254],[1256,1256],[1258,1258],[1260,1260],[1262,1262],[1264,1264],[1266,1266],[1268,1268],[1270,1270],[1272,1272],[1274,1274],[1276,1276],[1278,1278],[1280,1280],[1282,1282],[1284,1284],[1286,1286],[1288,1288],[1290,1290],[1292,1292],[1294,1294],[1296,1296],[1298,1298],[1300,1300],[1302,1302],[1304,1304],[1306,1306],[1308,1308],[1310,1310],[1312,1312],[1314,1314],[1316,1316],[1318,1318],[1320,1320],[1322,1322],[1324,1324],[1326,1326],[1329,1366],[4256,4293],[4295,4295],[4301,4301],[5024,5109],[7312,7354],[7357,7359],[7680,7680],[7682,7682],[7684,7684],[7686,7686],[7688,7688],[7690,7690],[7692,7692],[7694,7694],[7696,7696],[7698,7698],[7700,7700],[7702,7702],[7704,7704],[7706,7706],[7708,7708],[7710,7710],[7712,7712],[7714,7714],[7716,7716],[7718,7718],[7720,7720],[7722,7722],[7724,7724],[7726,7726],[7728,7728],[7730,7730],[7732,7732],[7734,7734],[7736,7736],[7738,7738],[7740,7740],[7742,7742],[7744,7744],[7746,7746],[7748,7748],[7750,7750],[7752,7752],[7754,7754],[7756,7756],[7758,7758],[7760,7760],[7762,7762],[7764,7764],[7766,7766],[7768,7768],[7770,7770],[7772,7772],[7774,7774],[7776,7776],[7778,7778],[7780,7780],[7782,7782],[7784,7784],[7786,7786],[7788,7788],[7790,7790],[7792,7792],[7794,7794],[7796,7796],[7798,7798],[7800,7800],[7802,7802],[7804,7804],[7806,7806],[7808,7808],[7810,7810],[7812,7812],[7814,7814],[7816,7816],[7818,7818],[7820,7820],[7822,7822],[7824,7824],[7826,7826],[7828,7828],[7838,7838],[7840,7840],[7842,7842],[7844,7844],[7846,7846],[7848,7848],[7850,7850],[7852,7852],[7854,7854],[7856,7856],[7858,7858],[7860,7860],[7862,7862],[7864,7864],[7866,7866],[7868,7868],[7870,7870],[7872,7872],[7874,7874],[7876,7876],[7878,7878],[7880,7880],[7882,7882],[7884,7884],[7886,7886],[7888,7888],[7890,7890],[7892,7892],[7894,7894],[7896,7896],[7898,7898],[7900,7900],[7902,7902],[7904,7904],[7906,7906],[7908,7908],[7910,7910],[7912,7912],[7914,7914],[7916,7916],[7918,7918],[7920,7920],[7922,7922],[7924,7924],[7926,7926],[7928,7928],[7930,7930],[7932,7932],[7934,7934],[7944,7951],[7960,7965],[7976,7983],[7992,7999],[8008,8013],[8025,8025],[8027,8027],[8029,8029],[8031,8031],[8040,8047],[8072,8079],[8088,8095],[8104,8111],[8120,8124],[8136,8140],[8152,8155],[8168,8172],[8184,8188],[8486,8486],[8490,8491],[8498,8498],[8544,8559],[8579,8579],[9398,9423],[11264,11311],[11360,11360],[11362,11364],[11367,11367],[11369,11369],[11371,11371],[11373,11376],[11378,11378],[11381,11381],[11390,11392],[11394,11394],[11396,11396],[11398,11398],[11400,11400],[11402,11402],[11404,11404],[11406,11406],[11408,11408],[11410,11410],[11412,11412],[11414,11414],[11416,11416],[11418,11418],[11420,11420],[11422,11422],[11424,11424],[11426,11426],[11428,11428],[11430,11430],[11432,11432],[11434,11434],[11436,11436],[11438,11438],[11440,11440],[11442,11442],[11444,11444],[11446,11446],[11448,11448],[11450,11450],[11452,11452],[11454,11454],[11456,11456],[11458,11458],[11460,11460],[11462,11462],[11464,11464],[11466,11466],[11468,11468],[11470,11470],[11472,11472],[11474,11474],[11476,11476],[11478,11478],[11480,11480],[11482,11482],[11484,11484],[11486,11486],[11488,11488],[11490,11490],[11499,11499],[11501,11501],[11506,11506],[42560,42560],[42562,42562],[42564,42564],[42566,42566],[42568,42568],[42570,42570],[42572,42572],[42574,42574],[42576,42576],[42578,42578],[42580,42580],[42582,42582],[42584,42584],[42586,42586],[42588,42588],[42590,42590],[42592,42592],[42594,42594],[42596,42596],[42598,42598],[42600,42600],[42602,42602],[42604,42604],[42624,42624],[42626,42626],[42628,42628],[42630,42630],[42632,42632],[42634,42634],[42636,42636],[42638,42638],[42640,42640],[42642,42642],[42644,42644],[42646,42646],[42648,42648],[42650,42650],[42786,42786],[42788,42788],[42790,42790],[42792,42792],[42794,42794],[42796,42796],[42798,42798],[42802,42802],[42804,42804],[42806,42806],[42808,42808],[42810,42810],[42812,42812],[42814,42814],[42816,42816],[42818,42818],[42820,42820],[42822,42822],[42824,42824],[42826,42826],[42828,42828],[42830,42830],[42832,42832],[42834,42834],[42836,42836],[42838,42838],[42840,42840],[42842,42842],[42844,42844],[42846,42846],[42848,42848],[42850,42850],[42852,42852],[42854,42854],[42856,42856],[42858,42858],[42860,42860],[42862,42862],[42873,42873],[42875,42875],[42877,42878],[42880,42880],[42882,42882],[42884,42884],[42886,42886],[42891,42891],[42893,42893],[42896,42896],[42898,42898],[42902,42902],[42904,42904],[42906,42906],[42908,42908],[42910,42910],[42912,42912],[42914,42914],[42916,42916],[42918,42918],[42920,42920],[42922,42926],[42928,42932],[42934,42934],[42936,42936],[42938,42938],[42940,42940],[42942,42942],[42944,42944],[42946,42946],[42948,42951],[42953,42953],[42960,42960],[42966,42966],[42968,42968],[42997,42997],[65313,65338],[66560,66599],[66736,66771],[66928,66938],[66940,66954],[66956,66962],[66964,66965],[68736,68786],[71840,71871],[93760,93791],[125184,125217]],"Binary_Property/Emoji_Modifier_Base":[[9757,9757],[9977,9977],[9994,9997],[127877,127877],[127938,127940],[127943,127943],[127946,127948],[128066,128067],[128070,128080],[128102,128120],[128124,128124],[128129,128131],[128133,128135],[128143,128143],[128145,128145],[128170,128170],[128372,128373],[128378,128378],[128400,128400],[128405,128406],[128581,128583],[128587,128591],[128675,128675],[128692,128694],[128704,128704],[128716,128716],[129292,129292],[129295,129295],[129304,129311],[129318,129318],[129328,129337],[129340,129342],[129399,129399],[129461,129462],[129464,129465],[129467,129467],[129485,129487],[129489,129501],[129731,129733],[129776,129784]],"Binary_Property/XID_Continue":[[48,57],[65,90],[95,95],[97,122],[170,170],[181,181],[183,183],[186,186],[192,214],[216,246],[248,705],[710,721],[736,740],[748,748],[750,750],[768,884],[886,887],[891,893],[895,895],[902,906],[908,908],[910,929],[931,1013],[1015,1153],[1155,1159],[1162,1327],[1329,1366],[1369,1369],[1376,1416],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1488,1514],[1519,1522],[1552,1562],[1568,1641],[1646,1747],[1749,1756],[1759,1768],[1770,1788],[1791,1791],[1808,1866],[1869,1969],[1984,2037],[2042,2042],[2045,2045],[2048,2093],[2112,2139],[2144,2154],[2160,2183],[2185,2190],[2200,2273],[2275,2403],[2406,2415],[2417,2435],[2437,2444],[2447,2448],[2451,2472],[2474,2480],[2482,2482],[2486,2489],[2492,2500],[2503,2504],[2507,2510],[2519,2519],[2524,2525],[2527,2531],[2534,2545],[2556,2556],[2558,2558],[2561,2563],[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2620,2620],[2622,2626],[2631,2632],[2635,2637],[2641,2641],[2649,2652],[2654,2654],[2662,2677],[2689,2691],[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],[2748,2757],[2759,2761],[2763,2765],[2768,2768],[2784,2787],[2790,2799],[2809,2815],[2817,2819],[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2876,2884],[2887,2888],[2891,2893],[2901,2903],[2908,2909],[2911,2915],[2918,2927],[2929,2929],[2946,2947],[2949,2954],[2958,2960],[2962,2965],[2969,2970],[2972,2972],[2974,2975],[2979,2980],[2984,2986],[2990,3001],[3006,3010],[3014,3016],[3018,3021],[3024,3024],[3031,3031],[3046,3055],[3072,3084],[3086,3088],[3090,3112],[3114,3129],[3132,3140],[3142,3144],[3146,3149],[3157,3158],[3160,3162],[3165,3165],[3168,3171],[3174,3183],[3200,3203],[3205,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],[3260,3268],[3270,3272],[3274,3277],[3285,3286],[3293,3294],[3296,3299],[3302,3311],[3313,3315],[3328,3340],[3342,3344],[3346,3396],[3398,3400],[3402,3406],[3412,3415],[3423,3427],[3430,3439],[3450,3455],[3457,3459],[3461,3478],[3482,3505],[3507,3515],[3517,3517],[3520,3526],[3530,3530],[3535,3540],[3542,3542],[3544,3551],[3558,3567],[3570,3571],[3585,3642],[3648,3662],[3664,3673],[3713,3714],[3716,3716],[3718,3722],[3724,3747],[3749,3749],[3751,3773],[3776,3780],[3782,3782],[3784,3790],[3792,3801],[3804,3807],[3840,3840],[3864,3865],[3872,3881],[3893,3893],[3895,3895],[3897,3897],[3902,3911],[3913,3948],[3953,3972],[3974,3991],[3993,4028],[4038,4038],[4096,4169],[4176,4253],[4256,4293],[4295,4295],[4301,4301],[4304,4346],[4348,4680],[4682,4685],[4688,4694],[4696,4696],[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],[4800,4800],[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4957,4959],[4969,4977],[4992,5007],[5024,5109],[5112,5117],[5121,5740],[5743,5759],[5761,5786],[5792,5866],[5870,5880],[5888,5909],[5919,5940],[5952,5971],[5984,5996],[5998,6000],[6002,6003],[6016,6099],[6103,6103],[6108,6109],[6112,6121],[6155,6157],[6159,6169],[6176,6264],[6272,6314],[6320,6389],[6400,6430],[6432,6443],[6448,6459],[6470,6509],[6512,6516],[6528,6571],[6576,6601],[6608,6618],[6656,6683],[6688,6750],[6752,6780],[6783,6793],[6800,6809],[6823,6823],[6832,6845],[6847,6862],[6912,6988],[6992,7001],[7019,7027],[7040,7155],[7168,7223],[7232,7241],[7245,7293],[7296,7304],[7312,7354],[7357,7359],[7376,7378],[7380,7418],[7424,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025,8025],[8027,8027],[8029,8029],[8031,8061],[8064,8116],[8118,8124],[8126,8126],[8130,8132],[8134,8140],[8144,8147],[8150,8155],[8160,8172],[8178,8180],[8182,8188],[8255,8256],[8276,8276],[8305,8305],[8319,8319],[8336,8348],[8400,8412],[8417,8417],[8421,8432],[8450,8450],[8455,8455],[8458,8467],[8469,8469],[8472,8477],[8484,8484],[8486,8486],[8488,8488],[8490,8505],[8508,8511],[8517,8521],[8526,8526],[8544,8584],[11264,11492],[11499,11507],[11520,11557],[11559,11559],[11565,11565],[11568,11623],[11631,11631],[11647,11670],[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[11744,11775],[12293,12295],[12321,12335],[12337,12341],[12344,12348],[12353,12438],[12441,12442],[12445,12447],[12449,12538],[12540,12543],[12549,12591],[12593,12686],[12704,12735],[12784,12799],[13312,19903],[19968,42124],[42192,42237],[42240,42508],[42512,42539],[42560,42607],[42612,42621],[42623,42737],[42775,42783],[42786,42888],[42891,42954],[42960,42961],[42963,42963],[42965,42969],[42994,43047],[43052,43052],[43072,43123],[43136,43205],[43216,43225],[43232,43255],[43259,43259],[43261,43309],[43312,43347],[43360,43388],[43392,43456],[43471,43481],[43488,43518],[43520,43574],[43584,43597],[43600,43609],[43616,43638],[43642,43714],[43739,43741],[43744,43759],[43762,43766],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822],[43824,43866],[43868,43881],[43888,44010],[44012,44013],[44016,44025],[44032,55203],[55216,55238],[55243,55291],[63744,64109],[64112,64217],[64256,64262],[64275,64279],[64285,64296],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64433],[64467,64605],[64612,64829],[64848,64911],[64914,64967],[65008,65017],[65024,65039],[65056,65071],[65075,65076],[65101,65103],[65137,65137],[65139,65139],[65143,65143],[65145,65145],[65147,65147],[65149,65149],[65151,65276],[65296,65305],[65313,65338],[65343,65343],[65345,65370],[65382,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500],[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786],[65856,65908],[66045,66045],[66176,66204],[66208,66256],[66272,66272],[66304,66335],[66349,66378],[66384,66426],[66432,66461],[66464,66499],[66504,66511],[66513,66517],[66560,66717],[66720,66729],[66736,66771],[66776,66811],[66816,66855],[66864,66915],[66928,66938],[66940,66954],[66956,66962],[66964,66965],[66967,66977],[66979,66993],[66995,67001],[67003,67004],[67072,67382],[67392,67413],[67424,67431],[67456,67461],[67463,67504],[67506,67514],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67669],[67680,67702],[67712,67742],[67808,67826],[67828,67829],[67840,67861],[67872,67897],[67968,68023],[68030,68031],[68096,68099],[68101,68102],[68108,68115],[68117,68119],[68121,68149],[68152,68154],[68159,68159],[68192,68220],[68224,68252],[68288,68295],[68297,68326],[68352,68405],[68416,68437],[68448,68466],[68480,68497],[68608,68680],[68736,68786],[68800,68850],[68864,68903],[68912,68921],[69248,69289],[69291,69292],[69296,69297],[69373,69404],[69415,69415],[69424,69456],[69488,69509],[69552,69572],[69600,69622],[69632,69702],[69734,69749],[69759,69818],[69826,69826],[69840,69864],[69872,69881],[69888,69940],[69942,69951],[69956,69959],[69968,70003],[70006,70006],[70016,70084],[70089,70092],[70094,70106],[70108,70108],[70144,70161],[70163,70199],[70206,70209],[70272,70278],[70280,70280],[70282,70285],[70287,70301],[70303,70312],[70320,70378],[70384,70393],[70400,70403],[70405,70412],[70415,70416],[70419,70440],[70442,70448],[70450,70451],[70453,70457],[70459,70468],[70471,70472],[70475,70477],[70480,70480],[70487,70487],[70493,70499],[70502,70508],[70512,70516],[70656,70730],[70736,70745],[70750,70753],[70784,70853],[70855,70855],[70864,70873],[71040,71093],[71096,71104],[71128,71133],[71168,71232],[71236,71236],[71248,71257],[71296,71352],[71360,71369],[71424,71450],[71453,71467],[71472,71481],[71488,71494],[71680,71738],[71840,71913],[71935,71942],[71945,71945],[71948,71955],[71957,71958],[71960,71989],[71991,71992],[71995,72003],[72016,72025],[72096,72103],[72106,72151],[72154,72161],[72163,72164],[72192,72254],[72263,72263],[72272,72345],[72349,72349],[72368,72440],[72704,72712],[72714,72758],[72760,72768],[72784,72793],[72818,72847],[72850,72871],[72873,72886],[72960,72966],[72968,72969],[72971,73014],[73018,73018],[73020,73021],[73023,73031],[73040,73049],[73056,73061],[73063,73064],[73066,73102],[73104,73105],[73107,73112],[73120,73129],[73440,73462],[73472,73488],[73490,73530],[73534,73538],[73552,73561],[73648,73648],[73728,74649],[74752,74862],[74880,75075],[77712,77808],[77824,78895],[78912,78933],[82944,83526],[92160,92728],[92736,92766],[92768,92777],[92784,92862],[92864,92873],[92880,92909],[92912,92916],[92928,92982],[92992,92995],[93008,93017],[93027,93047],[93053,93071],[93760,93823],[93952,94026],[94031,94087],[94095,94111],[94176,94177],[94179,94180],[94192,94193],[94208,100343],[100352,101589],[101632,101640],[110576,110579],[110581,110587],[110589,110590],[110592,110882],[110898,110898],[110928,110930],[110933,110933],[110948,110951],[110960,111355],[113664,113770],[113776,113788],[113792,113800],[113808,113817],[113821,113822],[118528,118573],[118576,118598],[119141,119145],[119149,119154],[119163,119170],[119173,119179],[119210,119213],[119362,119364],[119808,119892],[119894,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119993],[119995,119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120146,120485],[120488,120512],[120514,120538],[120540,120570],[120572,120596],[120598,120628],[120630,120654],[120656,120686],[120688,120712],[120714,120744],[120746,120770],[120772,120779],[120782,120831],[121344,121398],[121403,121452],[121461,121461],[121476,121476],[121499,121503],[121505,121519],[122624,122654],[122661,122666],[122880,122886],[122888,122904],[122907,122913],[122915,122916],[122918,122922],[122928,122989],[123023,123023],[123136,123180],[123184,123197],[123200,123209],[123214,123214],[123536,123566],[123584,123641],[124112,124153],[124896,124902],[124904,124907],[124909,124910],[124912,124926],[124928,125124],[125136,125142],[125184,125259],[125264,125273],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[130032,130041],[131072,173791],[173824,177977],[177984,178205],[178208,183969],[183984,191456],[194560,195101],[196608,201546],[201552,205743],[917760,917999]],"Binary_Property/IDS_Trinary_Operator":[[12274,12275]],"Binary_Property/Expands_On_NFKD":[[168,168],[175,175],[180,180],[184,184],[188,190],[192,197],[199,207],[209,214],[217,221],[224,229],[231,239],[241,246],[249,253],[255,271],[274,293],[296,304],[306,311],[313,320],[323,329],[332,337],[340,357],[360,382],[416,417],[431,432],[452,476],[478,483],[486,501],[504,539],[542,543],[550,563],[728,733],[836,836],[890,890],[900,902],[904,906],[908,908],[910,912],[938,944],[970,974],[979,980],[1024,1025],[1027,1027],[1031,1031],[1036,1038],[1049,1049],[1081,1081],[1104,1105],[1107,1107],[1111,1111],[1116,1118],[1142,1143],[1217,1218],[1232,1235],[1238,1239],[1242,1247],[1250,1255],[1258,1269],[1272,1273],[1415,1415],[1570,1574],[1653,1656],[1728,1728],[1730,1730],[1747,1747],[2345,2345],[2353,2353],[2356,2356],[2392,2399],[2507,2508],[2524,2525],[2527,2527],[2611,2611],[2614,2614],[2649,2651],[2654,2654],[2888,2888],[2891,2892],[2908,2909],[2964,2964],[3018,3020],[3144,3144],[3264,3264],[3271,3272],[3274,3275],[3402,3404],[3546,3546],[3548,3550],[3635,3635],[3763,3763],[3804,3805],[3907,3907],[3917,3917],[3922,3922],[3927,3927],[3932,3932],[3945,3945],[3955,3955],[3957,3961],[3969,3969],[3987,3987],[3997,3997],[4002,4002],[4007,4007],[4012,4012],[4025,4025],[4134,4134],[6918,6918],[6920,6920],[6922,6922],[6924,6924],[6926,6926],[6930,6930],[6971,6971],[6973,6973],[6976,6977],[6979,6979],[7680,7835],[7840,7929],[7936,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025,8025],[8027,8027],[8029,8029],[8031,8061],[8064,8116],[8118,8125],[8127,8132],[8134,8147],[8150,8155],[8157,8174],[8178,8180],[8182,8190],[8215,8215],[8229,8230],[8243,8244],[8246,8247],[8252,8252],[8254,8254],[8263,8265],[8279,8279],[8360,8360],[8448,8449],[8451,8451],[8453,8454],[8457,8457],[8470,8470],[8480,8482],[8491,8491],[8507,8507],[8528,8543],[8545,8547],[8549,8552],[8554,8555],[8561,8563],[8565,8568],[8570,8571],[8585,8585],[8602,8603],[8622,8622],[8653,8655],[8708,8708],[8713,8713],[8716,8716],[8740,8740],[8742,8742],[8748,8749],[8751,8752],[8769,8769],[8772,8772],[8775,8775],[8777,8777],[8800,8800],[8802,8802],[8813,8817],[8820,8821],[8824,8825],[8832,8833],[8836,8837],[8840,8841],[8876,8879],[8928,8931],[8938,8941],[9321,9397],[10764,10764],[10868,10870],[10972,10972],[12364,12364],[12366,12366],[12368,12368],[12370,12370],[12372,12372],[12374,12374],[12376,12376],[12378,12378],[12380,12380],[12382,12382],[12384,12384],[12386,12386],[12389,12389],[12391,12391],[12393,12393],[12400,12401],[12403,12404],[12406,12407],[12409,12410],[12412,12413],[12436,12436],[12443,12444],[12446,12447],[12460,12460],[12462,12462],[12464,12464],[12466,12466],[12468,12468],[12470,12470],[12472,12472],[12474,12474],[12476,12476],[12478,12478],[12480,12480],[12482,12482],[12485,12485],[12487,12487],[12489,12489],[12496,12497],[12499,12500],[12502,12503],[12505,12506],[12508,12509],[12532,12532],[12535,12538],[12542,12543],[12800,12830],[12832,12867],[12880,12895],[12910,12926],[12977,13007],[13055,13311],[44032,55203],[64256,64262],[64275,64279],[64285,64285],[64287,64287],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64335],[64420,64421],[64432,64433],[64477,64477],[64490,64507],[64512,64829],[64848,64911],[64914,64967],[65008,65020],[65049,65049],[65072,65072],[65097,65100],[65136,65138],[65140,65140],[65142,65151],[65153,65164],[65269,65276],[65507,65507],[69786,69786],[69788,69788],[69803,69803],[69934,69935],[70475,70476],[70843,70844],[70846,70846],[71098,71099],[71992,71992],[119134,119140],[119227,119232],[127232,127242],[127248,127274],[127277,127278],[127306,127311],[127338,127340],[127376,127376],[127488,127489],[127507,127507],[127552,127560]],"Binary_Property/Other_Default_Ignorable_Code_Point":[[847,847],[4447,4448],[6068,6069],[8293,8293],[12644,12644],[65440,65440],[65520,65528],[917504,917504],[917506,917535],[917632,917759],[918000,921599]],"Binary_Property/ASCII_Hex_Digit":[[48,57],[65,70],[97,102]],"Binary_Property/Lowercase":[[97,122],[170,170],[181,181],[186,186],[223,246],[248,255],[257,257],[259,259],[261,261],[263,263],[265,265],[267,267],[269,269],[271,271],[273,273],[275,275],[277,277],[279,279],[281,281],[283,283],[285,285],[287,287],[289,289],[291,291],[293,293],[295,295],[297,297],[299,299],[301,301],[303,303],[305,305],[307,307],[309,309],[311,312],[314,314],[316,316],[318,318],[320,320],[322,322],[324,324],[326,326],[328,329],[331,331],[333,333],[335,335],[337,337],[339,339],[341,341],[343,343],[345,345],[347,347],[349,349],[351,351],[353,353],[355,355],[357,357],[359,359],[361,361],[363,363],[365,365],[367,367],[369,369],[371,371],[373,373],[375,375],[378,378],[380,380],[382,384],[387,387],[389,389],[392,392],[396,397],[402,402],[405,405],[409,411],[414,414],[417,417],[419,419],[421,421],[424,424],[426,427],[429,429],[432,432],[436,436],[438,438],[441,442],[445,447],[454,454],[457,457],[460,460],[462,462],[464,464],[466,466],[468,468],[470,470],[472,472],[474,474],[476,477],[479,479],[481,481],[483,483],[485,485],[487,487],[489,489],[491,491],[493,493],[495,496],[499,499],[501,501],[505,505],[507,507],[509,509],[511,511],[513,513],[515,515],[517,517],[519,519],[521,521],[523,523],[525,525],[527,527],[529,529],[531,531],[533,533],[535,535],[537,537],[539,539],[541,541],[543,543],[545,545],[547,547],[549,549],[551,551],[553,553],[555,555],[557,557],[559,559],[561,561],[563,569],[572,572],[575,576],[578,578],[583,583],[585,585],[587,587],[589,589],[591,659],[661,696],[704,705],[736,740],[837,837],[881,881],[883,883],[887,887],[890,893],[912,912],[940,974],[976,977],[981,983],[985,985],[987,987],[989,989],[991,991],[993,993],[995,995],[997,997],[999,999],[1001,1001],[1003,1003],[1005,1005],[1007,1011],[1013,1013],[1016,1016],[1019,1020],[1072,1119],[1121,1121],[1123,1123],[1125,1125],[1127,1127],[1129,1129],[1131,1131],[1133,1133],[1135,1135],[1137,1137],[1139,1139],[1141,1141],[1143,1143],[1145,1145],[1147,1147],[1149,1149],[1151,1151],[1153,1153],[1163,1163],[1165,1165],[1167,1167],[1169,1169],[1171,1171],[1173,1173],[1175,1175],[1177,1177],[1179,1179],[1181,1181],[1183,1183],[1185,1185],[1187,1187],[1189,1189],[1191,1191],[1193,1193],[1195,1195],[1197,1197],[1199,1199],[1201,1201],[1203,1203],[1205,1205],[1207,1207],[1209,1209],[1211,1211],[1213,1213],[1215,1215],[1218,1218],[1220,1220],[1222,1222],[1224,1224],[1226,1226],[1228,1228],[1230,1231],[1233,1233],[1235,1235],[1237,1237],[1239,1239],[1241,1241],[1243,1243],[1245,1245],[1247,1247],[1249,1249],[1251,1251],[1253,1253],[1255,1255],[1257,1257],[1259,1259],[1261,1261],[1263,1263],[1265,1265],[1267,1267],[1269,1269],[1271,1271],[1273,1273],[1275,1275],[1277,1277],[1279,1279],[1281,1281],[1283,1283],[1285,1285],[1287,1287],[1289,1289],[1291,1291],[1293,1293],[1295,1295],[1297,1297],[1299,1299],[1301,1301],[1303,1303],[1305,1305],[1307,1307],[1309,1309],[1311,1311],[1313,1313],[1315,1315],[1317,1317],[1319,1319],[1321,1321],[1323,1323],[1325,1325],[1327,1327],[1376,1416],[4304,4346],[4348,4351],[5112,5117],[7296,7304],[7424,7615],[7681,7681],[7683,7683],[7685,7685],[7687,7687],[7689,7689],[7691,7691],[7693,7693],[7695,7695],[7697,7697],[7699,7699],[7701,7701],[7703,7703],[7705,7705],[7707,7707],[7709,7709],[7711,7711],[7713,7713],[7715,7715],[7717,7717],[7719,7719],[7721,7721],[7723,7723],[7725,7725],[7727,7727],[7729,7729],[7731,7731],[7733,7733],[7735,7735],[7737,7737],[7739,7739],[7741,7741],[7743,7743],[7745,7745],[7747,7747],[7749,7749],[7751,7751],[7753,7753],[7755,7755],[7757,7757],[7759,7759],[7761,7761],[7763,7763],[7765,7765],[7767,7767],[7769,7769],[7771,7771],[7773,7773],[7775,7775],[7777,7777],[7779,7779],[7781,7781],[7783,7783],[7785,7785],[7787,7787],[7789,7789],[7791,7791],[7793,7793],[7795,7795],[7797,7797],[7799,7799],[7801,7801],[7803,7803],[7805,7805],[7807,7807],[7809,7809],[7811,7811],[7813,7813],[7815,7815],[7817,7817],[7819,7819],[7821,7821],[7823,7823],[7825,7825],[7827,7827],[7829,7837],[7839,7839],[7841,7841],[7843,7843],[7845,7845],[7847,7847],[7849,7849],[7851,7851],[7853,7853],[7855,7855],[7857,7857],[7859,7859],[7861,7861],[7863,7863],[7865,7865],[7867,7867],[7869,7869],[7871,7871],[7873,7873],[7875,7875],[7877,7877],[7879,7879],[7881,7881],[7883,7883],[7885,7885],[7887,7887],[7889,7889],[7891,7891],[7893,7893],[7895,7895],[7897,7897],[7899,7899],[7901,7901],[7903,7903],[7905,7905],[7907,7907],[7909,7909],[7911,7911],[7913,7913],[7915,7915],[7917,7917],[7919,7919],[7921,7921],[7923,7923],[7925,7925],[7927,7927],[7929,7929],[7931,7931],[7933,7933],[7935,7943],[7952,7957],[7968,7975],[7984,7991],[8000,8005],[8016,8023],[8032,8039],[8048,8061],[8064,8071],[8080,8087],[8096,8103],[8112,8116],[8118,8119],[8126,8126],[8130,8132],[8134,8135],[8144,8147],[8150,8151],[8160,8167],[8178,8180],[8182,8183],[8305,8305],[8319,8319],[8336,8348],[8458,8458],[8462,8463],[8467,8467],[8495,8495],[8500,8500],[8505,8505],[8508,8509],[8518,8521],[8526,8526],[8560,8575],[8580,8580],[9424,9449],[11312,11359],[11361,11361],[11365,11366],[11368,11368],[11370,11370],[11372,11372],[11377,11377],[11379,11380],[11382,11389],[11393,11393],[11395,11395],[11397,11397],[11399,11399],[11401,11401],[11403,11403],[11405,11405],[11407,11407],[11409,11409],[11411,11411],[11413,11413],[11415,11415],[11417,11417],[11419,11419],[11421,11421],[11423,11423],[11425,11425],[11427,11427],[11429,11429],[11431,11431],[11433,11433],[11435,11435],[11437,11437],[11439,11439],[11441,11441],[11443,11443],[11445,11445],[11447,11447],[11449,11449],[11451,11451],[11453,11453],[11455,11455],[11457,11457],[11459,11459],[11461,11461],[11463,11463],[11465,11465],[11467,11467],[11469,11469],[11471,11471],[11473,11473],[11475,11475],[11477,11477],[11479,11479],[11481,11481],[11483,11483],[11485,11485],[11487,11487],[11489,11489],[11491,11492],[11500,11500],[11502,11502],[11507,11507],[11520,11557],[11559,11559],[11565,11565],[42561,42561],[42563,42563],[42565,42565],[42567,42567],[42569,42569],[42571,42571],[42573,42573],[42575,42575],[42577,42577],[42579,42579],[42581,42581],[42583,42583],[42585,42585],[42587,42587],[42589,42589],[42591,42591],[42593,42593],[42595,42595],[42597,42597],[42599,42599],[42601,42601],[42603,42603],[42605,42605],[42625,42625],[42627,42627],[42629,42629],[42631,42631],[42633,42633],[42635,42635],[42637,42637],[42639,42639],[42641,42641],[42643,42643],[42645,42645],[42647,42647],[42649,42649],[42651,42653],[42787,42787],[42789,42789],[42791,42791],[42793,42793],[42795,42795],[42797,42797],[42799,42801],[42803,42803],[42805,42805],[42807,42807],[42809,42809],[42811,42811],[42813,42813],[42815,42815],[42817,42817],[42819,42819],[42821,42821],[42823,42823],[42825,42825],[42827,42827],[42829,42829],[42831,42831],[42833,42833],[42835,42835],[42837,42837],[42839,42839],[42841,42841],[42843,42843],[42845,42845],[42847,42847],[42849,42849],[42851,42851],[42853,42853],[42855,42855],[42857,42857],[42859,42859],[42861,42861],[42863,42872],[42874,42874],[42876,42876],[42879,42879],[42881,42881],[42883,42883],[42885,42885],[42887,42887],[42892,42892],[42894,42894],[42897,42897],[42899,42901],[42903,42903],[42905,42905],[42907,42907],[42909,42909],[42911,42911],[42913,42913],[42915,42915],[42917,42917],[42919,42919],[42921,42921],[42927,42927],[42933,42933],[42935,42935],[42937,42937],[42939,42939],[42941,42941],[42943,42943],[42945,42945],[42947,42947],[42952,42952],[42954,42954],[42961,42961],[42963,42963],[42965,42965],[42967,42967],[42969,42969],[42994,42996],[42998,42998],[43000,43002],[43824,43866],[43868,43881],[43888,43967],[64256,64262],[64275,64279],[65345,65370],[66600,66639],[66776,66811],[66967,66977],[66979,66993],[66995,67001],[67003,67004],[67456,67456],[67459,67461],[67463,67504],[67506,67514],[68800,68850],[71872,71903],[93792,93823],[119834,119859],[119886,119892],[119894,119911],[119938,119963],[119990,119993],[119995,119995],[119997,120003],[120005,120015],[120042,120067],[120094,120119],[120146,120171],[120198,120223],[120250,120275],[120302,120327],[120354,120379],[120406,120431],[120458,120485],[120514,120538],[120540,120545],[120572,120596],[120598,120603],[120630,120654],[120656,120661],[120688,120712],[120714,120719],[120746,120770],[120772,120777],[120779,120779],[122624,122633],[122635,122654],[122661,122666],[122928,122989],[125218,125251]],"Binary_Property/Extended_Pictographic":[[169,169],[174,174],[8252,8252],[8265,8265],[8482,8482],[8505,8505],[8596,8601],[8617,8618],[8986,8987],[9000,9000],[9096,9096],[9167,9167],[9193,9203],[9208,9210],[9410,9410],[9642,9643],[9654,9654],[9664,9664],[9723,9726],[9728,9733],[9735,9746],[9748,9861],[9872,9989],[9992,10002],[10004,10004],[10006,10006],[10013,10013],[10017,10017],[10024,10024],[10035,10036],[10052,10052],[10055,10055],[10060,10060],[10062,10062],[10067,10069],[10071,10071],[10083,10087],[10133,10135],[10145,10145],[10160,10160],[10175,10175],[10548,10549],[11013,11015],[11035,11036],[11088,11088],[11093,11093],[12336,12336],[12349,12349],[12951,12951],[12953,12953],[126976,127231],[127245,127247],[127279,127279],[127340,127345],[127358,127359],[127374,127374],[127377,127386],[127405,127461],[127489,127503],[127514,127514],[127535,127535],[127538,127546],[127548,127551],[127561,127994],[128000,128317],[128326,128591],[128640,128767],[128884,128895],[128981,129023],[129036,129039],[129096,129103],[129114,129119],[129160,129167],[129198,129279],[129292,129338],[129340,129349],[129351,129791],[130048,131069]],"Binary_Property/Full_Composition_Exclusion":[[832,833],[835,836],[884,884],[894,894],[903,903],[2392,2399],[2524,2525],[2527,2527],[2611,2611],[2614,2614],[2649,2651],[2654,2654],[2908,2909],[3907,3907],[3917,3917],[3922,3922],[3927,3927],[3932,3932],[3945,3945],[3955,3955],[3957,3958],[3960,3960],[3969,3969],[3987,3987],[3997,3997],[4002,4002],[4007,4007],[4012,4012],[4025,4025],[8049,8049],[8051,8051],[8053,8053],[8055,8055],[8057,8057],[8059,8059],[8061,8061],[8123,8123],[8126,8126],[8137,8137],[8139,8139],[8147,8147],[8155,8155],[8163,8163],[8171,8171],[8174,8175],[8185,8185],[8187,8187],[8189,8189],[8192,8193],[8486,8486],[8490,8491],[9001,9002],[10972,10972],[63744,64013],[64016,64016],[64018,64018],[64021,64030],[64032,64032],[64034,64034],[64037,64038],[64042,64109],[64112,64217],[64285,64285],[64287,64287],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64334],[119134,119140],[119227,119232],[194560,195101]],"Binary_Property/Alphabetic":[[65,90],[97,122],[170,170],[181,181],[186,186],[192,214],[216,246],[248,705],[710,721],[736,740],[748,748],[750,750],[837,837],[880,884],[886,887],[890,893],[895,895],[902,902],[904,906],[908,908],[910,929],[931,1013],[1015,1153],[1162,1327],[1329,1366],[1369,1369],[1376,1416],[1456,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1488,1514],[1519,1522],[1552,1562],[1568,1623],[1625,1631],[1646,1747],[1749,1756],[1761,1768],[1773,1775],[1786,1788],[1791,1791],[1808,1855],[1869,1969],[1994,2026],[2036,2037],[2042,2042],[2048,2071],[2074,2092],[2112,2136],[2144,2154],[2160,2183],[2185,2190],[2208,2249],[2260,2271],[2275,2281],[2288,2363],[2365,2380],[2382,2384],[2389,2403],[2417,2435],[2437,2444],[2447,2448],[2451,2472],[2474,2480],[2482,2482],[2486,2489],[2493,2500],[2503,2504],[2507,2508],[2510,2510],[2519,2519],[2524,2525],[2527,2531],[2544,2545],[2556,2556],[2561,2563],[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2622,2626],[2631,2632],[2635,2636],[2641,2641],[2649,2652],[2654,2654],[2672,2677],[2689,2691],[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],[2749,2757],[2759,2761],[2763,2764],[2768,2768],[2784,2787],[2809,2812],[2817,2819],[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2877,2884],[2887,2888],[2891,2892],[2902,2903],[2908,2909],[2911,2915],[2929,2929],[2946,2947],[2949,2954],[2958,2960],[2962,2965],[2969,2970],[2972,2972],[2974,2975],[2979,2980],[2984,2986],[2990,3001],[3006,3010],[3014,3016],[3018,3020],[3024,3024],[3031,3031],[3072,3084],[3086,3088],[3090,3112],[3114,3129],[3133,3140],[3142,3144],[3146,3148],[3157,3158],[3160,3162],[3165,3165],[3168,3171],[3200,3203],[3205,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],[3261,3268],[3270,3272],[3274,3276],[3285,3286],[3293,3294],[3296,3299],[3313,3315],[3328,3340],[3342,3344],[3346,3386],[3389,3396],[3398,3400],[3402,3404],[3406,3406],[3412,3415],[3423,3427],[3450,3455],[3457,3459],[3461,3478],[3482,3505],[3507,3515],[3517,3517],[3520,3526],[3535,3540],[3542,3542],[3544,3551],[3570,3571],[3585,3642],[3648,3654],[3661,3661],[3713,3714],[3716,3716],[3718,3722],[3724,3747],[3749,3749],[3751,3769],[3771,3773],[3776,3780],[3782,3782],[3789,3789],[3804,3807],[3840,3840],[3904,3911],[3913,3948],[3953,3971],[3976,3991],[3993,4028],[4096,4150],[4152,4152],[4155,4159],[4176,4239],[4250,4253],[4256,4293],[4295,4295],[4301,4301],[4304,4346],[4348,4680],[4682,4685],[4688,4694],[4696,4696],[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],[4800,4800],[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4992,5007],[5024,5109],[5112,5117],[5121,5740],[5743,5759],[5761,5786],[5792,5866],[5870,5880],[5888,5907],[5919,5939],[5952,5971],[5984,5996],[5998,6000],[6002,6003],[6016,6067],[6070,6088],[6103,6103],[6108,6108],[6176,6264],[6272,6314],[6320,6389],[6400,6430],[6432,6443],[6448,6456],[6480,6509],[6512,6516],[6528,6571],[6576,6601],[6656,6683],[6688,6750],[6753,6772],[6823,6823],[6847,6848],[6860,6862],[6912,6963],[6965,6979],[6981,6988],[7040,7081],[7084,7087],[7098,7141],[7143,7153],[7168,7222],[7245,7247],[7258,7293],[7296,7304],[7312,7354],[7357,7359],[7401,7404],[7406,7411],[7413,7414],[7418,7418],[7424,7615],[7655,7668],[7680,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025,8025],[8027,8027],[8029,8029],[8031,8061],[8064,8116],[8118,8124],[8126,8126],[8130,8132],[8134,8140],[8144,8147],[8150,8155],[8160,8172],[8178,8180],[8182,8188],[8305,8305],[8319,8319],[8336,8348],[8450,8450],[8455,8455],[8458,8467],[8469,8469],[8473,8477],[8484,8484],[8486,8486],[8488,8488],[8490,8493],[8495,8505],[8508,8511],[8517,8521],[8526,8526],[8544,8584],[9398,9449],[11264,11492],[11499,11502],[11506,11507],[11520,11557],[11559,11559],[11565,11565],[11568,11623],[11631,11631],[11648,11670],[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[11744,11775],[11823,11823],[12293,12295],[12321,12329],[12337,12341],[12344,12348],[12353,12438],[12445,12447],[12449,12538],[12540,12543],[12549,12591],[12593,12686],[12704,12735],[12784,12799],[13312,19903],[19968,42124],[42192,42237],[42240,42508],[42512,42527],[42538,42539],[42560,42606],[42612,42619],[42623,42735],[42775,42783],[42786,42888],[42891,42954],[42960,42961],[42963,42963],[42965,42969],[42994,43013],[43015,43047],[43072,43123],[43136,43203],[43205,43205],[43250,43255],[43259,43259],[43261,43263],[43274,43306],[43312,43346],[43360,43388],[43392,43442],[43444,43455],[43471,43471],[43488,43503],[43514,43518],[43520,43574],[43584,43597],[43616,43638],[43642,43710],[43712,43712],[43714,43714],[43739,43741],[43744,43759],[43762,43765],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822],[43824,43866],[43868,43881],[43888,44010],[44032,55203],[55216,55238],[55243,55291],[63744,64109],[64112,64217],[64256,64262],[64275,64279],[64285,64296],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64433],[64467,64829],[64848,64911],[64914,64967],[65008,65019],[65136,65140],[65142,65276],[65313,65338],[65345,65370],[65382,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500],[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786],[65856,65908],[66176,66204],[66208,66256],[66304,66335],[66349,66378],[66384,66426],[66432,66461],[66464,66499],[66504,66511],[66513,66517],[66560,66717],[66736,66771],[66776,66811],[66816,66855],[66864,66915],[66928,66938],[66940,66954],[66956,66962],[66964,66965],[66967,66977],[66979,66993],[66995,67001],[67003,67004],[67072,67382],[67392,67413],[67424,67431],[67456,67461],[67463,67504],[67506,67514],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67669],[67680,67702],[67712,67742],[67808,67826],[67828,67829],[67840,67861],[67872,67897],[67968,68023],[68030,68031],[68096,68099],[68101,68102],[68108,68115],[68117,68119],[68121,68149],[68192,68220],[68224,68252],[68288,68295],[68297,68324],[68352,68405],[68416,68437],[68448,68466],[68480,68497],[68608,68680],[68736,68786],[68800,68850],[68864,68903],[69248,69289],[69291,69292],[69296,69297],[69376,69404],[69415,69415],[69424,69445],[69488,69505],[69552,69572],[69600,69622],[69632,69701],[69745,69749],[69760,69816],[69826,69826],[69840,69864],[69888,69938],[69956,69959],[69968,70002],[70006,70006],[70016,70079],[70081,70084],[70094,70095],[70106,70106],[70108,70108],[70144,70161],[70163,70196],[70199,70199],[70206,70209],[70272,70278],[70280,70280],[70282,70285],[70287,70301],[70303,70312],[70320,70376],[70400,70403],[70405,70412],[70415,70416],[70419,70440],[70442,70448],[70450,70451],[70453,70457],[70461,70468],[70471,70472],[70475,70476],[70480,70480],[70487,70487],[70493,70499],[70656,70721],[70723,70725],[70727,70730],[70751,70753],[70784,70849],[70852,70853],[70855,70855],[71040,71093],[71096,71102],[71128,71133],[71168,71230],[71232,71232],[71236,71236],[71296,71349],[71352,71352],[71424,71450],[71453,71466],[71488,71494],[71680,71736],[71840,71903],[71935,71942],[71945,71945],[71948,71955],[71957,71958],[71960,71989],[71991,71992],[71995,71996],[71999,72002],[72096,72103],[72106,72151],[72154,72159],[72161,72161],[72163,72164],[72192,72242],[72245,72254],[72272,72343],[72349,72349],[72368,72440],[72704,72712],[72714,72758],[72760,72766],[72768,72768],[72818,72847],[72850,72871],[72873,72886],[72960,72966],[72968,72969],[72971,73014],[73018,73018],[73020,73021],[73023,73025],[73027,73027],[73030,73031],[73056,73061],[73063,73064],[73066,73102],[73104,73105],[73107,73110],[73112,73112],[73440,73462],[73472,73488],[73490,73530],[73534,73536],[73648,73648],[73728,74649],[74752,74862],[74880,75075],[77712,77808],[77824,78895],[78913,78918],[82944,83526],[92160,92728],[92736,92766],[92784,92862],[92880,92909],[92928,92975],[92992,92995],[93027,93047],[93053,93071],[93760,93823],[93952,94026],[94031,94087],[94095,94111],[94176,94177],[94179,94179],[94192,94193],[94208,100343],[100352,101589],[101632,101640],[110576,110579],[110581,110587],[110589,110590],[110592,110882],[110898,110898],[110928,110930],[110933,110933],[110948,110951],[110960,111355],[113664,113770],[113776,113788],[113792,113800],[113808,113817],[113822,113822],[119808,119892],[119894,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119993],[119995,119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120146,120485],[120488,120512],[120514,120538],[120540,120570],[120572,120596],[120598,120628],[120630,120654],[120656,120686],[120688,120712],[120714,120744],[120746,120770],[120772,120779],[122624,122654],[122661,122666],[122880,122886],[122888,122904],[122907,122913],[122915,122916],[122918,122922],[122928,122989],[123023,123023],[123136,123180],[123191,123197],[123214,123214],[123536,123565],[123584,123627],[124112,124139],[124896,124902],[124904,124907],[124909,124910],[124912,124926],[124928,125124],[125184,125251],[125255,125255],[125259,125259],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[127280,127305],[127312,127337],[127344,127369],[131072,173791],[173824,177977],[177984,178205],[178208,183969],[183984,191456],[194560,195101],[196608,201546],[201552,205743]],"Binary_Property/Hex_Digit":[[48,57],[65,70],[97,102],[65296,65305],[65313,65318],[65345,65350]],"Binary_Property/Terminal_Punctuation":[[33,33],[44,44],[46,46],[58,59],[63,63],[894,894],[903,903],[1417,1417],[1475,1475],[1548,1548],[1563,1563],[1565,1567],[1748,1748],[1792,1802],[1804,1804],[2040,2041],[2096,2110],[2142,2142],[2404,2405],[3674,3675],[3848,3848],[3853,3858],[4170,4171],[4961,4968],[5742,5742],[5867,5869],[5941,5942],[6100,6102],[6106,6106],[6146,6149],[6152,6153],[6468,6469],[6824,6827],[7002,7003],[7005,7007],[7037,7038],[7227,7231],[7294,7295],[8252,8253],[8263,8265],[11822,11822],[11836,11836],[11841,11841],[11852,11852],[11854,11855],[11859,11860],[12289,12290],[42238,42239],[42509,42511],[42739,42743],[43126,43127],[43214,43215],[43311,43311],[43463,43465],[43613,43615],[43743,43743],[43760,43761],[44011,44011],[65104,65106],[65108,65111],[65281,65281],[65292,65292],[65294,65294],[65306,65307],[65311,65311],[65377,65377],[65380,65380],[66463,66463],[66512,66512],[67671,67671],[67871,67871],[68182,68183],[68336,68341],[68410,68415],[68505,68508],[69461,69465],[69510,69513],[69703,69709],[69822,69825],[69953,69955],[70085,70086],[70093,70093],[70110,70111],[70200,70204],[70313,70313],[70731,70733],[70746,70747],[71106,71109],[71113,71127],[71233,71234],[71484,71486],[72004,72004],[72006,72006],[72258,72259],[72347,72348],[72353,72354],[72769,72771],[72817,72817],[73463,73464],[73539,73540],[74864,74868],[92782,92783],[92917,92917],[92983,92985],[92996,92996],[93847,93848],[113823,113823],[121479,121482]],"Binary_Property/Other_Uppercase":[[8544,8559],[9398,9423],[127280,127305],[127312,127337],[127344,127369]],"Binary_Property/Other_Math":[[94,94],[976,978],[981,981],[1008,1009],[1012,1013],[8214,8214],[8242,8244],[8256,8256],[8289,8292],[8317,8318],[8333,8334],[8400,8412],[8417,8417],[8421,8422],[8427,8431],[8450,8450],[8455,8455],[8458,8467],[8469,8469],[8473,8477],[8484,8484],[8488,8489],[8492,8493],[8495,8497],[8499,8504],[8508,8511],[8517,8521],[8597,8601],[8604,8607],[8609,8610],[8612,8613],[8615,8615],[8617,8621],[8624,8625],[8630,8631],[8636,8653],[8656,8657],[8659,8659],[8661,8667],[8669,8669],[8676,8677],[8968,8971],[9140,9141],[9143,9143],[9168,9168],[9186,9186],[9632,9633],[9646,9654],[9660,9664],[9670,9671],[9674,9675],[9679,9683],[9698,9698],[9700,9700],[9703,9708],[9733,9734],[9792,9792],[9794,9794],[9824,9827],[9837,9838],[10181,10182],[10214,10223],[10627,10648],[10712,10715],[10748,10749],[65121,65121],[65123,65123],[65128,65128],[65340,65340],[65342,65342],[119808,119892],[119894,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119993],[119995,119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120146,120485],[120488,120512],[120514,120538],[120540,120570],[120572,120596],[120598,120628],[120630,120654],[120656,120686],[120688,120712],[120714,120744],[120746,120770],[120772,120779],[120782,120831],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651]],"Binary_Property/ASCII":[[0,127]],"Binary_Property/Any":[[0,1114111]],"Binary_Property/White_Space":[[9,13],[32,32],[133,133],[160,160],[5760,5760],[8192,8202],[8232,8233],[8239,8239],[8287,8287],[12288,12288]],"Binary_Property/Ideographic":[[12294,12295],[12321,12329],[12344,12346],[13312,19903],[19968,40959],[63744,64109],[64112,64217],[94180,94180],[94208,100343],[100352,101589],[101632,101640],[110960,111355],[131072,173791],[173824,177977],[177984,178205],[178208,183969],[183984,191456],[194560,195101],[196608,201546],[201552,205743]],"Binary_Property/Other_Alphabetic":[[837,837],[1456,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1552,1562],[1611,1623],[1625,1631],[1648,1648],[1750,1756],[1761,1764],[1767,1768],[1773,1773],[1809,1809],[1840,1855],[1958,1968],[2070,2071],[2075,2083],[2085,2087],[2089,2092],[2260,2271],[2275,2281],[2288,2307],[2362,2363],[2366,2380],[2382,2383],[2389,2391],[2402,2403],[2433,2435],[2494,2500],[2503,2504],[2507,2508],[2519,2519],[2530,2531],[2561,2563],[2622,2626],[2631,2632],[2635,2636],[2641,2641],[2672,2673],[2677,2677],[2689,2691],[2750,2757],[2759,2761],[2763,2764],[2786,2787],[2810,2812],[2817,2819],[2878,2884],[2887,2888],[2891,2892],[2902,2903],[2914,2915],[2946,2946],[3006,3010],[3014,3016],[3018,3020],[3031,3031],[3072,3076],[3134,3140],[3142,3144],[3146,3148],[3157,3158],[3170,3171],[3201,3203],[3262,3268],[3270,3272],[3274,3276],[3285,3286],[3298,3299],[3315,3315],[3328,3331],[3390,3396],[3398,3400],[3402,3404],[3415,3415],[3426,3427],[3457,3459],[3535,3540],[3542,3542],[3544,3551],[3570,3571],[3633,3633],[3636,3642],[3661,3661],[3761,3761],[3764,3769],[3771,3772],[3789,3789],[3953,3971],[3981,3991],[3993,4028],[4139,4150],[4152,4152],[4155,4158],[4182,4185],[4190,4192],[4194,4196],[4199,4205],[4209,4212],[4226,4237],[4239,4239],[4250,4253],[5906,5907],[5938,5939],[5970,5971],[6002,6003],[6070,6088],[6277,6278],[6313,6313],[6432,6443],[6448,6456],[6679,6683],[6741,6750],[6753,6772],[6847,6848],[6860,6862],[6912,6916],[6965,6979],[7040,7042],[7073,7081],[7084,7085],[7143,7153],[7204,7222],[7655,7668],[9398,9449],[11744,11775],[42612,42619],[42654,42655],[43010,43010],[43019,43019],[43043,43047],[43136,43137],[43188,43203],[43205,43205],[43263,43263],[43302,43306],[43335,43346],[43392,43395],[43444,43455],[43493,43493],[43561,43574],[43587,43587],[43596,43597],[43643,43645],[43696,43696],[43698,43700],[43703,43704],[43710,43710],[43755,43759],[43765,43765],[44003,44010],[64286,64286],[66422,66426],[68097,68099],[68101,68102],[68108,68111],[68900,68903],[69291,69292],[69632,69634],[69688,69701],[69747,69748],[69760,69762],[69808,69816],[69826,69826],[69888,69890],[69927,69938],[69957,69958],[70016,70018],[70067,70079],[70094,70095],[70188,70196],[70199,70199],[70206,70206],[70209,70209],[70367,70376],[70400,70403],[70462,70468],[70471,70472],[70475,70476],[70487,70487],[70498,70499],[70709,70721],[70723,70725],[70832,70849],[71087,71093],[71096,71102],[71132,71133],[71216,71230],[71232,71232],[71339,71349],[71453,71466],[71724,71736],[71984,71989],[71991,71992],[71995,71996],[72000,72000],[72002,72002],[72145,72151],[72154,72159],[72164,72164],[72193,72202],[72245,72249],[72251,72254],[72273,72283],[72330,72343],[72751,72758],[72760,72766],[72850,72871],[72873,72886],[73009,73014],[73018,73018],[73020,73021],[73023,73025],[73027,73027],[73031,73031],[73098,73102],[73104,73105],[73107,73110],[73459,73462],[73472,73473],[73475,73475],[73524,73530],[73534,73536],[94031,94031],[94033,94087],[94095,94098],[94192,94193],[113822,113822],[122880,122886],[122888,122904],[122907,122913],[122915,122916],[122918,122922],[123023,123023],[125255,125255],[127280,127305],[127312,127337],[127344,127369]],"Binary_Property/Changes_When_Uppercased":[[97,122],[181,181],[223,246],[248,255],[257,257],[259,259],[261,261],[263,263],[265,265],[267,267],[269,269],[271,271],[273,273],[275,275],[277,277],[279,279],[281,281],[283,283],[285,285],[287,287],[289,289],[291,291],[293,293],[295,295],[297,297],[299,299],[301,301],[303,303],[305,305],[307,307],[309,309],[311,311],[314,314],[316,316],[318,318],[320,320],[322,322],[324,324],[326,326],[328,329],[331,331],[333,333],[335,335],[337,337],[339,339],[341,341],[343,343],[345,345],[347,347],[349,349],[351,351],[353,353],[355,355],[357,357],[359,359],[361,361],[363,363],[365,365],[367,367],[369,369],[371,371],[373,373],[375,375],[378,378],[380,380],[382,384],[387,387],[389,389],[392,392],[396,396],[402,402],[405,405],[409,410],[414,414],[417,417],[419,419],[421,421],[424,424],[429,429],[432,432],[436,436],[438,438],[441,441],[445,445],[447,447],[453,454],[456,457],[459,460],[462,462],[464,464],[466,466],[468,468],[470,470],[472,472],[474,474],[476,477],[479,479],[481,481],[483,483],[485,485],[487,487],[489,489],[491,491],[493,493],[495,496],[498,499],[501,501],[505,505],[507,507],[509,509],[511,511],[513,513],[515,515],[517,517],[519,519],[521,521],[523,523],[525,525],[527,527],[529,529],[531,531],[533,533],[535,535],[537,537],[539,539],[541,541],[543,543],[547,547],[549,549],[551,551],[553,553],[555,555],[557,557],[559,559],[561,561],[563,563],[572,572],[575,576],[578,578],[583,583],[585,585],[587,587],[589,589],[591,596],[598,599],[601,601],[603,604],[608,609],[611,611],[613,614],[616,620],[623,623],[625,626],[629,629],[637,637],[640,640],[642,643],[647,652],[658,658],[669,670],[837,837],[881,881],[883,883],[887,887],[891,893],[912,912],[940,974],[976,977],[981,983],[985,985],[987,987],[989,989],[991,991],[993,993],[995,995],[997,997],[999,999],[1001,1001],[1003,1003],[1005,1005],[1007,1011],[1013,1013],[1016,1016],[1019,1019],[1072,1119],[1121,1121],[1123,1123],[1125,1125],[1127,1127],[1129,1129],[1131,1131],[1133,1133],[1135,1135],[1137,1137],[1139,1139],[1141,1141],[1143,1143],[1145,1145],[1147,1147],[1149,1149],[1151,1151],[1153,1153],[1163,1163],[1165,1165],[1167,1167],[1169,1169],[1171,1171],[1173,1173],[1175,1175],[1177,1177],[1179,1179],[1181,1181],[1183,1183],[1185,1185],[1187,1187],[1189,1189],[1191,1191],[1193,1193],[1195,1195],[1197,1197],[1199,1199],[1201,1201],[1203,1203],[1205,1205],[1207,1207],[1209,1209],[1211,1211],[1213,1213],[1215,1215],[1218,1218],[1220,1220],[1222,1222],[1224,1224],[1226,1226],[1228,1228],[1230,1231],[1233,1233],[1235,1235],[1237,1237],[1239,1239],[1241,1241],[1243,1243],[1245,1245],[1247,1247],[1249,1249],[1251,1251],[1253,1253],[1255,1255],[1257,1257],[1259,1259],[1261,1261],[1263,1263],[1265,1265],[1267,1267],[1269,1269],[1271,1271],[1273,1273],[1275,1275],[1277,1277],[1279,1279],[1281,1281],[1283,1283],[1285,1285],[1287,1287],[1289,1289],[1291,1291],[1293,1293],[1295,1295],[1297,1297],[1299,1299],[1301,1301],[1303,1303],[1305,1305],[1307,1307],[1309,1309],[1311,1311],[1313,1313],[1315,1315],[1317,1317],[1319,1319],[1321,1321],[1323,1323],[1325,1325],[1327,1327],[1377,1415],[4304,4346],[4349,4351],[5112,5117],[7296,7304],[7545,7545],[7549,7549],[7566,7566],[7681,7681],[7683,7683],[7685,7685],[7687,7687],[7689,7689],[7691,7691],[7693,7693],[7695,7695],[7697,7697],[7699,7699],[7701,7701],[7703,7703],[7705,7705],[7707,7707],[7709,7709],[7711,7711],[7713,7713],[7715,7715],[7717,7717],[7719,7719],[7721,7721],[7723,7723],[7725,7725],[7727,7727],[7729,7729],[7731,7731],[7733,7733],[7735,7735],[7737,7737],[7739,7739],[7741,7741],[7743,7743],[7745,7745],[7747,7747],[7749,7749],[7751,7751],[7753,7753],[7755,7755],[7757,7757],[7759,7759],[7761,7761],[7763,7763],[7765,7765],[7767,7767],[7769,7769],[7771,7771],[7773,7773],[7775,7775],[7777,7777],[7779,7779],[7781,7781],[7783,7783],[7785,7785],[7787,7787],[7789,7789],[7791,7791],[7793,7793],[7795,7795],[7797,7797],[7799,7799],[7801,7801],[7803,7803],[7805,7805],[7807,7807],[7809,7809],[7811,7811],[7813,7813],[7815,7815],[7817,7817],[7819,7819],[7821,7821],[7823,7823],[7825,7825],[7827,7827],[7829,7835],[7841,7841],[7843,7843],[7845,7845],[7847,7847],[7849,7849],[7851,7851],[7853,7853],[7855,7855],[7857,7857],[7859,7859],[7861,7861],[7863,7863],[7865,7865],[7867,7867],[7869,7869],[7871,7871],[7873,7873],[7875,7875],[7877,7877],[7879,7879],[7881,7881],[7883,7883],[7885,7885],[7887,7887],[7889,7889],[7891,7891],[7893,7893],[7895,7895],[7897,7897],[7899,7899],[7901,7901],[7903,7903],[7905,7905],[7907,7907],[7909,7909],[7911,7911],[7913,7913],[7915,7915],[7917,7917],[7919,7919],[7921,7921],[7923,7923],[7925,7925],[7927,7927],[7929,7929],[7931,7931],[7933,7933],[7935,7943],[7952,7957],[7968,7975],[7984,7991],[8000,8005],[8016,8023],[8032,8039],[8048,8061],[8064,8116],[8118,8119],[8124,8124],[8126,8126],[8130,8132],[8134,8135],[8140,8140],[8144,8147],[8150,8151],[8160,8167],[8178,8180],[8182,8183],[8188,8188],[8526,8526],[8560,8575],[8580,8580],[9424,9449],[11312,11359],[11361,11361],[11365,11366],[11368,11368],[11370,11370],[11372,11372],[11379,11379],[11382,11382],[11393,11393],[11395,11395],[11397,11397],[11399,11399],[11401,11401],[11403,11403],[11405,11405],[11407,11407],[11409,11409],[11411,11411],[11413,11413],[11415,11415],[11417,11417],[11419,11419],[11421,11421],[11423,11423],[11425,11425],[11427,11427],[11429,11429],[11431,11431],[11433,11433],[11435,11435],[11437,11437],[11439,11439],[11441,11441],[11443,11443],[11445,11445],[11447,11447],[11449,11449],[11451,11451],[11453,11453],[11455,11455],[11457,11457],[11459,11459],[11461,11461],[11463,11463],[11465,11465],[11467,11467],[11469,11469],[11471,11471],[11473,11473],[11475,11475],[11477,11477],[11479,11479],[11481,11481],[11483,11483],[11485,11485],[11487,11487],[11489,11489],[11491,11491],[11500,11500],[11502,11502],[11507,11507],[11520,11557],[11559,11559],[11565,11565],[42561,42561],[42563,42563],[42565,42565],[42567,42567],[42569,42569],[42571,42571],[42573,42573],[42575,42575],[42577,42577],[42579,42579],[42581,42581],[42583,42583],[42585,42585],[42587,42587],[42589,42589],[42591,42591],[42593,42593],[42595,42595],[42597,42597],[42599,42599],[42601,42601],[42603,42603],[42605,42605],[42625,42625],[42627,42627],[42629,42629],[42631,42631],[42633,42633],[42635,42635],[42637,42637],[42639,42639],[42641,42641],[42643,42643],[42645,42645],[42647,42647],[42649,42649],[42651,42651],[42787,42787],[42789,42789],[42791,42791],[42793,42793],[42795,42795],[42797,42797],[42799,42799],[42803,42803],[42805,42805],[42807,42807],[42809,42809],[42811,42811],[42813,42813],[42815,42815],[42817,42817],[42819,42819],[42821,42821],[42823,42823],[42825,42825],[42827,42827],[42829,42829],[42831,42831],[42833,42833],[42835,42835],[42837,42837],[42839,42839],[42841,42841],[42843,42843],[42845,42845],[42847,42847],[42849,42849],[42851,42851],[42853,42853],[42855,42855],[42857,42857],[42859,42859],[42861,42861],[42863,42863],[42874,42874],[42876,42876],[42879,42879],[42881,42881],[42883,42883],[42885,42885],[42887,42887],[42892,42892],[42897,42897],[42899,42900],[42903,42903],[42905,42905],[42907,42907],[42909,42909],[42911,42911],[42913,42913],[42915,42915],[42917,42917],[42919,42919],[42921,42921],[42933,42933],[42935,42935],[42937,42937],[42939,42939],[42941,42941],[42943,42943],[42945,42945],[42947,42947],[42952,42952],[42954,42954],[42961,42961],[42967,42967],[42969,42969],[42998,42998],[43859,43859],[43888,43967],[64256,64262],[64275,64279],[65345,65370],[66600,66639],[66776,66811],[66967,66977],[66979,66993],[66995,67001],[67003,67004],[68800,68850],[71872,71903],[93792,93823],[125218,125251]],"Binary_Property/Dash":[[45,45],[1418,1418],[1470,1470],[5120,5120],[6150,6150],[8208,8213],[8275,8275],[8315,8315],[8331,8331],[8722,8722],[11799,11799],[11802,11802],[11834,11835],[11840,11840],[11869,11869],[12316,12316],[12336,12336],[12448,12448],[65073,65074],[65112,65112],[65123,65123],[65293,65293],[69293,69293]],"Binary_Property/Bidi_Control":[[1564,1564],[8206,8207],[8234,8238],[8294,8297]],"Binary_Property/Cased":[[65,90],[97,122],[170,170],[181,181],[186,186],[192,214],[216,246],[248,442],[444,447],[452,659],[661,696],[704,705],[736,740],[837,837],[880,883],[886,887],[890,893],[895,895],[902,902],[904,906],[908,908],[910,929],[931,1013],[1015,1153],[1162,1327],[1329,1366],[1376,1416],[4256,4293],[4295,4295],[4301,4301],[4304,4346],[4348,4351],[5024,5109],[5112,5117],[7296,7304],[7312,7354],[7357,7359],[7424,7615],[7680,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025,8025],[8027,8027],[8029,8029],[8031,8061],[8064,8116],[8118,8124],[8126,8126],[8130,8132],[8134,8140],[8144,8147],[8150,8155],[8160,8172],[8178,8180],[8182,8188],[8305,8305],[8319,8319],[8336,8348],[8450,8450],[8455,8455],[8458,8467],[8469,8469],[8473,8477],[8484,8484],[8486,8486],[8488,8488],[8490,8493],[8495,8500],[8505,8505],[8508,8511],[8517,8521],[8526,8526],[8544,8575],[8579,8580],[9398,9449],[11264,11492],[11499,11502],[11506,11507],[11520,11557],[11559,11559],[11565,11565],[42560,42605],[42624,42653],[42786,42887],[42891,42894],[42896,42954],[42960,42961],[42963,42963],[42965,42969],[42994,42998],[43000,43002],[43824,43866],[43868,43881],[43888,43967],[64256,64262],[64275,64279],[65313,65338],[65345,65370],[66560,66639],[66736,66771],[66776,66811],[66928,66938],[66940,66954],[66956,66962],[66964,66965],[66967,66977],[66979,66993],[66995,67001],[67003,67004],[67456,67456],[67459,67461],[67463,67504],[67506,67514],[68736,68786],[68800,68850],[71840,71903],[93760,93823],[119808,119892],[119894,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119993],[119995,119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120146,120485],[120488,120512],[120514,120538],[120540,120570],[120572,120596],[120598,120628],[120630,120654],[120656,120686],[120688,120712],[120714,120744],[120746,120770],[120772,120779],[122624,122633],[122635,122654],[122661,122666],[122928,122989],[125184,125251],[127280,127305],[127312,127337],[127344,127369]],"Binary_Property/Changes_When_Casemapped":[[65,90],[97,122],[181,181],[192,214],[216,246],[248,311],[313,396],[398,410],[412,425],[428,441],[444,445],[447,447],[452,544],[546,563],[570,596],[598,599],[601,601],[603,604],[608,609],[611,611],[613,614],[616,620],[623,623],[625,626],[629,629],[637,637],[640,640],[642,643],[647,652],[658,658],[669,670],[837,837],[880,883],[886,887],[891,893],[895,895],[902,902],[904,906],[908,908],[910,929],[931,977],[981,1013],[1015,1019],[1021,1153],[1162,1327],[1329,1366],[1377,1415],[4256,4293],[4295,4295],[4301,4301],[4304,4346],[4349,4351],[5024,5109],[5112,5117],[7296,7304],[7312,7354],[7357,7359],[7545,7545],[7549,7549],[7566,7566],[7680,7835],[7838,7838],[7840,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025,8025],[8027,8027],[8029,8029],[8031,8061],[8064,8116],[8118,8124],[8126,8126],[8130,8132],[8134,8140],[8144,8147],[8150,8155],[8160,8172],[8178,8180],[8182,8188],[8486,8486],[8490,8491],[8498,8498],[8526,8526],[8544,8575],[8579,8580],[9398,9449],[11264,11376],[11378,11379],[11381,11382],[11390,11491],[11499,11502],[11506,11507],[11520,11557],[11559,11559],[11565,11565],[42560,42605],[42624,42651],[42786,42799],[42802,42863],[42873,42887],[42891,42893],[42896,42900],[42902,42926],[42928,42954],[42960,42961],[42966,42969],[42997,42998],[43859,43859],[43888,43967],[64256,64262],[64275,64279],[65313,65338],[65345,65370],[66560,66639],[66736,66771],[66776,66811],[66928,66938],[66940,66954],[66956,66962],[66964,66965],[66967,66977],[66979,66993],[66995,67001],[67003,67004],[68736,68786],[68800,68850],[71840,71903],[93760,93823],[125184,125251]],"Binary_Property/Changes_When_Titlecased":[[97,122],[181,181],[223,246],[248,255],[257,257],[259,259],[261,261],[263,263],[265,265],[267,267],[269,269],[271,271],[273,273],[275,275],[277,277],[279,279],[281,281],[283,283],[285,285],[287,287],[289,289],[291,291],[293,293],[295,295],[297,297],[299,299],[301,301],[303,303],[305,305],[307,307],[309,309],[311,311],[314,314],[316,316],[318,318],[320,320],[322,322],[324,324],[326,326],[328,329],[331,331],[333,333],[335,335],[337,337],[339,339],[341,341],[343,343],[345,345],[347,347],[349,349],[351,351],[353,353],[355,355],[357,357],[359,359],[361,361],[363,363],[365,365],[367,367],[369,369],[371,371],[373,373],[375,375],[378,378],[380,380],[382,384],[387,387],[389,389],[392,392],[396,396],[402,402],[405,405],[409,410],[414,414],[417,417],[419,419],[421,421],[424,424],[429,429],[432,432],[436,436],[438,438],[441,441],[445,445],[447,447],[452,452],[454,455],[457,458],[460,460],[462,462],[464,464],[466,466],[468,468],[470,470],[472,472],[474,474],[476,477],[479,479],[481,481],[483,483],[485,485],[487,487],[489,489],[491,491],[493,493],[495,497],[499,499],[501,501],[505,505],[507,507],[509,509],[511,511],[513,513],[515,515],[517,517],[519,519],[521,521],[523,523],[525,525],[527,527],[529,529],[531,531],[533,533],[535,535],[537,537],[539,539],[541,541],[543,543],[547,547],[549,549],[551,551],[553,553],[555,555],[557,557],[559,559],[561,561],[563,563],[572,572],[575,576],[578,578],[583,583],[585,585],[587,587],[589,589],[591,596],[598,599],[601,601],[603,604],[608,609],[611,611],[613,614],[616,620],[623,623],[625,626],[629,629],[637,637],[640,640],[642,643],[647,652],[658,658],[669,670],[837,837],[881,881],[883,883],[887,887],[891,893],[912,912],[940,974],[976,977],[981,983],[985,985],[987,987],[989,989],[991,991],[993,993],[995,995],[997,997],[999,999],[1001,1001],[1003,1003],[1005,1005],[1007,1011],[1013,1013],[1016,1016],[1019,1019],[1072,1119],[1121,1121],[1123,1123],[1125,1125],[1127,1127],[1129,1129],[1131,1131],[1133,1133],[1135,1135],[1137,1137],[1139,1139],[1141,1141],[1143,1143],[1145,1145],[1147,1147],[1149,1149],[1151,1151],[1153,1153],[1163,1163],[1165,1165],[1167,1167],[1169,1169],[1171,1171],[1173,1173],[1175,1175],[1177,1177],[1179,1179],[1181,1181],[1183,1183],[1185,1185],[1187,1187],[1189,1189],[1191,1191],[1193,1193],[1195,1195],[1197,1197],[1199,1199],[1201,1201],[1203,1203],[1205,1205],[1207,1207],[1209,1209],[1211,1211],[1213,1213],[1215,1215],[1218,1218],[1220,1220],[1222,1222],[1224,1224],[1226,1226],[1228,1228],[1230,1231],[1233,1233],[1235,1235],[1237,1237],[1239,1239],[1241,1241],[1243,1243],[1245,1245],[1247,1247],[1249,1249],[1251,1251],[1253,1253],[1255,1255],[1257,1257],[1259,1259],[1261,1261],[1263,1263],[1265,1265],[1267,1267],[1269,1269],[1271,1271],[1273,1273],[1275,1275],[1277,1277],[1279,1279],[1281,1281],[1283,1283],[1285,1285],[1287,1287],[1289,1289],[1291,1291],[1293,1293],[1295,1295],[1297,1297],[1299,1299],[1301,1301],[1303,1303],[1305,1305],[1307,1307],[1309,1309],[1311,1311],[1313,1313],[1315,1315],[1317,1317],[1319,1319],[1321,1321],[1323,1323],[1325,1325],[1327,1327],[1377,1415],[5112,5117],[7296,7304],[7545,7545],[7549,7549],[7566,7566],[7681,7681],[7683,7683],[7685,7685],[7687,7687],[7689,7689],[7691,7691],[7693,7693],[7695,7695],[7697,7697],[7699,7699],[7701,7701],[7703,7703],[7705,7705],[7707,7707],[7709,7709],[7711,7711],[7713,7713],[7715,7715],[7717,7717],[7719,7719],[7721,7721],[7723,7723],[7725,7725],[7727,7727],[7729,7729],[7731,7731],[7733,7733],[7735,7735],[7737,7737],[7739,7739],[7741,7741],[7743,7743],[7745,7745],[7747,7747],[7749,7749],[7751,7751],[7753,7753],[7755,7755],[7757,7757],[7759,7759],[7761,7761],[7763,7763],[7765,7765],[7767,7767],[7769,7769],[7771,7771],[7773,7773],[7775,7775],[7777,7777],[7779,7779],[7781,7781],[7783,7783],[7785,7785],[7787,7787],[7789,7789],[7791,7791],[7793,7793],[7795,7795],[7797,7797],[7799,7799],[7801,7801],[7803,7803],[7805,7805],[7807,7807],[7809,7809],[7811,7811],[7813,7813],[7815,7815],[7817,7817],[7819,7819],[7821,7821],[7823,7823],[7825,7825],[7827,7827],[7829,7835],[7841,7841],[7843,7843],[7845,7845],[7847,7847],[7849,7849],[7851,7851],[7853,7853],[7855,7855],[7857,7857],[7859,7859],[7861,7861],[7863,7863],[7865,7865],[7867,7867],[7869,7869],[7871,7871],[7873,7873],[7875,7875],[7877,7877],[7879,7879],[7881,7881],[7883,7883],[7885,7885],[7887,7887],[7889,7889],[7891,7891],[7893,7893],[7895,7895],[7897,7897],[7899,7899],[7901,7901],[7903,7903],[7905,7905],[7907,7907],[7909,7909],[7911,7911],[7913,7913],[7915,7915],[7917,7917],[7919,7919],[7921,7921],[7923,7923],[7925,7925],[7927,7927],[7929,7929],[7931,7931],[7933,7933],[7935,7943],[7952,7957],[7968,7975],[7984,7991],[8000,8005],[8016,8023],[8032,8039],[8048,8061],[8064,8071],[8080,8087],[8096,8103],[8112,8116],[8118,8119],[8126,8126],[8130,8132],[8134,8135],[8144,8147],[8150,8151],[8160,8167],[8178,8180],[8182,8183],[8526,8526],[8560,8575],[8580,8580],[9424,9449],[11312,11359],[11361,11361],[11365,11366],[11368,11368],[11370,11370],[11372,11372],[11379,11379],[11382,11382],[11393,11393],[11395,11395],[11397,11397],[11399,11399],[11401,11401],[11403,11403],[11405,11405],[11407,11407],[11409,11409],[11411,11411],[11413,11413],[11415,11415],[11417,11417],[11419,11419],[11421,11421],[11423,11423],[11425,11425],[11427,11427],[11429,11429],[11431,11431],[11433,11433],[11435,11435],[11437,11437],[11439,11439],[11441,11441],[11443,11443],[11445,11445],[11447,11447],[11449,11449],[11451,11451],[11453,11453],[11455,11455],[11457,11457],[11459,11459],[11461,11461],[11463,11463],[11465,11465],[11467,11467],[11469,11469],[11471,11471],[11473,11473],[11475,11475],[11477,11477],[11479,11479],[11481,11481],[11483,11483],[11485,11485],[11487,11487],[11489,11489],[11491,11491],[11500,11500],[11502,11502],[11507,11507],[11520,11557],[11559,11559],[11565,11565],[42561,42561],[42563,42563],[42565,42565],[42567,42567],[42569,42569],[42571,42571],[42573,42573],[42575,42575],[42577,42577],[42579,42579],[42581,42581],[42583,42583],[42585,42585],[42587,42587],[42589,42589],[42591,42591],[42593,42593],[42595,42595],[42597,42597],[42599,42599],[42601,42601],[42603,42603],[42605,42605],[42625,42625],[42627,42627],[42629,42629],[42631,42631],[42633,42633],[42635,42635],[42637,42637],[42639,42639],[42641,42641],[42643,42643],[42645,42645],[42647,42647],[42649,42649],[42651,42651],[42787,42787],[42789,42789],[42791,42791],[42793,42793],[42795,42795],[42797,42797],[42799,42799],[42803,42803],[42805,42805],[42807,42807],[42809,42809],[42811,42811],[42813,42813],[42815,42815],[42817,42817],[42819,42819],[42821,42821],[42823,42823],[42825,42825],[42827,42827],[42829,42829],[42831,42831],[42833,42833],[42835,42835],[42837,42837],[42839,42839],[42841,42841],[42843,42843],[42845,42845],[42847,42847],[42849,42849],[42851,42851],[42853,42853],[42855,42855],[42857,42857],[42859,42859],[42861,42861],[42863,42863],[42874,42874],[42876,42876],[42879,42879],[42881,42881],[42883,42883],[42885,42885],[42887,42887],[42892,42892],[42897,42897],[42899,42900],[42903,42903],[42905,42905],[42907,42907],[42909,42909],[42911,42911],[42913,42913],[42915,42915],[42917,42917],[42919,42919],[42921,42921],[42933,42933],[42935,42935],[42937,42937],[42939,42939],[42941,42941],[42943,42943],[42945,42945],[42947,42947],[42952,42952],[42954,42954],[42961,42961],[42967,42967],[42969,42969],[42998,42998],[43859,43859],[43888,43967],[64256,64262],[64275,64279],[65345,65370],[66600,66639],[66776,66811],[66967,66977],[66979,66993],[66995,67001],[67003,67004],[68800,68850],[71872,71903],[93792,93823],[125218,125251]],"Binary_Property/Expands_On_NFD":[[192,197],[199,207],[209,214],[217,221],[224,229],[231,239],[241,246],[249,253],[255,271],[274,293],[296,304],[308,311],[313,318],[323,328],[332,337],[340,357],[360,382],[416,417],[431,432],[461,476],[478,483],[486,496],[500,501],[504,539],[542,543],[550,563],[836,836],[901,902],[904,906],[908,908],[910,912],[938,944],[970,974],[979,980],[1024,1025],[1027,1027],[1031,1031],[1036,1038],[1049,1049],[1081,1081],[1104,1105],[1107,1107],[1111,1111],[1116,1118],[1142,1143],[1217,1218],[1232,1235],[1238,1239],[1242,1247],[1250,1255],[1258,1269],[1272,1273],[1570,1574],[1728,1728],[1730,1730],[1747,1747],[2345,2345],[2353,2353],[2356,2356],[2392,2399],[2507,2508],[2524,2525],[2527,2527],[2611,2611],[2614,2614],[2649,2651],[2654,2654],[2888,2888],[2891,2892],[2908,2909],[2964,2964],[3018,3020],[3144,3144],[3264,3264],[3271,3272],[3274,3275],[3402,3404],[3546,3546],[3548,3550],[3907,3907],[3917,3917],[3922,3922],[3927,3927],[3932,3932],[3945,3945],[3955,3955],[3957,3958],[3960,3960],[3969,3969],[3987,3987],[3997,3997],[4002,4002],[4007,4007],[4012,4012],[4025,4025],[4134,4134],[6918,6918],[6920,6920],[6922,6922],[6924,6924],[6926,6926],[6930,6930],[6971,6971],[6973,6973],[6976,6977],[6979,6979],[7680,7833],[7835,7835],[7840,7929],[7936,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025,8025],[8027,8027],[8029,8029],[8031,8061],[8064,8116],[8118,8124],[8129,8132],[8134,8147],[8150,8155],[8157,8174],[8178,8180],[8182,8188],[8491,8491],[8602,8603],[8622,8622],[8653,8655],[8708,8708],[8713,8713],[8716,8716],[8740,8740],[8742,8742],[8769,8769],[8772,8772],[8775,8775],[8777,8777],[8800,8800],[8802,8802],[8813,8817],[8820,8821],[8824,8825],[8832,8833],[8836,8837],[8840,8841],[8876,8879],[8928,8931],[8938,8941],[10972,10972],[12364,12364],[12366,12366],[12368,12368],[12370,12370],[12372,12372],[12374,12374],[12376,12376],[12378,12378],[12380,12380],[12382,12382],[12384,12384],[12386,12386],[12389,12389],[12391,12391],[12393,12393],[12400,12401],[12403,12404],[12406,12407],[12409,12410],[12412,12413],[12436,12436],[12446,12446],[12460,12460],[12462,12462],[12464,12464],[12466,12466],[12468,12468],[12470,12470],[12472,12472],[12474,12474],[12476,12476],[12478,12478],[12480,12480],[12482,12482],[12485,12485],[12487,12487],[12489,12489],[12496,12497],[12499,12500],[12502,12503],[12505,12506],[12508,12509],[12532,12532],[12535,12538],[12542,12542],[44032,55203],[64285,64285],[64287,64287],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64334],[69786,69786],[69788,69788],[69803,69803],[69934,69935],[70475,70476],[70843,70844],[70846,70846],[71098,71099],[71992,71992],[119134,119140],[119227,119232]],"Binary_Property/Other_Grapheme_Extend":[[2494,2494],[2519,2519],[2878,2878],[2903,2903],[3006,3006],[3031,3031],[3266,3266],[3285,3286],[3390,3390],[3415,3415],[3535,3535],[3551,3551],[6965,6965],[8204,8204],[12334,12335],[65438,65439],[70462,70462],[70487,70487],[70832,70832],[70845,70845],[71087,71087],[71984,71984],[119141,119141],[119150,119154],[917536,917631]],"Binary_Property/Assigned":[[0,887],[890,895],[900,906],[908,908],[910,929],[931,1327],[1329,1366],[1369,1418],[1421,1423],[1425,1479],[1488,1514],[1519,1524],[1536,1805],[1807,1866],[1869,1969],[1984,2042],[2045,2093],[2096,2110],[2112,2139],[2142,2142],[2144,2154],[2160,2190],[2192,2193],[2200,2435],[2437,2444],[2447,2448],[2451,2472],[2474,2480],[2482,2482],[2486,2489],[2492,2500],[2503,2504],[2507,2510],[2519,2519],[2524,2525],[2527,2531],[2534,2558],[2561,2563],[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2620,2620],[2622,2626],[2631,2632],[2635,2637],[2641,2641],[2649,2652],[2654,2654],[2662,2678],[2689,2691],[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],[2748,2757],[2759,2761],[2763,2765],[2768,2768],[2784,2787],[2790,2801],[2809,2815],[2817,2819],[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2876,2884],[2887,2888],[2891,2893],[2901,2903],[2908,2909],[2911,2915],[2918,2935],[2946,2947],[2949,2954],[2958,2960],[2962,2965],[2969,2970],[2972,2972],[2974,2975],[2979,2980],[2984,2986],[2990,3001],[3006,3010],[3014,3016],[3018,3021],[3024,3024],[3031,3031],[3046,3066],[3072,3084],[3086,3088],[3090,3112],[3114,3129],[3132,3140],[3142,3144],[3146,3149],[3157,3158],[3160,3162],[3165,3165],[3168,3171],[3174,3183],[3191,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],[3260,3268],[3270,3272],[3274,3277],[3285,3286],[3293,3294],[3296,3299],[3302,3311],[3313,3315],[3328,3340],[3342,3344],[3346,3396],[3398,3400],[3402,3407],[3412,3427],[3430,3455],[3457,3459],[3461,3478],[3482,3505],[3507,3515],[3517,3517],[3520,3526],[3530,3530],[3535,3540],[3542,3542],[3544,3551],[3558,3567],[3570,3572],[3585,3642],[3647,3675],[3713,3714],[3716,3716],[3718,3722],[3724,3747],[3749,3749],[3751,3773],[3776,3780],[3782,3782],[3784,3790],[3792,3801],[3804,3807],[3840,3911],[3913,3948],[3953,3991],[3993,4028],[4030,4044],[4046,4058],[4096,4293],[4295,4295],[4301,4301],[4304,4680],[4682,4685],[4688,4694],[4696,4696],[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],[4800,4800],[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4957,4988],[4992,5017],[5024,5109],[5112,5117],[5120,5788],[5792,5880],[5888,5909],[5919,5942],[5952,5971],[5984,5996],[5998,6000],[6002,6003],[6016,6109],[6112,6121],[6128,6137],[6144,6169],[6176,6264],[6272,6314],[6320,6389],[6400,6430],[6432,6443],[6448,6459],[6464,6464],[6468,6509],[6512,6516],[6528,6571],[6576,6601],[6608,6618],[6622,6683],[6686,6750],[6752,6780],[6783,6793],[6800,6809],[6816,6829],[6832,6862],[6912,6988],[6992,7038],[7040,7155],[7164,7223],[7227,7241],[7245,7304],[7312,7354],[7357,7367],[7376,7418],[7424,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025,8025],[8027,8027],[8029,8029],[8031,8061],[8064,8116],[8118,8132],[8134,8147],[8150,8155],[8157,8175],[8178,8180],[8182,8190],[8192,8292],[8294,8305],[8308,8334],[8336,8348],[8352,8384],[8400,8432],[8448,8587],[8592,9254],[9280,9290],[9312,11123],[11126,11157],[11159,11507],[11513,11557],[11559,11559],[11565,11565],[11568,11623],[11631,11632],[11647,11670],[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[11744,11869],[11904,11929],[11931,12019],[12032,12245],[12272,12283],[12288,12351],[12353,12438],[12441,12543],[12549,12591],[12593,12686],[12688,12771],[12784,12830],[12832,42124],[42128,42182],[42192,42539],[42560,42743],[42752,42954],[42960,42961],[42963,42963],[42965,42969],[42994,43052],[43056,43065],[43072,43127],[43136,43205],[43214,43225],[43232,43347],[43359,43388],[43392,43469],[43471,43481],[43486,43518],[43520,43574],[43584,43597],[43600,43609],[43612,43714],[43739,43766],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822],[43824,43883],[43888,44013],[44016,44025],[44032,55203],[55216,55238],[55243,55291],[55296,64109],[64112,64217],[64256,64262],[64275,64279],[64285,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64450],[64467,64911],[64914,64967],[64975,64975],[65008,65049],[65056,65106],[65108,65126],[65128,65131],[65136,65140],[65142,65276],[65279,65279],[65281,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500],[65504,65510],[65512,65518],[65529,65533],[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786],[65792,65794],[65799,65843],[65847,65934],[65936,65948],[65952,65952],[66000,66045],[66176,66204],[66208,66256],[66272,66299],[66304,66339],[66349,66378],[66384,66426],[66432,66461],[66463,66499],[66504,66517],[66560,66717],[66720,66729],[66736,66771],[66776,66811],[66816,66855],[66864,66915],[66927,66938],[66940,66954],[66956,66962],[66964,66965],[66967,66977],[66979,66993],[66995,67001],[67003,67004],[67072,67382],[67392,67413],[67424,67431],[67456,67461],[67463,67504],[67506,67514],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67669],[67671,67742],[67751,67759],[67808,67826],[67828,67829],[67835,67867],[67871,67897],[67903,67903],[67968,68023],[68028,68047],[68050,68099],[68101,68102],[68108,68115],[68117,68119],[68121,68149],[68152,68154],[68159,68168],[68176,68184],[68192,68255],[68288,68326],[68331,68342],[68352,68405],[68409,68437],[68440,68466],[68472,68497],[68505,68508],[68521,68527],[68608,68680],[68736,68786],[68800,68850],[68858,68903],[68912,68921],[69216,69246],[69248,69289],[69291,69293],[69296,69297],[69373,69415],[69424,69465],[69488,69513],[69552,69579],[69600,69622],[69632,69709],[69714,69749],[69759,69826],[69837,69837],[69840,69864],[69872,69881],[69888,69940],[69942,69959],[69968,70006],[70016,70111],[70113,70132],[70144,70161],[70163,70209],[70272,70278],[70280,70280],[70282,70285],[70287,70301],[70303,70313],[70320,70378],[70384,70393],[70400,70403],[70405,70412],[70415,70416],[70419,70440],[70442,70448],[70450,70451],[70453,70457],[70459,70468],[70471,70472],[70475,70477],[70480,70480],[70487,70487],[70493,70499],[70502,70508],[70512,70516],[70656,70747],[70749,70753],[70784,70855],[70864,70873],[71040,71093],[71096,71133],[71168,71236],[71248,71257],[71264,71276],[71296,71353],[71360,71369],[71424,71450],[71453,71467],[71472,71494],[71680,71739],[71840,71922],[71935,71942],[71945,71945],[71948,71955],[71957,71958],[71960,71989],[71991,71992],[71995,72006],[72016,72025],[72096,72103],[72106,72151],[72154,72164],[72192,72263],[72272,72354],[72368,72440],[72448,72457],[72704,72712],[72714,72758],[72760,72773],[72784,72812],[72816,72847],[72850,72871],[72873,72886],[72960,72966],[72968,72969],[72971,73014],[73018,73018],[73020,73021],[73023,73031],[73040,73049],[73056,73061],[73063,73064],[73066,73102],[73104,73105],[73107,73112],[73120,73129],[73440,73464],[73472,73488],[73490,73530],[73534,73561],[73648,73648],[73664,73713],[73727,74649],[74752,74862],[74864,74868],[74880,75075],[77712,77810],[77824,78933],[82944,83526],[92160,92728],[92736,92766],[92768,92777],[92782,92862],[92864,92873],[92880,92909],[92912,92917],[92928,92997],[93008,93017],[93019,93025],[93027,93047],[93053,93071],[93760,93850],[93952,94026],[94031,94087],[94095,94111],[94176,94180],[94192,94193],[94208,100343],[100352,101589],[101632,101640],[110576,110579],[110581,110587],[110589,110590],[110592,110882],[110898,110898],[110928,110930],[110933,110933],[110948,110951],[110960,111355],[113664,113770],[113776,113788],[113792,113800],[113808,113817],[113820,113827],[118528,118573],[118576,118598],[118608,118723],[118784,119029],[119040,119078],[119081,119274],[119296,119365],[119488,119507],[119520,119539],[119552,119638],[119648,119672],[119808,119892],[119894,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119993],[119995,119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120146,120485],[120488,120779],[120782,121483],[121499,121503],[121505,121519],[122624,122654],[122661,122666],[122880,122886],[122888,122904],[122907,122913],[122915,122916],[122918,122922],[122928,122989],[123023,123023],[123136,123180],[123184,123197],[123200,123209],[123214,123215],[123536,123566],[123584,123641],[123647,123647],[124112,124153],[124896,124902],[124904,124907],[124909,124910],[124912,124926],[124928,125124],[125127,125142],[125184,125259],[125264,125273],[125278,125279],[126065,126132],[126209,126269],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[126704,126705],[126976,127019],[127024,127123],[127136,127150],[127153,127167],[127169,127183],[127185,127221],[127232,127405],[127462,127490],[127504,127547],[127552,127560],[127568,127569],[127584,127589],[127744,128727],[128732,128748],[128752,128764],[128768,128886],[128891,128985],[128992,129003],[129008,129008],[129024,129035],[129040,129095],[129104,129113],[129120,129159],[129168,129197],[129200,129201],[129280,129619],[129632,129645],[129648,129660],[129664,129672],[129680,129725],[129727,129733],[129742,129755],[129760,129768],[129776,129784],[129792,129938],[129940,129994],[130032,130041],[131072,173791],[173824,177977],[177984,178205],[178208,183969],[183984,191456],[194560,195101],[196608,201546],[201552,205743],[917505,917505],[917536,917631],[917760,917999],[983040,1048573],[1048576,1114109]],"Binary_Property/Radical":[[11904,11929],[11931,12019],[12032,12245]],"Binary_Property/Grapheme_Extend":[[768,879],[1155,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1552,1562],[1611,1631],[1648,1648],[1750,1756],[1759,1764],[1767,1768],[1770,1773],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2045,2045],[2070,2073],[2075,2083],[2085,2087],[2089,2093],[2137,2139],[2200,2207],[2250,2273],[2275,2306],[2362,2362],[2364,2364],[2369,2376],[2381,2381],[2385,2391],[2402,2403],[2433,2433],[2492,2492],[2494,2494],[2497,2500],[2509,2509],[2519,2519],[2530,2531],[2558,2558],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2641,2641],[2672,2673],[2677,2677],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2810,2815],[2817,2817],[2876,2876],[2878,2879],[2881,2884],[2893,2893],[2901,2903],[2914,2915],[2946,2946],[3006,3006],[3008,3008],[3021,3021],[3031,3031],[3072,3072],[3076,3076],[3132,3132],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3170,3171],[3201,3201],[3260,3260],[3263,3263],[3266,3266],[3270,3270],[3276,3277],[3285,3286],[3298,3299],[3328,3329],[3387,3388],[3390,3390],[3393,3396],[3405,3405],[3415,3415],[3426,3427],[3457,3457],[3530,3530],[3535,3535],[3538,3540],[3542,3542],[3551,3551],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3772],[3784,3790],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3981,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4151],[4153,4154],[4157,4158],[4184,4185],[4190,4192],[4209,4212],[4226,4226],[4229,4230],[4237,4237],[4253,4253],[4957,4959],[5906,5908],[5938,5939],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6157],[6159,6159],[6277,6278],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6683,6683],[6742,6742],[6744,6750],[6752,6752],[6754,6754],[6757,6764],[6771,6780],[6783,6783],[6832,6862],[6912,6915],[6964,6970],[6972,6972],[6978,6978],[7019,7027],[7040,7041],[7074,7077],[7080,7081],[7083,7085],[7142,7142],[7144,7145],[7149,7149],[7151,7153],[7212,7219],[7222,7223],[7376,7378],[7380,7392],[7394,7400],[7405,7405],[7412,7412],[7416,7417],[7616,7679],[8204,8204],[8400,8432],[11503,11505],[11647,11647],[11744,11775],[12330,12335],[12441,12442],[42607,42610],[42612,42621],[42654,42655],[42736,42737],[43010,43010],[43014,43014],[43019,43019],[43045,43046],[43052,43052],[43204,43205],[43232,43249],[43263,43263],[43302,43309],[43335,43345],[43392,43394],[43443,43443],[43446,43449],[43452,43453],[43493,43493],[43561,43566],[43569,43570],[43573,43574],[43587,43587],[43596,43596],[43644,43644],[43696,43696],[43698,43700],[43703,43704],[43710,43711],[43713,43713],[43756,43757],[43766,43766],[44005,44005],[44008,44008],[44013,44013],[64286,64286],[65024,65039],[65056,65071],[65438,65439],[66045,66045],[66272,66272],[66422,66426],[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[68325,68326],[68900,68903],[69291,69292],[69373,69375],[69446,69456],[69506,69509],[69633,69633],[69688,69702],[69744,69744],[69747,69748],[69759,69761],[69811,69814],[69817,69818],[69826,69826],[69888,69890],[69927,69931],[69933,69940],[70003,70003],[70016,70017],[70070,70078],[70089,70092],[70095,70095],[70191,70193],[70196,70196],[70198,70199],[70206,70206],[70209,70209],[70367,70367],[70371,70378],[70400,70401],[70459,70460],[70462,70462],[70464,70464],[70487,70487],[70502,70508],[70512,70516],[70712,70719],[70722,70724],[70726,70726],[70750,70750],[70832,70832],[70835,70840],[70842,70842],[70845,70845],[70847,70848],[70850,70851],[71087,71087],[71090,71093],[71100,71101],[71103,71104],[71132,71133],[71219,71226],[71229,71229],[71231,71232],[71339,71339],[71341,71341],[71344,71349],[71351,71351],[71453,71455],[71458,71461],[71463,71467],[71727,71735],[71737,71738],[71984,71984],[71995,71996],[71998,71998],[72003,72003],[72148,72151],[72154,72155],[72160,72160],[72193,72202],[72243,72248],[72251,72254],[72263,72263],[72273,72278],[72281,72283],[72330,72342],[72344,72345],[72752,72758],[72760,72765],[72767,72767],[72850,72871],[72874,72880],[72882,72883],[72885,72886],[73009,73014],[73018,73018],[73020,73021],[73023,73029],[73031,73031],[73104,73105],[73109,73109],[73111,73111],[73459,73460],[73472,73473],[73526,73530],[73536,73536],[73538,73538],[78912,78912],[78919,78933],[92912,92916],[92976,92982],[94031,94031],[94095,94098],[94180,94180],[113821,113822],[118528,118573],[118576,118598],[119141,119141],[119143,119145],[119150,119154],[119163,119170],[119173,119179],[119210,119213],[119362,119364],[121344,121398],[121403,121452],[121461,121461],[121476,121476],[121499,121503],[121505,121519],[122880,122886],[122888,122904],[122907,122913],[122915,122916],[122918,122922],[123023,123023],[123184,123190],[123566,123566],[123628,123631],[124140,124143],[125136,125142],[125252,125258],[917536,917631],[917760,917999]],"Binary_Property/Case_Ignorable":[[39,39],[46,46],[58,58],[94,94],[96,96],[168,168],[173,173],[175,175],[180,180],[183,184],[688,879],[884,885],[890,890],[900,901],[903,903],[1155,1161],[1369,1369],[1375,1375],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1524,1524],[1536,1541],[1552,1562],[1564,1564],[1600,1600],[1611,1631],[1648,1648],[1750,1757],[1759,1768],[1770,1773],[1807,1807],[1809,1809],[1840,1866],[1958,1968],[2027,2037],[2042,2042],[2045,2045],[2070,2093],[2137,2139],[2184,2184],[2192,2193],[2200,2207],[2249,2306],[2362,2362],[2364,2364],[2369,2376],[2381,2381],[2385,2391],[2402,2403],[2417,2417],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2558,2558],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2641,2641],[2672,2673],[2677,2677],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2810,2815],[2817,2817],[2876,2876],[2879,2879],[2881,2884],[2893,2893],[2901,2902],[2914,2915],[2946,2946],[3008,3008],[3021,3021],[3072,3072],[3076,3076],[3132,3132],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3170,3171],[3201,3201],[3260,3260],[3263,3263],[3270,3270],[3276,3277],[3298,3299],[3328,3329],[3387,3388],[3393,3396],[3405,3405],[3426,3427],[3457,3457],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3654,3662],[3761,3761],[3764,3772],[3782,3782],[3784,3790],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3981,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4151],[4153,4154],[4157,4158],[4184,4185],[4190,4192],[4209,4212],[4226,4226],[4229,4230],[4237,4237],[4253,4253],[4348,4348],[4957,4959],[5906,5908],[5938,5939],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6103,6103],[6109,6109],[6155,6159],[6211,6211],[6277,6278],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6683,6683],[6742,6742],[6744,6750],[6752,6752],[6754,6754],[6757,6764],[6771,6780],[6783,6783],[6823,6823],[6832,6862],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7040,7041],[7074,7077],[7080,7081],[7083,7085],[7142,7142],[7144,7145],[7149,7149],[7151,7153],[7212,7219],[7222,7223],[7288,7293],[7376,7378],[7380,7392],[7394,7400],[7405,7405],[7412,7412],[7416,7417],[7468,7530],[7544,7544],[7579,7679],[8125,8125],[8127,8129],[8141,8143],[8157,8159],[8173,8175],[8189,8190],[8203,8207],[8216,8217],[8228,8228],[8231,8231],[8234,8238],[8288,8292],[8294,8303],[8305,8305],[8319,8319],[8336,8348],[8400,8432],[11388,11389],[11503,11505],[11631,11631],[11647,11647],[11744,11775],[11823,11823],[12293,12293],[12330,12333],[12337,12341],[12347,12347],[12441,12446],[12540,12542],[40981,40981],[42232,42237],[42508,42508],[42607,42610],[42612,42621],[42623,42623],[42652,42655],[42736,42737],[42752,42785],[42864,42864],[42888,42890],[42994,42996],[43000,43001],[43010,43010],[43014,43014],[43019,43019],[43045,43046],[43052,43052],[43204,43205],[43232,43249],[43263,43263],[43302,43309],[43335,43345],[43392,43394],[43443,43443],[43446,43449],[43452,43453],[43471,43471],[43493,43494],[43561,43566],[43569,43570],[43573,43574],[43587,43587],[43596,43596],[43632,43632],[43644,43644],[43696,43696],[43698,43700],[43703,43704],[43710,43711],[43713,43713],[43741,43741],[43756,43757],[43763,43764],[43766,43766],[43867,43871],[43881,43883],[44005,44005],[44008,44008],[44013,44013],[64286,64286],[64434,64450],[65024,65039],[65043,65043],[65056,65071],[65106,65106],[65109,65109],[65279,65279],[65287,65287],[65294,65294],[65306,65306],[65342,65342],[65344,65344],[65392,65392],[65438,65439],[65507,65507],[65529,65531],[66045,66045],[66272,66272],[66422,66426],[67456,67461],[67463,67504],[67506,67514],[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[68325,68326],[68900,68903],[69291,69292],[69373,69375],[69446,69456],[69506,69509],[69633,69633],[69688,69702],[69744,69744],[69747,69748],[69759,69761],[69811,69814],[69817,69818],[69821,69821],[69826,69826],[69837,69837],[69888,69890],[69927,69931],[69933,69940],[70003,70003],[70016,70017],[70070,70078],[70089,70092],[70095,70095],[70191,70193],[70196,70196],[70198,70199],[70206,70206],[70209,70209],[70367,70367],[70371,70378],[70400,70401],[70459,70460],[70464,70464],[70502,70508],[70512,70516],[70712,70719],[70722,70724],[70726,70726],[70750,70750],[70835,70840],[70842,70842],[70847,70848],[70850,70851],[71090,71093],[71100,71101],[71103,71104],[71132,71133],[71219,71226],[71229,71229],[71231,71232],[71339,71339],[71341,71341],[71344,71349],[71351,71351],[71453,71455],[71458,71461],[71463,71467],[71727,71735],[71737,71738],[71995,71996],[71998,71998],[72003,72003],[72148,72151],[72154,72155],[72160,72160],[72193,72202],[72243,72248],[72251,72254],[72263,72263],[72273,72278],[72281,72283],[72330,72342],[72344,72345],[72752,72758],[72760,72765],[72767,72767],[72850,72871],[72874,72880],[72882,72883],[72885,72886],[73009,73014],[73018,73018],[73020,73021],[73023,73029],[73031,73031],[73104,73105],[73109,73109],[73111,73111],[73459,73460],[73472,73473],[73526,73530],[73536,73536],[73538,73538],[78896,78912],[78919,78933],[92912,92916],[92976,92982],[92992,92995],[94031,94031],[94095,94111],[94176,94177],[94179,94180],[110576,110579],[110581,110587],[110589,110590],[113821,113822],[113824,113827],[118528,118573],[118576,118598],[119143,119145],[119155,119170],[119173,119179],[119210,119213],[119362,119364],[121344,121398],[121403,121452],[121461,121461],[121476,121476],[121499,121503],[121505,121519],[122880,122886],[122888,122904],[122907,122913],[122915,122916],[122918,122922],[122928,122989],[123023,123023],[123184,123197],[123566,123566],[123628,123631],[124139,124143],[125136,125142],[125252,125259],[127995,127999],[917505,917505],[917536,917631],[917760,917999]],"Binary_Property/Sentence_Terminal":[[33,33],[46,46],[63,63],[1417,1417],[1565,1567],[1748,1748],[1792,1794],[2041,2041],[2103,2103],[2105,2105],[2109,2110],[2404,2405],[4170,4171],[4962,4962],[4967,4968],[5742,5742],[5941,5942],[6147,6147],[6153,6153],[6468,6469],[6824,6827],[7002,7003],[7006,7007],[7037,7038],[7227,7228],[7294,7295],[8252,8253],[8263,8265],[11822,11822],[11836,11836],[11859,11860],[12290,12290],[42239,42239],[42510,42511],[42739,42739],[42743,42743],[43126,43127],[43214,43215],[43311,43311],[43464,43465],[43613,43615],[43760,43761],[44011,44011],[65106,65106],[65110,65111],[65281,65281],[65294,65294],[65311,65311],[65377,65377],[68182,68183],[69461,69465],[69510,69513],[69703,69704],[69822,69825],[69953,69955],[70085,70086],[70093,70093],[70110,70111],[70200,70201],[70203,70204],[70313,70313],[70731,70732],[71106,71107],[71113,71127],[71233,71234],[71484,71486],[72004,72004],[72006,72006],[72258,72259],[72347,72348],[72769,72770],[73463,73464],[73539,73540],[92782,92783],[92917,92917],[92983,92984],[92996,92996],[93848,93848],[113823,113823],[121480,121480]],"Binary_Property/Other_ID_Continue":[[183,183],[903,903],[4969,4977],[6618,6618]],"Binary_Property/ID_Start":[[65,90],[97,122],[170,170],[181,181],[186,186],[192,214],[216,246],[248,705],[710,721],[736,740],[748,748],[750,750],[880,884],[886,887],[890,893],[895,895],[902,902],[904,906],[908,908],[910,929],[931,1013],[1015,1153],[1162,1327],[1329,1366],[1369,1369],[1376,1416],[1488,1514],[1519,1522],[1568,1610],[1646,1647],[1649,1747],[1749,1749],[1765,1766],[1774,1775],[1786,1788],[1791,1791],[1808,1808],[1810,1839],[1869,1957],[1969,1969],[1994,2026],[2036,2037],[2042,2042],[2048,2069],[2074,2074],[2084,2084],[2088,2088],[2112,2136],[2144,2154],[2160,2183],[2185,2190],[2208,2249],[2308,2361],[2365,2365],[2384,2384],[2392,2401],[2417,2432],[2437,2444],[2447,2448],[2451,2472],[2474,2480],[2482,2482],[2486,2489],[2493,2493],[2510,2510],[2524,2525],[2527,2529],[2544,2545],[2556,2556],[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2649,2652],[2654,2654],[2674,2676],[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],[2749,2749],[2768,2768],[2784,2785],[2809,2809],[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2877,2877],[2908,2909],[2911,2913],[2929,2929],[2947,2947],[2949,2954],[2958,2960],[2962,2965],[2969,2970],[2972,2972],[2974,2975],[2979,2980],[2984,2986],[2990,3001],[3024,3024],[3077,3084],[3086,3088],[3090,3112],[3114,3129],[3133,3133],[3160,3162],[3165,3165],[3168,3169],[3200,3200],[3205,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],[3261,3261],[3293,3294],[3296,3297],[3313,3314],[3332,3340],[3342,3344],[3346,3386],[3389,3389],[3406,3406],[3412,3414],[3423,3425],[3450,3455],[3461,3478],[3482,3505],[3507,3515],[3517,3517],[3520,3526],[3585,3632],[3634,3635],[3648,3654],[3713,3714],[3716,3716],[3718,3722],[3724,3747],[3749,3749],[3751,3760],[3762,3763],[3773,3773],[3776,3780],[3782,3782],[3804,3807],[3840,3840],[3904,3911],[3913,3948],[3976,3980],[4096,4138],[4159,4159],[4176,4181],[4186,4189],[4193,4193],[4197,4198],[4206,4208],[4213,4225],[4238,4238],[4256,4293],[4295,4295],[4301,4301],[4304,4346],[4348,4680],[4682,4685],[4688,4694],[4696,4696],[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],[4800,4800],[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4992,5007],[5024,5109],[5112,5117],[5121,5740],[5743,5759],[5761,5786],[5792,5866],[5870,5880],[5888,5905],[5919,5937],[5952,5969],[5984,5996],[5998,6000],[6016,6067],[6103,6103],[6108,6108],[6176,6264],[6272,6312],[6314,6314],[6320,6389],[6400,6430],[6480,6509],[6512,6516],[6528,6571],[6576,6601],[6656,6678],[6688,6740],[6823,6823],[6917,6963],[6981,6988],[7043,7072],[7086,7087],[7098,7141],[7168,7203],[7245,7247],[7258,7293],[7296,7304],[7312,7354],[7357,7359],[7401,7404],[7406,7411],[7413,7414],[7418,7418],[7424,7615],[7680,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025,8025],[8027,8027],[8029,8029],[8031,8061],[8064,8116],[8118,8124],[8126,8126],[8130,8132],[8134,8140],[8144,8147],[8150,8155],[8160,8172],[8178,8180],[8182,8188],[8305,8305],[8319,8319],[8336,8348],[8450,8450],[8455,8455],[8458,8467],[8469,8469],[8472,8477],[8484,8484],[8486,8486],[8488,8488],[8490,8505],[8508,8511],[8517,8521],[8526,8526],[8544,8584],[11264,11492],[11499,11502],[11506,11507],[11520,11557],[11559,11559],[11565,11565],[11568,11623],[11631,11631],[11648,11670],[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[12293,12295],[12321,12329],[12337,12341],[12344,12348],[12353,12438],[12443,12447],[12449,12538],[12540,12543],[12549,12591],[12593,12686],[12704,12735],[12784,12799],[13312,19903],[19968,42124],[42192,42237],[42240,42508],[42512,42527],[42538,42539],[42560,42606],[42623,42653],[42656,42735],[42775,42783],[42786,42888],[42891,42954],[42960,42961],[42963,42963],[42965,42969],[42994,43009],[43011,43013],[43015,43018],[43020,43042],[43072,43123],[43138,43187],[43250,43255],[43259,43259],[43261,43262],[43274,43301],[43312,43334],[43360,43388],[43396,43442],[43471,43471],[43488,43492],[43494,43503],[43514,43518],[43520,43560],[43584,43586],[43588,43595],[43616,43638],[43642,43642],[43646,43695],[43697,43697],[43701,43702],[43705,43709],[43712,43712],[43714,43714],[43739,43741],[43744,43754],[43762,43764],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822],[43824,43866],[43868,43881],[43888,44002],[44032,55203],[55216,55238],[55243,55291],[63744,64109],[64112,64217],[64256,64262],[64275,64279],[64285,64285],[64287,64296],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64433],[64467,64829],[64848,64911],[64914,64967],[65008,65019],[65136,65140],[65142,65276],[65313,65338],[65345,65370],[65382,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500],[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786],[65856,65908],[66176,66204],[66208,66256],[66304,66335],[66349,66378],[66384,66421],[66432,66461],[66464,66499],[66504,66511],[66513,66517],[66560,66717],[66736,66771],[66776,66811],[66816,66855],[66864,66915],[66928,66938],[66940,66954],[66956,66962],[66964,66965],[66967,66977],[66979,66993],[66995,67001],[67003,67004],[67072,67382],[67392,67413],[67424,67431],[67456,67461],[67463,67504],[67506,67514],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67669],[67680,67702],[67712,67742],[67808,67826],[67828,67829],[67840,67861],[67872,67897],[67968,68023],[68030,68031],[68096,68096],[68112,68115],[68117,68119],[68121,68149],[68192,68220],[68224,68252],[68288,68295],[68297,68324],[68352,68405],[68416,68437],[68448,68466],[68480,68497],[68608,68680],[68736,68786],[68800,68850],[68864,68899],[69248,69289],[69296,69297],[69376,69404],[69415,69415],[69424,69445],[69488,69505],[69552,69572],[69600,69622],[69635,69687],[69745,69746],[69749,69749],[69763,69807],[69840,69864],[69891,69926],[69956,69956],[69959,69959],[69968,70002],[70006,70006],[70019,70066],[70081,70084],[70106,70106],[70108,70108],[70144,70161],[70163,70187],[70207,70208],[70272,70278],[70280,70280],[70282,70285],[70287,70301],[70303,70312],[70320,70366],[70405,70412],[70415,70416],[70419,70440],[70442,70448],[70450,70451],[70453,70457],[70461,70461],[70480,70480],[70493,70497],[70656,70708],[70727,70730],[70751,70753],[70784,70831],[70852,70853],[70855,70855],[71040,71086],[71128,71131],[71168,71215],[71236,71236],[71296,71338],[71352,71352],[71424,71450],[71488,71494],[71680,71723],[71840,71903],[71935,71942],[71945,71945],[71948,71955],[71957,71958],[71960,71983],[71999,71999],[72001,72001],[72096,72103],[72106,72144],[72161,72161],[72163,72163],[72192,72192],[72203,72242],[72250,72250],[72272,72272],[72284,72329],[72349,72349],[72368,72440],[72704,72712],[72714,72750],[72768,72768],[72818,72847],[72960,72966],[72968,72969],[72971,73008],[73030,73030],[73056,73061],[73063,73064],[73066,73097],[73112,73112],[73440,73458],[73474,73474],[73476,73488],[73490,73523],[73648,73648],[73728,74649],[74752,74862],[74880,75075],[77712,77808],[77824,78895],[78913,78918],[82944,83526],[92160,92728],[92736,92766],[92784,92862],[92880,92909],[92928,92975],[92992,92995],[93027,93047],[93053,93071],[93760,93823],[93952,94026],[94032,94032],[94099,94111],[94176,94177],[94179,94179],[94208,100343],[100352,101589],[101632,101640],[110576,110579],[110581,110587],[110589,110590],[110592,110882],[110898,110898],[110928,110930],[110933,110933],[110948,110951],[110960,111355],[113664,113770],[113776,113788],[113792,113800],[113808,113817],[119808,119892],[119894,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119993],[119995,119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120146,120485],[120488,120512],[120514,120538],[120540,120570],[120572,120596],[120598,120628],[120630,120654],[120656,120686],[120688,120712],[120714,120744],[120746,120770],[120772,120779],[122624,122654],[122661,122666],[122928,122989],[123136,123180],[123191,123197],[123214,123214],[123536,123565],[123584,123627],[124112,124139],[124896,124902],[124904,124907],[124909,124910],[124912,124926],[124928,125124],[125184,125251],[125259,125259],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[131072,173791],[173824,177977],[177984,178205],[178208,183969],[183984,191456],[194560,195101],[196608,201546],[201552,205743]],"Binary_Property/Other_ID_Start":[[6277,6278],[8472,8472],[8494,8494],[12443,12444]],"Binary_Property/Prepended_Concatenation_Mark":[[1536,1541],[1757,1757],[1807,1807],[2192,2193],[2274,2274],[69821,69821],[69837,69837]],"Binary_Property/Join_Control":[[8204,8205]],"Binary_Property/Diacritic":[[94,94],[96,96],[168,168],[175,175],[180,180],[183,184],[688,846],[848,855],[861,866],[884,885],[890,890],[900,901],[1155,1159],[1369,1369],[1425,1441],[1443,1469],[1471,1471],[1473,1474],[1476,1476],[1611,1618],[1623,1624],[1759,1760],[1765,1766],[1770,1772],[1840,1866],[1958,1968],[2027,2037],[2072,2073],[2200,2207],[2249,2258],[2275,2302],[2364,2364],[2381,2381],[2385,2388],[2417,2417],[2492,2492],[2509,2509],[2620,2620],[2637,2637],[2748,2748],[2765,2765],[2813,2815],[2876,2876],[2893,2893],[2901,2901],[3021,3021],[3132,3132],[3149,3149],[3260,3260],[3277,3277],[3387,3388],[3405,3405],[3530,3530],[3655,3660],[3662,3662],[3770,3770],[3784,3788],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3902,3903],[3970,3972],[3974,3975],[4038,4038],[4151,4151],[4153,4154],[4195,4196],[4201,4205],[4231,4237],[4239,4239],[4250,4251],[4957,4959],[5908,5909],[6089,6099],[6109,6109],[6457,6459],[6773,6780],[6783,6783],[6832,6846],[6849,6859],[6964,6964],[6980,6980],[7019,7027],[7082,7083],[7222,7223],[7288,7293],[7376,7400],[7405,7405],[7412,7412],[7415,7417],[7468,7530],[7620,7631],[7669,7679],[8125,8125],[8127,8129],[8141,8143],[8157,8159],[8173,8175],[8189,8190],[11503,11505],[11823,11823],[12330,12335],[12441,12444],[12540,12540],[42607,42607],[42620,42621],[42623,42623],[42652,42653],[42736,42737],[42752,42785],[42888,42890],[43000,43001],[43204,43204],[43232,43249],[43307,43310],[43347,43347],[43443,43443],[43456,43456],[43493,43493],[43643,43645],[43711,43714],[43766,43766],[43867,43871],[43881,43883],[44012,44013],[64286,64286],[65056,65071],[65342,65342],[65344,65344],[65392,65392],[65438,65439],[65507,65507],[66272,66272],[67456,67461],[67463,67504],[67506,67514],[68325,68326],[68898,68903],[69373,69375],[69446,69456],[69506,69509],[69702,69702],[69744,69744],[69817,69818],[69939,69940],[70003,70003],[70080,70080],[70090,70092],[70197,70198],[70377,70378],[70460,70460],[70477,70477],[70502,70508],[70512,70516],[70722,70722],[70726,70726],[70850,70851],[71103,71104],[71231,71231],[71350,71351],[71467,71467],[71737,71738],[71997,71998],[72003,72003],[72160,72160],[72244,72244],[72263,72263],[72345,72345],[72767,72767],[73026,73026],[73028,73029],[73111,73111],[78919,78933],[92912,92916],[92976,92982],[94095,94111],[94192,94193],[110576,110579],[110581,110587],[110589,110590],[118528,118573],[118576,118598],[119143,119145],[119149,119154],[119163,119170],[119173,119179],[119210,119213],[122928,122989],[123184,123190],[123566,123566],[123628,123631],[125136,125142],[125252,125254],[125256,125258]],"Binary_Property/Emoji_Component":[[35,35],[42,42],[48,57],[8205,8205],[8419,8419],[65039,65039],[127462,127487],[127995,127999],[129456,129459],[917536,917631]],"Binary_Property/Default_Ignorable_Code_Point":[[173,173],[847,847],[1564,1564],[4447,4448],[6068,6069],[6155,6159],[8203,8207],[8234,8238],[8288,8303],[12644,12644],[65024,65039],[65279,65279],[65440,65440],[65520,65528],[113824,113827],[119155,119162],[917504,921599]],"Binary_Property/Emoji_Modifier":[[127995,127999]],"Binary_Property/Quotation_Mark":[[34,34],[39,39],[171,171],[187,187],[8216,8223],[8249,8250],[11842,11842],[12300,12303],[12317,12319],[65089,65092],[65282,65282],[65287,65287],[65378,65379]],"Binary_Property/Pattern_White_Space":[[9,13],[32,32],[133,133],[8206,8207],[8232,8233]],"Binary_Property/Other_Lowercase":[[170,170],[186,186],[688,696],[704,705],[736,740],[837,837],[890,890],[4348,4348],[7468,7530],[7544,7544],[7579,7615],[8305,8305],[8319,8319],[8336,8348],[8560,8575],[9424,9449],[11388,11389],[42652,42653],[42864,42864],[42994,42996],[43000,43001],[43868,43871],[43881,43881],[67456,67456],[67459,67461],[67463,67504],[67506,67514],[122928,122989]],"Binary_Property/Variation_Selector":[[6155,6157],[6159,6159],[65024,65039],[917760,917999]],"Binary_Property/Composition_Exclusion":[[2392,2399],[2524,2525],[2527,2527],[2611,2611],[2614,2614],[2649,2651],[2654,2654],[2908,2909],[3907,3907],[3917,3917],[3922,3922],[3927,3927],[3932,3932],[3945,3945],[3958,3958],[3960,3960],[3987,3987],[3997,3997],[4002,4002],[4007,4007],[4012,4012],[4025,4025],[10972,10972],[64285,64285],[64287,64287],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64334],[119134,119140],[119227,119232]],"Binary_Property/Grapheme_Base":[[32,126],[160,172],[174,767],[880,887],[890,895],[900,906],[908,908],[910,929],[931,1154],[1162,1327],[1329,1366],[1369,1418],[1421,1423],[1470,1470],[1472,1472],[1475,1475],[1478,1478],[1488,1514],[1519,1524],[1542,1551],[1563,1563],[1565,1610],[1632,1647],[1649,1749],[1758,1758],[1765,1766],[1769,1769],[1774,1805],[1808,1808],[1810,1839],[1869,1957],[1969,1969],[1984,2026],[2036,2042],[2046,2069],[2074,2074],[2084,2084],[2088,2088],[2096,2110],[2112,2136],[2142,2142],[2144,2154],[2160,2190],[2208,2249],[2307,2361],[2363,2363],[2365,2368],[2377,2380],[2382,2384],[2392,2401],[2404,2432],[2434,2435],[2437,2444],[2447,2448],[2451,2472],[2474,2480],[2482,2482],[2486,2489],[2493,2493],[2495,2496],[2503,2504],[2507,2508],[2510,2510],[2524,2525],[2527,2529],[2534,2557],[2563,2563],[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2622,2624],[2649,2652],[2654,2654],[2662,2671],[2674,2676],[2678,2678],[2691,2691],[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],[2749,2752],[2761,2761],[2763,2764],[2768,2768],[2784,2785],[2790,2801],[2809,2809],[2818,2819],[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2877,2877],[2880,2880],[2887,2888],[2891,2892],[2908,2909],[2911,2913],[2918,2935],[2947,2947],[2949,2954],[2958,2960],[2962,2965],[2969,2970],[2972,2972],[2974,2975],[2979,2980],[2984,2986],[2990,3001],[3007,3007],[3009,3010],[3014,3016],[3018,3020],[3024,3024],[3046,3066],[3073,3075],[3077,3084],[3086,3088],[3090,3112],[3114,3129],[3133,3133],[3137,3140],[3160,3162],[3165,3165],[3168,3169],[3174,3183],[3191,3200],[3202,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],[3261,3262],[3264,3265],[3267,3268],[3271,3272],[3274,3275],[3293,3294],[3296,3297],[3302,3311],[3313,3315],[3330,3340],[3342,3344],[3346,3386],[3389,3389],[3391,3392],[3398,3400],[3402,3404],[3406,3407],[3412,3414],[3416,3425],[3430,3455],[3458,3459],[3461,3478],[3482,3505],[3507,3515],[3517,3517],[3520,3526],[3536,3537],[3544,3550],[3558,3567],[3570,3572],[3585,3632],[3634,3635],[3647,3654],[3663,3675],[3713,3714],[3716,3716],[3718,3722],[3724,3747],[3749,3749],[3751,3760],[3762,3763],[3773,3773],[3776,3780],[3782,3782],[3792,3801],[3804,3807],[3840,3863],[3866,3892],[3894,3894],[3896,3896],[3898,3911],[3913,3948],[3967,3967],[3973,3973],[3976,3980],[4030,4037],[4039,4044],[4046,4058],[4096,4140],[4145,4145],[4152,4152],[4155,4156],[4159,4183],[4186,4189],[4193,4208],[4213,4225],[4227,4228],[4231,4236],[4238,4252],[4254,4293],[4295,4295],[4301,4301],[4304,4680],[4682,4685],[4688,4694],[4696,4696],[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],[4800,4800],[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4960,4988],[4992,5017],[5024,5109],[5112,5117],[5120,5788],[5792,5880],[5888,5905],[5909,5909],[5919,5937],[5940,5942],[5952,5969],[5984,5996],[5998,6000],[6016,6067],[6070,6070],[6078,6085],[6087,6088],[6100,6108],[6112,6121],[6128,6137],[6144,6154],[6160,6169],[6176,6264],[6272,6276],[6279,6312],[6314,6314],[6320,6389],[6400,6430],[6435,6438],[6441,6443],[6448,6449],[6451,6456],[6464,6464],[6468,6509],[6512,6516],[6528,6571],[6576,6601],[6608,6618],[6622,6678],[6681,6682],[6686,6741],[6743,6743],[6753,6753],[6755,6756],[6765,6770],[6784,6793],[6800,6809],[6816,6829],[6916,6963],[6971,6971],[6973,6977],[6979,6988],[6992,7018],[7028,7038],[7042,7073],[7078,7079],[7082,7082],[7086,7141],[7143,7143],[7146,7148],[7150,7150],[7154,7155],[7164,7211],[7220,7221],[7227,7241],[7245,7304],[7312,7354],[7357,7367],[7379,7379],[7393,7393],[7401,7404],[7406,7411],[7413,7415],[7418,7418],[7424,7615],[7680,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025,8025],[8027,8027],[8029,8029],[8031,8061],[8064,8116],[8118,8132],[8134,8147],[8150,8155],[8157,8175],[8178,8180],[8182,8190],[8192,8202],[8208,8231],[8239,8287],[8304,8305],[8308,8334],[8336,8348],[8352,8384],[8448,8587],[8592,9254],[9280,9290],[9312,11123],[11126,11157],[11159,11502],[11506,11507],[11513,11557],[11559,11559],[11565,11565],[11568,11623],[11631,11632],[11648,11670],[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[11776,11869],[11904,11929],[11931,12019],[12032,12245],[12272,12283],[12288,12329],[12336,12351],[12353,12438],[12443,12543],[12549,12591],[12593,12686],[12688,12771],[12784,12830],[12832,42124],[42128,42182],[42192,42539],[42560,42606],[42611,42611],[42622,42653],[42656,42735],[42738,42743],[42752,42954],[42960,42961],[42963,42963],[42965,42969],[42994,43009],[43011,43013],[43015,43018],[43020,43044],[43047,43051],[43056,43065],[43072,43127],[43136,43203],[43214,43225],[43250,43262],[43264,43301],[43310,43334],[43346,43347],[43359,43388],[43395,43442],[43444,43445],[43450,43451],[43454,43469],[43471,43481],[43486,43492],[43494,43518],[43520,43560],[43567,43568],[43571,43572],[43584,43586],[43588,43595],[43597,43597],[43600,43609],[43612,43643],[43645,43695],[43697,43697],[43701,43702],[43705,43709],[43712,43712],[43714,43714],[43739,43755],[43758,43765],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822],[43824,43883],[43888,44004],[44006,44007],[44009,44012],[44016,44025],[44032,55203],[55216,55238],[55243,55291],[63744,64109],[64112,64217],[64256,64262],[64275,64279],[64285,64285],[64287,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64450],[64467,64911],[64914,64967],[64975,64975],[65008,65023],[65040,65049],[65072,65106],[65108,65126],[65128,65131],[65136,65140],[65142,65276],[65281,65437],[65440,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500],[65504,65510],[65512,65518],[65532,65533],[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786],[65792,65794],[65799,65843],[65847,65934],[65936,65948],[65952,65952],[66000,66044],[66176,66204],[66208,66256],[66273,66299],[66304,66339],[66349,66378],[66384,66421],[66432,66461],[66463,66499],[66504,66517],[66560,66717],[66720,66729],[66736,66771],[66776,66811],[66816,66855],[66864,66915],[66927,66938],[66940,66954],[66956,66962],[66964,66965],[66967,66977],[66979,66993],[66995,67001],[67003,67004],[67072,67382],[67392,67413],[67424,67431],[67456,67461],[67463,67504],[67506,67514],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67669],[67671,67742],[67751,67759],[67808,67826],[67828,67829],[67835,67867],[67871,67897],[67903,67903],[67968,68023],[68028,68047],[68050,68096],[68112,68115],[68117,68119],[68121,68149],[68160,68168],[68176,68184],[68192,68255],[68288,68324],[68331,68342],[68352,68405],[68409,68437],[68440,68466],[68472,68497],[68505,68508],[68521,68527],[68608,68680],[68736,68786],[68800,68850],[68858,68899],[68912,68921],[69216,69246],[69248,69289],[69293,69293],[69296,69297],[69376,69415],[69424,69445],[69457,69465],[69488,69505],[69510,69513],[69552,69579],[69600,69622],[69632,69632],[69634,69687],[69703,69709],[69714,69743],[69745,69746],[69749,69749],[69762,69810],[69815,69816],[69819,69820],[69822,69825],[69840,69864],[69872,69881],[69891,69926],[69932,69932],[69942,69959],[69968,70002],[70004,70006],[70018,70069],[70079,70088],[70093,70094],[70096,70111],[70113,70132],[70144,70161],[70163,70190],[70194,70195],[70197,70197],[70200,70205],[70207,70208],[70272,70278],[70280,70280],[70282,70285],[70287,70301],[70303,70313],[70320,70366],[70368,70370],[70384,70393],[70402,70403],[70405,70412],[70415,70416],[70419,70440],[70442,70448],[70450,70451],[70453,70457],[70461,70461],[70463,70463],[70465,70468],[70471,70472],[70475,70477],[70480,70480],[70493,70499],[70656,70711],[70720,70721],[70725,70725],[70727,70747],[70749,70749],[70751,70753],[70784,70831],[70833,70834],[70841,70841],[70843,70844],[70846,70846],[70849,70849],[70852,70855],[70864,70873],[71040,71086],[71088,71089],[71096,71099],[71102,71102],[71105,71131],[71168,71218],[71227,71228],[71230,71230],[71233,71236],[71248,71257],[71264,71276],[71296,71338],[71340,71340],[71342,71343],[71350,71350],[71352,71353],[71360,71369],[71424,71450],[71456,71457],[71462,71462],[71472,71494],[71680,71726],[71736,71736],[71739,71739],[71840,71922],[71935,71942],[71945,71945],[71948,71955],[71957,71958],[71960,71983],[71985,71989],[71991,71992],[71997,71997],[71999,72002],[72004,72006],[72016,72025],[72096,72103],[72106,72147],[72156,72159],[72161,72164],[72192,72192],[72203,72242],[72249,72250],[72255,72262],[72272,72272],[72279,72280],[72284,72329],[72343,72343],[72346,72354],[72368,72440],[72448,72457],[72704,72712],[72714,72751],[72766,72766],[72768,72773],[72784,72812],[72816,72847],[72873,72873],[72881,72881],[72884,72884],[72960,72966],[72968,72969],[72971,73008],[73030,73030],[73040,73049],[73056,73061],[73063,73064],[73066,73102],[73107,73108],[73110,73110],[73112,73112],[73120,73129],[73440,73458],[73461,73464],[73474,73488],[73490,73525],[73534,73535],[73537,73537],[73539,73561],[73648,73648],[73664,73713],[73727,74649],[74752,74862],[74864,74868],[74880,75075],[77712,77810],[77824,78895],[78913,78918],[82944,83526],[92160,92728],[92736,92766],[92768,92777],[92782,92862],[92864,92873],[92880,92909],[92917,92917],[92928,92975],[92983,92997],[93008,93017],[93019,93025],[93027,93047],[93053,93071],[93760,93850],[93952,94026],[94032,94087],[94099,94111],[94176,94179],[94192,94193],[94208,100343],[100352,101589],[101632,101640],[110576,110579],[110581,110587],[110589,110590],[110592,110882],[110898,110898],[110928,110930],[110933,110933],[110948,110951],[110960,111355],[113664,113770],[113776,113788],[113792,113800],[113808,113817],[113820,113820],[113823,113823],[118608,118723],[118784,119029],[119040,119078],[119081,119140],[119142,119142],[119146,119149],[119171,119172],[119180,119209],[119214,119274],[119296,119361],[119365,119365],[119488,119507],[119520,119539],[119552,119638],[119648,119672],[119808,119892],[119894,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119993],[119995,119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120146,120485],[120488,120779],[120782,121343],[121399,121402],[121453,121460],[121462,121475],[121477,121483],[122624,122654],[122661,122666],[122928,122989],[123136,123180],[123191,123197],[123200,123209],[123214,123215],[123536,123565],[123584,123627],[123632,123641],[123647,123647],[124112,124139],[124144,124153],[124896,124902],[124904,124907],[124909,124910],[124912,124926],[124928,125124],[125127,125135],[125184,125251],[125259,125259],[125264,125273],[125278,125279],[126065,126132],[126209,126269],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[126704,126705],[126976,127019],[127024,127123],[127136,127150],[127153,127167],[127169,127183],[127185,127221],[127232,127405],[127462,127490],[127504,127547],[127552,127560],[127568,127569],[127584,127589],[127744,128727],[128732,128748],[128752,128764],[128768,128886],[128891,128985],[128992,129003],[129008,129008],[129024,129035],[129040,129095],[129104,129113],[129120,129159],[129168,129197],[129200,129201],[129280,129619],[129632,129645],[129648,129660],[129664,129672],[129680,129725],[129727,129733],[129742,129755],[129760,129768],[129776,129784],[129792,129938],[129940,129994],[130032,130041],[131072,173791],[173824,177977],[177984,178205],[178208,183969],[183984,191456],[194560,195101],[196608,201546],[201552,205743]],"Binary_Property/Pattern_Syntax":[[33,47],[58,64],[91,94],[96,96],[123,126],[161,167],[169,169],[171,172],[174,174],[176,177],[182,182],[187,187],[191,191],[215,215],[247,247],[8208,8231],[8240,8254],[8257,8275],[8277,8286],[8592,9311],[9472,10101],[10132,11263],[11776,11903],[12289,12291],[12296,12320],[12336,12336],[64830,64831],[65093,65094]],"Binary_Property/ID_Continue":[[48,57],[65,90],[95,95],[97,122],[170,170],[181,181],[183,183],[186,186],[192,214],[216,246],[248,705],[710,721],[736,740],[748,748],[750,750],[768,884],[886,887],[890,893],[895,895],[902,906],[908,908],[910,929],[931,1013],[1015,1153],[1155,1159],[1162,1327],[1329,1366],[1369,1369],[1376,1416],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1488,1514],[1519,1522],[1552,1562],[1568,1641],[1646,1747],[1749,1756],[1759,1768],[1770,1788],[1791,1791],[1808,1866],[1869,1969],[1984,2037],[2042,2042],[2045,2045],[2048,2093],[2112,2139],[2144,2154],[2160,2183],[2185,2190],[2200,2273],[2275,2403],[2406,2415],[2417,2435],[2437,2444],[2447,2448],[2451,2472],[2474,2480],[2482,2482],[2486,2489],[2492,2500],[2503,2504],[2507,2510],[2519,2519],[2524,2525],[2527,2531],[2534,2545],[2556,2556],[2558,2558],[2561,2563],[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2620,2620],[2622,2626],[2631,2632],[2635,2637],[2641,2641],[2649,2652],[2654,2654],[2662,2677],[2689,2691],[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],[2748,2757],[2759,2761],[2763,2765],[2768,2768],[2784,2787],[2790,2799],[2809,2815],[2817,2819],[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2876,2884],[2887,2888],[2891,2893],[2901,2903],[2908,2909],[2911,2915],[2918,2927],[2929,2929],[2946,2947],[2949,2954],[2958,2960],[2962,2965],[2969,2970],[2972,2972],[2974,2975],[2979,2980],[2984,2986],[2990,3001],[3006,3010],[3014,3016],[3018,3021],[3024,3024],[3031,3031],[3046,3055],[3072,3084],[3086,3088],[3090,3112],[3114,3129],[3132,3140],[3142,3144],[3146,3149],[3157,3158],[3160,3162],[3165,3165],[3168,3171],[3174,3183],[3200,3203],[3205,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],[3260,3268],[3270,3272],[3274,3277],[3285,3286],[3293,3294],[3296,3299],[3302,3311],[3313,3315],[3328,3340],[3342,3344],[3346,3396],[3398,3400],[3402,3406],[3412,3415],[3423,3427],[3430,3439],[3450,3455],[3457,3459],[3461,3478],[3482,3505],[3507,3515],[3517,3517],[3520,3526],[3530,3530],[3535,3540],[3542,3542],[3544,3551],[3558,3567],[3570,3571],[3585,3642],[3648,3662],[3664,3673],[3713,3714],[3716,3716],[3718,3722],[3724,3747],[3749,3749],[3751,3773],[3776,3780],[3782,3782],[3784,3790],[3792,3801],[3804,3807],[3840,3840],[3864,3865],[3872,3881],[3893,3893],[3895,3895],[3897,3897],[3902,3911],[3913,3948],[3953,3972],[3974,3991],[3993,4028],[4038,4038],[4096,4169],[4176,4253],[4256,4293],[4295,4295],[4301,4301],[4304,4346],[4348,4680],[4682,4685],[4688,4694],[4696,4696],[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],[4800,4800],[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4957,4959],[4969,4977],[4992,5007],[5024,5109],[5112,5117],[5121,5740],[5743,5759],[5761,5786],[5792,5866],[5870,5880],[5888,5909],[5919,5940],[5952,5971],[5984,5996],[5998,6000],[6002,6003],[6016,6099],[6103,6103],[6108,6109],[6112,6121],[6155,6157],[6159,6169],[6176,6264],[6272,6314],[6320,6389],[6400,6430],[6432,6443],[6448,6459],[6470,6509],[6512,6516],[6528,6571],[6576,6601],[6608,6618],[6656,6683],[6688,6750],[6752,6780],[6783,6793],[6800,6809],[6823,6823],[6832,6845],[6847,6862],[6912,6988],[6992,7001],[7019,7027],[7040,7155],[7168,7223],[7232,7241],[7245,7293],[7296,7304],[7312,7354],[7357,7359],[7376,7378],[7380,7418],[7424,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025,8025],[8027,8027],[8029,8029],[8031,8061],[8064,8116],[8118,8124],[8126,8126],[8130,8132],[8134,8140],[8144,8147],[8150,8155],[8160,8172],[8178,8180],[8182,8188],[8255,8256],[8276,8276],[8305,8305],[8319,8319],[8336,8348],[8400,8412],[8417,8417],[8421,8432],[8450,8450],[8455,8455],[8458,8467],[8469,8469],[8472,8477],[8484,8484],[8486,8486],[8488,8488],[8490,8505],[8508,8511],[8517,8521],[8526,8526],[8544,8584],[11264,11492],[11499,11507],[11520,11557],[11559,11559],[11565,11565],[11568,11623],[11631,11631],[11647,11670],[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[11744,11775],[12293,12295],[12321,12335],[12337,12341],[12344,12348],[12353,12438],[12441,12447],[12449,12538],[12540,12543],[12549,12591],[12593,12686],[12704,12735],[12784,12799],[13312,19903],[19968,42124],[42192,42237],[42240,42508],[42512,42539],[42560,42607],[42612,42621],[42623,42737],[42775,42783],[42786,42888],[42891,42954],[42960,42961],[42963,42963],[42965,42969],[42994,43047],[43052,43052],[43072,43123],[43136,43205],[43216,43225],[43232,43255],[43259,43259],[43261,43309],[43312,43347],[43360,43388],[43392,43456],[43471,43481],[43488,43518],[43520,43574],[43584,43597],[43600,43609],[43616,43638],[43642,43714],[43739,43741],[43744,43759],[43762,43766],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822],[43824,43866],[43868,43881],[43888,44010],[44012,44013],[44016,44025],[44032,55203],[55216,55238],[55243,55291],[63744,64109],[64112,64217],[64256,64262],[64275,64279],[64285,64296],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64433],[64467,64829],[64848,64911],[64914,64967],[65008,65019],[65024,65039],[65056,65071],[65075,65076],[65101,65103],[65136,65140],[65142,65276],[65296,65305],[65313,65338],[65343,65343],[65345,65370],[65382,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500],[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786],[65856,65908],[66045,66045],[66176,66204],[66208,66256],[66272,66272],[66304,66335],[66349,66378],[66384,66426],[66432,66461],[66464,66499],[66504,66511],[66513,66517],[66560,66717],[66720,66729],[66736,66771],[66776,66811],[66816,66855],[66864,66915],[66928,66938],[66940,66954],[66956,66962],[66964,66965],[66967,66977],[66979,66993],[66995,67001],[67003,67004],[67072,67382],[67392,67413],[67424,67431],[67456,67461],[67463,67504],[67506,67514],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67669],[67680,67702],[67712,67742],[67808,67826],[67828,67829],[67840,67861],[67872,67897],[67968,68023],[68030,68031],[68096,68099],[68101,68102],[68108,68115],[68117,68119],[68121,68149],[68152,68154],[68159,68159],[68192,68220],[68224,68252],[68288,68295],[68297,68326],[68352,68405],[68416,68437],[68448,68466],[68480,68497],[68608,68680],[68736,68786],[68800,68850],[68864,68903],[68912,68921],[69248,69289],[69291,69292],[69296,69297],[69373,69404],[69415,69415],[69424,69456],[69488,69509],[69552,69572],[69600,69622],[69632,69702],[69734,69749],[69759,69818],[69826,69826],[69840,69864],[69872,69881],[69888,69940],[69942,69951],[69956,69959],[69968,70003],[70006,70006],[70016,70084],[70089,70092],[70094,70106],[70108,70108],[70144,70161],[70163,70199],[70206,70209],[70272,70278],[70280,70280],[70282,70285],[70287,70301],[70303,70312],[70320,70378],[70384,70393],[70400,70403],[70405,70412],[70415,70416],[70419,70440],[70442,70448],[70450,70451],[70453,70457],[70459,70468],[70471,70472],[70475,70477],[70480,70480],[70487,70487],[70493,70499],[70502,70508],[70512,70516],[70656,70730],[70736,70745],[70750,70753],[70784,70853],[70855,70855],[70864,70873],[71040,71093],[71096,71104],[71128,71133],[71168,71232],[71236,71236],[71248,71257],[71296,71352],[71360,71369],[71424,71450],[71453,71467],[71472,71481],[71488,71494],[71680,71738],[71840,71913],[71935,71942],[71945,71945],[71948,71955],[71957,71958],[71960,71989],[71991,71992],[71995,72003],[72016,72025],[72096,72103],[72106,72151],[72154,72161],[72163,72164],[72192,72254],[72263,72263],[72272,72345],[72349,72349],[72368,72440],[72704,72712],[72714,72758],[72760,72768],[72784,72793],[72818,72847],[72850,72871],[72873,72886],[72960,72966],[72968,72969],[72971,73014],[73018,73018],[73020,73021],[73023,73031],[73040,73049],[73056,73061],[73063,73064],[73066,73102],[73104,73105],[73107,73112],[73120,73129],[73440,73462],[73472,73488],[73490,73530],[73534,73538],[73552,73561],[73648,73648],[73728,74649],[74752,74862],[74880,75075],[77712,77808],[77824,78895],[78912,78933],[82944,83526],[92160,92728],[92736,92766],[92768,92777],[92784,92862],[92864,92873],[92880,92909],[92912,92916],[92928,92982],[92992,92995],[93008,93017],[93027,93047],[93053,93071],[93760,93823],[93952,94026],[94031,94087],[94095,94111],[94176,94177],[94179,94180],[94192,94193],[94208,100343],[100352,101589],[101632,101640],[110576,110579],[110581,110587],[110589,110590],[110592,110882],[110898,110898],[110928,110930],[110933,110933],[110948,110951],[110960,111355],[113664,113770],[113776,113788],[113792,113800],[113808,113817],[113821,113822],[118528,118573],[118576,118598],[119141,119145],[119149,119154],[119163,119170],[119173,119179],[119210,119213],[119362,119364],[119808,119892],[119894,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119993],[119995,119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120146,120485],[120488,120512],[120514,120538],[120540,120570],[120572,120596],[120598,120628],[120630,120654],[120656,120686],[120688,120712],[120714,120744],[120746,120770],[120772,120779],[120782,120831],[121344,121398],[121403,121452],[121461,121461],[121476,121476],[121499,121503],[121505,121519],[122624,122654],[122661,122666],[122880,122886],[122888,122904],[122907,122913],[122915,122916],[122918,122922],[122928,122989],[123023,123023],[123136,123180],[123184,123197],[123200,123209],[123214,123214],[123536,123566],[123584,123641],[124112,124153],[124896,124902],[124904,124907],[124909,124910],[124912,124926],[124928,125124],[125136,125142],[125184,125259],[125264,125273],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[130032,130041],[131072,173791],[173824,177977],[177984,178205],[178208,183969],[183984,191456],[194560,195101],[196608,201546],[201552,205743],[917760,917999]],"Binary_Property/Extender":[[183,183],[720,721],[1600,1600],[2042,2042],[2901,2901],[3654,3654],[3782,3782],[6154,6154],[6211,6211],[6823,6823],[7222,7222],[7291,7291],[12293,12293],[12337,12341],[12445,12446],[12540,12542],[40981,40981],[42508,42508],[43471,43471],[43494,43494],[43632,43632],[43741,43741],[43763,43764],[65392,65392],[67457,67458],[70493,70493],[71110,71112],[72344,72344],[92994,92995],[94176,94177],[94179,94179],[123196,123197],[125252,125254]],"Binary_Property/Hyphen":[[45,45],[173,173],[1418,1418],[6150,6150],[8208,8209],[11799,11799],[12539,12539],[65123,65123],[65293,65293],[65381,65381]],"Binary_Property/Noncharacter_Code_Point":[[64976,65007],[65534,65535],[131070,131071],[196606,196607],[262142,262143],[327678,327679],[393214,393215],[458750,458751],[524286,524287],[589822,589823],[655358,655359],[720894,720895],[786430,786431],[851966,851967],[917502,917503],[983038,983039],[1048574,1048575],[1114110,1114111]],"Binary_Property/Regional_Indicator":[[127462,127487]],"Binary_Property/Unified_Ideograph":[[13312,19903],[19968,40959],[64014,64015],[64017,64017],[64019,64020],[64031,64031],[64033,64033],[64035,64036],[64039,64041],[131072,173791],[173824,177977],[177984,178205],[178208,183969],[183984,191456],[196608,201546],[201552,205743]],"Binary_Property/Uppercase":[[65,90],[192,214],[216,222],[256,256],[258,258],[260,260],[262,262],[264,264],[266,266],[268,268],[270,270],[272,272],[274,274],[276,276],[278,278],[280,280],[282,282],[284,284],[286,286],[288,288],[290,290],[292,292],[294,294],[296,296],[298,298],[300,300],[302,302],[304,304],[306,306],[308,308],[310,310],[313,313],[315,315],[317,317],[319,319],[321,321],[323,323],[325,325],[327,327],[330,330],[332,332],[334,334],[336,336],[338,338],[340,340],[342,342],[344,344],[346,346],[348,348],[350,350],[352,352],[354,354],[356,356],[358,358],[360,360],[362,362],[364,364],[366,366],[368,368],[370,370],[372,372],[374,374],[376,377],[379,379],[381,381],[385,386],[388,388],[390,391],[393,395],[398,401],[403,404],[406,408],[412,413],[415,416],[418,418],[420,420],[422,423],[425,425],[428,428],[430,431],[433,435],[437,437],[439,440],[444,444],[452,452],[455,455],[458,458],[461,461],[463,463],[465,465],[467,467],[469,469],[471,471],[473,473],[475,475],[478,478],[480,480],[482,482],[484,484],[486,486],[488,488],[490,490],[492,492],[494,494],[497,497],[500,500],[502,504],[506,506],[508,508],[510,510],[512,512],[514,514],[516,516],[518,518],[520,520],[522,522],[524,524],[526,526],[528,528],[530,530],[532,532],[534,534],[536,536],[538,538],[540,540],[542,542],[544,544],[546,546],[548,548],[550,550],[552,552],[554,554],[556,556],[558,558],[560,560],[562,562],[570,571],[573,574],[577,577],[579,582],[584,584],[586,586],[588,588],[590,590],[880,880],[882,882],[886,886],[895,895],[902,902],[904,906],[908,908],[910,911],[913,929],[931,939],[975,975],[978,980],[984,984],[986,986],[988,988],[990,990],[992,992],[994,994],[996,996],[998,998],[1000,1000],[1002,1002],[1004,1004],[1006,1006],[1012,1012],[1015,1015],[1017,1018],[1021,1071],[1120,1120],[1122,1122],[1124,1124],[1126,1126],[1128,1128],[1130,1130],[1132,1132],[1134,1134],[1136,1136],[1138,1138],[1140,1140],[1142,1142],[1144,1144],[1146,1146],[1148,1148],[1150,1150],[1152,1152],[1162,1162],[1164,1164],[1166,1166],[1168,1168],[1170,1170],[1172,1172],[1174,1174],[1176,1176],[1178,1178],[1180,1180],[1182,1182],[1184,1184],[1186,1186],[1188,1188],[1190,1190],[1192,1192],[1194,1194],[1196,1196],[1198,1198],[1200,1200],[1202,1202],[1204,1204],[1206,1206],[1208,1208],[1210,1210],[1212,1212],[1214,1214],[1216,1217],[1219,1219],[1221,1221],[1223,1223],[1225,1225],[1227,1227],[1229,1229],[1232,1232],[1234,1234],[1236,1236],[1238,1238],[1240,1240],[1242,1242],[1244,1244],[1246,1246],[1248,1248],[1250,1250],[1252,1252],[1254,1254],[1256,1256],[1258,1258],[1260,1260],[1262,1262],[1264,1264],[1266,1266],[1268,1268],[1270,1270],[1272,1272],[1274,1274],[1276,1276],[1278,1278],[1280,1280],[1282,1282],[1284,1284],[1286,1286],[1288,1288],[1290,1290],[1292,1292],[1294,1294],[1296,1296],[1298,1298],[1300,1300],[1302,1302],[1304,1304],[1306,1306],[1308,1308],[1310,1310],[1312,1312],[1314,1314],[1316,1316],[1318,1318],[1320,1320],[1322,1322],[1324,1324],[1326,1326],[1329,1366],[4256,4293],[4295,4295],[4301,4301],[5024,5109],[7312,7354],[7357,7359],[7680,7680],[7682,7682],[7684,7684],[7686,7686],[7688,7688],[7690,7690],[7692,7692],[7694,7694],[7696,7696],[7698,7698],[7700,7700],[7702,7702],[7704,7704],[7706,7706],[7708,7708],[7710,7710],[7712,7712],[7714,7714],[7716,7716],[7718,7718],[7720,7720],[7722,7722],[7724,7724],[7726,7726],[7728,7728],[7730,7730],[7732,7732],[7734,7734],[7736,7736],[7738,7738],[7740,7740],[7742,7742],[7744,7744],[7746,7746],[7748,7748],[7750,7750],[7752,7752],[7754,7754],[7756,7756],[7758,7758],[7760,7760],[7762,7762],[7764,7764],[7766,7766],[7768,7768],[7770,7770],[7772,7772],[7774,7774],[7776,7776],[7778,7778],[7780,7780],[7782,7782],[7784,7784],[7786,7786],[7788,7788],[7790,7790],[7792,7792],[7794,7794],[7796,7796],[7798,7798],[7800,7800],[7802,7802],[7804,7804],[7806,7806],[7808,7808],[7810,7810],[7812,7812],[7814,7814],[7816,7816],[7818,7818],[7820,7820],[7822,7822],[7824,7824],[7826,7826],[7828,7828],[7838,7838],[7840,7840],[7842,7842],[7844,7844],[7846,7846],[7848,7848],[7850,7850],[7852,7852],[7854,7854],[7856,7856],[7858,7858],[7860,7860],[7862,7862],[7864,7864],[7866,7866],[7868,7868],[7870,7870],[7872,7872],[7874,7874],[7876,7876],[7878,7878],[7880,7880],[7882,7882],[7884,7884],[7886,7886],[7888,7888],[7890,7890],[7892,7892],[7894,7894],[7896,7896],[7898,7898],[7900,7900],[7902,7902],[7904,7904],[7906,7906],[7908,7908],[7910,7910],[7912,7912],[7914,7914],[7916,7916],[7918,7918],[7920,7920],[7922,7922],[7924,7924],[7926,7926],[7928,7928],[7930,7930],[7932,7932],[7934,7934],[7944,7951],[7960,7965],[7976,7983],[7992,7999],[8008,8013],[8025,8025],[8027,8027],[8029,8029],[8031,8031],[8040,8047],[8120,8123],[8136,8139],[8152,8155],[8168,8172],[8184,8187],[8450,8450],[8455,8455],[8459,8461],[8464,8466],[8469,8469],[8473,8477],[8484,8484],[8486,8486],[8488,8488],[8490,8493],[8496,8499],[8510,8511],[8517,8517],[8544,8559],[8579,8579],[9398,9423],[11264,11311],[11360,11360],[11362,11364],[11367,11367],[11369,11369],[11371,11371],[11373,11376],[11378,11378],[11381,11381],[11390,11392],[11394,11394],[11396,11396],[11398,11398],[11400,11400],[11402,11402],[11404,11404],[11406,11406],[11408,11408],[11410,11410],[11412,11412],[11414,11414],[11416,11416],[11418,11418],[11420,11420],[11422,11422],[11424,11424],[11426,11426],[11428,11428],[11430,11430],[11432,11432],[11434,11434],[11436,11436],[11438,11438],[11440,11440],[11442,11442],[11444,11444],[11446,11446],[11448,11448],[11450,11450],[11452,11452],[11454,11454],[11456,11456],[11458,11458],[11460,11460],[11462,11462],[11464,11464],[11466,11466],[11468,11468],[11470,11470],[11472,11472],[11474,11474],[11476,11476],[11478,11478],[11480,11480],[11482,11482],[11484,11484],[11486,11486],[11488,11488],[11490,11490],[11499,11499],[11501,11501],[11506,11506],[42560,42560],[42562,42562],[42564,42564],[42566,42566],[42568,42568],[42570,42570],[42572,42572],[42574,42574],[42576,42576],[42578,42578],[42580,42580],[42582,42582],[42584,42584],[42586,42586],[42588,42588],[42590,42590],[42592,42592],[42594,42594],[42596,42596],[42598,42598],[42600,42600],[42602,42602],[42604,42604],[42624,42624],[42626,42626],[42628,42628],[42630,42630],[42632,42632],[42634,42634],[42636,42636],[42638,42638],[42640,42640],[42642,42642],[42644,42644],[42646,42646],[42648,42648],[42650,42650],[42786,42786],[42788,42788],[42790,42790],[42792,42792],[42794,42794],[42796,42796],[42798,42798],[42802,42802],[42804,42804],[42806,42806],[42808,42808],[42810,42810],[42812,42812],[42814,42814],[42816,42816],[42818,42818],[42820,42820],[42822,42822],[42824,42824],[42826,42826],[42828,42828],[42830,42830],[42832,42832],[42834,42834],[42836,42836],[42838,42838],[42840,42840],[42842,42842],[42844,42844],[42846,42846],[42848,42848],[42850,42850],[42852,42852],[42854,42854],[42856,42856],[42858,42858],[42860,42860],[42862,42862],[42873,42873],[42875,42875],[42877,42878],[42880,42880],[42882,42882],[42884,42884],[42886,42886],[42891,42891],[42893,42893],[42896,42896],[42898,42898],[42902,42902],[42904,42904],[42906,42906],[42908,42908],[42910,42910],[42912,42912],[42914,42914],[42916,42916],[42918,42918],[42920,42920],[42922,42926],[42928,42932],[42934,42934],[42936,42936],[42938,42938],[42940,42940],[42942,42942],[42944,42944],[42946,42946],[42948,42951],[42953,42953],[42960,42960],[42966,42966],[42968,42968],[42997,42997],[65313,65338],[66560,66599],[66736,66771],[66928,66938],[66940,66954],[66956,66962],[66964,66965],[68736,68786],[71840,71871],[93760,93791],[119808,119833],[119860,119885],[119912,119937],[119964,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119989],[120016,120041],[120068,120069],[120071,120074],[120077,120084],[120086,120092],[120120,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120172,120197],[120224,120249],[120276,120301],[120328,120353],[120380,120405],[120432,120457],[120488,120512],[120546,120570],[120604,120628],[120662,120686],[120720,120744],[120778,120778],[125184,125217],[127280,127305],[127312,127337],[127344,127369]],"Binary_Property/Grapheme_Link":[[2381,2381],[2509,2509],[2637,2637],[2765,2765],[2893,2893],[3021,3021],[3149,3149],[3277,3277],[3387,3388],[3405,3405],[3530,3530],[3642,3642],[3770,3770],[3972,3972],[4153,4154],[5908,5909],[5940,5940],[6098,6098],[6752,6752],[6980,6980],[7082,7083],[7154,7155],[11647,11647],[43014,43014],[43052,43052],[43204,43204],[43347,43347],[43456,43456],[43766,43766],[44013,44013],[68159,68159],[69702,69702],[69744,69744],[69759,69759],[69817,69817],[69939,69940],[70080,70080],[70197,70197],[70378,70378],[70477,70477],[70722,70722],[70850,70850],[71103,71103],[71231,71231],[71350,71350],[71467,71467],[71737,71737],[71997,71998],[72160,72160],[72244,72244],[72263,72263],[72345,72345],[72767,72767],[73028,73029],[73111,73111],[73537,73538]],"Binary_Property/Math":[[43,43],[60,62],[94,94],[124,124],[126,126],[172,172],[177,177],[215,215],[247,247],[976,978],[981,981],[1008,1009],[1012,1014],[1542,1544],[8214,8214],[8242,8244],[8256,8256],[8260,8260],[8274,8274],[8289,8292],[8314,8318],[8330,8334],[8400,8412],[8417,8417],[8421,8422],[8427,8431],[8450,8450],[8455,8455],[8458,8467],[8469,8469],[8472,8477],[8484,8484],[8488,8489],[8492,8493],[8495,8497],[8499,8504],[8508,8521],[8523,8523],[8592,8615],[8617,8622],[8624,8625],[8630,8631],[8636,8667],[8669,8669],[8676,8677],[8692,8959],[8968,8971],[8992,8993],[9084,9084],[9115,9141],[9143,9143],[9168,9168],[9180,9186],[9632,9633],[9646,9655],[9660,9665],[9670,9671],[9674,9675],[9679,9683],[9698,9698],[9700,9700],[9703,9708],[9720,9727],[9733,9734],[9792,9792],[9794,9794],[9824,9827],[9837,9839],[10176,10239],[10496,11007],[11056,11076],[11079,11084],[64297,64297],[65121,65126],[65128,65128],[65291,65291],[65308,65310],[65340,65340],[65342,65342],[65372,65372],[65374,65374],[65506,65506],[65513,65516],[119808,119892],[119894,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119993],[119995,119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120146,120485],[120488,120779],[120782,120831],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[126704,126705]],"Binary_Property/Deprecated":[[329,329],[1651,1651],[3959,3959],[3961,3961],[6051,6052],[8298,8303],[9001,9002],[917505,917505]],"Binary_Property/XID_Start":[[65,90],[97,122],[170,170],[181,181],[186,186],[192,214],[216,246],[248,705],[710,721],[736,740],[748,748],[750,750],[880,884],[886,887],[891,893],[895,895],[902,902],[904,906],[908,908],[910,929],[931,1013],[1015,1153],[1162,1327],[1329,1366],[1369,1369],[1376,1416],[1488,1514],[1519,1522],[1568,1610],[1646,1647],[1649,1747],[1749,1749],[1765,1766],[1774,1775],[1786,1788],[1791,1791],[1808,1808],[1810,1839],[1869,1957],[1969,1969],[1994,2026],[2036,2037],[2042,2042],[2048,2069],[2074,2074],[2084,2084],[2088,2088],[2112,2136],[2144,2154],[2160,2183],[2185,2190],[2208,2249],[2308,2361],[2365,2365],[2384,2384],[2392,2401],[2417,2432],[2437,2444],[2447,2448],[2451,2472],[2474,2480],[2482,2482],[2486,2489],[2493,2493],[2510,2510],[2524,2525],[2527,2529],[2544,2545],[2556,2556],[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2649,2652],[2654,2654],[2674,2676],[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],[2749,2749],[2768,2768],[2784,2785],[2809,2809],[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2877,2877],[2908,2909],[2911,2913],[2929,2929],[2947,2947],[2949,2954],[2958,2960],[2962,2965],[2969,2970],[2972,2972],[2974,2975],[2979,2980],[2984,2986],[2990,3001],[3024,3024],[3077,3084],[3086,3088],[3090,3112],[3114,3129],[3133,3133],[3160,3162],[3165,3165],[3168,3169],[3200,3200],[3205,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],[3261,3261],[3293,3294],[3296,3297],[3313,3314],[3332,3340],[3342,3344],[3346,3386],[3389,3389],[3406,3406],[3412,3414],[3423,3425],[3450,3455],[3461,3478],[3482,3505],[3507,3515],[3517,3517],[3520,3526],[3585,3632],[3634,3634],[3648,3654],[3713,3714],[3716,3716],[3718,3722],[3724,3747],[3749,3749],[3751,3760],[3762,3762],[3773,3773],[3776,3780],[3782,3782],[3804,3807],[3840,3840],[3904,3911],[3913,3948],[3976,3980],[4096,4138],[4159,4159],[4176,4181],[4186,4189],[4193,4193],[4197,4198],[4206,4208],[4213,4225],[4238,4238],[4256,4293],[4295,4295],[4301,4301],[4304,4346],[4348,4680],[4682,4685],[4688,4694],[4696,4696],[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],[4800,4800],[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4992,5007],[5024,5109],[5112,5117],[5121,5740],[5743,5759],[5761,5786],[5792,5866],[5870,5880],[5888,5905],[5919,5937],[5952,5969],[5984,5996],[5998,6000],[6016,6067],[6103,6103],[6108,6108],[6176,6264],[6272,6312],[6314,6314],[6320,6389],[6400,6430],[6480,6509],[6512,6516],[6528,6571],[6576,6601],[6656,6678],[6688,6740],[6823,6823],[6917,6963],[6981,6988],[7043,7072],[7086,7087],[7098,7141],[7168,7203],[7245,7247],[7258,7293],[7296,7304],[7312,7354],[7357,7359],[7401,7404],[7406,7411],[7413,7414],[7418,7418],[7424,7615],[7680,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025,8025],[8027,8027],[8029,8029],[8031,8061],[8064,8116],[8118,8124],[8126,8126],[8130,8132],[8134,8140],[8144,8147],[8150,8155],[8160,8172],[8178,8180],[8182,8188],[8305,8305],[8319,8319],[8336,8348],[8450,8450],[8455,8455],[8458,8467],[8469,8469],[8472,8477],[8484,8484],[8486,8486],[8488,8488],[8490,8505],[8508,8511],[8517,8521],[8526,8526],[8544,8584],[11264,11492],[11499,11502],[11506,11507],[11520,11557],[11559,11559],[11565,11565],[11568,11623],[11631,11631],[11648,11670],[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[12293,12295],[12321,12329],[12337,12341],[12344,12348],[12353,12438],[12445,12447],[12449,12538],[12540,12543],[12549,12591],[12593,12686],[12704,12735],[12784,12799],[13312,19903],[19968,42124],[42192,42237],[42240,42508],[42512,42527],[42538,42539],[42560,42606],[42623,42653],[42656,42735],[42775,42783],[42786,42888],[42891,42954],[42960,42961],[42963,42963],[42965,42969],[42994,43009],[43011,43013],[43015,43018],[43020,43042],[43072,43123],[43138,43187],[43250,43255],[43259,43259],[43261,43262],[43274,43301],[43312,43334],[43360,43388],[43396,43442],[43471,43471],[43488,43492],[43494,43503],[43514,43518],[43520,43560],[43584,43586],[43588,43595],[43616,43638],[43642,43642],[43646,43695],[43697,43697],[43701,43702],[43705,43709],[43712,43712],[43714,43714],[43739,43741],[43744,43754],[43762,43764],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822],[43824,43866],[43868,43881],[43888,44002],[44032,55203],[55216,55238],[55243,55291],[63744,64109],[64112,64217],[64256,64262],[64275,64279],[64285,64285],[64287,64296],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64433],[64467,64605],[64612,64829],[64848,64911],[64914,64967],[65008,65017],[65137,65137],[65139,65139],[65143,65143],[65145,65145],[65147,65147],[65149,65149],[65151,65276],[65313,65338],[65345,65370],[65382,65437],[65440,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500],[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786],[65856,65908],[66176,66204],[66208,66256],[66304,66335],[66349,66378],[66384,66421],[66432,66461],[66464,66499],[66504,66511],[66513,66517],[66560,66717],[66736,66771],[66776,66811],[66816,66855],[66864,66915],[66928,66938],[66940,66954],[66956,66962],[66964,66965],[66967,66977],[66979,66993],[66995,67001],[67003,67004],[67072,67382],[67392,67413],[67424,67431],[67456,67461],[67463,67504],[67506,67514],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67669],[67680,67702],[67712,67742],[67808,67826],[67828,67829],[67840,67861],[67872,67897],[67968,68023],[68030,68031],[68096,68096],[68112,68115],[68117,68119],[68121,68149],[68192,68220],[68224,68252],[68288,68295],[68297,68324],[68352,68405],[68416,68437],[68448,68466],[68480,68497],[68608,68680],[68736,68786],[68800,68850],[68864,68899],[69248,69289],[69296,69297],[69376,69404],[69415,69415],[69424,69445],[69488,69505],[69552,69572],[69600,69622],[69635,69687],[69745,69746],[69749,69749],[69763,69807],[69840,69864],[69891,69926],[69956,69956],[69959,69959],[69968,70002],[70006,70006],[70019,70066],[70081,70084],[70106,70106],[70108,70108],[70144,70161],[70163,70187],[70207,70208],[70272,70278],[70280,70280],[70282,70285],[70287,70301],[70303,70312],[70320,70366],[70405,70412],[70415,70416],[70419,70440],[70442,70448],[70450,70451],[70453,70457],[70461,70461],[70480,70480],[70493,70497],[70656,70708],[70727,70730],[70751,70753],[70784,70831],[70852,70853],[70855,70855],[71040,71086],[71128,71131],[71168,71215],[71236,71236],[71296,71338],[71352,71352],[71424,71450],[71488,71494],[71680,71723],[71840,71903],[71935,71942],[71945,71945],[71948,71955],[71957,71958],[71960,71983],[71999,71999],[72001,72001],[72096,72103],[72106,72144],[72161,72161],[72163,72163],[72192,72192],[72203,72242],[72250,72250],[72272,72272],[72284,72329],[72349,72349],[72368,72440],[72704,72712],[72714,72750],[72768,72768],[72818,72847],[72960,72966],[72968,72969],[72971,73008],[73030,73030],[73056,73061],[73063,73064],[73066,73097],[73112,73112],[73440,73458],[73474,73474],[73476,73488],[73490,73523],[73648,73648],[73728,74649],[74752,74862],[74880,75075],[77712,77808],[77824,78895],[78913,78918],[82944,83526],[92160,92728],[92736,92766],[92784,92862],[92880,92909],[92928,92975],[92992,92995],[93027,93047],[93053,93071],[93760,93823],[93952,94026],[94032,94032],[94099,94111],[94176,94177],[94179,94179],[94208,100343],[100352,101589],[101632,101640],[110576,110579],[110581,110587],[110589,110590],[110592,110882],[110898,110898],[110928,110930],[110933,110933],[110948,110951],[110960,111355],[113664,113770],[113776,113788],[113792,113800],[113808,113817],[119808,119892],[119894,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119993],[119995,119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120146,120485],[120488,120512],[120514,120538],[120540,120570],[120572,120596],[120598,120628],[120630,120654],[120656,120686],[120688,120712],[120714,120744],[120746,120770],[120772,120779],[122624,122654],[122661,122666],[122928,122989],[123136,123180],[123191,123197],[123214,123214],[123536,123565],[123584,123627],[124112,124139],[124896,124902],[124904,124907],[124909,124910],[124912,124926],[124928,125124],[125184,125251],[125259,125259],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[131072,173791],[173824,177977],[177984,178205],[178208,183969],[183984,191456],[194560,195101],[196608,201546],[201552,205743]],"Binary_Property/Emoji_Presentation":[[8986,8987],[9193,9196],[9200,9200],[9203,9203],[9725,9726],[9748,9749],[9800,9811],[9855,9855],[9875,9875],[9889,9889],[9898,9899],[9917,9918],[9924,9925],[9934,9934],[9940,9940],[9962,9962],[9970,9971],[9973,9973],[9978,9978],[9981,9981],[9989,9989],[9994,9995],[10024,10024],[10060,10060],[10062,10062],[10067,10069],[10071,10071],[10133,10135],[10160,10160],[10175,10175],[11035,11036],[11088,11088],[11093,11093],[126980,126980],[127183,127183],[127374,127374],[127377,127386],[127462,127487],[127489,127489],[127514,127514],[127535,127535],[127538,127542],[127544,127546],[127568,127569],[127744,127776],[127789,127797],[127799,127868],[127870,127891],[127904,127946],[127951,127955],[127968,127984],[127988,127988],[127992,128062],[128064,128064],[128066,128252],[128255,128317],[128331,128334],[128336,128359],[128378,128378],[128405,128406],[128420,128420],[128507,128591],[128640,128709],[128716,128716],[128720,128722],[128725,128727],[128732,128735],[128747,128748],[128756,128764],[128992,129003],[129008,129008],[129292,129338],[129340,129349],[129351,129535],[129648,129660],[129664,129672],[129680,129725],[129727,129733],[129742,129755],[129760,129768],[129776,129784]],"Binary_Property/Expands_On_NFKC":[[168,168],[175,175],[180,180],[184,184],[188,190],[306,307],[319,320],[329,329],[452,460],[497,499],[728,733],[836,836],[890,890],[900,901],[1415,1415],[1653,1656],[2392,2399],[2524,2525],[2527,2527],[2611,2611],[2614,2614],[2649,2651],[2654,2654],[2908,2909],[3635,3635],[3763,3763],[3804,3805],[3907,3907],[3917,3917],[3922,3922],[3927,3927],[3932,3932],[3945,3945],[3955,3955],[3957,3961],[3969,3969],[3987,3987],[3997,3997],[4002,4002],[4007,4007],[4012,4012],[4025,4025],[7834,7834],[8125,8125],[8127,8129],[8141,8143],[8157,8159],[8173,8174],[8189,8190],[8215,8215],[8229,8230],[8243,8244],[8246,8247],[8252,8252],[8254,8254],[8263,8265],[8279,8279],[8360,8360],[8448,8449],[8451,8451],[8453,8454],[8457,8457],[8470,8470],[8480,8482],[8507,8507],[8528,8543],[8545,8547],[8549,8552],[8554,8555],[8561,8563],[8565,8568],[8570,8571],[8585,8585],[8748,8749],[8751,8752],[9321,9397],[10764,10764],[10868,10870],[10972,10972],[12443,12444],[12447,12447],[12543,12543],[12800,12830],[12832,12867],[12880,12895],[12924,12925],[12977,13007],[13055,13311],[64256,64262],[64275,64279],[64285,64285],[64287,64287],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64335],[64477,64477],[64490,64507],[64512,64829],[64848,64911],[64914,64967],[65008,65020],[65049,65049],[65072,65072],[65097,65100],[65136,65138],[65140,65140],[65142,65151],[65269,65276],[65507,65507],[119134,119140],[119227,119232],[127232,127242],[127248,127274],[127277,127278],[127306,127311],[127338,127340],[127376,127376],[127488,127489],[127552,127560]],"Binary_Property/Emoji":[[35,35],[42,42],[48,57],[169,169],[174,174],[8252,8252],[8265,8265],[8482,8482],[8505,8505],[8596,8601],[8617,8618],[8986,8987],[9000,9000],[9167,9167],[9193,9203],[9208,9210],[9410,9410],[9642,9643],[9654,9654],[9664,9664],[9723,9726],[9728,9732],[9742,9742],[9745,9745],[9748,9749],[9752,9752],[9757,9757],[9760,9760],[9762,9763],[9766,9766],[9770,9770],[9774,9775],[9784,9786],[9792,9792],[9794,9794],[9800,9811],[9823,9824],[9827,9827],[9829,9830],[9832,9832],[9851,9851],[9854,9855],[9874,9879],[9881,9881],[9883,9884],[9888,9889],[9895,9895],[9898,9899],[9904,9905],[9917,9918],[9924,9925],[9928,9928],[9934,9935],[9937,9937],[9939,9940],[9961,9962],[9968,9973],[9975,9978],[9981,9981],[9986,9986],[9989,9989],[9992,9997],[9999,9999],[10002,10002],[10004,10004],[10006,10006],[10013,10013],[10017,10017],[10024,10024],[10035,10036],[10052,10052],[10055,10055],[10060,10060],[10062,10062],[10067,10069],[10071,10071],[10083,10084],[10133,10135],[10145,10145],[10160,10160],[10175,10175],[10548,10549],[11013,11015],[11035,11036],[11088,11088],[11093,11093],[12336,12336],[12349,12349],[12951,12951],[12953,12953],[126980,126980],[127183,127183],[127344,127345],[127358,127359],[127374,127374],[127377,127386],[127462,127487],[127489,127490],[127514,127514],[127535,127535],[127538,127546],[127568,127569],[127744,127777],[127780,127891],[127894,127895],[127897,127899],[127902,127984],[127987,127989],[127991,128253],[128255,128317],[128329,128334],[128336,128359],[128367,128368],[128371,128378],[128391,128391],[128394,128397],[128400,128400],[128405,128406],[128420,128421],[128424,128424],[128433,128434],[128444,128444],[128450,128452],[128465,128467],[128476,128478],[128481,128481],[128483,128483],[128488,128488],[128495,128495],[128499,128499],[128506,128591],[128640,128709],[128715,128722],[128725,128727],[128732,128741],[128745,128745],[128747,128748],[128752,128752],[128755,128764],[128992,129003],[129008,129008],[129292,129338],[129340,129349],[129351,129535],[129648,129660],[129664,129672],[129680,129725],[129727,129733],[129742,129755],[129760,129768],[129776,129784]],"Binary_Property/Soft_Dotted":[[105,106],[303,303],[585,585],[616,616],[669,669],[690,690],[1011,1011],[1110,1110],[1112,1112],[7522,7522],[7574,7574],[7588,7588],[7592,7592],[7725,7725],[7883,7883],[8305,8305],[8520,8521],[11388,11388],[119842,119843],[119894,119895],[119946,119947],[119998,119999],[120050,120051],[120102,120103],[120154,120155],[120206,120207],[120258,120259],[120310,120311],[120362,120363],[120414,120415],[120466,120467],[122650,122650],[122956,122957],[122984,122984]],"Binary_Property/Bidi_Mirrored":[[40,41],[60,60],[62,62],[91,91],[93,93],[123,123],[125,125],[171,171],[187,187],[3898,3901],[5787,5788],[8249,8250],[8261,8262],[8317,8318],[8333,8334],[8512,8512],[8705,8708],[8712,8717],[8721,8721],[8725,8726],[8730,8733],[8735,8738],[8740,8740],[8742,8742],[8747,8755],[8761,8761],[8763,8780],[8786,8789],[8799,8800],[8802,8802],[8804,8811],[8814,8844],[8847,8850],[8856,8856],[8866,8867],[8870,8888],[8894,8895],[8905,8909],[8912,8913],[8918,8941],[8944,8959],[8968,8971],[8992,8993],[9001,9002],[10088,10101],[10176,10176],[10179,10182],[10184,10185],[10187,10189],[10195,10198],[10204,10206],[10210,10223],[10627,10648],[10651,10656],[10658,10671],[10680,10680],[10688,10693],[10697,10697],[10702,10706],[10708,10709],[10712,10716],[10721,10721],[10723,10725],[10728,10729],[10740,10745],[10748,10749],[10762,10780],[10782,10785],[10788,10788],[10790,10790],[10793,10793],[10795,10798],[10804,10805],[10812,10814],[10839,10840],[10852,10853],[10858,10861],[10863,10864],[10867,10868],[10873,10915],[10918,10925],[10927,10966],[10972,10972],[10974,10974],[10978,10982],[10988,10990],[10995,10995],[10999,11003],[11005,11005],[11262,11262],[11778,11781],[11785,11786],[11788,11789],[11804,11805],[11808,11817],[11861,11868],[12296,12305],[12308,12315],[65113,65118],[65124,65125],[65288,65289],[65308,65308],[65310,65310],[65339,65339],[65341,65341],[65371,65371],[65373,65373],[65375,65376],[65378,65379],[120539,120539],[120597,120597],[120655,120655],[120713,120713],[120771,120771]],"Binary_Property/Expands_On_NFC":[[836,836],[2392,2399],[2524,2525],[2527,2527],[2611,2611],[2614,2614],[2649,2651],[2654,2654],[2908,2909],[3907,3907],[3917,3917],[3922,3922],[3927,3927],[3932,3932],[3945,3945],[3955,3955],[3957,3958],[3960,3960],[3969,3969],[3987,3987],[3997,3997],[4002,4002],[4007,4007],[4012,4012],[4025,4025],[10972,10972],[64285,64285],[64287,64287],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64334],[119134,119140],[119227,119232]],"Binary_Property/Changes_When_NFKC_Casefolded":[[65,90],[160,160],[168,168],[170,170],[173,173],[175,175],[178,181],[184,186],[188,190],[192,214],[216,223],[256,256],[258,258],[260,260],[262,262],[264,264],[266,266],[268,268],[270,270],[272,272],[274,274],[276,276],[278,278],[280,280],[282,282],[284,284],[286,286],[288,288],[290,290],[292,292],[294,294],[296,296],[298,298],[300,300],[302,302],[304,304],[306,308],[310,310],[313,313],[315,315],[317,317],[319,321],[323,323],[325,325],[327,327],[329,330],[332,332],[334,334],[336,336],[338,338],[340,340],[342,342],[344,344],[346,346],[348,348],[350,350],[352,352],[354,354],[356,356],[358,358],[360,360],[362,362],[364,364],[366,366],[368,368],[370,370],[372,372],[374,374],[376,377],[379,379],[381,381],[383,383],[385,386],[388,388],[390,391],[393,395],[398,401],[403,404],[406,408],[412,413],[415,416],[418,418],[420,420],[422,423],[425,425],[428,428],[430,431],[433,435],[437,437],[439,440],[444,444],[452,461],[463,463],[465,465],[467,467],[469,469],[471,471],[473,473],[475,475],[478,478],[480,480],[482,482],[484,484],[486,486],[488,488],[490,490],[492,492],[494,494],[497,500],[502,504],[506,506],[508,508],[510,510],[512,512],[514,514],[516,516],[518,518],[520,520],[522,522],[524,524],[526,526],[528,528],[530,530],[532,532],[534,534],[536,536],[538,538],[540,540],[542,542],[544,544],[546,546],[548,548],[550,550],[552,552],[554,554],[556,556],[558,558],[560,560],[562,562],[570,571],[573,574],[577,577],[579,582],[584,584],[586,586],[588,588],[590,590],[688,696],[728,733],[736,740],[832,833],[835,837],[847,847],[880,880],[882,882],[884,884],[886,886],[890,890],[894,895],[900,906],[908,908],[910,911],[913,929],[931,939],[962,962],[975,982],[984,984],[986,986],[988,988],[990,990],[992,992],[994,994],[996,996],[998,998],[1000,1000],[1002,1002],[1004,1004],[1006,1006],[1008,1010],[1012,1013],[1015,1015],[1017,1018],[1021,1071],[1120,1120],[1122,1122],[1124,1124],[1126,1126],[1128,1128],[1130,1130],[1132,1132],[1134,1134],[1136,1136],[1138,1138],[1140,1140],[1142,1142],[1144,1144],[1146,1146],[1148,1148],[1150,1150],[1152,1152],[1162,1162],[1164,1164],[1166,1166],[1168,1168],[1170,1170],[1172,1172],[1174,1174],[1176,1176],[1178,1178],[1180,1180],[1182,1182],[1184,1184],[1186,1186],[1188,1188],[1190,1190],[1192,1192],[1194,1194],[1196,1196],[1198,1198],[1200,1200],[1202,1202],[1204,1204],[1206,1206],[1208,1208],[1210,1210],[1212,1212],[1214,1214],[1216,1217],[1219,1219],[1221,1221],[1223,1223],[1225,1225],[1227,1227],[1229,1229],[1232,1232],[1234,1234],[1236,1236],[1238,1238],[1240,1240],[1242,1242],[1244,1244],[1246,1246],[1248,1248],[1250,1250],[1252,1252],[1254,1254],[1256,1256],[1258,1258],[1260,1260],[1262,1262],[1264,1264],[1266,1266],[1268,1268],[1270,1270],[1272,1272],[1274,1274],[1276,1276],[1278,1278],[1280,1280],[1282,1282],[1284,1284],[1286,1286],[1288,1288],[1290,1290],[1292,1292],[1294,1294],[1296,1296],[1298,1298],[1300,1300],[1302,1302],[1304,1304],[1306,1306],[1308,1308],[1310,1310],[1312,1312],[1314,1314],[1316,1316],[1318,1318],[1320,1320],[1322,1322],[1324,1324],[1326,1326],[1329,1366],[1415,1415],[1564,1564],[1653,1656],[2392,2399],[2524,2525],[2527,2527],[2611,2611],[2614,2614],[2649,2651],[2654,2654],[2908,2909],[3635,3635],[3763,3763],[3804,3805],[3852,3852],[3907,3907],[3917,3917],[3922,3922],[3927,3927],[3932,3932],[3945,3945],[3955,3955],[3957,3961],[3969,3969],[3987,3987],[3997,3997],[4002,4002],[4007,4007],[4012,4012],[4025,4025],[4256,4293],[4295,4295],[4301,4301],[4348,4348],[4447,4448],[5112,5117],[6068,6069],[6155,6159],[7296,7304],[7312,7354],[7357,7359],[7468,7470],[7472,7482],[7484,7501],[7503,7530],[7544,7544],[7579,7615],[7680,7680],[7682,7682],[7684,7684],[7686,7686],[7688,7688],[7690,7690],[7692,7692],[7694,7694],[7696,7696],[7698,7698],[7700,7700],[7702,7702],[7704,7704],[7706,7706],[7708,7708],[7710,7710],[7712,7712],[7714,7714],[7716,7716],[7718,7718],[7720,7720],[7722,7722],[7724,7724],[7726,7726],[7728,7728],[7730,7730],[7732,7732],[7734,7734],[7736,7736],[7738,7738],[7740,7740],[7742,7742],[7744,7744],[7746,7746],[7748,7748],[7750,7750],[7752,7752],[7754,7754],[7756,7756],[7758,7758],[7760,7760],[7762,7762],[7764,7764],[7766,7766],[7768,7768],[7770,7770],[7772,7772],[7774,7774],[7776,7776],[7778,7778],[7780,7780],[7782,7782],[7784,7784],[7786,7786],[7788,7788],[7790,7790],[7792,7792],[7794,7794],[7796,7796],[7798,7798],[7800,7800],[7802,7802],[7804,7804],[7806,7806],[7808,7808],[7810,7810],[7812,7812],[7814,7814],[7816,7816],[7818,7818],[7820,7820],[7822,7822],[7824,7824],[7826,7826],[7828,7828],[7834,7835],[7838,7838],[7840,7840],[7842,7842],[7844,7844],[7846,7846],[7848,7848],[7850,7850],[7852,7852],[7854,7854],[7856,7856],[7858,7858],[7860,7860],[7862,7862],[7864,7864],[7866,7866],[7868,7868],[7870,7870],[7872,7872],[7874,7874],[7876,7876],[7878,7878],[7880,7880],[7882,7882],[7884,7884],[7886,7886],[7888,7888],[7890,7890],[7892,7892],[7894,7894],[7896,7896],[7898,7898],[7900,7900],[7902,7902],[7904,7904],[7906,7906],[7908,7908],[7910,7910],[7912,7912],[7914,7914],[7916,7916],[7918,7918],[7920,7920],[7922,7922],[7924,7924],[7926,7926],[7928,7928],[7930,7930],[7932,7932],[7934,7934],[7944,7951],[7960,7965],[7976,7983],[7992,7999],[8008,8013],[8025,8025],[8027,8027],[8029,8029],[8031,8031],[8040,8047],[8049,8049],[8051,8051],[8053,8053],[8055,8055],[8057,8057],[8059,8059],[8061,8061],[8064,8111],[8114,8116],[8119,8132],[8135,8143],[8147,8147],[8152,8155],[8157,8159],[8163,8163],[8168,8175],[8178,8180],[8183,8190],[8192,8207],[8209,8209],[8215,8215],[8228,8230],[8234,8239],[8243,8244],[8246,8247],[8252,8252],[8254,8254],[8263,8265],[8279,8279],[8287,8305],[8308,8334],[8336,8348],[8360,8360],[8448,8451],[8453,8455],[8457,8467],[8469,8470],[8473,8477],[8480,8482],[8484,8484],[8486,8486],[8488,8488],[8490,8493],[8495,8505],[8507,8512],[8517,8521],[8528,8575],[8579,8579],[8585,8585],[8748,8749],[8751,8752],[9001,9002],[9312,9450],[10764,10764],[10868,10870],[10972,10972],[11264,11311],[11360,11360],[11362,11364],[11367,11367],[11369,11369],[11371,11371],[11373,11376],[11378,11378],[11381,11381],[11388,11392],[11394,11394],[11396,11396],[11398,11398],[11400,11400],[11402,11402],[11404,11404],[11406,11406],[11408,11408],[11410,11410],[11412,11412],[11414,11414],[11416,11416],[11418,11418],[11420,11420],[11422,11422],[11424,11424],[11426,11426],[11428,11428],[11430,11430],[11432,11432],[11434,11434],[11436,11436],[11438,11438],[11440,11440],[11442,11442],[11444,11444],[11446,11446],[11448,11448],[11450,11450],[11452,11452],[11454,11454],[11456,11456],[11458,11458],[11460,11460],[11462,11462],[11464,11464],[11466,11466],[11468,11468],[11470,11470],[11472,11472],[11474,11474],[11476,11476],[11478,11478],[11480,11480],[11482,11482],[11484,11484],[11486,11486],[11488,11488],[11490,11490],[11499,11499],[11501,11501],[11506,11506],[11631,11631],[11935,11935],[12019,12019],[12032,12245],[12288,12288],[12342,12342],[12344,12346],[12443,12444],[12447,12447],[12543,12543],[12593,12686],[12690,12703],[12800,12830],[12832,12871],[12880,12926],[12928,13311],[42560,42560],[42562,42562],[42564,42564],[42566,42566],[42568,42568],[42570,42570],[42572,42572],[42574,42574],[42576,42576],[42578,42578],[42580,42580],[42582,42582],[42584,42584],[42586,42586],[42588,42588],[42590,42590],[42592,42592],[42594,42594],[42596,42596],[42598,42598],[42600,42600],[42602,42602],[42604,42604],[42624,42624],[42626,42626],[42628,42628],[42630,42630],[42632,42632],[42634,42634],[42636,42636],[42638,42638],[42640,42640],[42642,42642],[42644,42644],[42646,42646],[42648,42648],[42650,42650],[42652,42653],[42786,42786],[42788,42788],[42790,42790],[42792,42792],[42794,42794],[42796,42796],[42798,42798],[42802,42802],[42804,42804],[42806,42806],[42808,42808],[42810,42810],[42812,42812],[42814,42814],[42816,42816],[42818,42818],[42820,42820],[42822,42822],[42824,42824],[42826,42826],[42828,42828],[42830,42830],[42832,42832],[42834,42834],[42836,42836],[42838,42838],[42840,42840],[42842,42842],[42844,42844],[42846,42846],[42848,42848],[42850,42850],[42852,42852],[42854,42854],[42856,42856],[42858,42858],[42860,42860],[42862,42862],[42864,42864],[42873,42873],[42875,42875],[42877,42878],[42880,42880],[42882,42882],[42884,42884],[42886,42886],[42891,42891],[42893,42893],[42896,42896],[42898,42898],[42902,42902],[42904,42904],[42906,42906],[42908,42908],[42910,42910],[42912,42912],[42914,42914],[42916,42916],[42918,42918],[42920,42920],[42922,42926],[42928,42932],[42934,42934],[42936,42936],[42938,42938],[42940,42940],[42942,42942],[42944,42944],[42946,42946],[42948,42951],[42953,42953],[42960,42960],[42966,42966],[42968,42968],[42994,42997],[43000,43001],[43868,43871],[43881,43881],[43888,43967],[63744,64013],[64016,64016],[64018,64018],[64021,64030],[64032,64032],[64034,64034],[64037,64038],[64042,64109],[64112,64217],[64256,64262],[64275,64279],[64285,64285],[64287,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64433],[64467,64829],[64848,64911],[64914,64967],[65008,65020],[65024,65049],[65072,65092],[65095,65106],[65108,65126],[65128,65131],[65136,65138],[65140,65140],[65142,65276],[65279,65279],[65281,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500],[65504,65510],[65512,65518],[65520,65528],[66560,66599],[66736,66771],[66928,66938],[66940,66954],[66956,66962],[66964,66965],[67457,67461],[67463,67504],[67506,67514],[68736,68786],[71840,71871],[93760,93791],[113824,113827],[119134,119140],[119155,119162],[119227,119232],[119808,119892],[119894,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119993],[119995,119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120146,120485],[120488,120779],[120782,120831],[122928,122989],[125184,125217],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[127232,127242],[127248,127278],[127280,127311],[127338,127340],[127376,127376],[127488,127490],[127504,127547],[127552,127560],[127568,127569],[130032,130041],[194560,195101],[917504,921599]],"Binary_Property/Logical_Order_Exception":[[3648,3652],[3776,3780],[6581,6583],[6586,6586],[43701,43702],[43705,43705],[43707,43708]],"Bidi_Class/Pop_Directional_Isolate":[[8297,8297]],"Bidi_Class/Arabic_Number":[[1536,1541],[1632,1641],[1643,1644],[1757,1757],[2192,2193],[2274,2274],[68912,68921],[69216,69246]],"Bidi_Class/Boundary_Neutral":[[0,8],[14,27],[127,132],[134,159],[173,173],[6158,6158],[8203,8205],[8288,8292],[8298,8303],[65279,65279],[113824,113827],[119155,119162],[917505,917505],[917536,917631]],"Bidi_Class/European_Terminator":[[35,37],[162,165],[176,177],[1423,1423],[1545,1546],[1642,1642],[2546,2547],[2555,2555],[2801,2801],[3065,3065],[3647,3647],[6107,6107],[8240,8244],[8352,8384],[8494,8494],[8723,8723],[43064,43065],[65119,65119],[65129,65130],[65283,65285],[65504,65505],[65509,65510],[73693,73696],[123647,123647]],"Bidi_Class/Left_To_Right_Override":[[8237,8237]],"Bidi_Class/White_Space":[[12,12],[32,32],[5760,5760],[8192,8202],[8232,8232],[8287,8287],[12288,12288]],"Bidi_Class/Pop_Directional_Format":[[8236,8236]],"Bidi_Class/Right_To_Left_Override":[[8238,8238]],"Bidi_Class/Right_To_Left":[[1470,1470],[1472,1472],[1475,1475],[1478,1478],[1488,1514],[1519,1524],[1984,2026],[2036,2037],[2042,2042],[2046,2069],[2074,2074],[2084,2084],[2088,2088],[2096,2110],[2112,2136],[2142,2142],[8207,8207],[64285,64285],[64287,64296],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64335],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67669],[67671,67742],[67751,67759],[67808,67826],[67828,67829],[67835,67867],[67872,67897],[67903,67903],[67968,68023],[68028,68047],[68050,68096],[68112,68115],[68117,68119],[68121,68149],[68160,68168],[68176,68184],[68192,68255],[68288,68324],[68331,68342],[68352,68405],[68416,68437],[68440,68466],[68472,68497],[68505,68508],[68521,68527],[68608,68680],[68736,68786],[68800,68850],[68858,68863],[69248,69289],[69293,69293],[69296,69297],[69376,69415],[69488,69505],[69510,69513],[69552,69579],[69600,69622],[124928,125124],[125127,125135],[125184,125251],[125259,125259],[125264,125273],[125278,125279]],"Bidi_Class/Left_To_Right_Embedding":[[8234,8234]],"Bidi_Class/Right_To_Left_Embedding":[[8235,8235]],"Bidi_Class/Segment_Separator":[[9,9],[11,11],[31,31]],"Bidi_Class/Right_To_Left_Isolate":[[8295,8295]],"Bidi_Class/Left_To_Right":[[65,90],[97,122],[170,170],[181,181],[186,186],[192,214],[216,246],[248,696],[699,705],[720,721],[736,740],[750,750],[880,883],[886,887],[890,893],[895,895],[902,902],[904,906],[908,908],[910,929],[931,1013],[1015,1154],[1162,1327],[1329,1366],[1369,1417],[2307,2361],[2363,2363],[2365,2368],[2377,2380],[2382,2384],[2392,2401],[2404,2432],[2434,2435],[2437,2444],[2447,2448],[2451,2472],[2474,2480],[2482,2482],[2486,2489],[2493,2496],[2503,2504],[2507,2508],[2510,2510],[2519,2519],[2524,2525],[2527,2529],[2534,2545],[2548,2554],[2556,2557],[2563,2563],[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2622,2624],[2649,2652],[2654,2654],[2662,2671],[2674,2676],[2678,2678],[2691,2691],[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],[2749,2752],[2761,2761],[2763,2764],[2768,2768],[2784,2785],[2790,2800],[2809,2809],[2818,2819],[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2877,2878],[2880,2880],[2887,2888],[2891,2892],[2903,2903],[2908,2909],[2911,2913],[2918,2935],[2947,2947],[2949,2954],[2958,2960],[2962,2965],[2969,2970],[2972,2972],[2974,2975],[2979,2980],[2984,2986],[2990,3001],[3006,3007],[3009,3010],[3014,3016],[3018,3020],[3024,3024],[3031,3031],[3046,3058],[3073,3075],[3077,3084],[3086,3088],[3090,3112],[3114,3129],[3133,3133],[3137,3140],[3160,3162],[3165,3165],[3168,3169],[3174,3183],[3191,3191],[3199,3200],[3202,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],[3261,3268],[3270,3272],[3274,3275],[3285,3286],[3293,3294],[3296,3297],[3302,3311],[3313,3315],[3330,3340],[3342,3344],[3346,3386],[3389,3392],[3398,3400],[3402,3404],[3406,3407],[3412,3425],[3430,3455],[3458,3459],[3461,3478],[3482,3505],[3507,3515],[3517,3517],[3520,3526],[3535,3537],[3544,3551],[3558,3567],[3570,3572],[3585,3632],[3634,3635],[3648,3654],[3663,3675],[3713,3714],[3716,3716],[3718,3722],[3724,3747],[3749,3749],[3751,3760],[3762,3763],[3773,3773],[3776,3780],[3782,3782],[3792,3801],[3804,3807],[3840,3863],[3866,3892],[3894,3894],[3896,3896],[3902,3911],[3913,3948],[3967,3967],[3973,3973],[3976,3980],[4030,4037],[4039,4044],[4046,4058],[4096,4140],[4145,4145],[4152,4152],[4155,4156],[4159,4183],[4186,4189],[4193,4208],[4213,4225],[4227,4228],[4231,4236],[4238,4252],[4254,4293],[4295,4295],[4301,4301],[4304,4680],[4682,4685],[4688,4694],[4696,4696],[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],[4800,4800],[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4960,4988],[4992,5007],[5024,5109],[5112,5117],[5121,5759],[5761,5786],[5792,5880],[5888,5905],[5909,5909],[5919,5937],[5940,5942],[5952,5969],[5984,5996],[5998,6000],[6016,6067],[6070,6070],[6078,6085],[6087,6088],[6100,6106],[6108,6108],[6112,6121],[6160,6169],[6176,6264],[6272,6276],[6279,6312],[6314,6314],[6320,6389],[6400,6430],[6435,6438],[6441,6443],[6448,6449],[6451,6456],[6470,6509],[6512,6516],[6528,6571],[6576,6601],[6608,6618],[6656,6678],[6681,6682],[6686,6741],[6743,6743],[6753,6753],[6755,6756],[6765,6770],[6784,6793],[6800,6809],[6816,6829],[6916,6963],[6965,6965],[6971,6971],[6973,6977],[6979,6988],[6992,7018],[7028,7038],[7042,7073],[7078,7079],[7082,7082],[7086,7141],[7143,7143],[7146,7148],[7150,7150],[7154,7155],[7164,7211],[7220,7221],[7227,7241],[7245,7304],[7312,7354],[7357,7367],[7379,7379],[7393,7393],[7401,7404],[7406,7411],[7413,7415],[7418,7418],[7424,7615],[7680,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025,8025],[8027,8027],[8029,8029],[8031,8061],[8064,8116],[8118,8124],[8126,8126],[8130,8132],[8134,8140],[8144,8147],[8150,8155],[8160,8172],[8178,8180],[8182,8188],[8206,8206],[8305,8305],[8319,8319],[8336,8348],[8450,8450],[8455,8455],[8458,8467],[8469,8469],[8473,8477],[8484,8484],[8486,8486],[8488,8488],[8490,8493],[8495,8505],[8508,8511],[8517,8521],[8526,8527],[8544,8584],[9014,9082],[9109,9109],[9372,9449],[9900,9900],[10240,10495],[11264,11492],[11499,11502],[11506,11507],[11520,11557],[11559,11559],[11565,11565],[11568,11623],[11631,11632],[11648,11670],[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[12293,12295],[12321,12329],[12334,12335],[12337,12341],[12344,12348],[12353,12438],[12445,12447],[12449,12538],[12540,12543],[12549,12591],[12593,12686],[12688,12735],[12784,12828],[12832,12879],[12896,12923],[12927,12976],[12992,13003],[13008,13174],[13179,13277],[13280,13310],[13312,19903],[19968,42124],[42192,42508],[42512,42539],[42560,42606],[42624,42653],[42656,42735],[42738,42743],[42786,42887],[42889,42954],[42960,42961],[42963,42963],[42965,42969],[42994,43009],[43011,43013],[43015,43018],[43020,43044],[43047,43047],[43056,43063],[43072,43123],[43136,43203],[43214,43225],[43250,43262],[43264,43301],[43310,43334],[43346,43347],[43359,43388],[43395,43442],[43444,43445],[43450,43451],[43454,43469],[43471,43481],[43486,43492],[43494,43518],[43520,43560],[43567,43568],[43571,43572],[43584,43586],[43588,43595],[43597,43597],[43600,43609],[43612,43643],[43645,43695],[43697,43697],[43701,43702],[43705,43709],[43712,43712],[43714,43714],[43739,43755],[43758,43765],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822],[43824,43881],[43888,44004],[44006,44007],[44009,44012],[44016,44025],[44032,55203],[55216,55238],[55243,55291],[55296,64109],[64112,64217],[64256,64262],[64275,64279],[65313,65338],[65345,65370],[65382,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500],[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786],[65792,65792],[65794,65794],[65799,65843],[65847,65855],[65933,65934],[66000,66044],[66176,66204],[66208,66256],[66304,66339],[66349,66378],[66384,66421],[66432,66461],[66463,66499],[66504,66517],[66560,66717],[66720,66729],[66736,66771],[66776,66811],[66816,66855],[66864,66915],[66927,66938],[66940,66954],[66956,66962],[66964,66965],[66967,66977],[66979,66993],[66995,67001],[67003,67004],[67072,67382],[67392,67413],[67424,67431],[67456,67461],[67463,67504],[67506,67514],[69632,69632],[69634,69687],[69703,69709],[69734,69743],[69745,69746],[69749,69749],[69762,69810],[69815,69816],[69819,69825],[69837,69837],[69840,69864],[69872,69881],[69891,69926],[69932,69932],[69942,69959],[69968,70002],[70004,70006],[70018,70069],[70079,70088],[70093,70094],[70096,70111],[70113,70132],[70144,70161],[70163,70190],[70194,70195],[70197,70197],[70200,70205],[70207,70208],[70272,70278],[70280,70280],[70282,70285],[70287,70301],[70303,70313],[70320,70366],[70368,70370],[70384,70393],[70402,70403],[70405,70412],[70415,70416],[70419,70440],[70442,70448],[70450,70451],[70453,70457],[70461,70463],[70465,70468],[70471,70472],[70475,70477],[70480,70480],[70487,70487],[70493,70499],[70656,70711],[70720,70721],[70725,70725],[70727,70747],[70749,70749],[70751,70753],[70784,70834],[70841,70841],[70843,70846],[70849,70849],[70852,70855],[70864,70873],[71040,71089],[71096,71099],[71102,71102],[71105,71131],[71168,71218],[71227,71228],[71230,71230],[71233,71236],[71248,71257],[71296,71338],[71340,71340],[71342,71343],[71350,71350],[71352,71353],[71360,71369],[71424,71450],[71456,71457],[71462,71462],[71472,71494],[71680,71726],[71736,71736],[71739,71739],[71840,71922],[71935,71942],[71945,71945],[71948,71955],[71957,71958],[71960,71989],[71991,71992],[71997,71997],[71999,72002],[72004,72006],[72016,72025],[72096,72103],[72106,72147],[72156,72159],[72161,72164],[72192,72192],[72199,72200],[72203,72242],[72249,72250],[72255,72262],[72272,72272],[72279,72280],[72284,72329],[72343,72343],[72346,72354],[72368,72440],[72448,72457],[72704,72712],[72714,72751],[72766,72773],[72784,72812],[72816,72847],[72873,72873],[72881,72881],[72884,72884],[72960,72966],[72968,72969],[72971,73008],[73030,73030],[73040,73049],[73056,73061],[73063,73064],[73066,73102],[73107,73108],[73110,73110],[73112,73112],[73120,73129],[73440,73458],[73461,73464],[73474,73488],[73490,73525],[73534,73535],[73537,73537],[73539,73561],[73648,73648],[73664,73684],[73727,74649],[74752,74862],[74864,74868],[74880,75075],[77712,77810],[77824,78911],[78913,78918],[82944,83526],[92160,92728],[92736,92766],[92768,92777],[92782,92862],[92864,92873],[92880,92909],[92917,92917],[92928,92975],[92983,92997],[93008,93017],[93019,93025],[93027,93047],[93053,93071],[93760,93850],[93952,94026],[94032,94087],[94099,94111],[94176,94177],[94179,94179],[94192,94193],[94208,100343],[100352,101589],[101632,101640],[110576,110579],[110581,110587],[110589,110590],[110592,110882],[110898,110898],[110928,110930],[110933,110933],[110948,110951],[110960,111355],[113664,113770],[113776,113788],[113792,113800],[113808,113817],[113820,113820],[113823,113823],[118608,118723],[118784,119029],[119040,119078],[119081,119142],[119146,119154],[119171,119172],[119180,119209],[119214,119272],[119488,119507],[119520,119539],[119648,119672],[119808,119892],[119894,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119993],[119995,119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120146,120485],[120488,120538],[120540,120596],[120598,120654],[120656,120712],[120714,120770],[120772,120779],[120832,121343],[121399,121402],[121453,121460],[121462,121475],[121477,121483],[122624,122654],[122661,122666],[122928,122989],[123136,123180],[123191,123197],[123200,123209],[123214,123215],[123536,123565],[123584,123627],[123632,123641],[124112,124139],[124144,124153],[124896,124902],[124904,124907],[124909,124910],[124912,124926],[127248,127278],[127280,127337],[127344,127404],[127462,127490],[127504,127547],[127552,127560],[127568,127569],[131072,173791],[173824,177977],[177984,178205],[178208,183969],[183984,191456],[194560,195101],[196608,201546],[201552,205743],[983040,1048573],[1048576,1114109]],"Bidi_Class/Paragraph_Separator":[[10,10],[13,13],[28,30],[133,133],[8233,8233]],"Bidi_Class/First_Strong_Isolate":[[8296,8296]],"Bidi_Class/Left_To_Right_Isolate":[[8294,8294]],"Bidi_Class/European_Separator":[[43,43],[45,45],[8314,8315],[8330,8331],[8722,8722],[64297,64297],[65122,65123],[65291,65291],[65293,65293]],"Bidi_Class/Common_Separator":[[44,44],[46,47],[58,58],[160,160],[1548,1548],[8239,8239],[8260,8260],[65104,65104],[65106,65106],[65109,65109],[65292,65292],[65294,65295],[65306,65306]],"Bidi_Class/European_Number":[[48,57],[178,179],[185,185],[1776,1785],[8304,8304],[8308,8313],[8320,8329],[9352,9371],[65296,65305],[66273,66299],[120782,120831],[127232,127242],[130032,130041]],"Bidi_Class/Arabic_Letter":[[1544,1544],[1547,1547],[1549,1549],[1563,1610],[1645,1647],[1649,1749],[1765,1766],[1774,1775],[1786,1805],[1807,1808],[1810,1839],[1869,1957],[1969,1969],[2144,2154],[2160,2190],[2208,2249],[64336,64450],[64467,64829],[64848,64911],[64914,64967],[65008,65020],[65136,65140],[65142,65276],[68864,68899],[69424,69445],[69457,69465],[126065,126132],[126209,126269],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651]],"Bidi_Class/Nonspacing_Mark":[[768,879],[1155,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1552,1562],[1611,1631],[1648,1648],[1750,1756],[1759,1764],[1767,1768],[1770,1773],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2045,2045],[2070,2073],[2075,2083],[2085,2087],[2089,2093],[2137,2139],[2200,2207],[2250,2273],[2275,2306],[2362,2362],[2364,2364],[2369,2376],[2381,2381],[2385,2391],[2402,2403],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2558,2558],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2641,2641],[2672,2673],[2677,2677],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2810,2815],[2817,2817],[2876,2876],[2879,2879],[2881,2884],[2893,2893],[2901,2902],[2914,2915],[2946,2946],[3008,3008],[3021,3021],[3072,3072],[3076,3076],[3132,3132],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3170,3171],[3201,3201],[3260,3260],[3276,3277],[3298,3299],[3328,3329],[3387,3388],[3393,3396],[3405,3405],[3426,3427],[3457,3457],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3772],[3784,3790],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3981,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4151],[4153,4154],[4157,4158],[4184,4185],[4190,4192],[4209,4212],[4226,4226],[4229,4230],[4237,4237],[4253,4253],[4957,4959],[5906,5908],[5938,5939],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6157],[6159,6159],[6277,6278],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6683,6683],[6742,6742],[6744,6750],[6752,6752],[6754,6754],[6757,6764],[6771,6780],[6783,6783],[6832,6862],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7040,7041],[7074,7077],[7080,7081],[7083,7085],[7142,7142],[7144,7145],[7149,7149],[7151,7153],[7212,7219],[7222,7223],[7376,7378],[7380,7392],[7394,7400],[7405,7405],[7412,7412],[7416,7417],[7616,7679],[8400,8432],[11503,11505],[11647,11647],[11744,11775],[12330,12333],[12441,12442],[42607,42610],[42612,42621],[42654,42655],[42736,42737],[43010,43010],[43014,43014],[43019,43019],[43045,43046],[43052,43052],[43204,43205],[43232,43249],[43263,43263],[43302,43309],[43335,43345],[43392,43394],[43443,43443],[43446,43449],[43452,43453],[43493,43493],[43561,43566],[43569,43570],[43573,43574],[43587,43587],[43596,43596],[43644,43644],[43696,43696],[43698,43700],[43703,43704],[43710,43711],[43713,43713],[43756,43757],[43766,43766],[44005,44005],[44008,44008],[44013,44013],[64286,64286],[65024,65039],[65056,65071],[66045,66045],[66272,66272],[66422,66426],[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[68325,68326],[68900,68903],[69291,69292],[69373,69375],[69446,69456],[69506,69509],[69633,69633],[69688,69702],[69744,69744],[69747,69748],[69759,69761],[69811,69814],[69817,69818],[69826,69826],[69888,69890],[69927,69931],[69933,69940],[70003,70003],[70016,70017],[70070,70078],[70089,70092],[70095,70095],[70191,70193],[70196,70196],[70198,70199],[70206,70206],[70209,70209],[70367,70367],[70371,70378],[70400,70401],[70459,70460],[70464,70464],[70502,70508],[70512,70516],[70712,70719],[70722,70724],[70726,70726],[70750,70750],[70835,70840],[70842,70842],[70847,70848],[70850,70851],[71090,71093],[71100,71101],[71103,71104],[71132,71133],[71219,71226],[71229,71229],[71231,71232],[71339,71339],[71341,71341],[71344,71349],[71351,71351],[71453,71455],[71458,71461],[71463,71467],[71727,71735],[71737,71738],[71995,71996],[71998,71998],[72003,72003],[72148,72151],[72154,72155],[72160,72160],[72193,72198],[72201,72202],[72243,72248],[72251,72254],[72263,72263],[72273,72278],[72281,72283],[72330,72342],[72344,72345],[72752,72758],[72760,72765],[72850,72871],[72874,72880],[72882,72883],[72885,72886],[73009,73014],[73018,73018],[73020,73021],[73023,73029],[73031,73031],[73104,73105],[73109,73109],[73111,73111],[73459,73460],[73472,73473],[73526,73530],[73536,73536],[73538,73538],[78912,78912],[78919,78933],[92912,92916],[92976,92982],[94031,94031],[94095,94098],[94180,94180],[113821,113822],[118528,118573],[118576,118598],[119143,119145],[119163,119170],[119173,119179],[119210,119213],[119362,119364],[121344,121398],[121403,121452],[121461,121461],[121476,121476],[121499,121503],[121505,121519],[122880,122886],[122888,122904],[122907,122913],[122915,122916],[122918,122922],[123023,123023],[123184,123190],[123566,123566],[123628,123631],[124140,124143],[125136,125142],[125252,125258],[917760,917999]],"Bidi_Class/Other_Neutral":[[33,34],[38,42],[59,64],[91,96],[123,126],[161,161],[166,169],[171,172],[174,175],[180,180],[182,184],[187,191],[215,215],[247,247],[697,698],[706,719],[722,735],[741,749],[751,767],[884,885],[894,894],[900,901],[903,903],[1014,1014],[1418,1418],[1421,1422],[1542,1543],[1550,1551],[1758,1758],[1769,1769],[2038,2041],[3059,3064],[3066,3066],[3192,3198],[3898,3901],[5008,5017],[5120,5120],[5787,5788],[6128,6137],[6144,6154],[6464,6464],[6468,6469],[6622,6655],[8125,8125],[8127,8129],[8141,8143],[8157,8159],[8173,8175],[8189,8190],[8208,8231],[8245,8259],[8261,8286],[8316,8318],[8332,8334],[8448,8449],[8451,8454],[8456,8457],[8468,8468],[8470,8472],[8478,8483],[8485,8485],[8487,8487],[8489,8489],[8506,8507],[8512,8516],[8522,8525],[8528,8543],[8585,8587],[8592,8721],[8724,9013],[9083,9108],[9110,9254],[9280,9290],[9312,9351],[9450,9899],[9901,10239],[10496,11123],[11126,11157],[11159,11263],[11493,11498],[11513,11519],[11776,11869],[11904,11929],[11931,12019],[12032,12245],[12272,12283],[12289,12292],[12296,12320],[12336,12336],[12342,12343],[12349,12351],[12443,12444],[12448,12448],[12539,12539],[12736,12771],[12829,12830],[12880,12895],[12924,12926],[12977,12991],[13004,13007],[13175,13178],[13278,13279],[13311,13311],[19904,19967],[42128,42182],[42509,42511],[42611,42611],[42622,42623],[42752,42785],[42888,42888],[43048,43051],[43124,43127],[43882,43883],[64830,64847],[64975,64975],[65021,65023],[65040,65049],[65072,65103],[65105,65105],[65108,65108],[65110,65118],[65120,65121],[65124,65126],[65128,65128],[65131,65131],[65281,65282],[65286,65290],[65307,65312],[65339,65344],[65371,65381],[65506,65508],[65512,65518],[65529,65533],[65793,65793],[65856,65932],[65936,65948],[65952,65952],[67871,67871],[68409,68415],[69714,69733],[71264,71276],[73685,73692],[73697,73713],[94178,94178],[119273,119274],[119296,119361],[119365,119365],[119552,119638],[120539,120539],[120597,120597],[120655,120655],[120713,120713],[120771,120771],[126704,126705],[126976,127019],[127024,127123],[127136,127150],[127153,127167],[127169,127183],[127185,127221],[127243,127247],[127279,127279],[127338,127343],[127405,127405],[127584,127589],[127744,128727],[128732,128748],[128752,128764],[128768,128886],[128891,128985],[128992,129003],[129008,129008],[129024,129035],[129040,129095],[129104,129113],[129120,129159],[129168,129197],[129200,129201],[129280,129619],[129632,129645],[129648,129660],[129664,129672],[129680,129725],[129727,129733],[129742,129755],[129760,129768],[129776,129784],[129792,129938],[129940,129994]],"Script/Javanese":[[43392,43469],[43472,43481],[43486,43487]],"Script/Nko":[[1984,2042],[2045,2047]],"Script/Inherited":[[768,879],[1157,1158],[1611,1621],[1648,1648],[2385,2388],[6832,6862],[7376,7378],[7380,7392],[7394,7400],[7405,7405],[7412,7412],[7416,7417],[7616,7679],[8204,8205],[8400,8432],[12330,12333],[12441,12442],[65024,65039],[65056,65069],[66045,66045],[66272,66272],[70459,70459],[118528,118573],[118576,118598],[119143,119145],[119163,119170],[119173,119179],[119210,119213],[917760,917999]],"Script/Dogra":[[71680,71739]],"Script/Deseret":[[66560,66639]],"Script/Bhaiksuki":[[72704,72712],[72714,72758],[72760,72773],[72784,72812]],"Script/Phoenician":[[67840,67867],[67871,67871]],"Script/Pau_Cin_Hau":[[72384,72440]],"Script/Meroitic_Cursive":[[68000,68023],[68028,68047],[68050,68095]],"Script/Warang_Citi":[[71840,71922],[71935,71935]],"Script/Balinese":[[6912,6988],[6992,7038]],"Script/Khitan_Small_Script":[[94180,94180],[101120,101589]],"Script/Tai_Le":[[6480,6509],[6512,6516]],"Script/Modi":[[71168,71236],[71248,71257]],"Script/Psalter_Pahlavi":[[68480,68497],[68505,68508],[68521,68527]],"Script/Old_Italic":[[66304,66339],[66349,66351]],"Script/Bamum":[[42656,42743],[92160,92728]],"Script/Palmyrene":[[67680,67711]],"Script/Batak":[[7104,7155],[7164,7167]],"Script/Cham":[[43520,43574],[43584,43597],[43600,43609],[43612,43615]],"Script/Pahawh_Hmong":[[92928,92997],[93008,93017],[93019,93025],[93027,93047],[93053,93071]],"Script/Canadian_Aboriginal":[[5120,5759],[6320,6389],[72368,72383]],"Script/Arabic":[[1536,1540],[1542,1547],[1549,1562],[1564,1566],[1568,1599],[1601,1610],[1622,1647],[1649,1756],[1758,1791],[1872,1919],[2160,2190],[2192,2193],[2200,2273],[2275,2303],[64336,64450],[64467,64829],[64832,64911],[64914,64967],[64975,64975],[65008,65023],[65136,65140],[65142,65276],[69216,69246],[69373,69375],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[126704,126705]],"Script/Cypro_Minoan":[[77712,77810]],"Script/Common":[[0,64],[91,96],[123,169],[171,185],[187,191],[215,215],[247,247],[697,735],[741,745],[748,767],[884,884],[894,894],[901,901],[903,903],[1541,1541],[1548,1548],[1563,1563],[1567,1567],[1600,1600],[1757,1757],[2274,2274],[2404,2405],[3647,3647],[4053,4056],[4347,4347],[5867,5869],[5941,5942],[6146,6147],[6149,6149],[7379,7379],[7393,7393],[7401,7404],[7406,7411],[7413,7415],[7418,7418],[8192,8203],[8206,8292],[8294,8304],[8308,8318],[8320,8334],[8352,8384],[8448,8485],[8487,8489],[8492,8497],[8499,8525],[8527,8543],[8585,8587],[8592,9254],[9280,9290],[9312,10239],[10496,11123],[11126,11157],[11159,11263],[11776,11869],[12272,12283],[12288,12292],[12294,12294],[12296,12320],[12336,12343],[12348,12351],[12443,12444],[12448,12448],[12539,12540],[12688,12703],[12736,12771],[12832,12895],[12927,13007],[13055,13055],[13144,13311],[19904,19967],[42752,42785],[42888,42890],[43056,43065],[43310,43310],[43471,43471],[43867,43867],[43882,43883],[64830,64831],[65040,65049],[65072,65106],[65108,65126],[65128,65131],[65279,65279],[65281,65312],[65339,65344],[65371,65381],[65392,65392],[65438,65439],[65504,65510],[65512,65518],[65529,65533],[65792,65794],[65799,65843],[65847,65855],[65936,65948],[66000,66044],[66273,66299],[113824,113827],[118608,118723],[118784,119029],[119040,119078],[119081,119142],[119146,119162],[119171,119172],[119180,119209],[119214,119274],[119488,119507],[119520,119539],[119552,119638],[119648,119672],[119808,119892],[119894,119964],[119966,119967],[119970,119970],[119973,119974],[119977,119980],[119982,119993],[119995,119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134,120134],[120138,120144],[120146,120485],[120488,120779],[120782,120831],[126065,126132],[126209,126269],[126976,127019],[127024,127123],[127136,127150],[127153,127167],[127169,127183],[127185,127221],[127232,127405],[127462,127487],[127489,127490],[127504,127547],[127552,127560],[127568,127569],[127584,127589],[127744,128727],[128732,128748],[128752,128764],[128768,128886],[128891,128985],[128992,129003],[129008,129008],[129024,129035],[129040,129095],[129104,129113],[129120,129159],[129168,129197],[129200,129201],[129280,129619],[129632,129645],[129648,129660],[129664,129672],[129680,129725],[129727,129733],[129742,129755],[129760,129768],[129776,129784],[129792,129938],[129940,129994],[130032,130041],[917505,917505],[917536,917631]],"Script/Old_Permic":[[66384,66426]],"Script/Devanagari":[[2304,2384],[2389,2403],[2406,2431],[43232,43263],[72448,72457]],"Script/Phags_Pa":[[43072,43127]],"Script/Tangsa":[[92784,92862],[92864,92873]],"Script/Duployan":[[113664,113770],[113776,113788],[113792,113800],[113808,113817],[113820,113823]],"Script/Han":[[11904,11929],[11931,12019],[12032,12245],[12293,12293],[12295,12295],[12321,12329],[12344,12347],[13312,19903],[19968,40959],[63744,64109],[64112,64217],[94178,94179],[94192,94193],[131072,173791],[173824,177977],[177984,178205],[178208,183969],[183984,191456],[194560,195101],[196608,201546],[201552,205743]],"Script/Cyrillic":[[1024,1156],[1159,1327],[7296,7304],[7467,7467],[7544,7544],[11744,11775],[42560,42655],[65070,65071],[122928,122989],[123023,123023]],"Script/Inscriptional_Parthian":[[68416,68437],[68440,68447]],"Script/Latin":[[65,90],[97,122],[170,170],[186,186],[192,214],[216,246],[248,696],[736,740],[7424,7461],[7468,7516],[7522,7525],[7531,7543],[7545,7614],[7680,7935],[8305,8305],[8319,8319],[8336,8348],[8490,8491],[8498,8498],[8526,8526],[8544,8584],[11360,11391],[42786,42887],[42891,42954],[42960,42961],[42963,42963],[42965,42969],[42994,43007],[43824,43866],[43868,43876],[43878,43881],[64256,64262],[65313,65338],[65345,65370],[67456,67461],[67463,67504],[67506,67514],[122624,122654],[122661,122666]],"Script/Multani":[[70272,70278],[70280,70280],[70282,70285],[70287,70301],[70303,70313]],"Script/Old_South_Arabian":[[68192,68223]],"Script/Khojki":[[70144,70161],[70163,70209]],"Script/Gunjala_Gondi":[[73056,73061],[73063,73064],[73066,73102],[73104,73105],[73107,73112],[73120,73129]],"Script/Meroitic_Hieroglyphs":[[67968,67999]],"Script/Sundanese":[[7040,7103],[7360,7367]],"Script/Hebrew":[[1425,1479],[1488,1514],[1519,1524],[64285,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64335]],"Script/Old_Turkic":[[68608,68680]],"Script/Coptic":[[994,1007],[11392,11507],[11513,11519]],"Script/Myanmar":[[4096,4255],[43488,43518],[43616,43647]],"Script/Bopomofo":[[746,747],[12549,12591],[12704,12735]],"Script/Tagbanwa":[[5984,5996],[5998,6000],[6002,6003]],"Script/Meetei_Mayek":[[43744,43766],[43968,44013],[44016,44025]],"Script/Lisu":[[42192,42239],[73648,73648]],"Script/Vai":[[42240,42539]],"Script/Ol_Chiki":[[7248,7295]],"Script/Saurashtra":[[43136,43205],[43214,43225]],"Script/Sinhala":[[3457,3459],[3461,3478],[3482,3505],[3507,3515],[3517,3517],[3520,3526],[3530,3530],[3535,3540],[3542,3542],[3544,3551],[3558,3567],[3570,3572],[70113,70132]],"Script/Anatolian_Hieroglyphs":[[82944,83526]],"Script/Georgian":[[4256,4293],[4295,4295],[4301,4301],[4304,4346],[4348,4351],[7312,7354],[7357,7359],[11520,11557],[11559,11559],[11565,11565]],"Script/Malayalam":[[3328,3340],[3342,3344],[3346,3396],[3398,3400],[3402,3407],[3412,3427],[3430,3455]],"Script/Khudawadi":[[70320,70378],[70384,70393]],"Script/Dives_Akuru":[[71936,71942],[71945,71945],[71948,71955],[71957,71958],[71960,71989],[71991,71992],[71995,72006],[72016,72025]],"Script/Kharoshthi":[[68096,68099],[68101,68102],[68108,68115],[68117,68119],[68121,68149],[68152,68154],[68159,68168],[68176,68184]],"Script/Miao":[[93952,94026],[94031,94087],[94095,94111]],"Script/Gothic":[[66352,66378]],"Script/Nabataean":[[67712,67742],[67751,67759]],"Script/Tangut":[[94176,94176],[94208,100343],[100352,101119],[101632,101640]],"Script/Bassa_Vah":[[92880,92909],[92912,92917]],"Script/Buginese":[[6656,6683],[6686,6687]],"Script/Ogham":[[5760,5788]],"Script/Buhid":[[5952,5971]],"Script/Lepcha":[[7168,7223],[7227,7241],[7245,7247]],"Script/Katakana":[[12449,12538],[12541,12543],[12784,12799],[13008,13054],[13056,13143],[65382,65391],[65393,65437],[110576,110579],[110581,110587],[110589,110590],[110592,110592],[110880,110882],[110933,110933],[110948,110951]],"Script/Armenian":[[1329,1366],[1369,1418],[1421,1423],[64275,64279]],"Script/Sharada":[[70016,70111]],"Script/Limbu":[[6400,6430],[6432,6443],[6448,6459],[6464,6464],[6468,6479]],"Script/Thaana":[[1920,1969]],"Script/Newa":[[70656,70747],[70749,70753]],"Script/Syloti_Nagri":[[43008,43052]],"Script/SignWriting":[[120832,121483],[121499,121503],[121505,121519]],"Script/Lycian":[[66176,66204]],"Script/Cuneiform":[[73728,74649],[74752,74862],[74864,74868],[74880,75075]],"Script/Toto":[[123536,123566]],"Script/Elbasan":[[66816,66855]],"Script/Ethiopic":[[4608,4680],[4682,4685],[4688,4694],[4696,4696],[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],[4800,4800],[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4957,4988],[4992,5017],[11648,11670],[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822],[124896,124902],[124904,124907],[124909,124910],[124912,124926]],"Script/Siddham":[[71040,71093],[71096,71133]],"Script/Old_Hungarian":[[68736,68786],[68800,68850],[68858,68863]],"Script/Tai_Tham":[[6688,6750],[6752,6780],[6783,6793],[6800,6809],[6816,6829]],"Script/Zanabazar_Square":[[72192,72263]],"Script/Nushu":[[94177,94177],[110960,111355]],"Script/Bengali":[[2432,2435],[2437,2444],[2447,2448],[2451,2472],[2474,2480],[2482,2482],[2486,2489],[2492,2500],[2503,2504],[2507,2510],[2519,2519],[2524,2525],[2527,2531],[2534,2558]],"Script/Vithkuqi":[[66928,66938],[66940,66954],[66956,66962],[66964,66965],[66967,66977],[66979,66993],[66995,67001],[67003,67004]],"Script/Ahom":[[71424,71450],[71453,71467],[71472,71494]],"Script/Tamil":[[2946,2947],[2949,2954],[2958,2960],[2962,2965],[2969,2970],[2972,2972],[2974,2975],[2979,2980],[2984,2986],[2990,3001],[3006,3010],[3014,3016],[3018,3021],[3024,3024],[3031,3031],[3046,3066],[73664,73713],[73727,73727]],"Script/Kayah_Li":[[43264,43309],[43311,43311]],"Script/Kawi":[[73472,73488],[73490,73530],[73534,73561]],"Script/Brahmi":[[69632,69709],[69714,69749],[69759,69759]],"Script/Telugu":[[3072,3084],[3086,3088],[3090,3112],[3114,3129],[3132,3140],[3142,3144],[3146,3149],[3157,3158],[3160,3162],[3165,3165],[3168,3171],[3174,3183],[3191,3199]],"Script/Egyptian_Hieroglyphs":[[77824,78933]],"Script/Hanunoo":[[5920,5940]],"Script/Tirhuta":[[70784,70855],[70864,70873]],"Script/Caucasian_Albanian":[[66864,66915],[66927,66927]],"Script/Old_Sogdian":[[69376,69415]],"Script/Thai":[[3585,3642],[3648,3675]],"Script/Tifinagh":[[11568,11623],[11631,11632],[11647,11647]],"Script/Cypriot":[[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67647]],"Script/Linear_A":[[67072,67382],[67392,67413],[67424,67431]],"Script/Tibetan":[[3840,3911],[3913,3948],[3953,3991],[3993,4028],[4030,4044],[4046,4052],[4057,4058]],"Script/Lydian":[[67872,67897],[67903,67903]],"Script/Soyombo":[[72272,72354]],"Script/Osage":[[66736,66771],[66776,66811]],"Script/Tai_Viet":[[43648,43714],[43739,43743]],"Script/Carian":[[66208,66256]],"Script/Mandaic":[[2112,2139],[2142,2142]],"Script/Braille":[[10240,10495]],"Script/Chorasmian":[[69552,69579]],"Script/Sogdian":[[69424,69465]],"Script/Lao":[[3713,3714],[3716,3716],[3718,3722],[3724,3747],[3749,3749],[3751,3773],[3776,3780],[3782,3782],[3784,3790],[3792,3801],[3804,3807]],"Script/Nandinagari":[[72096,72103],[72106,72151],[72154,72164]],"Script/Khmer":[[6016,6109],[6112,6121],[6128,6137],[6624,6655]],"Script/Makasar":[[73440,73464]],"Script/Syriac":[[1792,1805],[1807,1866],[1869,1871],[2144,2154]],"Script/Sora_Sompeng":[[69840,69864],[69872,69881]],"Script/Mende_Kikakui":[[124928,125124],[125127,125142]],"Script/Samaritan":[[2048,2093],[2096,2110]],"Script/Rejang":[[43312,43347],[43359,43359]],"Script/Old_North_Arabian":[[68224,68255]],"Script/Marchen":[[72816,72847],[72850,72871],[72873,72886]],"Script/Wancho":[[123584,123641],[123647,123647]],"Script/Gurmukhi":[[2561,2563],[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2620,2620],[2622,2626],[2631,2632],[2635,2637],[2641,2641],[2649,2652],[2654,2654],[2662,2678]],"Script/Gujarati":[[2689,2691],[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],[2748,2757],[2759,2761],[2763,2765],[2768,2768],[2784,2787],[2790,2801],[2809,2815]],"Script/Linear_B":[[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786]],"Script/Imperial_Aramaic":[[67648,67669],[67671,67679]],"Script/Runic":[[5792,5866],[5870,5880]],"Script/Elymaic":[[69600,69622]],"Script/Old_Persian":[[66464,66499],[66504,66517]],"Script/Grantha":[[70400,70403],[70405,70412],[70415,70416],[70419,70440],[70442,70448],[70450,70451],[70453,70457],[70460,70468],[70471,70472],[70475,70477],[70480,70480],[70487,70487],[70493,70499],[70502,70508],[70512,70516]],"Script/Yezidi":[[69248,69289],[69291,69293],[69296,69297]],"Script/Chakma":[[69888,69940],[69942,69959]],"Script/Tagalog":[[5888,5909],[5919,5919]],"Script/Mahajani":[[69968,70006]],"Script/Old_Uyghur":[[69488,69513]],"Script/Cherokee":[[5024,5109],[5112,5117],[43888,43967]],"Script/Hangul":[[4352,4607],[12334,12335],[12593,12686],[12800,12830],[12896,12926],[43360,43388],[44032,55203],[55216,55238],[55243,55291],[65440,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500]],"Script/New_Tai_Lue":[[6528,6571],[6576,6601],[6608,6618],[6622,6623]],"Script/Manichaean":[[68288,68326],[68331,68342]],"Script/Yi":[[40960,42124],[42128,42182]],"Script/Oriya":[[2817,2819],[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2876,2884],[2887,2888],[2891,2893],[2901,2903],[2908,2909],[2911,2915],[2918,2935]],"Script/Ugaritic":[[66432,66461],[66463,66463]],"Script/Avestan":[[68352,68405],[68409,68415]],"Script/Glagolitic":[[11264,11359],[122880,122886],[122888,122904],[122907,122913],[122915,122916],[122918,122922]],"Script/Kannada":[[3200,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],[3260,3268],[3270,3272],[3274,3277],[3285,3286],[3293,3294],[3296,3299],[3302,3311],[3313,3315]],"Script/Nag_Mundari":[[124112,124153]],"Script/Osmanya":[[66688,66717],[66720,66729]],"Script/Hanifi_Rohingya":[[68864,68903],[68912,68921]],"Script/Masaram_Gondi":[[72960,72966],[72968,72969],[72971,73014],[73018,73018],[73020,73021],[73023,73031],[73040,73049]],"Script/Mro":[[92736,92766],[92768,92777],[92782,92783]],"Script/Mongolian":[[6144,6145],[6148,6148],[6150,6169],[6176,6264],[6272,6314],[71264,71276]],"Script/Takri":[[71296,71353],[71360,71369]],"Script/Inscriptional_Pahlavi":[[68448,68466],[68472,68479]],"Script/Greek":[[880,883],[885,887],[890,893],[895,895],[900,900],[902,902],[904,906],[908,908],[910,929],[931,993],[1008,1023],[7462,7466],[7517,7521],[7526,7530],[7615,7615],[7936,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025,8025],[8027,8027],[8029,8029],[8031,8061],[8064,8116],[8118,8132],[8134,8147],[8150,8155],[8157,8175],[8178,8180],[8182,8190],[8486,8486],[43877,43877],[65856,65934],[65952,65952],[119296,119365]],"Script/Adlam":[[125184,125259],[125264,125273],[125278,125279]],"Script/Hiragana":[[12353,12438],[12445,12447],[110593,110879],[110898,110898],[110928,110930],[127488,127488]],"Script/Nyiakeng_Puachue_Hmong":[[123136,123180],[123184,123197],[123200,123209],[123214,123215]],"Script/Shavian":[[66640,66687]],"Script/Kaithi":[[69760,69826],[69837,69837]],"Script/Hatran":[[67808,67826],[67828,67829],[67835,67839]],"Script/Medefaidrin":[[93760,93850]],"Block/Javanese":[[43392,43487]],"Block/Latin_Extended_C":[[11360,11391]],"Block/Latin_Extended_Additional":[[7680,7935]],"Block/Dogra":[[71680,71759]],"Block/Deseret":[[66560,66639]],"Block/Bhaiksuki":[[72704,72815]],"Block/Miscellaneous_Symbols_And_Arrows":[[11008,11263]],"Block/Phoenician":[[67840,67871]],"Block/Variation_Selectors":[[65024,65039]],"Block/Pau_Cin_Hau":[[72384,72447]],"Block/Meroitic_Cursive":[[68000,68095]],"Block/Playing_Cards":[[127136,127231]],"Block/Specials":[[65520,65535]],"Block/Warang_Citi":[[71840,71935]],"Block/Myanmar_Extended_A":[[43616,43647]],"Block/Balinese":[[6912,7039]],"Block/Khitan_Small_Script":[[101120,101631]],"Block/Latin_Extended_B":[[384,591]],"Block/Combining_Half_Marks":[[65056,65071]],"Block/Tai_Le":[[6480,6527]],"Block/Modi":[[71168,71263]],"Block/CJK_Unified_Ideographs_Extension_E":[[178208,183983]],"Block/Psalter_Pahlavi":[[68480,68527]],"Block/Old_Italic":[[66304,66351]],"Block/Kanbun":[[12688,12703]],"Block/Bamum":[[42656,42751]],"Block/Basic_Latin":[[0,127]],"Block/Palmyrene":[[67680,67711]],"Block/Egyptian_Hieroglyph_Format_Controls":[[78896,78943]],"Block/Batak":[[7104,7167]],"Block/Cham":[[43520,43615]],"Block/Arabic_Presentation_Forms_B":[[65136,65279]],"Block/Pahawh_Hmong":[[92928,93071]],"Block/Arabic_Mathematical_Alphabetic_Symbols":[[126464,126719]],"Block/CJK_Unified_Ideographs_Extension_D":[[177984,178207]],"Block/Ancient_Greek_Numbers":[[65856,65935]],"Block/Spacing_Modifier_Letters":[[688,767]],"Block/Number_Forms":[[8528,8591]],"Block/Arabic":[[1536,1791]],"Block/Cypro_Minoan":[[77712,77823]],"Block/Devanagari_Extended":[[43232,43263]],"Block/undefined":[[2160,2207],[66928,67007],[67456,67519],[69248,69375],[69488,69631],[71936,72031],[72096,72191],[72368,72383],[72448,72543],[73472,73567],[73648,73727],[77712,77823],[78896,78943],[92784,92879],[101120,101759],[110576,110591],[110896,110959],[118528,118735],[119488,119519],[122624,122879],[122928,123023],[123136,123215],[123536,123647],[124112,124159],[124896,124927],[126208,126287],[129648,130047],[196608,205743]],"Block/Sutton_SignWriting":[[120832,121519]],"Block/CJK_Unified_Ideographs_Extension_A":[[13312,19903]],"Block/Old_Permic":[[66384,66431]],"Block/Devanagari":[[2304,2431]],"Block/Supplemental_Arrows_C":[[129024,129279]],"Block/Phags_Pa":[[43072,43135]],"Block/Yijing_Hexagram_Symbols":[[19904,19967]],"Block/Cyrillic_Extended_A":[[11744,11775]],"Block/Tangsa":[[92784,92879]],"Block/Duployan":[[113664,113823]],"Block/Linear_B_Syllabary":[[65536,65663]],"Block/Box_Drawing":[[9472,9599]],"Block/Arabic_Extended_A":[[2208,2303]],"Block/Miscellaneous_Symbols_And_Pictographs":[[127744,128511]],"Block/Cyrillic":[[1024,1279]],"Block/Ideographic_Symbols_And_Punctuation":[[94176,94207]],"Block/Cyrillic_Extended_B":[[42560,42655]],"Block/Ethiopic_Extended_B":[[124896,124927]],"Block/Miscellaneous_Mathematical_Symbols_B":[[10624,10751]],"Block/Inscriptional_Parthian":[[68416,68447]],"Block/Meetei_Mayek_Extensions":[[43744,43775]],"Block/Yi_Syllables":[[40960,42127]],"Block/Multani":[[70272,70319]],"Block/Old_South_Arabian":[[68192,68223]],"Block/CJK_Compatibility_Ideographs_Supplement":[[194560,195103]],"Block/Lisu_Supplement":[[73648,73663]],"Block/Mongolian_Supplement":[[71264,71295]],"Block/Arabic_Extended_C":[[69312,69375]],"Block/Khojki":[[70144,70223]],"Block/Gunjala_Gondi":[[73056,73135]],"Block/Meroitic_Hieroglyphs":[[67968,67999]],"Block/Sundanese":[[7040,7103]],"Block/Low_Surrogates":[[56320,57343]],"Block/Hebrew":[[1424,1535]],"Block/Mathematical_Operators":[[8704,8959]],"Block/Geometric_Shapes":[[9632,9727]],"Block/Mayan_Numerals":[[119520,119551]],"Block/Enclosed_Ideographic_Supplement":[[127488,127743]],"Block/Emoticons":[[128512,128591]],"Block/Old_Turkic":[[68608,68687]],"Block/Enclosed_Alphanumeric_Supplement":[[127232,127487]],"Block/Coptic":[[11392,11519]],"Block/Kana_Extended_A":[[110848,110895]],"Block/Ottoman_Siyaq_Numbers":[[126208,126287]],"Block/Myanmar":[[4096,4255]],"Block/Ancient_Greek_Musical_Notation":[[119296,119375]],"Block/Bopomofo":[[12544,12591]],"Block/Tagbanwa":[[5984,6015]],"Block/Meetei_Mayek":[[43968,44031]],"Block/Lisu":[[42192,42239]],"Block/Supplemental_Symbols_And_Pictographs":[[129280,129535]],"Block/Vai":[[42240,42559]],"Block/Ol_Chiki":[[7248,7295]],"Block/Vedic_Extensions":[[7376,7423]],"Block/Saurashtra":[[43136,43231]],"Block/Sinhala":[[3456,3583]],"Block/Georgian_Extended":[[7312,7359]],"Block/Syriac_Supplement":[[2144,2159]],"Block/Anatolian_Hieroglyphs":[[82944,83583]],"Block/Georgian":[[4256,4351]],"Block/Kana_Supplement":[[110592,110847]],"Block/Combining_Diacritical_Marks_Supplement":[[7616,7679]],"Block/Myanmar_Extended_B":[[43488,43519]],"Block/Malayalam":[[3328,3455]],"Block/Khudawadi":[[70320,70399]],"Block/Arrows":[[8592,8703]],"Block/Dives_Akuru":[[71936,72031]],"Block/Supplementary_Private_Use_Area_B":[[1048576,1114111]],"Block/Hangul_Compatibility_Jamo":[[12592,12687]],"Block/Vertical_Forms":[[65040,65055]],"Block/Latin_Extended_A":[[256,383]],"Block/Kharoshthi":[[68096,68191]],"Block/Musical_Symbols":[[119040,119295]],"Block/Miao":[[93952,94111]],"Block/Gothic":[[66352,66383]],"Block/Nabataean":[[67712,67759]],"Block/Supplemental_Arrows_A":[[10224,10239]],"Block/Miscellaneous_Symbols":[[9728,9983]],"Block/Tangut":[[94208,100351]],"Block/Bassa_Vah":[[92880,92927]],"Block/Buginese":[[6656,6687]],"Block/Letterlike_Symbols":[[8448,8527]],"Block/Ogham":[[5760,5791]],"Block/Buhid":[[5952,5983]],"Block/Control_Pictures":[[9216,9279]],"Block/Lepcha":[[7168,7247]],"Block/Katakana":[[12448,12543]],"Block/Supplemental_Punctuation":[[11776,11903]],"Block/Indic_Siyaq_Numbers":[[126064,126143]],"Block/Small_Kana_Extension":[[110896,110959]],"Block/CJK_Compatibility":[[13056,13311]],"Block/Armenian":[[1328,1423]],"Block/Sharada":[[70016,70111]],"Block/Greek_And_Coptic":[[880,1023]],"Block/Enclosed_Alphanumerics":[[9312,9471]],"Block/Bopomofo_Extended":[[12704,12735]],"Block/Ethiopic_Supplement":[[4992,5023]],"Block/Limbu":[[6400,6479]],"Block/Tangut_Supplement":[[101632,101759]],"Block/Thaana":[[1920,1983]],"Block/Newa":[[70656,70783]],"Block/Tags":[[917504,917631]],"Block/Symbols_For_Legacy_Computing":[[129792,130047]],"Block/Syloti_Nagri":[[43008,43055]],"Block/General_Punctuation":[[8192,8303]],"Block/Common_Indic_Number_Forms":[[43056,43071]],"Block/Lycian":[[66176,66207]],"Block/Kana_Extended_B":[[110576,110591]],"Block/CJK_Symbols_And_Punctuation":[[12288,12351]],"Block/Symbols_And_Pictographs_Extended_A":[[129648,129791]],"Block/Cuneiform":[[73728,74751]],"Block/Unified_Canadian_Aboriginal_Syllabics_Extended":[[6320,6399]],"Block/Toto":[[123536,123583]],"Block/Elbasan":[[66816,66863]],"Block/Cypriot_Syllabary":[[67584,67647]],"Block/Glagolitic_Supplement":[[122880,122927]],"Block/Phaistos_Disc":[[66000,66047]],"Block/Miscellaneous_Mathematical_Symbols_A":[[10176,10223]],"Block/Combining_Diacritical_Marks_Extended":[[6832,6911]],"Block/Sundanese_Supplement":[[7360,7375]],"Block/Early_Dynastic_Cuneiform":[[74880,75087]],"Block/Mahjong_Tiles":[[126976,127023]],"Block/Braille_Patterns":[[10240,10495]],"Block/Variation_Selectors_Supplement":[[917760,917999]],"Block/Ethiopic":[[4608,4991]],"Block/Siddham":[[71040,71167]],"Block/Ancient_Symbols":[[65936,65999]],"Block/Supplementary_Private_Use_Area_A":[[983040,1048575]],"Block/Old_Hungarian":[[68736,68863]],"Block/Tai_Tham":[[6688,6831]],"Block/Zanabazar_Square":[[72192,72271]],"Block/Nushu":[[110960,111359]],"Block/Latin_1_Supplement":[[128,255]],"Block/Cyrillic_Extended_D":[[122928,123023]],"Block/Bengali":[[2432,2559]],"Block/Vithkuqi":[[66928,67007]],"Block/Ahom":[[71424,71503]],"Block/Kaktovik_Numerals":[[119488,119519]],"Block/Tamil":[[2944,3071]],"Block/Bamum_Supplement":[[92160,92735]],"Block/Kayah_Li":[[43264,43311]],"Block/Alphabetic_Presentation_Forms":[[64256,64335]],"Block/Kangxi_Radicals":[[12032,12255]],"Block/Latin_Extended_E":[[43824,43887]],"Block/Dingbats":[[9984,10175]],"Block/Kawi":[[73472,73567]],"Block/Enclosed_CJK_Letters_And_Months":[[12800,13055]],"Block/Currency_Symbols":[[8352,8399]],"Block/Aegean_Numbers":[[65792,65855]],"Block/Brahmi":[[69632,69759]],"Block/Combining_Diacritical_Marks":[[768,879]],"Block/CJK_Unified_Ideographs_Extension_G":[[196608,201551]],"Block/Arabic_Presentation_Forms_A":[[64336,65023]],"Block/Telugu":[[3072,3199]],"Block/Egyptian_Hieroglyphs":[[77824,78895]],"Block/Hanunoo":[[5920,5951]],"Block/CJK_Unified_Ideographs_Extension_H":[[201552,205743]],"Block/Tirhuta":[[70784,70879]],"Block/Hangul_Jamo_Extended_A":[[43360,43391]],"Block/Caucasian_Albanian":[[66864,66927]],"Block/Linear_B_Ideograms":[[65664,65791]],"Block/Counting_Rod_Numerals":[[119648,119679]],"Block/Block_Elements":[[9600,9631]],"Block/Old_Sogdian":[[69376,69423]],"Block/Thai":[[3584,3711]],"Block/Tifinagh":[[11568,11647]],"Block/Ideographic_Description_Characters":[[12272,12287]],"Block/Linear_A":[[67072,67455]],"Block/Optical_Character_Recognition":[[9280,9311]],"Block/CJK_Radicals_Supplement":[[11904,12031]],"Block/Tamil_Supplement":[[73664,73727]],"Block/Tibetan":[[3840,4095]],"Block/Znamenny_Musical_Notation":[[118528,118735]],"Block/High_Private_Use_Surrogates":[[56192,56319]],"Block/Lydian":[[67872,67903]],"Block/Private_Use_Area":[[57344,63743]],"Block/Arabic_Supplement":[[1872,1919]],"Block/Soyombo":[[72272,72367]],"Block/Osage":[[66736,66815]],"Block/CJK_Unified_Ideographs_Extension_B":[[131072,173791]],"Block/Small_Form_Variants":[[65104,65135]],"Block/Tai_Viet":[[43648,43743]],"Block/IPA_Extensions":[[592,687]],"Block/Carian":[[66208,66271]],"Block/Phonetic_Extensions_Supplement":[[7552,7615]],"Block/Mandaic":[[2112,2143]],"Block/Supplemental_Mathematical_Operators":[[10752,11007]],"Block/Hangul_Syllables":[[44032,55215]],"Block/Chorasmian":[[69552,69599]],"Block/Tai_Xuan_Jing_Symbols":[[119552,119647]],"Block/Katakana_Phonetic_Extensions":[[12784,12799]],"Block/Sogdian":[[69424,69487]],"Block/Lao":[[3712,3839]],"Block/Byzantine_Musical_Symbols":[[118784,119039]],"Block/Nandinagari":[[72096,72191]],"Block/Khmer":[[6016,6143]],"Block/Makasar":[[73440,73471]],"Block/Syriac":[[1792,1871]],"Block/Sora_Sompeng":[[69840,69887]],"Block/Mende_Kikakui":[[124928,125151]],"Block/Samaritan":[[2048,2111]],"Block/Rejang":[[43312,43359]],"Block/Tangut_Components":[[100352,101119]],"Block/CJK_Unified_Ideographs_Extension_C":[[173824,177983]],"Block/Old_North_Arabian":[[68224,68255]],"Block/Marchen":[[72816,72895]],"Block/Wancho":[[123584,123647]],"Block/Yi_Radicals":[[42128,42191]],"Block/CJK_Unified_Ideographs_Extension_F":[[183984,191471]],"Block/Gurmukhi":[[2560,2687]],"Block/Gujarati":[[2688,2815]],"Block/Supplemental_Arrows_B":[[10496,10623]],"Block/Imperial_Aramaic":[[67648,67679]],"Block/Runic":[[5792,5887]],"Block/NKo":[[1984,2047]],"Block/CJK_Compatibility_Forms":[[65072,65103]],"Block/Latin_Extended_F":[[67456,67519]],"Block/Modifier_Tone_Letters":[[42752,42783]],"Block/CJK_Unified_Ideographs":[[19968,40959]],"Block/Elymaic":[[69600,69631]],"Block/Cyrillic_Supplement":[[1280,1327]],"Block/Old_Persian":[[66464,66527]],"Block/Grantha":[[70400,70527]],"Block/Yezidi":[[69248,69311]],"Block/Miscellaneous_Technical":[[8960,9215]],"Block/Cyrillic_Extended_C":[[7296,7311]],"Block/Chakma":[[69888,69967]],"Block/Ethiopic_Extended":[[11648,11743]],"Block/Tagalog":[[5888,5919]],"Block/Arabic_Extended_B":[[2160,2207]],"Block/Geometric_Shapes_Extended":[[128896,129023]],"Block/Sinhala_Archaic_Numbers":[[70112,70143]],"Block/Mahajani":[[69968,70015]],"Block/Latin_Extended_D":[[42784,43007]],"Block/Coptic_Epact_Numbers":[[66272,66303]],"Block/Domino_Tiles":[[127024,127135]],"Block/Chess_Symbols":[[129536,129647]],"Block/Greek_Extended":[[7936,8191]],"Block/High_Surrogates":[[55296,56191]],"Block/Old_Uyghur":[[69488,69551]],"Block/Cherokee_Supplement":[[43888,43967]],"Block/Cherokee":[[5024,5119]],"Block/Unified_Canadian_Aboriginal_Syllabics":[[5120,5759]],"Block/Latin_Extended_G":[[122624,122879]],"Block/Phonetic_Extensions":[[7424,7551]],"Block/Rumi_Numeral_Symbols":[[69216,69247]],"Block/New_Tai_Lue":[[6528,6623]],"Block/Manichaean":[[68288,68351]],"Block/Shorthand_Format_Controls":[[113824,113839]],"Block/Oriya":[[2816,2943]],"Block/Ornamental_Dingbats":[[128592,128639]],"Block/Ugaritic":[[66432,66463]],"Block/Avestan":[[68352,68415]],"Block/Glagolitic":[[11264,11359]],"Block/Alchemical_Symbols":[[128768,128895]],"Block/Kannada":[[3200,3327]],"Block/CJK_Strokes":[[12736,12783]],"Block/Combining_Diacritical_Marks_For_Symbols":[[8400,8447]],"Block/Nag_Mundari":[[124112,124159]],"Block/Devanagari_Extended_A":[[72448,72543]],"Block/Halfwidth_And_Fullwidth_Forms":[[65280,65519]],"Block/Osmanya":[[66688,66735]],"Block/Hanifi_Rohingya":[[68864,68927]],"Block/Masaram_Gondi":[[72960,73055]],"Block/Mro":[[92736,92783]],"Block/Mongolian":[[6144,6319]],"Block/Ethiopic_Extended_A":[[43776,43823]],"Block/Takri":[[71296,71375]],"Block/Inscriptional_Pahlavi":[[68448,68479]],"Block/Adlam":[[125184,125279]],"Block/Hangul_Jamo_Extended_B":[[55216,55295]],"Block/Hiragana":[[12352,12447]],"Block/Georgian_Supplement":[[11520,11567]],"Block/Unified_Canadian_Aboriginal_Syllabics_Extended_A":[[72368,72383]],"Block/Nyiakeng_Puachue_Hmong":[[123136,123215]],"Block/Superscripts_And_Subscripts":[[8304,8351]],"Block/Shavian":[[66640,66687]],"Block/Hangul_Jamo":[[4352,4607]],"Block/Mathematical_Alphanumeric_Symbols":[[119808,120831]],"Block/CJK_Compatibility_Ideographs":[[63744,64255]],"Block/Transport_And_Map_Symbols":[[128640,128767]],"Block/Khmer_Symbols":[[6624,6655]],"Block/Kaithi":[[69760,69839]],"Block/Cuneiform_Numbers_And_Punctuation":[[74752,74879]],"Block/Hatran":[[67808,67839]],"Block/Medefaidrin":[[93760,93855]]};

  // @ts-nocheck

  // #table-nonbinary-unicode-properties
  const NonbinaryUnicodeProperties = {
    General_Category: 'General_Category',
    gc: 'General_Category',
    Script: 'Script',
    sc: 'Script',
    Script_Extensions: 'Script_Extensions',
    scx: 'Script_Extensions'
  };
  Object.setPrototypeOf(NonbinaryUnicodeProperties, null);

  // #table-binary-unicode-properties
  const BinaryUnicodeProperties = {
    ASCII: 'ASCII',
    ASCII_Hex_Digit: 'ASCII_Hex_Digit',
    AHex: 'ASCII_Hex_Digit',
    Alphabetic: 'Alphabetic',
    Alpha: 'Alphabetic',
    Any: 'Any',
    Assigned: 'Assigned',
    Bidi_Control: 'Bidi_Control',
    Bidi_C: 'Bidi_Control',
    Bidi_Mirrored: 'Bidi_Mirrored',
    Bidi_M: 'Bidi_Mirrored',
    Case_Ignorable: 'Case_Ignorable',
    CI: 'Case_Ignorable',
    Cased: 'Cased',
    Changes_When_Casefolded: 'Changes_When_Casefolded',
    CWCF: 'Changes_When_Casefolded',
    Changes_When_Casemapped: 'Changes_When_Casemapped',
    CWCM: 'Changes_When_Casemapped',
    Changes_When_Lowercased: 'Changes_When_Lowercased',
    CWL: 'Changes_When_Lowercased',
    Changes_When_NFKC_Casefolded: 'Changes_When_NFKC_Casefolded',
    CWKCF: 'Changes_When_NFKC_Casefolded',
    Changes_When_Titlecased: 'Changes_When_Titlecased',
    CWT: 'Changes_When_Titlecased',
    Changes_When_Uppercased: 'Changes_When_Uppercased',
    CWU: 'Changes_When_Uppercased',
    Dash: 'Dash',
    Default_Ignorable_Code_Point: 'Default_Ignorable_Code_Point',
    DI: 'Default_Ignorable_Code_Point',
    Deprecated: 'Deprecated',
    Dep: 'Deprecated',
    Diacritic: 'Diacritic',
    Dia: 'Diacritic',
    Emoji: 'Emoji',
    Emoji_Component: 'Emoji_Component',
    EComp: 'Emoji_Component',
    Emoji_Modifier: 'Emoji_Modifier',
    EMod: 'Emoji_Modifier',
    Emoji_Modifier_Base: 'Emoji_Modifier_Base',
    EBase: 'Emoji_Modifier_Base',
    Emoji_Presentation: 'Emoji_Presentation',
    EPres: 'Emoji_Presentation',
    Extended_Pictographic: 'Extended_Pictographic',
    ExtPict: 'Extended_Pictographic',
    Extender: 'Extender',
    Ext: 'Extender',
    Grapheme_Base: 'Grapheme_Base',
    Gr_Base: 'Grapheme_Base',
    Grapheme_Extend: 'Grapheme_Extend',
    Gr_Ext: 'Grapheme_Extend',
    Hex_Digit: 'Hex_Digit',
    Hex: 'Hex_Digit',
    IDS_Binary_Operator: 'IDS_Binary_Operator',
    IDSB: 'IDS_Binary_Operator',
    IDS_Trinary_Operator: 'IDS_Trinary_Operator',
    IDST: 'IDS_Trinary_Operator',
    ID_Continue: 'ID_Continue',
    IDC: 'ID_Continue',
    ID_Start: 'ID_Start',
    IDS: 'ID_Start',
    Ideographic: 'Ideographic',
    Ideo: 'Ideographic',
    Join_Control: 'Join_Control',
    Join_C: 'Join_Control',
    Logical_Order_Exception: 'Logical_Order_Exception',
    LOE: 'Logical_Order_Exception',
    Lowercase: 'Lowercase',
    Lower: 'Lowercase',
    Math: 'Math',
    Noncharacter_Code_Point: 'Noncharacter_Code_Point',
    NChar: 'Noncharacter_Code_Point',
    Pattern_Syntax: 'Pattern_Syntax',
    Pat_Syn: 'Pattern_Syntax',
    Pattern_White_Space: 'Pattern_White_Space',
    Pat_WS: 'Pattern_White_Space',
    Quotation_Mark: 'Quotation_Mark',
    QMark: 'Quotation_Mark',
    Radical: 'Radical',
    Regional_Indicator: 'Regional_Indicator',
    RI: 'Regional_Indicator',
    Sentence_Terminal: 'Sentence_Terminal',
    STerm: 'Sentence_Terminal',
    Soft_Dotted: 'Soft_Dotted',
    SD: 'Soft_Dotted',
    Terminal_Punctuation: 'Terminal_Punctuation',
    Term: 'Terminal_Punctuation',
    Unified_Ideograph: 'Unified_Ideograph',
    UIdeo: 'Unified_Ideograph',
    Uppercase: 'Uppercase',
    Upper: 'Uppercase',
    Variation_Selector: 'Variation_Selector',
    VS: 'Variation_Selector',
    White_Space: 'White_Space',
    space: 'White_Space',
    XID_Continue: 'XID_Continue',
    XIDC: 'XID_Continue',
    XID_Start: 'XID_Start',
    XIDS: 'XID_Start'
  };
  Object.setPrototypeOf(BinaryUnicodeProperties, null);

  // #table-unicode-general-category-values
  const UnicodeGeneralCategoryValues = {
    Cased_Letter: 'Cased_Letter',
    LC: 'Cased_Letter',
    Close_Punctuation: 'Close_Punctuation',
    Pe: 'Close_Punctuation',
    Connector_Punctuation: 'Connector_Punctuation',
    Pc: 'Connector_Punctuation',
    Control: 'Control',
    Cc: 'Control',
    cntrl: 'Control',
    Currency_Symbol: 'Currency_Symbol',
    Sc: 'Currency_Symbol',
    Dash_Punctuation: 'Dash_Punctuation',
    Pd: 'Dash_Punctuation',
    Decimal_Number: 'Decimal_Number',
    Nd: 'Decimal_Number',
    digit: 'Decimal_Number',
    Enclosing_Mark: 'Enclosing_Mark',
    Me: 'Enclosing_Mark',
    Final_Punctuation: 'Final_Punctuation',
    Pf: 'Final_Punctuation',
    Format: 'Format',
    Cf: 'Format',
    Initial_Punctuation: 'Initial_Punctuation',
    Pi: 'Initial_Punctuation',
    Letter: 'Letter',
    L: 'Letter',
    Letter_Number: 'Letter_Number',
    Nl: 'Letter_Number',
    Line_Separator: 'Line_Separator',
    Zl: 'Line_Separator',
    Lowercase_Letter: 'Lowercase_Letter',
    Ll: 'Lowercase_Letter',
    Mark: 'Mark',
    M: 'Mark',
    Combining_Mark: 'Mark',
    Math_Symbol: 'Math_Symbol',
    Sm: 'Math_Symbol',
    Modifier_Letter: 'Modifier_Letter',
    Lm: 'Modifier_Letter',
    Modifier_Symbol: 'Modifier_Symbol',
    Sk: 'Modifier_Symbol',
    Nonspacing_Mark: 'Nonspacing_Mark',
    Mn: 'Nonspacing_Mark',
    Number: 'Number',
    N: 'Number',
    Open_Punctuation: 'Open_Punctuation',
    Ps: 'Open_Punctuation',
    Other: 'Other',
    C: 'Other',
    Other_Letter: 'Other_Letter',
    Lo: 'Other_Letter',
    Other_Number: 'Other_Number',
    No: 'Other_Number',
    Other_Punctuation: 'Other_Punctuation',
    Po: 'Other_Punctuation',
    Other_Symbol: 'Other_Symbol',
    So: 'Other_Symbol',
    Paragraph_Separator: 'Paragraph_Separator',
    Zp: 'Paragraph_Separator',
    Private_Use: 'Private_Use',
    Co: 'Private_Use',
    Punctuation: 'Punctuation',
    P: 'Punctuation',
    punct: 'Punctuation',
    Separator: 'Separator',
    Z: 'Separator',
    Space_Separator: 'Space_Separator',
    Zs: 'Space_Separator',
    Spacing_Mark: 'Spacing_Mark',
    Mc: 'Spacing_Mark',
    Surrogate: 'Surrogate',
    Cs: 'Surrogate',
    Symbol: 'Symbol',
    S: 'Symbol',
    Titlecase_Letter: 'Titlecase_Letter',
    Lt: 'Titlecase_Letter',
    Unassigned: 'Unassigned',
    Cn: 'Unassigned',
    Uppercase_Letter: 'Uppercase_Letter',
    Lu: 'Uppercase_Letter'
  };
  Object.setPrototypeOf(UnicodeGeneralCategoryValues, null);

  // #table-unicode-script-values
  const UnicodeScriptValues = {
    Adlam: 'Adlam',
    Adlm: 'Adlam',
    Ahom: 'Ahom',
    Anatolian_Hieroglyphs: 'Anatolian_Hieroglyphs',
    Hluw: 'Anatolian_Hieroglyphs',
    Arabic: 'Arabic',
    Arab: 'Arabic',
    Armenian: 'Armenian',
    Armn: 'Armenian',
    Avestan: 'Avestan',
    Avst: 'Avestan',
    Balinese: 'Balinese',
    Bali: 'Balinese',
    Bamum: 'Bamum',
    Bamu: 'Bamum',
    Bassa_Vah: 'Bassa_Vah',
    Bass: 'Bassa_Vah',
    Batak: 'Batak',
    Batk: 'Batak',
    Bengali: 'Bengali',
    Beng: 'Bengali',
    Bhaiksuki: 'Bhaiksuki',
    Bhks: 'Bhaiksuki',
    Bopomofo: 'Bopomofo',
    Bopo: 'Bopomofo',
    Brahmi: 'Brahmi',
    Brah: 'Brahmi',
    Braille: 'Braille',
    Brai: 'Braille',
    Buginese: 'Buginese',
    Bugi: 'Buginese',
    Buhid: 'Buhid',
    Buhd: 'Buhid',
    Canadian_Aboriginal: 'Canadian_Aboriginal',
    Cans: 'Canadian_Aboriginal',
    Carian: 'Carian',
    Cari: 'Carian',
    Caucasian_Albanian: 'Caucasian_Albanian',
    Aghb: 'Caucasian_Albanian',
    Chakma: 'Chakma',
    Cakm: 'Chakma',
    Cham: 'Cham',
    Chorasmian: 'Chorasmian',
    Chrs: 'Chorasmian',
    Cherokee: 'Cherokee',
    Cher: 'Cherokee',
    Common: 'Common',
    Zyyy: 'Common',
    Coptic: 'Coptic',
    Copt: 'Coptic',
    Qaac: 'Coptic',
    Cuneiform: 'Cuneiform',
    Xsux: 'Cuneiform',
    Cypriot: 'Cypriot',
    Cprt: 'Cypriot',
    Cyrillic: 'Cyrillic',
    Cyrl: 'Cyrillic',
    Deseret: 'Deseret',
    Dsrt: 'Deseret',
    Devanagari: 'Devanagari',
    Deva: 'Devanagari',
    Dives_Akuru: 'Dives_Akuru',
    Diak: 'Dives_Akuru',
    Dogra: 'Dogra',
    Dogr: 'Dogra',
    Duployan: 'Duployan',
    Dupl: 'Duployan',
    Egyptian_Hieroglyphs: 'Egyptian_Hieroglyphs',
    Egyp: 'Egyptian_Hieroglyphs',
    Elbasan: 'Elbasan',
    Elba: 'Elbasan',
    Elymaic: 'Elymaic',
    Elym: 'Elymaic',
    Ethiopic: 'Ethiopic',
    Ethi: 'Ethiopic',
    Georgian: 'Georgian',
    Geor: 'Georgian',
    Glagolitic: 'Glagolitic',
    Glag: 'Glagolitic',
    Gothic: 'Gothic',
    Goth: 'Gothic',
    Grantha: 'Grantha',
    Gran: 'Grantha',
    Greek: 'Greek',
    Grek: 'Greek',
    Gujarati: 'Gujarati',
    Gujr: 'Gujarati',
    Gunjala_Gondi: 'Gunjala_Gondi',
    Gong: 'Gunjala_Gondi',
    Gurmukhi: 'Gurmukhi',
    Guru: 'Gurmukhi',
    Han: 'Han',
    Hani: 'Han',
    Hangul: 'Hangul',
    Hang: 'Hangul',
    Hanifi_Rohingya: 'Hanifi_Rohingya',
    Rohg: 'Hanifi_Rohingya',
    Hanunoo: 'Hanunoo',
    Hano: 'Hanunoo',
    Hatran: 'Hatran',
    Hatr: 'Hatran',
    Hebrew: 'Hebrew',
    Hebr: 'Hebrew',
    Hiragana: 'Hiragana',
    Hira: 'Hiragana',
    Imperial_Aramaic: 'Imperial_Aramaic',
    Armi: 'Imperial_Aramaic',
    Inherited: 'Inherited',
    Zinh: 'Inherited',
    Qaai: 'Inherited',
    Inscriptional_Pahlavi: 'Inscriptional_Pahlavi',
    Phli: 'Inscriptional_Pahlavi',
    Inscriptional_Parthian: 'Inscriptional_Parthian',
    Prti: 'Inscriptional_Parthian',
    Javanese: 'Javanese',
    Java: 'Javanese',
    Kaithi: 'Kaithi',
    Kthi: 'Kaithi',
    Kannada: 'Kannada',
    Knda: 'Kannada',
    Katakana: 'Katakana',
    Kana: 'Katakana',
    Kayah_Li: 'Kayah_Li',
    Kali: 'Kayah_Li',
    Kharoshthi: 'Kharoshthi',
    Khar: 'Kharoshthi',
    Khitan_Small_Script: 'Khitan_Small_Script',
    Kits: 'Khitan_Small_Script',
    Khmer: 'Khmer',
    Khmr: 'Khmer',
    Khojki: 'Khojki',
    Khoj: 'Khojki',
    Khudawadi: 'Khudawadi',
    Sind: 'Khudawadi',
    Lao: 'Lao',
    Laoo: 'Lao',
    Latin: 'Latin',
    Latn: 'Latin',
    Lepcha: 'Lepcha',
    Lepc: 'Lepcha',
    Limbu: 'Limbu',
    Limb: 'Limbu',
    Linear_A: 'Linear_A',
    Lina: 'Linear_A',
    Linear_B: 'Linear_B',
    Linb: 'Linear_B',
    Lisu: 'Lisu',
    Lycian: 'Lycian',
    Lyci: 'Lycian',
    Lydian: 'Lydian',
    Lydi: 'Lydian',
    Mahajani: 'Mahajani',
    Mahj: 'Mahajani',
    Makasar: 'Makasar',
    Maka: 'Makasar',
    Malayalam: 'Malayalam',
    Mlym: 'Malayalam',
    Mandaic: 'Mandaic',
    Mand: 'Mandaic',
    Manichaean: 'Manichaean',
    Mani: 'Manichaean',
    Marchen: 'Marchen',
    Marc: 'Marchen',
    Medefaidrin: 'Medefaidrin',
    Medf: 'Medefaidrin',
    Masaram_Gondi: 'Masaram_Gondi',
    Gonm: 'Masaram_Gondi',
    Meetei_Mayek: 'Meetei_Mayek',
    Mtei: 'Meetei_Mayek',
    Mende_Kikakui: 'Mende_Kikakui',
    Mend: 'Mende_Kikakui',
    Meroitic_Cursive: 'Meroitic_Cursive',
    Merc: 'Meroitic_Cursive',
    Meroitic_Hieroglyphs: 'Meroitic_Hieroglyphs',
    Mero: 'Meroitic_Hieroglyphs',
    Miao: 'Miao',
    Plrd: 'Miao',
    Modi: 'Modi',
    Mongolian: 'Mongolian',
    Mong: 'Mongolian',
    Mro: 'Mro',
    Mroo: 'Mro',
    Multani: 'Multani',
    Mult: 'Multani',
    Myanmar: 'Myanmar',
    Mymr: 'Myanmar',
    Nabataean: 'Nabataean',
    Nbat: 'Nabataean',
    Nandinagari: 'Nandinagari',
    Nand: 'Nandinagari',
    New_Tai_Lue: 'New_Tai_Lue',
    Talu: 'New_Tai_Lue',
    Newa: 'Newa',
    Nko: 'Nko',
    Nkoo: 'Nko',
    Nushu: 'Nushu',
    Nshu: 'Nushu',
    Nyiakeng_Puachue_Hmong: 'Nyiakeng_Puachue_Hmong',
    Hmnp: 'Nyiakeng_Puachue_Hmong',
    Ogham: 'Ogham',
    Ogam: 'Ogham',
    Ol_Chiki: 'Ol_Chiki',
    Olck: 'Ol_Chiki',
    Old_Hungarian: 'Old_Hungarian',
    Hung: 'Old_Hungarian',
    Old_Italic: 'Old_Italic',
    Ital: 'Old_Italic',
    Old_North_Arabian: 'Old_North_Arabian',
    Narb: 'Old_North_Arabian',
    Old_Permic: 'Old_Permic',
    Perm: 'Old_Permic',
    Old_Persian: 'Old_Persian',
    Xpeo: 'Old_Persian',
    Old_Sogdian: 'Old_Sogdian',
    Sogo: 'Old_Sogdian',
    Old_South_Arabian: 'Old_South_Arabian',
    Sarb: 'Old_South_Arabian',
    Old_Turkic: 'Old_Turkic',
    Orkh: 'Old_Turkic',
    Oriya: 'Oriya',
    Orya: 'Oriya',
    Osage: 'Osage',
    Osge: 'Osage',
    Osmanya: 'Osmanya',
    Osma: 'Osmanya',
    Pahawh_Hmong: 'Pahawh_Hmong',
    Hmng: 'Pahawh_Hmong',
    Palmyrene: 'Palmyrene',
    Palm: 'Palmyrene',
    Pau_Cin_Hau: 'Pau_Cin_Hau',
    Pauc: 'Pau_Cin_Hau',
    Phags_Pa: 'Phags_Pa',
    Phag: 'Phags_Pa',
    Phoenician: 'Phoenician',
    Phnx: 'Phoenician',
    Psalter_Pahlavi: 'Psalter_Pahlavi',
    Phlp: 'Psalter_Pahlavi',
    Rejang: 'Rejang',
    Rjng: 'Rejang',
    Runic: 'Runic',
    Runr: 'Runic',
    Samaritan: 'Samaritan',
    Samr: 'Samaritan',
    Saurashtra: 'Saurashtra',
    Saur: 'Saurashtra',
    Sharada: 'Sharada',
    Shrd: 'Sharada',
    Shavian: 'Shavian',
    Shaw: 'Shavian',
    Siddham: 'Siddham',
    Sidd: 'Siddham',
    SignWriting: 'SignWriting',
    Sgnw: 'SignWriting',
    Sinhala: 'Sinhala',
    Sinh: 'Sinhala',
    Sogdian: 'Sogdian',
    Sogd: 'Sogdian',
    Sora_Sompeng: 'Sora_Sompeng',
    Sora: 'Sora_Sompeng',
    Soyombo: 'Soyombo',
    Soyo: 'Soyombo',
    Sundanese: 'Sundanese',
    Sund: 'Sundanese',
    Syloti_Nagri: 'Syloti_Nagri',
    Sylo: 'Syloti_Nagri',
    Syriac: 'Syriac',
    Syrc: 'Syriac',
    Tagalog: 'Tagalog',
    Tglg: 'Tagalog',
    Tagbanwa: 'Tagbanwa',
    Tagb: 'Tagbanwa',
    Tai_Le: 'Tai_Le',
    Tale: 'Tai_Le',
    Tai_Tham: 'Tai_Tham',
    Lana: 'Tai_Tham',
    Tai_Viet: 'Tai_Viet',
    Tavt: 'Tai_Viet',
    Takri: 'Takri',
    Takr: 'Takri',
    Tamil: 'Tamil',
    Taml: 'Tamil',
    Tangut: 'Tangut',
    Tang: 'Tangut',
    Telugu: 'Telugu',
    Telu: 'Telugu',
    Thaana: 'Thaana',
    Thaa: 'Thaana',
    Thai: 'Thai',
    Tibetan: 'Tibetan',
    Tibt: 'Tibetan',
    Tifinagh: 'Tifinagh',
    Tfng: 'Tifinagh',
    Tirhuta: 'Tirhuta',
    Tirh: 'Tirhuta',
    Ugaritic: 'Ugaritic',
    Ugar: 'Ugaritic',
    Vai: 'Vai',
    Vaii: 'Vai',
    Wancho: 'Wancho',
    Wcho: 'Wancho',
    Warang_Citi: 'Warang_Citi',
    Wara: 'Warang_Citi',
    Yezidi: 'Yezidi',
    Yezi: 'Yezidi',
    Yi: 'Yi',
    Yiii: 'Yi',
    Zanabazar_Square: 'Zanabazar_Square',
    Zanb: 'Zanabazar_Square'
  };
  Object.setPrototypeOf(UnicodeScriptValues, null);

  /** https://tc39.es/ecma262/#sec-runtime-semantics-unicodematchproperty-p */
  function UnicodeMatchProperty(p) {
    // 1. Assert: p is a List of Unicode code points that is identical to a List of Unicode code points that is a Unicode property name or property alias listed in the “Property name and aliases” column of Table 55 or Table 56.
    Assert(p in NonbinaryUnicodeProperties || p in BinaryUnicodeProperties, "p in NonbinaryUnicodeProperties || p in BinaryUnicodeProperties");
    // 2. Let c be the canonical property name of p as given in the “Canonical property name” column of the corresponding row.
    const c = NonbinaryUnicodeProperties[p] || BinaryUnicodeProperties[p];
    // 3. Return the List of Unicode code points of c.
    return c;
  }

  /** https://tc39.es/ecma262/#sec-runtime-semantics-unicodematchpropertyvalue-p-v */
  function UnicodeMatchPropertyValue(p, v) {
    // 1. Assert: p is a List of Unicode code points that is identical to a List of Unicode code points that is a canonical, unaliased Unicode property name listed in the “Canonical property name” column of Table 55.
    Assert(p in NonbinaryUnicodeProperties, "p in NonbinaryUnicodeProperties");
    // 2. Assert: v is a List of Unicode code points that is identical to a List of Unicode code points that is a property value or property value alias for Unicode property p listed in the “Property value and aliases” column of Table 57 or Table 58.
    // Assert(v in UnicodeGeneralCategoryValues || v in UnicodeScriptValues);
    // 3. Let value be the canonical property value of v as given in the “Canonical property value” column of the corresponding row.
    const value = UnicodeGeneralCategoryValues[v] || UnicodeScriptValues[v];
    // 4. Return the List of Unicode code points of value.
    return value;
  }
  const expandedSets = new Map();
  function getUnicodePropertyValueSet(property, value) {
    const path = value ? `${property}/${value}` : `Binary_Property/${property}`;
    if (!expandedSets.has(path)) {
      const set = new Set();
      UnicodeSets[path].forEach(([from, to]) => {
        for (let i = from; i <= to; i += 1) {
          set.add(i);
        }
      });
      expandedSets.set(path, set);
    }
    return expandedSets.get(path);
  }

  /** https://tc39.es/ecma262/#sec-privateelement-specification-type */
  class PrivateElementRecord {
    Key;
    Kind;
    Value;
    Get;
    Set;
    constructor(init) {
      this.Key = init.Key;
      this.Kind = init.Kind;
      this.Value = init.Value;
      this.Get = init.Get;
      this.Set = init.Set;
    }
  }

  /** https://tc39.es/ecma262/#sec-definemethodproperty */
  function DefineMethodProperty(key, homeObject, closure, enumerable) {
    // 1. If key is a Private Name, then
    if (key instanceof PrivateName) {
      // a. Return PrivateElement { [[Key]]: key, [[Kind]]: method, [[Value]]: closure }.
      return new PrivateElementRecord({
        Key: key,
        Kind: 'method',
        Value: closure
      });
    } else {
      // 2. Else,
      // a. Let desc be the PropertyDescriptor { [[Value]]: closure, [[Writable]]: true, [[Enumerable]]: enumerable, [[Configurable]]: true }.
      const desc = exports.Descriptor({
        Value: closure,
        Writable: Value.true,
        Enumerable: enumerable,
        Configurable: Value.true
      });
      // b. Perform ? DefinePropertyOrThrow(homeObject, key, desc).
      let _temp = DefinePropertyOrThrow(homeObject, key, desc);
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      // c. Return empty.
      return undefined;
    }
  }

  // MethodDefinition :
  //   ClassElementName `(` UniqueFormalParameters `)` `{` FunctionBody `}`
  //   `get` ClassElementName `(` `)` `{` FunctionBody `}`
  //   `set` ClassElementName `(` PropertySetParameterList `)` `{` FunctionBody `}`
  DefineMethodProperty.section = 'https://tc39.es/ecma262/#sec-definemethodproperty';
  function* MethodDefinitionEvaluation_MethodDefinition(MethodDefinition, object, enumerable) {
    switch (true) {
      case !!MethodDefinition.UniqueFormalParameters:
        {
          let _temp2 = yield* DefineMethod(MethodDefinition, object);
          /* c8 ignore if */
          if (_temp2 instanceof AbruptCompletion) {
            return _temp2;
          }
          /* c8 ignore if */
          if (_temp2 instanceof Completion) {
            _temp2 = _temp2.Value;
          }
          // 1. Let methodDef be ? DefineMethod of MethodDefinition with argument object.
          const methodDef = _temp2;
          // 2. Perform ! SetFunctionName(methodDef.[[Closure]], methodDef.[[Key]]).
          let _temp3 = SetFunctionName(methodDef.Closure, methodDef.Key);
          Assert(!(_temp3 instanceof AbruptCompletion), "SetFunctionName(methodDef.Closure, methodDef.Key)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp3 instanceof Completion) {
            _temp3 = _temp3.Value;
          }
          // 3. Return ? DefineMethodProperty(methodDef.[[Key]], object, methodDef.[[Closure]], enumerable).
          return DefineMethodProperty(methodDef.Key, object, methodDef.Closure, enumerable);
        }
      case !!MethodDefinition.PropertySetParameterList:
        {
          const {
            ClassElementName,
            PropertySetParameterList,
            FunctionBody
          } = MethodDefinition;
          // 1. Let propKey be the result of evaluating ClassElementName.
          let propKey = yield* Evaluate_PropertyName(ClassElementName);
          // 2. ReturnIfAbrupt(propKey).
          /* c8 ignore if */
          if (propKey instanceof AbruptCompletion) {
            return propKey;
          }
          /* c8 ignore if */
          if (propKey instanceof Completion) {
            propKey = propKey.Value;
          }
          // 3. Let scope be the running execution context's LexicalEnvironment.
          const scope = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
          // 4. Let privateScope be the running execution context's PrivateEnvironment.
          const privateScope = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
          // 5. Let sourceText be the source text matched by MethodDefinition.
          const sourceText = sourceTextMatchedBy(MethodDefinition);
          // 6. Let closure be OrdinaryFunctionCreate(%Function.prototype%, sourceText, PropertySetParameterList, FunctionBody, non-lexical-this, scope, privateScope).
          const closure = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%Function.prototype%'), sourceText, PropertySetParameterList, FunctionBody, 'non-lexical-this', scope, privateScope);
          // 7. Perform MakeMethod(closure, object).
          MakeMethod(closure, object);
          // 8. Perform SetFunctionName(closure, propKey, "get").
          SetFunctionName(closure, propKey, Value('set'));
          // 9. If propKey is a Private Name, then
          if (propKey instanceof PrivateName) {
            // a. Return PrivateElement { [[Key]]: propKey, [[Kind]]: accessor, [[Get]]: undefined, [[Set]]: closure }.
            return new PrivateElementRecord({
              Key: propKey,
              Kind: 'accessor',
              Get: Value.undefined,
              Set: closure
            });
          } else {
            // 10. Else,
            // a. Let desc be the PropertyDescriptor { [[Get]]: closure, [[Enumerable]]: enumerable, [[Configurable]]: true }.
            const desc = exports.Descriptor({
              Set: closure,
              Enumerable: enumerable,
              Configurable: Value.true
            });
            // b. Perform ? DefinePropertyOrThrow(object, propKey, desc).
            let _temp4 = DefinePropertyOrThrow(object, propKey, desc);
            /* c8 ignore if */
            if (_temp4 instanceof AbruptCompletion) {
              return _temp4;
            }
            /* c8 ignore if */
            if (_temp4 instanceof Completion) {
              _temp4 = _temp4.Value;
            }
            // c. Return empty.
            return undefined;
          }
        }
      case !MethodDefinition.UniqueFormalParameters && !MethodDefinition.PropertySetParameterList:
        {
          const {
            ClassElementName,
            FunctionBody
          } = MethodDefinition;
          // 1. Let propKey be the result of evaluating ClassElementName.
          let propKey = yield* Evaluate_PropertyName(ClassElementName);
          // 2. ReturnIfAbrupt(propKey).
          /* c8 ignore if */
          if (propKey instanceof AbruptCompletion) {
            return propKey;
          }
          /* c8 ignore if */
          if (propKey instanceof Completion) {
            propKey = propKey.Value;
          }
          // 3. Let scope be the running execution context's LexicalEnvironment.
          const scope = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
          // 4. Let privateScope be the running execution context's PrivateEnvironment.
          const privateScope = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
          // 5. Let formalParameterList be an instance of the production FormalParameters : [empty].
          const formalParameterList = [];
          // 6. Let sourceText be the source text matched by MethodDefinition.
          const sourceText = sourceTextMatchedBy(MethodDefinition);
          // 7. Let closure be OrdinaryFunctionCreate(%Function.prototype%, sourceText, formalParameterList, FunctionBody, non-lexical-this, scope, privateScope).
          const closure = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%Function.prototype%'), sourceText, formalParameterList, FunctionBody, 'non-lexical-this', scope, privateScope);
          // 8. Perform MakeMethod(closure, object).
          MakeMethod(closure, object);
          // 9. Perform SetFunctionName(closure, propKey, "get").
          SetFunctionName(closure, propKey, Value('get'));
          // 10. If propKey is a Private Name, then
          if (propKey instanceof PrivateName) {
            return new PrivateElementRecord({
              Key: propKey,
              Kind: 'accessor',
              Get: closure,
              Set: Value.undefined
            });
          } else {
            // 11. Else,
            // a. Let desc be the PropertyDescriptor { [[Get]]: closure, [[Enumerable]]: enumerable, [[Configurable]]: true }.
            const desc = exports.Descriptor({
              Get: closure,
              Enumerable: enumerable,
              Configurable: Value.true
            });
            // b. Perform ? DefinePropertyOrThrow(object, propKey, desc).
            let _temp5 = DefinePropertyOrThrow(object, propKey, desc);
            /* c8 ignore if */
            if (_temp5 instanceof AbruptCompletion) {
              return _temp5;
            }
            /* c8 ignore if */
            if (_temp5 instanceof Completion) {
              _temp5 = _temp5.Value;
            }
            // c. Return empty.
            return undefined;
          }
        }
      /*c8 ignore next*/default:
        throw new OutOfRange$1('MethodDefinitionEvaluation_MethodDefinition', MethodDefinition);
    }
  }

  /** https://tc39.es/ecma262/#sec-async-function-definitions-MethodDefinitionEvaluation */
  //   AsyncMethod :
  //     `async` ClassElementName `(` UniqueFormalParameters `)` `{` AsyncBody `}`
  function* MethodDefinitionEvaluation_AsyncMethod(AsyncMethod, object, enumerable) {
    const {
      ClassElementName,
      UniqueFormalParameters,
      AsyncBody
    } = AsyncMethod;
    // 1. Let propKey be the result of evaluating ClassElementName.
    let propKey = yield* Evaluate_PropertyName(ClassElementName);
    // 2. ReturnIfAbrupt(propKey).
    /* c8 ignore if */
    if (propKey instanceof AbruptCompletion) {
      return propKey;
    }
    /* c8 ignore if */
    if (propKey instanceof Completion) {
      propKey = propKey.Value;
    }
    // 3. Let scope be the LexicalEnvironment of the running execution context.
    const scope = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 4. Let privateScope be the running execution context's PrivateEnvironment.
    const privateScope = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
    // 5. Let sourceText be the source text matched by AsyncMethod.
    const sourceText = sourceTextMatchedBy(AsyncMethod);
    // 6. Let closure be ! OrdinaryFunctionCreate(%AsyncFunction.prototype%, sourceText, UniqueFormalParameters, AsyncBody, non-lexical-this, scope, privateScope).
    let _temp6 = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%AsyncFunction.prototype%'), sourceText, UniqueFormalParameters, AsyncBody, 'non-lexical-this', scope, privateScope);
    Assert(!(_temp6 instanceof AbruptCompletion), "OrdinaryFunctionCreate(surroundingAgent.intrinsic('%AsyncFunction.prototype%'), sourceText, UniqueFormalParameters, AsyncBody, 'non-lexical-this', scope, privateScope)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const closure = _temp6;
    // 7. Perform ! MakeMethod(closure, object).
    let _temp7 = MakeMethod(closure, object);
    Assert(!(_temp7 instanceof AbruptCompletion), "MakeMethod(closure, object)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    // 8. Perform ! SetFunctionName(closure, propKey).
    let _temp8 = SetFunctionName(closure, propKey);
    Assert(!(_temp8 instanceof AbruptCompletion), "SetFunctionName(closure, propKey)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    // 9. Return ? DefineMethodProperty(propKey, object, closure, enumerable).
    return DefineMethodProperty(propKey, object, closure, enumerable);
  }

  /** https://tc39.es/ecma262/#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation */
  //   GeneratorMethod :
  //     `*` ClassElementName `(` UniqueFormalParameters `)` `{` GeneratorBody `}`
  MethodDefinitionEvaluation_AsyncMethod.section = 'https://tc39.es/ecma262/#sec-async-function-definitions-MethodDefinitionEvaluation';
  function* MethodDefinitionEvaluation_GeneratorMethod(GeneratorMethod, object, enumerable) {
    const {
      ClassElementName,
      UniqueFormalParameters,
      GeneratorBody
    } = GeneratorMethod;
    // 1. Let propKey be the result of evaluating ClassElementName.
    let propKey = yield* Evaluate_PropertyName(ClassElementName);
    // 2. ReturnIfAbrupt(propKey).
    /* c8 ignore if */
    if (propKey instanceof AbruptCompletion) {
      return propKey;
    }
    /* c8 ignore if */
    if (propKey instanceof Completion) {
      propKey = propKey.Value;
    }
    // 3. Let scope be the LexicalEnvironment of the running execution context.
    const scope = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 4. Let privateScope be the running execution context's PrivateEnvironment.
    const privateScope = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
    // 5. Let sourceText be the source text matched by GeneratorMethod.
    const sourceText = sourceTextMatchedBy(GeneratorMethod);
    // 6. Let closure be ! OrdinaryFunctionCreate(%GeneratorFunction.prototype%, sourceText, UniqueFormalParameters, AsyncBody, non-lexical-this, scope, privateScope).
    let _temp9 = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%GeneratorFunction.prototype%'), sourceText, UniqueFormalParameters, GeneratorBody, 'non-lexical-this', scope, privateScope);
    Assert(!(_temp9 instanceof AbruptCompletion), "OrdinaryFunctionCreate(surroundingAgent.intrinsic('%GeneratorFunction.prototype%'), sourceText, UniqueFormalParameters, GeneratorBody, 'non-lexical-this', scope, privateScope)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    const closure = _temp9;
    // 7. Perform ! MakeMethod(closure, object).
    let _temp10 = MakeMethod(closure, object);
    Assert(!(_temp10 instanceof AbruptCompletion), "MakeMethod(closure, object)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    // 8. Perform ! SetFunctionName(closure, propKey).
    let _temp11 = SetFunctionName(closure, propKey);
    Assert(!(_temp11 instanceof AbruptCompletion), "SetFunctionName(closure, propKey)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    // 9. Let prototype be OrdinaryObjectCreate(%GeneratorFunction.prototype.prototype%).
    const prototype = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%GeneratorFunction.prototype.prototype%'));
    // 10. Perform DefinePropertyOrThrow(closure, "prototype", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).
    DefinePropertyOrThrow(closure, Value('prototype'), exports.Descriptor({
      Value: prototype,
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.false
    }));
    // 11. Return ? DefineMethodProperty(propKey, object, closure, enumerable).
    return DefineMethodProperty(propKey, object, closure, enumerable);
  }

  /** https://tc39.es/ecma262/#sec-asyncgenerator-definitions-propertydefinitionevaluation */
  //   AsyncGeneratorMethod :
  //     `async` `*` PropertyName `(` UniqueFormalParameters `)` `{` AsyncGeneratorBody `}`
  MethodDefinitionEvaluation_GeneratorMethod.section = 'https://tc39.es/ecma262/#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation';
  function* MethodDefinitionEvaluation_AsyncGeneratorMethod(AsyncGeneratorMethod, object, enumerable) {
    const {
      ClassElementName,
      UniqueFormalParameters,
      AsyncGeneratorBody
    } = AsyncGeneratorMethod;
    // 1. Let propKey be the result of evaluating ClassElementName.
    let propKey = yield* Evaluate_PropertyName(ClassElementName);
    // 2. ReturnIfAbrupt(propKey).
    /* c8 ignore if */
    if (propKey instanceof AbruptCompletion) {
      return propKey;
    }
    /* c8 ignore if */
    if (propKey instanceof Completion) {
      propKey = propKey.Value;
    }
    // 3. Let scope be the LexicalEnvironment of the running execution context.
    const scope = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 4. Let privateScope be the running execution context's PrivateEnvironment.
    const privateScope = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
    // 5. Let sourceText be the source text matched by AsyncGeneratorMethod.
    const sourceText = sourceTextMatchedBy(AsyncGeneratorMethod);
    // 6. Let closure be ! OrdinaryFunctionCreate(%AsyncGeneratorFunction.prototype%, sourceText, UniqueFormalParameters, AsyncGeneratorBody, non-lexical-this, scope, privateScope).
    let _temp12 = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%AsyncGeneratorFunction.prototype%'), sourceText, UniqueFormalParameters, AsyncGeneratorBody, 'non-lexical-this', scope, privateScope);
    Assert(!(_temp12 instanceof AbruptCompletion), "OrdinaryFunctionCreate(surroundingAgent.intrinsic('%AsyncGeneratorFunction.prototype%'), sourceText, UniqueFormalParameters, AsyncGeneratorBody, 'non-lexical-this', scope, privateScope)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp12 instanceof Completion) {
      _temp12 = _temp12.Value;
    }
    const closure = _temp12;
    // 7. Perform ! MakeMethod(closure, object).
    let _temp13 = MakeMethod(closure, object);
    Assert(!(_temp13 instanceof AbruptCompletion), "MakeMethod(closure, object)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp13 instanceof Completion) {
      _temp13 = _temp13.Value;
    }
    // 9. Perform ! SetFunctionName(closure, propKey).
    let _temp14 = SetFunctionName(closure, propKey);
    Assert(!(_temp14 instanceof AbruptCompletion), "SetFunctionName(closure, propKey)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    // 9. Let prototype be OrdinaryObjectCreate(%AsyncGeneratorFunction.prototype.prototype%).
    const prototype = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%AsyncGeneratorFunction.prototype.prototype%'));
    // 10. Perform DefinePropertyOrThrow(closure, "prototype", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).
    DefinePropertyOrThrow(closure, Value('prototype'), exports.Descriptor({
      Value: prototype,
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.false
    }));
    // 11. Return ? DefineMethodProperty(propKey, object, closure, enumerable).
    return DefineMethodProperty(propKey, object, closure, enumerable);
  }
  MethodDefinitionEvaluation_AsyncGeneratorMethod.section = 'https://tc39.es/ecma262/#sec-asyncgenerator-definitions-propertydefinitionevaluation';
  function MethodDefinitionEvaluation(node, object, enumerable) {
    switch (node.type) {
      case 'MethodDefinition':
        return MethodDefinitionEvaluation_MethodDefinition(node, object, enumerable);
      case 'AsyncMethod':
        return MethodDefinitionEvaluation_AsyncMethod(node, object, enumerable);
      case 'GeneratorMethod':
        return MethodDefinitionEvaluation_GeneratorMethod(node, object, enumerable);
      case 'AsyncGeneratorMethod':
        return MethodDefinitionEvaluation_AsyncGeneratorMethod(node, object, enumerable);
      /*c8 ignore next*/default:
        throw new OutOfRange$1('MethodDefinitionEvaluation', node);
    }
  }

  class ClassFieldDefinitionRecord {
    Name;
    Initializer;
    constructor(init) {
      this.Name = init.Name;
      this.Initializer = init.Initializer;
    }
  }
  function* ClassFieldDefinitionEvaluation(FieldDefinition, homeObject) {
    const {
      ClassElementName,
      Initializer
    } = FieldDefinition;
    // 1. Let name be the result of evaluating ClassElementName.
    let name = yield* Evaluate_PropertyName(ClassElementName);
    // 2. ReturnIfAbrupt(name).
    /* c8 ignore if */
    if (name instanceof AbruptCompletion) {
      return name;
    }
    /* c8 ignore if */
    if (name instanceof Completion) {
      name = name.Value;
    }
    // 3. If Initializer is present, then
    let initializer;
    if (Initializer) {
      // a. Let formalParameterList be an instance of the production FormalParameters : [empty].
      const formalParameterList = [];
      // b. Let scope be the LexicalEnvironment of the running execution context.
      const scope = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
      // c. Let privateScope be the running execution context's PrivateEnvironment.
      const privateScope = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
      // d. Let sourceText be the empty sequence of Unicode code points.
      const sourceText = '';
      // e. Let initializer be ! OrdinaryFunctionCreate(%Function.prototype%, sourceText, formalParameterList, Initializer, non-lexical-this, scope, privateScope).
      let _temp = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%Function.prototype%'), sourceText, formalParameterList, Initializer, 'non-lexical-this', scope, privateScope);
      Assert(!(_temp instanceof AbruptCompletion), "OrdinaryFunctionCreate(\n      surroundingAgent.intrinsic('%Function.prototype%'),\n      sourceText,\n      formalParameterList,\n      Initializer,\n      'non-lexical-this',\n      scope,\n      privateScope,\n    )" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      initializer = _temp;
      // f. Perform MakeMethod(initializer, homeObject).
      MakeMethod(initializer, homeObject);
      // g. Set initializer.[[ClassFieldInitializerName]] to name.
      initializer.ClassFieldInitializerName = name;
    } else {
      // 4. Else,
      // a. Let initializer be empty.
      initializer = undefined;
    }
    // 5. Return the ClassFieldDefinition Record { [[Name]]: name, [[Initializer]]: initializer }.
    return new ClassFieldDefinitionRecord({
      Name: name,
      Initializer: initializer
    });
  }

  // @ts-nocheck
  /** https://tc39.es/ecma262/#sec-runtime-semantics-instantiateordinaryfunctionexpression */
  //   FunctionExpression :
  //     `function` `(` FormalParameters `)` `{` FunctionBody `}`
  //     `function` BindingIdentifier `(` FormalParameters `)` `{` FunctionBody `}`
  function InstantiateOrdinaryFunctionExpression(FunctionExpression, name) {
    const {
      BindingIdentifier,
      FormalParameters,
      FunctionBody
    } = FunctionExpression;
    if (BindingIdentifier) {
      // 1. Assert: name is not present.
      Assert(name === undefined, "name === undefined");
      // 2. Set name to StringValue of BindingIdentifier.
      name = StringValue(BindingIdentifier);
      // 3. Let scope be the running execution context's LexicalEnvironment.
      const scope = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
      // 4. Let funcEnv be NewDeclarativeEnvironment(scope).
      const funcEnv = new DeclarativeEnvironmentRecord(scope);
      // 5. Perform funcEnv.CreateImmutableBinding(name, false).
      funcEnv.CreateImmutableBinding(name, Value.false);
      // 6. Let privateScope be the running execution context's PrivateEnvironment.
      const privateScope = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
      // 7. Let sourceText be the source text matched by FunctionExpression.
      const sourceText = sourceTextMatchedBy(FunctionExpression);
      // 8. Let closure be OrdinaryFunctionCreate(%Function.prototype%, sourceText, FormalParameters, FunctionBody, non-lexical-this, funcEnv, privateScope).
      const closure = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%Function.prototype%'), sourceText, FormalParameters, FunctionBody, 'non-lexical-this', funcEnv, privateScope);
      // 9. Perform SetFunctionName(closure, name).
      SetFunctionName(closure, name);
      // 10. Perform MakeConstructor(closure).
      MakeConstructor(closure);
      // 11. Perform funcEnv.InitializeBinding(name, closure).
      funcEnv.InitializeBinding(name, closure);
      // 12. Return closure.
      return closure;
    }
    // 1. If name is not present, set name to "".
    if (name === undefined) {
      name = Value('');
    }
    // 2. Let scope be the running execution context's LexicalEnvironment.
    const scope = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 3. Let privateScope be the running execution context's PrivateEnvironment.
    const privateScope = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
    // 4. Let sourceText be the source text matched by FunctionExpression.
    const sourceText = sourceTextMatchedBy(FunctionExpression);
    // 5. Let closure be OrdinaryFunctionCreate(%Function.prototype%, sourceText, FormalParameters, FunctionBody, non-lexical-this, scope, privateScope).
    const closure = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%Function.prototype%'), sourceText, FormalParameters, FunctionBody, 'non-lexical-this', scope, privateScope);
    // 6. Perform SetFunctionName(closure, name).
    SetFunctionName(closure, name);
    // 7. Perform MakeConstructor(closure).
    MakeConstructor(closure);
    // 8. Return closure.
    return closure;
  }

  /** https://tc39.es/ecma262/#sec-runtime-semantics-instantiategeneratorfunctionexpression */
  //   GeneratorExpression :
  //     `function` `*` `(` FormalParameters `)` `{` GeneratorBody `}`
  //     `function` `* `BindingIdentifier `(` FormalParameters `)` `{` GeneratorBody `}`
  function InstantiateGeneratorFunctionExpression(GeneratorExpression, name) {
    const {
      BindingIdentifier,
      FormalParameters,
      GeneratorBody
    } = GeneratorExpression;
    if (BindingIdentifier) {
      // 1. Assert: name is not present.
      Assert(name === undefined, "name === undefined");
      // 2. Set name to StringValue of BindingIdentifier.
      name = StringValue(BindingIdentifier);
      // 3. Let scope be the running execution context's LexicalEnvironment.
      const scope = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
      // 4. Let funcEnv be NewDeclarativeEnvironment(scope).
      const funcEnv = new DeclarativeEnvironmentRecord(scope);
      // 5. Perform funcEnv.CreateImmutableBinding(name, false).
      funcEnv.CreateImmutableBinding(name, Value.false);
      // 6. Let privateScope be the running execution context's PrivateEnvironment.
      const privateScope = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
      // 7. Let sourceText be the source text matched by GeneratorExpression.
      const sourceText = sourceTextMatchedBy(GeneratorExpression);
      // 8. Let closure be OrdinaryFunctionCreate(%GeneratorFunction.prototype%, sourceText, FormalParameters, GeneratorBody, non-lexical-this, funcEnv, privateScope).
      const closure = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%GeneratorFunction.prototype%'), sourceText, FormalParameters, GeneratorBody, 'non-lexical-this', funcEnv, privateScope);
      // 9. Perform SetFunctionName(closure, name).
      SetFunctionName(closure, name);
      // 10. Let prototype be ! OrdinaryObjectCreate(%GeneratorFunction.prototype.prototype%).
      let _temp = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%GeneratorFunction.prototype.prototype%'));
      Assert(!(_temp instanceof AbruptCompletion), "OrdinaryObjectCreate(surroundingAgent.intrinsic('%GeneratorFunction.prototype.prototype%'))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      const prototype = _temp;
      // 11. Perform DefinePropertyOrThrow(closure, "prototype", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).
      DefinePropertyOrThrow(closure, Value('prototype'), new exports.Descriptor({
        Value: prototype,
        Writable: Value.true,
        Enumerable: Value.false,
        Configurable: Value.false
      }));
      // 12. Perform funcEnv.InitializeBinding(name, closure).
      funcEnv.InitializeBinding(name, closure);
      // 13. Return closure.
      return closure;
    }
    // 1. If name is not present, set name to "".
    if (name === undefined) {
      name = Value('');
    }
    // 2. Let scope be the running execution context's LexicalEnvironment.
    const scope = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 3. Let privateScope be the running execution context's PrivateEnvironment.
    const privateScope = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
    // 4. Let sourceText be the source text matched by GeneratorExpression.
    const sourceText = sourceTextMatchedBy(GeneratorExpression);
    // 5. Let closure be OrdinaryFunctionCreate(%GeneratorFunction.prototype%, sourceText, FormalParameters, GeneratorBody, non-lexical-this, scope, privateScope).
    const closure = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%GeneratorFunction.prototype%'), sourceText, FormalParameters, GeneratorBody, 'non-lexical-this', scope, privateScope);
    // 6. Perform SetFunctionName(closure, name).
    SetFunctionName(closure, name);
    // 7. Let prototype be ! OrdinaryObjectCreate(%GeneratorFunction.prototype.prototype%).
    let _temp2 = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%GeneratorFunction.prototype.prototype%'));
    Assert(!(_temp2 instanceof AbruptCompletion), "OrdinaryObjectCreate(surroundingAgent.intrinsic('%GeneratorFunction.prototype.prototype%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const prototype = _temp2;
    // 8. Perform DefinePropertyOrThrow(closure, "prototype", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).
    DefinePropertyOrThrow(closure, Value('prototype'), new exports.Descriptor({
      Value: prototype,
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.false
    }));
    // 9. Return closure.
    return closure;
  }

  // @ts-nocheck
  /** https://tc39.es/ecma262/#sec-runtime-semantics-instantiatearrowfunctionexpression */
  // ArrowFunction : ArrowParameters `=>` ConciseBody
  function InstantiateArrowFunctionExpression(ArrowFunction, name) {
    const {
      ArrowParameters,
      ConciseBody
    } = ArrowFunction;
    // 1. If name is not present, set name to "".
    if (name === undefined) {
      name = Value('');
    }
    // 2. Let scope be the LexicalEnvironment of the running execution context.
    const scope = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 3. Let privateScope be the running execution context's PrivateEnvironment.
    const privateScope = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
    // 4. Let sourceText be the source text matched by ArrowFunction.
    const sourceText = sourceTextMatchedBy(ArrowFunction);
    // 5. Let closure be OrdinaryFunctionCreate(%Function.prototype%, sourceText, ArrowParameters, ConciseBody, lexical-this, scope, privateScope).
    const closure = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%Function.prototype%'), sourceText, ArrowParameters, ConciseBody, 'lexical-this', scope, privateScope);
    // 6. Perform SetFunctionName(closure, name).
    SetFunctionName(closure, name);
    // 7. Return closure.
    return closure;
  }

  // @ts-nocheck
  /** https://tc39.es/ecma262/#sec-runtime-semantics-instantiateasyncarrowfunctionexpression */
  // AsyncArrowFunction : ArrowParameters `=>` AsyncConciseBody
  function InstantiateAsyncArrowFunctionExpression(AsyncArrowFunction, name) {
    const {
      ArrowParameters,
      AsyncConciseBody
    } = AsyncArrowFunction;
    // 1. If name is not present, set name to "".
    if (name === undefined) {
      name = Value('');
    }
    // 2. Let scope be the LexicalEnvironment of the running execution context.
    const scope = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 3. Let privateScope be the running execution context's PrivateEnvironment.
    const privateScope = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
    // 4. Let sourceText be the source text matched by AsyncArrowFunction.
    const sourceText = sourceTextMatchedBy(AsyncArrowFunction);
    // 5. Let parameters be AsyncArrowBindingIdentifier.
    const parameters = ArrowParameters;
    // 6. Let closure be OrdinaryFunctionCreate(%AsyncFunction.prototype%, sourceText, ArrowParameters, AsyncConciseBody, lexical-this, scope, privateScope).
    const closure = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%AsyncFunction.prototype%'), sourceText, parameters, AsyncConciseBody, 'lexical-this', scope, privateScope);
    // 7. Perform SetFunctionName(closure, name).
    SetFunctionName(closure, name);
    // 8. Return closure.
    return closure;
  }

  /** https://tc39.es/ecma262/#sec-runtime-semantics-instantiateasyncfunctionexpression */
  function InstantiateAsyncFunctionExpression(AsyncFunctionExpression, name) {
    const {
      BindingIdentifier,
      FormalParameters,
      AsyncBody
    } = AsyncFunctionExpression;
    if (BindingIdentifier) {
      // 1. Assert: name is not present.
      Assert(name === undefined, "name === undefined");
      // 2. Set name to StringValue of BindingIdentifier.
      name = StringValue(BindingIdentifier);
      // 3. Let scope be the LexicalEnvironment of the running execution context.
      const scope = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
      // 4. Let funcEnv be ! NewDeclarativeEnvironment(scope).
      let _temp = new DeclarativeEnvironmentRecord(scope);
      Assert(!(_temp instanceof AbruptCompletion), "new DeclarativeEnvironmentRecord(scope)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      const funcEnv = _temp;
      // 5. Perform ! funcEnv.CreateImmutableBinding(name, false).
      let _temp2 = funcEnv.CreateImmutableBinding(name, Value.false);
      Assert(!(_temp2 instanceof AbruptCompletion), "funcEnv.CreateImmutableBinding(name, Value.false)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      // 6. Let privateScope be the running execution context's PrivateEnvironment.
      const privateScope = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
      // 7. Let sourceText be the source text matched by AsyncFunctionExpression.
      const sourceText = sourceTextMatchedBy(AsyncFunctionExpression);
      // 8. Let closure be ! OrdinaryFunctionCreate(%AsyncFunction.prototype%, sourceText, FormalParameters, AsyncBody, non-lexical-this, funcEnv, privateScope).
      let _temp3 = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%AsyncFunction.prototype%'), sourceText, FormalParameters, AsyncBody, 'non-lexical-this', funcEnv, privateScope);
      Assert(!(_temp3 instanceof AbruptCompletion), "OrdinaryFunctionCreate(\n      surroundingAgent.intrinsic('%AsyncFunction.prototype%'),\n      sourceText,\n      FormalParameters,\n      AsyncBody,\n      'non-lexical-this',\n      funcEnv,\n      privateScope,\n    )" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      const closure = _temp3;
      // 9. Perform ! SetFunctionName(closure, name).
      let _temp4 = SetFunctionName(closure, name);
      Assert(!(_temp4 instanceof AbruptCompletion), "SetFunctionName(closure, name)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      // 10. Perform ! funcEnv.InitializeBinding(name, closure).
      let _temp5 = funcEnv.InitializeBinding(name, closure);
      Assert(!(_temp5 instanceof AbruptCompletion), "funcEnv.InitializeBinding(name, closure)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      // 11. Return closure.
      return closure;
    }
    // 1. If name is not present, set name to "".
    if (name === undefined) {
      name = Value('');
    }
    // 2. Let scope be the LexicalEnvironment of the running execution context.
    const scope = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 3. Let privateScope be the running execution context's PrivateEnvironment.
    const privateScope = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
    // 4. Let sourceText be the source text matched by AsyncFunctionExpression.
    const sourceText = sourceTextMatchedBy(AsyncFunctionExpression);
    // 5. Let closure be ! OrdinaryFunctionCreate(%AsyncFunction.prototype%, sourceText, FormalParameters, AsyncBody, non-lexical-this, scope, privateScope).
    let _temp6 = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%AsyncFunction.prototype%'), sourceText, FormalParameters, AsyncBody, 'non-lexical-this', scope, privateScope);
    Assert(!(_temp6 instanceof AbruptCompletion), "OrdinaryFunctionCreate(\n    surroundingAgent.intrinsic('%AsyncFunction.prototype%'),\n    sourceText,\n    FormalParameters,\n    AsyncBody,\n    'non-lexical-this',\n    scope,\n    privateScope,\n  )" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const closure = _temp6;
    // 6. Perform SetFunctionName(closure, name).
    SetFunctionName(closure, name);
    // 7. Return closure.
    return closure;
  }

  /** https://tc39.es/ecma262/#sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression */
  //   AsyncGeneratorExpression :
  //     `async` `function` `*` `(` FormalParameters `)` `{` AsyncGeneratorBody `}`
  //     `async` `function` `*` BindingIdentifier `(` FormalParameters `)` `{` AsyncGeneratorBody `}`
  function InstantiateAsyncGeneratorFunctionExpression(AsyncGeneratorExpression, name) {
    const {
      BindingIdentifier,
      FormalParameters,
      AsyncGeneratorBody
    } = AsyncGeneratorExpression;
    if (BindingIdentifier) {
      // 1. Assert: name is not present.
      Assert(name === undefined, "name === undefined");
      // 2. Set name to StringValue of BindingIdentifier.
      name = StringValue(BindingIdentifier);
      // 3. Let scope be the running execution context's LexicalEnvironment.
      const scope = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
      // 4. Let funcEnv be NewDeclarativeEnvironment(scope).
      const funcEnv = new DeclarativeEnvironmentRecord(scope);
      // 5. Perform funcEnv.CreateImmutableBinding(name, false).
      funcEnv.CreateImmutableBinding(name, Value.false);
      // 6. Let privateScope be the running execution context's PrivateEnvironment.
      const privateScope = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
      // 7. Let source text be the source textmatched by AsyncGeneratorExpression.
      const sourceText = sourceTextMatchedBy(AsyncGeneratorExpression);
      // 8. Let closure be OrdinaryFunctionCreate(%AsyncGeneratorFunction.prototype%, sourceText, FormalParameters, AsyncGeneratorBody, non-lexical-this, funcEnv, privateScope).
      let _temp = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%AsyncGeneratorFunction.prototype%'), sourceText, FormalParameters, AsyncGeneratorBody, 'non-lexical-this', funcEnv, privateScope);
      Assert(!(_temp instanceof AbruptCompletion), "OrdinaryFunctionCreate(surroundingAgent.intrinsic('%AsyncGeneratorFunction.prototype%'), sourceText, FormalParameters, AsyncGeneratorBody, 'non-lexical-this', funcEnv, privateScope)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      const closure = _temp;
      // 9. Perform SetFunctionName(closure, name).
      SetFunctionName(closure, name);
      // 10. Let prototype be OrdinaryObjectCreate(%AsyncGeneratorFunction.prototype.prototype%).
      const prototype = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%AsyncGeneratorFunction.prototype.prototype%'));
      // 11. Perform DefinePropertyOrThrow(closure, "prototype", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).
      let _temp2 = DefinePropertyOrThrow(closure, Value('prototype'), exports.Descriptor({
        Value: prototype,
        Writable: Value.true,
        Enumerable: Value.false,
        Configurable: Value.false
      }));
      Assert(!(_temp2 instanceof AbruptCompletion), "DefinePropertyOrThrow(\n      closure,\n      Value('prototype'),\n      Descriptor({\n        Value: prototype,\n        Writable: Value.true,\n        Enumerable: Value.false,\n        Configurable: Value.false,\n      }),\n    )" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      // 12. Perform funcEnv.InitializeBinding(name, closure).
      funcEnv.InitializeBinding(name, closure);
      // 13. Return closure.
      return closure;
    }
    // 1. If name is not present, set name to "".
    if (name === undefined) {
      name = Value('');
    }
    // 2. Let scope be the LexicalEnvironment of the running execution context.
    const scope = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 3. Let privateScope be the running execution context's PrivateEnvironment.
    const privateScope = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
    // 4. Let sourceText be the source text matched by AsyncGeneratorExpression.
    const sourceText = sourceTextMatchedBy(AsyncGeneratorExpression);
    // 5. Let closure be ! OrdinaryFunctionCreate(%AsyncGeneratorFunction.prototype%, sourceText, FormalParameters, AsyncGeneratorBody, non-lexical-this, scope, privateScope).
    let _temp3 = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%AsyncGeneratorFunction.prototype%'), sourceText, FormalParameters, AsyncGeneratorBody, 'non-lexical-this', scope, privateScope);
    Assert(!(_temp3 instanceof AbruptCompletion), "OrdinaryFunctionCreate(surroundingAgent.intrinsic('%AsyncGeneratorFunction.prototype%'), sourceText, FormalParameters, AsyncGeneratorBody, 'non-lexical-this', scope, privateScope)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const closure = _temp3;
    // 6. Perform SetFunctionName(closure, name).
    SetFunctionName(closure, name);
    // 7. Let prototype be ! OrdinaryObjectCreate(%AsyncGeneratorFunction.prototype.prototype%).
    const prototype = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%AsyncGeneratorFunction.prototype.prototype%'));
    // 8. Perform ! DefinePropertyOrThrow(closure, "prototype", PropertyDescriptor { [[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false }).
    let _temp4 = DefinePropertyOrThrow(closure, Value('prototype'), exports.Descriptor({
      Value: prototype,
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.false
    }));
    Assert(!(_temp4 instanceof AbruptCompletion), "DefinePropertyOrThrow(\n    closure,\n    Value('prototype'),\n    Descriptor({\n      Value: prototype,\n      Writable: Value.true,\n      Enumerable: Value.false,\n      Configurable: Value.false,\n    }),\n  )" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 9. Return closure.
    return closure;
  }

  class ClassStaticBlockDefinitionRecord {
    BodyFunction;
    constructor({
      BodyFunction
    }) {
      this.BodyFunction = BodyFunction;
    }
  }

  /** https://tc39.es/ecma262/#sec-runtime-semantics-classstaticblockdefinitionevaluation */
  //    ClassStaticBlock : `static` `{` ClassStaticBlockBody `}`
  function ClassStaticBlockDefinitionEvaluation({
    ClassStaticBlockBody
  }, homeObject) {
    // 1. Let lex be the running execution context's LexicalEnvironment.
    const lex = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 2. Let privateEnv be the running execution context's PrivateEnvironment.
    const privateEnv = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
    // 3. Let sourceText be the empty sequence of Unicode code points.
    const sourceText = '';
    // 4. Let formalParameters be an instance of the production FormalParameters : [empty] .
    const formalParameters = [];
    // 5. Let bodyFunction be OrdinaryFunctionCreate(%Function.prototype%, sourceText, formalParameters, ClassStaticBlockBody, non-lexical-this, lex, privateEnv).
    let _temp = OrdinaryFunctionCreate(exports.surroundingAgent.intrinsic('%Function.prototype%'), sourceText, formalParameters, ClassStaticBlockBody, 'non-lexical-this', lex, privateEnv);
    Assert(!(_temp instanceof AbruptCompletion), "OrdinaryFunctionCreate(\n    surroundingAgent.intrinsic('%Function.prototype%'),\n    sourceText,\n    formalParameters,\n    ClassStaticBlockBody,\n    'non-lexical-this',\n    lex,\n    privateEnv,\n  )" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const bodyFunction = _temp;
    // 6. Perform MakeMethod(bodyFunction, homeObject).
    let _temp2 = MakeMethod(bodyFunction, homeObject);
    Assert(!(_temp2 instanceof AbruptCompletion), "MakeMethod(bodyFunction, homeObject)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 7. Return the ClassStaticBlockDefinition Record { [[BodyFunction]]: bodyFunction }.
    return new ClassStaticBlockDefinitionRecord({
      BodyFunction: bodyFunction
    });
  }

  // @ts-nocheck
  // #resolvedbinding-record
  class ResolvedBindingRecord {
    Module;
    BindingName;
    constructor({
      Module,
      BindingName
    }) {
      Assert(Module instanceof AbstractModuleRecord, "Module instanceof AbstractModuleRecord");
      Assert(BindingName === 'namespace' || BindingName instanceof JSStringValue, "BindingName === 'namespace' || BindingName instanceof JSStringValue");
      this.Module = Module;
      this.BindingName = BindingName;
    }
    mark(m) {
      m(this.Module);
    }
  }
  /** https://tc39.es/ecma262/#sec-abstract-module-records */
  class AbstractModuleRecord {
    Realm;
    Environment;
    Namespace;
    HostDefined;
    constructor(init) {
      this.Realm = init.Realm;
      this.Environment = init.Environment;
      this.Namespace = init.Namespace;
      this.HostDefined = init.HostDefined;
    }
    mark(m) {
      m(this.Realm);
      m(this.Environment);
      m(this.Namespace);
    }
  }
  /** https://tc39.es/ecma262/#sec-cyclic-module-records */
  class CyclicModuleRecord extends AbstractModuleRecord {
    Status;
    EvaluationError;
    DFSIndex;
    DFSAncestorIndex;
    RequestedModules;
    LoadedModules;
    Async;
    AsyncEvaluating;
    TopLevelCapability;
    AsyncParentModules;
    PendingAsyncDependencies;
    constructor(init) {
      super(init);
      this.Status = init.Status;
      this.EvaluationError = init.EvaluationError;
      this.DFSIndex = init.DFSIndex;
      this.DFSAncestorIndex = init.DFSAncestorIndex;
      this.RequestedModules = init.RequestedModules;
      this.LoadedModules = init.LoadedModules;
      this.Async = init.Async;
      this.AsyncEvaluating = init.AsyncEvaluating;
      this.TopLevelCapability = init.TopLevelCapability;
      this.AsyncParentModules = init.AsyncParentModules;
      this.PendingAsyncDependencies = init.PendingAsyncDependencies;
    }

    /** https://tc39.es/ecma262/#sec-LoadRequestedModules */
    LoadRequestedModules(hostDefined = Value.undefined) {
      const module = this;

      // 2. Let pc be ! NewPromiseCapability(%Promise%).
      let _temp = NewPromiseCapability(exports.surroundingAgent.intrinsic('%Promise%'));
      Assert(!(_temp instanceof AbruptCompletion), "NewPromiseCapability(surroundingAgent.intrinsic('%Promise%'))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      const pc = _temp;
      // 3. Let state be a new GraphLoadingState Record { [[IsLoading]]: true, [[PendingModulesCount]]: 1, [[Visited]]: « », [[PromiseCapability]]: pc, [[HostDefined]]: hostDefined }.
      const state = new GraphLoadingState({
        PromiseCapability: pc,
        HostDefined: hostDefined
      });
      // 4. Perform InnerModuleLoading(state, module).
      InnerModuleLoading(state, module);
      // 5. Return pc.[[Promise]].
      return pc.Promise;
    }

    /** https://tc39.es/ecma262/#sec-moduledeclarationlinking */
    Link() {
      const module = this;
      // 1. Assert: module.[[Status]] is unlinked, linked, evaluating-async, or evaluated.
      Assert(module.Status === 'unlinked' || module.Status === 'linked' || module.Status === 'evaluating-async' || module.Status === 'evaluated', "module.Status === 'unlinked' || module.Status === 'linked' || module.Status === 'evaluating-async' || module.Status === 'evaluated'");
      // 2. Let stack be a new empty List.
      const stack = [];
      // 3. Let result be Completion(InnerModuleLinking(module, stack, 0)).
      const result = InnerModuleLinking(module, stack, 0);
      // 5. If result is an abrupt completion, then
      if (result instanceof AbruptCompletion) {
        // a. For each Cyclic Module Record m of stack, do
        for (const m of stack) {
          // i. Assert: m.[[Status]] is linking.
          Assert(m.Status === 'linking', "m.Status === 'linking'");
          // ii. Set m.[[Status]] to unlinked.
          m.Status = 'unlinked';
        }
        // b. Assert: module.[[Status]] is unlinked.
        Assert(module.Status === 'unlinked', "module.Status === 'unlinked'");
        // c. Return result.
        return result;
      }
      // 6. Assert: module.[[Status]] is linked, evaluating-async, or evaluated.
      Assert(module.Status === 'linked' || module.Status === 'evaluating-async' || module.Status === 'evaluated', "module.Status === 'linked' || module.Status === 'evaluating-async' || module.Status === 'evaluated'");
      // 7. Assert: stack is empty.
      Assert(stack.length === 0, "stack.length === 0");
      // 8. Return unused.
      return NormalCompletion(undefined);
    }

    /** https://tc39.es/ecma262/#sec-moduleevaluation */
    Evaluate() {
      // 1. Assert: This call to Evaluate is not happening at the same time as another call to Evaluate within the surrounding agent.
      // 2. Let module be this Cyclic Module Record.
      let module = this;
      // 3. Assert: module.[[Status]] is linked or evaluated.
      Assert(module.Status === 'linked' || module.Status === 'evaluating-async' || module.Status === 'evaluated', "module.Status === 'linked' || module.Status === 'evaluating-async' || module.Status === 'evaluated'");
      // (*TopLevelAwait) 3. If module.[[Status]] is evaluating-async or evaluated, set module to GetAsyncCycleRoot(module).
      if (module.Status === 'evaluating-async' || module.Status === 'evaluated') {
        module = GetAsyncCycleRoot(module);
      }
      // (*TopLevelAwait) 4. If module.[[TopLevelCapability]] is not undefined, then
      if (!(module.TopLevelCapability instanceof UndefinedValue)) {
        // a. Return module.[[TopLevelCapability]].[[Promise]].
        return module.TopLevelCapability.Promise;
      }
      // 4. Let stack be a new empty List.
      const stack = [];
      // (*TopLevelAwait) 6. Let capability be ! NewPromiseCapability(%Promise%).
      let _temp2 = NewPromiseCapability(exports.surroundingAgent.intrinsic('%Promise%'));
      Assert(!(_temp2 instanceof AbruptCompletion), "NewPromiseCapability(surroundingAgent.intrinsic('%Promise%'))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      const capability = _temp2;
      // (*TopLevelAwait) 7. Set module.[[TopLevelCapability]] to capability.
      module.TopLevelCapability = capability;
      // 5. Let result be InnerModuleEvaluation(module, stack, 0).
      const result = InnerModuleEvaluation(module, stack, 0);
      // 6. If result is an abrupt completion, then
      if (result instanceof AbruptCompletion) {
        // a. For each Cyclic Module Record m in stack, do
        for (const m of stack) {
          // i. Assert: m.[[Status]] is evaluating.
          Assert(m.Status === 'evaluating', "m.Status === 'evaluating'");
          // ii. Set m.[[Status]] to evaluated.
          m.Status = 'evaluated';
          // iii. Set m.[[EvaluationError]] to result.
          m.EvaluationError = result;
        }
        // b. Assert: module.[[Status]] is evaluated and module.[[EvaluationError]] is result.
        Assert(module.Status === 'evaluated' && module.EvaluationError === result, "module.Status === 'evaluated' && module.EvaluationError === result");
        // c. Return result.
        // c. (*TopLevelAwait) Perform ! Call(capability.[[Reject]], undefined, «result.[[Value]]»).
        let _temp3 = Call(capability.Reject, Value.undefined, [result.Value]);
        Assert(!(_temp3 instanceof AbruptCompletion), "Call(capability.Reject, Value.undefined, [result.Value])" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
      } else {
        // (*TopLevelAwait) 10. Otherwise,
        // a. Assert: module.[[Status]] is evaluating-async or evaluated.
        Assert(module.Status === 'evaluating-async' || module.Status === 'evaluated', "module.Status === 'evaluating-async' || module.Status === 'evaluated'");
        // b. Assert: module.[[EvaluationError]] is undefined.
        Assert(module.EvaluationError === Value.undefined, "module.EvaluationError === Value.undefined");
        // c. If module.[[AsyncEvaluating]] is false, then
        if (module.AsyncEvaluating === Value.false) {
          let _temp4 = Call(capability.Resolve, Value.undefined, [Value.undefined]);
          Assert(!(_temp4 instanceof AbruptCompletion), "Call(capability.Resolve, Value.undefined, [Value.undefined])" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp4 instanceof Completion) {
            _temp4 = _temp4.Value;
          }
        }
        // d. Assert: stack is empty.
        Assert(stack.length === 0, "stack.length === 0");
      }
      // 9. Return undefined.
      // (*TopLevelAwait) 11. Return capability.[[Promise]].
      return capability.Promise;
    }
    mark(m) {
      super.mark(m);
      m(this.EvaluationError);
      for (const v of this.LoadedModules) {
        m(v.Module);
      }
    }
  }
  /** https://tc39.es/ecma262/#sec-source-text-module-records */
  class SourceTextModuleRecord extends CyclicModuleRecord {
    ImportMeta;
    ECMAScriptCode;
    Context;
    ImportEntries;
    LocalExportEntries;
    IndirectExportEntries;
    StarExportEntries;
    constructor(init) {
      super(init);
      this.ImportMeta = init.ImportMeta;
      this.ECMAScriptCode = init.ECMAScriptCode;
      this.Context = init.Context;
      this.ImportEntries = init.ImportEntries;
      this.LocalExportEntries = init.LocalExportEntries;
      this.IndirectExportEntries = init.IndirectExportEntries;
      this.StarExportEntries = init.StarExportEntries;
    }

    /** https://tc39.es/ecma262/#sec-getexportednames */
    GetExportedNames(exportStarSet) {
      const module = this;
      // 1. Assert: module.[[Status]] is not new.
      Assert(module.Status !== 'new', "module.Status !== 'new'");
      // 2. If exportStarSet is not present, set exportStarSet to a new empty List.
      if (!exportStarSet) {
        exportStarSet = [];
      }
      // 3. If exportStarSet contains module, then
      if (exportStarSet.includes(module)) {
        // a. Assert: We've reached the starting point of an import * circularity.
        // b. Return a new empty List.
        return [];
      }
      // 4. Append module to exportStarSet.
      exportStarSet.push(module);
      // 5. Let exportedNames be a new empty List.
      const exportedNames = [];
      // 6. For each ExportEntry Record e in module.[[LocalExportEntries]], do
      for (const e of module.LocalExportEntries) {
        // a. Assert: module provides the direct binding for this export.
        // b. Append e.[[ExportName]] to exportedNames.
        exportedNames.push(e.ExportName);
      }
      // 7. For each ExportEntry Record e in module.[[IndirectExportEntries]], do
      for (const e of module.IndirectExportEntries) {
        // a. Assert: module imports a specific binding for this export.
        // b. Append e.[[ExportName]] to exportedNames.
        exportedNames.push(e.ExportName);
      }
      // 8. For each ExportEntry Record e in module.[[StarExportEntries]], do
      for (const e of module.StarExportEntries) {
        // a. Let requestedModule be GetImportedModule(module, e.[[ModuleRequest]]).
        const requestedModule = GetImportedModule(module, e.ModuleRequest);
        // b. Let starNames be requestedModule.GetExportedNames(exportStarSet).
        const starNames = requestedModule.GetExportedNames(exportStarSet);
        // c. For each element n of starNames, do
        for (const n of starNames) {
          // i. If SameValue(n, "default") is false, then
          if (SameValue(n, Value('default')) === Value.false) {
            // 1. If n is not an element of exportedNames, then
            if (!exportedNames.includes(n)) {
              // a. Append n to exportedNames.
              exportedNames.push(n);
            }
          }
        }
      }
      // 9. Return exportedNames.
      return exportedNames;
    }

    /** https://tc39.es/ecma262/#sec-resolveexport */
    ResolveExport(exportName, resolveSet) {
      const module = this;
      // 1. Assert: module.[[Status]] is not new.
      Assert(module.Status !== 'new', "module.Status !== 'new'");
      // 2. If resolveSet is not present, set resolveSet to a new empty List.
      if (!resolveSet) {
        resolveSet = [];
      }
      // 3. For each Record { [[Module]], [[ExportName]] } r in resolveSet, do
      for (const r of resolveSet) {
        // a. If module and r.[[Module]] are the same Module Record and SameValue(exportName, r.[[ExportName]]) is true, then
        if (module === r.Module && SameValue(exportName, r.ExportName) === Value.true) {
          // i. Assert: This is a circular import request.
          // ii. Return null.
          return null;
        }
      }
      // 4. Append the Record { [[Module]]: module, [[ExportName]]: exportName } to resolveSet.
      resolveSet.push({
        Module: module,
        ExportName: exportName
      });
      // 5. For each ExportEntry Record e in module.[[LocalExportEntries]], do
      for (const e of module.LocalExportEntries) {
        // a. If SameValue(exportName, e.[[ExportName]]) is true, then
        if (SameValue(exportName, e.ExportName) === Value.true) {
          // i. Assert: module provides the direct binding for this export.
          // ii. Return ResolvedBinding Record { [[Module]]: module, [[BindingName]]: e.[[LocalName]] }.
          return new ResolvedBindingRecord({
            Module: module,
            BindingName: e.LocalName
          });
        }
      }
      // 6. For each ExportEntry Record e in module.[[IndirectExportEntries]], do
      for (const e of module.IndirectExportEntries) {
        // a. If SameValue(exportName, e.[[ExportName]]) is true, then
        if (SameValue(exportName, e.ExportName) === Value.true) {
          // i. Let importedModule be GetImportedModule(module, e.[[ModuleRequest]]).
          const importedModule = GetImportedModule(module, e.ModuleRequest);
          // ii. If e.[[ImportName]] is ~all~, then
          if (e.ImportName === 'all') {
            // 1. Assert: module does not provide the direct binding for this export
            // 2. Return ResolvedBinding Record { [[Module]]: importedModule, [[BindingName]]: ~namespace~ }.
            return new ResolvedBindingRecord({
              Module: importedModule,
              BindingName: 'namespace'
            });
          } else {
            // iv. Else,
            // 1. Assert: module imports a specific binding for this export.
            // 2. Return importedModule.ResolveExport(e.[[ImportName]], resolveSet).
            return importedModule.ResolveExport(e.ImportName, resolveSet);
          }
        }
      }
      // 7. If SameValue(exportName, "default") is true, then
      if (SameValue(exportName, Value('default')) === Value.true) {
        // a. Assert: A default export was not explicitly defined by this module.
        // b. Return null.
        return null;
        // c. NOTE: A default export cannot be provided by an export * or export * from "mod" declaration.
      }
      // 8. Let starResolution be null.
      let starResolution = null;
      // 9. For each ExportEntry Record e in module.[[StarExportEntries]], do
      for (const e of module.StarExportEntries) {
        // a. Let importedModule be GetImportedModule(module, e.[[ModuleRequest]]).
        const importedModule = GetImportedModule(module, e.ModuleRequest);
        // b. Let resolution be importedModule.ResolveExport(exportName, resolveSet).
        const resolution = importedModule.ResolveExport(exportName, resolveSet);
        // c. If resolution is "ambiguous", return "ambiguous".
        if (resolution === 'ambiguous') {
          return 'ambiguous';
        }
        // d. If resolution is not null, then
        if (resolution !== null) {
          // a. Assert: resolution is a ResolvedBinding Record.
          Assert(resolution instanceof ResolvedBindingRecord, "resolution instanceof ResolvedBindingRecord");
          // b. If starResolution is null, set starResolution to resolution.
          if (starResolution === null) {
            starResolution = resolution;
          } else {
            // c. Else,
            // 1. Assert: There is more than one * import that includes the requested name.
            // 2. If resolution.[[Module]] and starResolution.[[Module]] are not the same Module Record or SameValue(resolution.[[BindingName]], starResolution.[[BindingName]]) is false, return "ambiguous".
            if (resolution.Module !== starResolution.Module || SameValue(resolution.BindingName, starResolution.BindingName) === Value.false) {
              return 'ambiguous';
            }
          }
        }
      }
      // 11. Return starResolution.
      return starResolution;
    }

    /** https://tc39.es/ecma262/#sec-source-text-module-record-initialize-environment */
    InitializeEnvironment() {
      const module = this;
      // 1. For each ExportEntry Record e in module.[[IndirectExportEntries]], do
      for (const e of module.IndirectExportEntries) {
        // a. Let resolution be module.ResolveExport(e.[[ExportName]]).
        const resolution = module.ResolveExport(e.ExportName);
        // b. If resolution is null or "ambiguous", throw a SyntaxError exception.
        if (resolution === null || resolution === 'ambiguous') {
          return exports.surroundingAgent.Throw('SyntaxError', 'ResolutionNullOrAmbiguous', resolution, e.ExportName, module);
        }
        // c. Assert: resolution is a ResolvedBinding Record.
        Assert(resolution instanceof ResolvedBindingRecord, "resolution instanceof ResolvedBindingRecord");
      }
      // 2. Assert: All named exports from module are resolvable.
      // 3. Let realm be module.[[Realm]].
      const realm = module.Realm;
      // 4. Assert: realm is not undefined.
      Assert(!(realm instanceof UndefinedValue), "!(realm instanceof UndefinedValue)");
      // 5. Let env be NewModuleEnvironment(realm.[[GlobalEnv]]).
      const env = new ModuleEnvironmentRecord(realm.GlobalEnv);
      // 6. Set module.[[Environment]] to env.
      module.Environment = env;
      // 7. For each ImportEntry Record in in module.[[ImportEntries]], do
      for (const ie of module.ImportEntries) {
        // a. Let importedModule be GetImportedModule(module, in.[[ModuleRequest]]).
        const importedModule = GetImportedModule(module, ie.ModuleRequest);
        // b. If in.[[ImportName]] is ~namespace-object~, then
        if (ie.ImportName === 'namespace-object') {
          // i. Let namespace be GetModuleNamespace(importedModule).
          const namespace = GetModuleNamespace(importedModule);
          // ii. Perform ! env.CreateImmutableBinding(in.[[LocalName]], true).
          let _temp5 = env.CreateImmutableBinding(ie.LocalName, Value.true);
          Assert(!(_temp5 instanceof AbruptCompletion), "env.CreateImmutableBinding(ie.LocalName, Value.true)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp5 instanceof Completion) {
            _temp5 = _temp5.Value;
          }
          // iii. Call env.InitializeBinding(in.[[LocalName]], namespace).
          env.InitializeBinding(ie.LocalName, namespace);
        } else {
          // c. Else,
          // i. Let resolution be importedModule.ResolveExport(in.[[ImportName]]).
          const resolution = importedModule.ResolveExport(ie.ImportName);
          // ii. If resolution is null or "ambiguous", throw a SyntaxError exception.
          if (resolution === null || resolution === 'ambiguous') {
            return exports.surroundingAgent.Throw('SyntaxError', 'ResolutionNullOrAmbiguous', resolution, ie.ImportName, importedModule);
          }
          // iii. If resolution.[[BindingName]] is ~namespace~, then
          if (resolution.BindingName === 'namespace') {
            // 1. Let namespace be GetModuleNamespace(resolution.[[Module]]).
            const namespace = GetModuleNamespace(resolution.Module);
            // 2. Perform ! env.CreateImmutableBinding(in.[[LocalName]], true).
            let _temp6 = env.CreateImmutableBinding(ie.LocalName, Value.true);
            Assert(!(_temp6 instanceof AbruptCompletion), "env.CreateImmutableBinding(ie.LocalName, Value.true)" + ' returned an abrupt completion');
            /* c8 ignore if */
            if (_temp6 instanceof Completion) {
              _temp6 = _temp6.Value;
            }
            // 3. Call env.InitializeBinding(in.[[LocalName]], namespace).
            env.InitializeBinding(ie.LocalName, namespace);
          } else {
            // iv. Else,
            // 1. Call env.CreateImportBinding(in.[[LocalName]], resolution.[[Module]], resolution.[[BindingName]]).
            env.CreateImportBinding(ie.LocalName, resolution.Module, resolution.BindingName);
          }
        }
      }
      // 8. Let moduleContext be a new ECMAScript code execution context.
      const moduleContext = new ExecutionContext();
      // 9. Set the Function of moduleContext to null.
      moduleContext.Function = Value.null;
      // 10. Assert: module.[[Realm]] is not undefined.
      Assert(module.Realm !== Value.undefined, "module.Realm !== Value.undefined");
      // 11. Set the Realm of moduleContext to module.[[Realm]].
      moduleContext.Realm = module.Realm;
      // 12. Set the ScriptOrModule of moduleContext to module.
      moduleContext.ScriptOrModule = module;
      // 13. Set the VariableEnvironment of moduleContext to module.[[Environment]].
      moduleContext.VariableEnvironment = module.Environment;
      // 14. Set the LexicalEnvironment of moduleContext to module.[[Environment]].
      moduleContext.LexicalEnvironment = module.Environment;
      // 15. Set the PrivateEnvironment of moduleContext to null.
      moduleContext.PrivateEnvironment = Value.null;
      // 16. Set module.[[Context]] to moduleContext.
      module.Context = moduleContext;
      // 17. Push moduleContext onto the execution context stack; moduleContext is now the running execution context.
      exports.surroundingAgent.executionContextStack.push(moduleContext);
      // 18. Let code be module.[[ECMAScriptCode]].
      const code = module.ECMAScriptCode;
      // 19. Let varDeclarations be the VarScopedDeclarations of code.
      const varDeclarations = VarScopedDeclarations(code);
      // 20. Let declaredVarNames be a new empty List.
      const declaredVarNames = new ValueSet();
      // 21. For each element d in varDeclarations, do
      for (const d of varDeclarations) {
        // a. For each element dn of the BoundNames of d, do
        for (const dn of BoundNames(d)) {
          // i. If dn is not an element of declaredVarNames, then
          if (!declaredVarNames.has(dn)) {
            let _temp7 = env.CreateMutableBinding(dn, Value.false);
            Assert(!(_temp7 instanceof AbruptCompletion), "env.CreateMutableBinding(dn, Value.false)" + ' returned an abrupt completion');
            /* c8 ignore if */
            if (_temp7 instanceof Completion) {
              _temp7 = _temp7.Value;
            }
            // 2. Call env.InitializeBinding(dn, undefined).
            env.InitializeBinding(dn, Value.undefined);
            // 3. Append dn to declaredVarNames.
            declaredVarNames.add(dn);
          }
        }
      }
      // 22. Let lexDeclarations be the LexicallyScopedDeclarations of code.
      const lexDeclarations = LexicallyScopedDeclarations(code);
      // 24. For each element d in lexDeclarations, do
      for (const d of lexDeclarations) {
        // a. For each element dn of the BoundNames of d, do
        for (const dn of BoundNames(d)) {
          // i. If IsConstantDeclaration of d is true, then
          if (IsConstantDeclaration(d)) {
            let _temp8 = env.CreateImmutableBinding(dn, Value.true);
            /* c8 ignore if */
            if (_temp8 instanceof AbruptCompletion) {
              return _temp8;
            }
            /* c8 ignore if */
            if (_temp8 instanceof Completion) {
              _temp8 = _temp8.Value;
            }
          } else {
            let _temp9 = env.CreateMutableBinding(dn, Value.false);
            /* c8 ignore if */
            if (_temp9 instanceof AbruptCompletion) {
              return _temp9;
            }
            /* c8 ignore if */
            if (_temp9 instanceof Completion) {
              _temp9 = _temp9.Value;
            }
          }
          // iii. If d is a FunctionDeclaration, a GeneratorDeclaration, an AsyncFunctionDeclaration, or an AsyncGeneratorDeclaration, then
          if (d.type === 'FunctionDeclaration' || d.type === 'GeneratorDeclaration' || d.type === 'AsyncFunctionDeclaration' || d.type === 'AsyncGeneratorDeclaration') {
            // 1. Let fo be InstantiateFunctionObject of d with argument env.
            const fo = InstantiateFunctionObject(d, env, Value.null);
            // 2. Call env.InitializeBinding(dn, fo).
            env.InitializeBinding(dn, fo);
          }
        }
      }
      // 25. Remove moduleContext from the execution context stack.
      exports.surroundingAgent.executionContextStack.pop(moduleContext);
      // 26. Return unused.
      return NormalCompletion(undefined);
    }

    /** https://tc39.es/ecma262/#sec-source-text-module-record-execute-module */
    ExecuteModule(capability) {
      // 1. Let module be this Source Text Module Record.
      const module = this;
      // 2. Suspend the currently running execution context.
      // 3. Let moduleContext be module.[[Context]].
      const moduleContext = module.Context;
      if (module.Async === Value.false) {
        Assert(capability === undefined, "capability === undefined");
        // 4. Push moduleContext onto the execution context stack; moduleContext is now the running execution context.
        exports.surroundingAgent.executionContextStack.push(moduleContext);
        // 5. Let result be the result of evaluating module.[[ECMAScriptCode]].
        const result = EnsureCompletion(unwind(Evaluate(module.ECMAScriptCode)));
        // 6. Suspend moduleContext and remove it from the execution context stack.
        // 7. Resume the context that is now on the top of the execution context stack as the running execution context.
        exports.surroundingAgent.executionContextStack.pop(moduleContext);
        // 8. Return Completion(result).
        return Completion(result);
      } else {
        // (*TopLevelAwait)
        // a. Assert: capability is a PromiseCapability Record.
        Assert(capability instanceof PromiseCapabilityRecord, "capability instanceof PromiseCapabilityRecord");
        // b. Perform ! AsyncBlockStart(capability, module.[[ECMAScriptCode]], moduleCxt).
        let _temp10 = AsyncBlockStart(capability, module.ECMAScriptCode, moduleContext);
        Assert(!(_temp10 instanceof AbruptCompletion), "AsyncBlockStart(capability, module.ECMAScriptCode, moduleContext)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp10 instanceof Completion) {
          _temp10 = _temp10.Value;
        }
        // c. Return.
        return Value.undefined;
      }
    }
    mark(m) {
      super.mark(m);
      m(this.ImportMeta);
      m(this.Context);
    }
  }
  /** https://tc39.es/ecma262/#sec-synthetic-module-records */
  class SyntheticModuleRecord extends AbstractModuleRecord {
    ExportNames;
    EvaluationSteps;
    constructor(init) {
      super(init);
      this.ExportNames = init.ExportNames;
      this.EvaluationSteps = init.EvaluationSteps;
    }

    /** https://tc39.es/ecma262/#sec-synthetic-module-record-getexportednames */
    GetExportedNames() {
      const module = this;
      // 1. Return module.[[ExportNames]].
      return module.ExportNames;
    }

    /** https://tc39.es/ecma262/#sec-synthetic-module-record-resolveexport */
    ResolveExport(exportName) {
      const module = this;
      // 1. If module.[[ExportNames]] does not contain exportName, return null.
      // 2. Return ResolvedBinding Record { [[Module]]: module, [[BindingName]]: exportName }.
      for (const e of module.ExportNames) {
        if (SameValue(e, exportName) === Value.true) {
          return new ResolvedBindingRecord({
            Module: module,
            BindingName: exportName
          });
        }
      }
      return null;
    }

    /** https://tc39.es/ecma262/#sec-synthetic-module-record-link */
    Link() {
      const module = this;
      // 1. Let realm be module.[[Realm]].
      const realm = module.Realm;
      // 2. Assert: realm is not undefined.
      Assert(!(realm instanceof UndefinedValue), "!(realm instanceof UndefinedValue)");
      // 3. Let env be NewModuleEnvironment(realm.[[GlobalEnv]]).
      const env = new ModuleEnvironmentRecord(realm.GlobalEnv);
      // 4. Set module.[[Environment]] to env.
      module.Environment = env;
      // 5. For each exportName in module.[[ExportNames]],
      for (const exportName of module.ExportNames) {
        let _temp11 = env.CreateMutableBinding(exportName, Value.false);
        Assert(!(_temp11 instanceof AbruptCompletion), "env.CreateMutableBinding(exportName, Value.false)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp11 instanceof Completion) {
          _temp11 = _temp11.Value;
        }
        // b. Perform ! env.InitializeBinding(exportName, undefined).
        let _temp12 = env.InitializeBinding(exportName, Value.undefined);
        Assert(!(_temp12 instanceof AbruptCompletion), "env.InitializeBinding(exportName, Value.undefined)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp12 instanceof Completion) {
          _temp12 = _temp12.Value;
        }
      }
      // 8. Return undefined.
      return Value.undefined;
    }

    /** https://tc39.es/ecma262/#sec-synthetic-module-record-evaluate */
    Evaluate() {
      const module = this;
      // 1. Suspend the currently running execution context.
      // 2. Let moduleContext be a new ECMAScript code execution context.
      const moduleContext = new ExecutionContext();
      // 3. Set the Function of moduleContext to null.
      moduleContext.Function = Value.null;
      // 4. Set the Realm of moduleContext to module.[[Realm]].
      moduleContext.Realm = module.Realm;
      // 5. Set the ScriptOrModule of moduleContext to module.
      moduleContext.ScriptOrModule = module;
      // 6. Set the VariableEnvironment of moduleContext to module.[[Environment]].
      moduleContext.VariableEnvironment = module.Environment;
      // 7. Set the LexicalEnvironment of moduleContext to module.[[Environment]].
      moduleContext.LexicalEnvironment = module.Environment;
      moduleContext.PrivateEnvironment = Value.null;
      // 8. Push moduleContext on to the execution context stack; moduleContext is now the running execution context.
      exports.surroundingAgent.executionContextStack.push(moduleContext);
      // 9. Let result be the result of performing module.[[EvaluationSteps]](module).
      const result = module.EvaluationSteps(module);
      // 10. Suspend moduleContext and remove it from the execution context stack.
      // 11. Resume the context that is now on the top of the execution context stack as the running execution context.
      exports.surroundingAgent.executionContextStack.pop(moduleContext);
      // 12. Return Completion(result).
      // @ts-expect-error
      // TODO(ts): According to the new spec, this should return a Promise now.
      return Completion(result);
    }
    SetSyntheticExport(name, value) {
      const module = this;
      // 1. Return module.[[Environment]].SetMutableBinding(name, value, true).
      return module.Environment.SetMutableBinding(name, value, Value.true);
    }
  }

  /** https://tc39.es/ecma262/#sec-environment-records */
  class EnvironmentRecord {
    OuterEnv;
    constructor(outerEnv) {
      this.OuterEnv = outerEnv;
    }
    // NON-SPEC
    mark(m) {
      m(this.OuterEnv);
    }
  }
  /** https://tc39.es/ecma262/#sec-declarative-environment-records */
  class DeclarativeEnvironmentRecord extends EnvironmentRecord {
    bindings = new ValueMap();

    /** https://tc39.es/ecma262/#sec-declarative-environment-records-hasbinding-n */
    HasBinding(N) {
      // 1. Let envRec be the declarative Environment Record for which the method was invoked.
      const envRec = this;
      // 2. If envRec has a binding for the name that is the value of N, return true.
      if (envRec.bindings.has(N)) {
        return Value.true;
      }
      // 3. Return false.
      return Value.false;
    }

    /** https://tc39.es/ecma262/#sec-declarative-environment-records-createmutablebinding-n-d */
    CreateMutableBinding(N, D) {
      // 1. Let envRec be the declarative Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Assert: envRec does not already have a binding for N.
      Assert(!envRec.bindings.has(N), "!envRec.bindings.has(N)");
      // 3. Create a mutable binding in envRec for N and record that it is uninitialized. If D
      //    is true, record that the newly created binding may be deleted by a subsequent
      //    DeleteBinding call.
      this.bindings.set(N, {
        indirect: false,
        initialized: false,
        mutable: true,
        strict: undefined,
        deletable: D === Value.true,
        value: undefined,
        mark(m) {
          m(this.value);
        }
      });
      //  4. Return NormalCompletion(empty).
      return NormalCompletion(undefined);
    }

    /** https://tc39.es/ecma262/#sec-declarative-environment-records-createimmutablebinding-n-s */
    CreateImmutableBinding(N, S) {
      // 1. Let envRec be the declarative Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Assert: envRec does not already have a binding for N.
      Assert(!envRec.bindings.has(N), "!envRec.bindings.has(N)");
      // 3. Create an immutable binding in envRec for N and record that it is uninitialized. If
      //    S is true, record that the newly created binding is a strict binding.
      this.bindings.set(N, {
        indirect: false,
        initialized: false,
        mutable: false,
        strict: S === Value.true,
        deletable: false,
        value: undefined,
        mark(m) {
          m(this.value);
        }
      });
      // 4. Return NormalCompletion(empty).
      return NormalCompletion(undefined);
    }

    /** https://tc39.es/ecma262/#sec-declarative-environment-records-initializebinding-n-v */
    InitializeBinding(N, V) {
      // 1. Let envRec be the declarative Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Assert: envRec must have an uninitialized binding for N.
      const binding = envRec.bindings.get(N);
      Assert(binding !== undefined && binding.initialized === false, "binding !== undefined && binding.initialized === false");
      // 3. Set the bound value for N in envRec to V.
      binding.value = V;
      // 4. Record that the binding for N in envRec has been initialized.
      binding.initialized = true;
      // 5. Return NormalCompletion(empty).
      return NormalCompletion(undefined);
    }

    /** https://tc39.es/ecma262/#sec-declarative-environment-records-setmutablebinding-n-v-s */
    SetMutableBinding(N, V, S) {
      Assert(IsPropertyKey(N), "IsPropertyKey(N)");
      // 1. Let envRec be the declarative Environment Record for which the method was invoked.
      const envRec = this;
      // 2. If envRec does not have a binding for N, then
      if (!envRec.bindings.has(N)) {
        // a. If S is true, throw a ReferenceError exception.
        if (S === Value.true) {
          return exports.surroundingAgent.Throw('ReferenceError', 'NotDefined', N);
        }
        // b. Perform envRec.CreateMutableBinding(N, true).
        envRec.CreateMutableBinding(N, Value.true);
        // c. Perform envRec.InitializeBinding(N, V).
        envRec.InitializeBinding(N, V);
        // d. Return NormalCompletion(empty).
        return NormalCompletion(undefined);
      }
      const binding = this.bindings.get(N);
      // 3. If the binding for N in envRec is a strict binding, set S to true.
      if (binding.strict === true) {
        S = Value.true;
      }
      // 4. If the binding for N in envRec has not yet been initialized, throw a ReferenceError exception.
      if (binding.initialized === false) {
        return exports.surroundingAgent.Throw('ReferenceError', 'NotInitialized', N);
      }
      // 5. Else if the binding for N in envRec is a mutable binding, change its bound value to V.
      if (binding.mutable === true) {
        binding.value = V;
      } else {
        // a. Assert: This is an attempt to change the value of an immutable binding.
        // b. If S is true, throw a TypeError exception.
        if (S === Value.true) {
          return exports.surroundingAgent.Throw('TypeError', 'AssignmentToConstant', N);
        }
      }
      // 7. Return NormalCompletion(empty).
      return NormalCompletion(undefined);
    }

    /** https://tc39.es/ecma262/#sec-declarative-environment-records-getbindingvalue-n-s */
    GetBindingValue(N, _S) {
      // 1. Let envRec be the declarative Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Assert: envRec has a binding for N.
      const binding = envRec.bindings.get(N);
      Assert(binding !== undefined, "binding !== undefined");
      // 3. If the binding for N in envRec is an uninitialized binding, throw a ReferenceError exception.
      if (binding.initialized === false) {
        return exports.surroundingAgent.Throw('ReferenceError', 'NotInitialized', N);
      }
      // 4. Return the value currently bound to N in envRec.
      return NormalCompletion(binding.value);
    }

    /** https://tc39.es/ecma262/#sec-declarative-environment-records-deletebinding-n */
    DeleteBinding(N) {
      // 1. Let envRec be the declarative Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Assert: envRec has a binding for the name that is the value of N.
      const binding = envRec.bindings.get(N);
      Assert(binding !== undefined, "binding !== undefined");
      // 3. If the binding for N in envRec cannot be deleted, return false.
      if (binding.deletable === false) {
        return Value.false;
      }
      // 4. Remove the binding for N from envRec.
      envRec.bindings.delete(N);
      // 5. Return true.
      return Value.true;
    }

    /** https://tc39.es/ecma262/#sec-declarative-environment-records-hasthisbinding */
    HasThisBinding() {
      // 1. Return false.
      return Value.false;
    }

    /** https://tc39.es/ecma262/#sec-declarative-environment-records-hassuperbinding */
    HasSuperBinding() {
      // 1. Return false.
      return Value.false;
    }

    /** https://tc39.es/ecma262/#sec-declarative-environment-records-withbaseobject */
    WithBaseObject() {
      // 1. Return undefined.
      return Value.undefined;
    }

    // NON-SPEC
    mark(m) {
      // TODO(ts): this function does not call super.mark(). is it a mistake?
      m(this.bindings);
    }
  }

  /** https://tc39.es/ecma262/#sec-object-environment-records */
  class ObjectEnvironmentRecord extends EnvironmentRecord {
    BindingObject;
    IsWithEnvironment;

    /** https://tc39.es/ecma262/#sec-newobjectenvironment */
    constructor(O, W, E) {
      super(E);
      this.BindingObject = O;
      this.IsWithEnvironment = W;
    }

    /** https://tc39.es/ecma262/#sec-object-environment-records-hasbinding-n */
    HasBinding(N) {
      // 1. Let envRec be the object Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let bindings be the binding object for envRec.
      const bindings = envRec.BindingObject;
      // 3. Let foundBinding be ? HasProperty(bindings, N).
      let _temp = HasProperty(bindings, N);
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      const foundBinding = _temp;
      // 4. If foundBinding is false, return false.
      if (foundBinding === Value.false) {
        return Value.false;
      }
      // 5. If the IsWithEnvironment flag of envRec i s false, return true.
      if (envRec.IsWithEnvironment === Value.false) {
        return Value.true;
      }
      // 6. Let unscopables be ? Get(bindings, @@unscopables).
      let _temp2 = Get(bindings, wellKnownSymbols.unscopables);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      const unscopables = _temp2;
      // 7. If Type(unscopables) is Object, then
      if (unscopables instanceof ObjectValue) {
        let _temp4 = Get(unscopables, N);
        /* c8 ignore if */
        if (_temp4 instanceof AbruptCompletion) {
          return _temp4;
        }
        /* c8 ignore if */
        if (_temp4 instanceof Completion) {
          _temp4 = _temp4.Value;
        }
        let _temp3 = ToBoolean(_temp4);
        Assert(!(_temp3 instanceof AbruptCompletion), "ToBoolean(Q(Get(unscopables, N)))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
        // a. Let blocked be ! ToBoolean(? Get(unscopables, N)).
        const blocked = _temp3;
        // b. If blocked is true, return false.
        if (blocked === Value.true) {
          return Value.false;
        }
      }
      // 8. Return true.
      return Value.true;
    }

    /** https://tc39.es/ecma262/#sec-object-environment-records-createmutablebinding-n-d */
    CreateMutableBinding(N, D) {
      // 1. Let envRec be the object Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let envRec be the object Environment Record for which the method was invoked.
      const bindings = envRec.BindingObject;
      // 3. Return ? DefinePropertyOrThrow(bindings, N, PropertyDescriptor { [[Value]]: undefined, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: D }).
      return DefinePropertyOrThrow(bindings, N, exports.Descriptor({
        Value: Value.undefined,
        Writable: Value.true,
        Enumerable: Value.true,
        Configurable: D
      }));
    }

    /** https://tc39.es/ecma262/#sec-object-environment-records-createimmutablebinding-n-s */
    CreateImmutableBinding(_N, _S) {
      Assert(false, 'CreateImmutableBinding called on an Object Environment Record');
    }

    /** https://tc39.es/ecma262/#sec-object-environment-records-initializebinding-n-v */
    InitializeBinding(N, V) {
      // 1. Let envRec be the object Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Assert: envRec must have an uninitialized binding for N.
      // 3. Record that the binding for N in envRec has been initialized.
      // 4. Return ? envRec.SetMutableBinding(N, V, false).
      return envRec.SetMutableBinding(N, V, Value.false);
    }

    /** https://tc39.es/ecma262/#sec-object-environment-records-setmutablebinding-n-v-s */
    SetMutableBinding(N, V, S) {
      // 1. Let envRec be the object Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let bindings be the binding object for envRec.
      const bindings = envRec.BindingObject;
      // 3. Let stillExists be ? HasProperty(bindings, N).
      let _temp5 = HasProperty(bindings, N);
      /* c8 ignore if */
      if (_temp5 instanceof AbruptCompletion) {
        return _temp5;
      }
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      const stillExists = _temp5;
      // 4. If stillExists is false and S is true, throw a ReferenceError exception.
      if (stillExists === Value.false && S === Value.true) {
        return exports.surroundingAgent.Throw('ReferenceError', 'NotDefined', N);
      }
      // 5. Return ? Set(bindings, N, V, S).
      return Set$1(bindings, N, V, S);
    }

    /** https://tc39.es/ecma262/#sec-object-environment-records-getbindingvalue-n-s */
    GetBindingValue(N, S) {
      // 1. Let envRec be the object Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let bindings be the binding object for envRec.
      const bindings = envRec.BindingObject;
      // 3. Let value be ? HasProperty(bindings, N).
      let _temp6 = HasProperty(bindings, N);
      /* c8 ignore if */
      if (_temp6 instanceof AbruptCompletion) {
        return _temp6;
      }
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
      const value = _temp6;
      // 4. If value is false, then
      if (value === Value.false) {
        // a. If S is false, return the value undefined; otherwise throw a ReferenceError exception.
        if (S === Value.false) {
          return NormalCompletion(Value.undefined);
        } else {
          return exports.surroundingAgent.Throw('ReferenceError', 'NotDefined', N);
        }
      }
      // 5. Return Get(bindings, N).
      return Get(bindings, N);
    }

    /** https://tc39.es/ecma262/#sec-object-environment-records-deletebinding-n */
    DeleteBinding(N) {
      // 1. Let envRec be the object Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let bindings be the binding object for envRec.
      const bindings = envRec.BindingObject;
      // 3. Return ? bindings.[[Delete]](N).
      return bindings.Delete(N);
    }

    /** https://tc39.es/ecma262/#sec-object-environment-records-hasthisbinding */
    HasThisBinding() {
      // 1. Return false.
      return Value.false;
    }

    /** https://tc39.es/ecma262/#sec-object-environment-records-hassuperbinding */
    HasSuperBinding() {
      // 1. Return falase.
      return Value.false;
    }

    /** https://tc39.es/ecma262/#sec-object-environment-records-withbaseobject */
    WithBaseObject() {
      // 1. Let envRec be the object Environment Record for which the method was invoked.
      const envRec = this;
      // 2. If the IsWithEnvironment flag of envRec is true, return the binding object for envRec.
      if (envRec.IsWithEnvironment === Value.true) {
        return envRec.BindingObject;
      }
      // 3. Otherwise, return undefined.
      return Value.undefined;
    }

    // NON-SPEC
    mark(m) {
      // TODO(ts): this function does not call super.mark(). is it a mistake?
      m(this.BindingObject);
    }
  }

  /** https://tc39.es/ecma262/#sec-function-environment-records */
  class FunctionEnvironmentRecord extends DeclarativeEnvironmentRecord {
    /** https://tc39.es/ecma262/#sec-newfunctionenvironment */
    constructor(F, newTarget) {
      // 1. Assert: F is an ECMAScript function.
      Assert(isECMAScriptFunctionObject(F), "isECMAScriptFunctionObject(F)");
      // 2. Assert: Type(newTarget) is Undefined or Object.
      Assert(newTarget instanceof UndefinedValue || newTarget instanceof ObjectValue, "newTarget instanceof UndefinedValue || newTarget instanceof ObjectValue");
      // 3. Let env be a new function Environment Record containing no bindings.
      super(F.Environment);
      // 4. Set env.[[FunctionObject]] to F.
      this.FunctionObject = F;
      // 5. If F.[[ThisMode]] is lexical, set env.[[ThisBindingStatus]] to lexical.

      if (F.ThisMode === 'lexical') {
        this.ThisBindingStatus = 'lexical';
      } else {
        // 6. Else, set env.[[ThisBindingStatus]] to uninitialized.
        this.ThisBindingStatus = 'uninitialized';
      }
      // 7. Set env.[[NewTarget]] to newTarget.
      this.NewTarget = newTarget;
      // 8. Set env.[[OuterEnv]] to F.[[Environment]].
      // 9. Return env.
    }
    ThisValue;
    ThisBindingStatus;
    FunctionObject;
    NewTarget;

    /** https://tc39.es/ecma262/#sec-bindthisvalue */
    BindThisValue(V) {
      // 1. Let envRec be the function Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Assert: envRec.[[ThisBindingStatus]] is not lexical.
      Assert(envRec.ThisBindingStatus !== 'lexical', "envRec.ThisBindingStatus !== 'lexical'");
      // 3. If envRec.[[ThisBindingStatus]] is initialized, throw a ReferenceError exception.
      if (envRec.ThisBindingStatus === 'initialized') {
        return exports.surroundingAgent.Throw('ReferenceError', 'InvalidThis');
      }
      // 4. Set envRec.[[ThisValue]] to V.
      envRec.ThisValue = V;
      // 5. Set envRec.[[ThisBindingStatus]] to initialized.
      envRec.ThisBindingStatus = 'initialized';
      // 6. Return V.
      return V;
    }

    /** https://tc39.es/ecma262/#sec-function-environment-records-hasthisbinding */
    HasThisBinding() {
      // 1. Let envRec be the function Environment Record for which the method was invoked.
      const envRec = this;
      // 2. If envRec.[[ThisBindingStatus]] is lexical, return false; otherwise, return true.
      if (envRec.ThisBindingStatus === 'lexical') {
        return Value.false;
      } else {
        return Value.true;
      }
    }

    /** https://tc39.es/ecma262/#sec-function-environment-records-hassuperbinding */
    HasSuperBinding() {
      const envRec = this;
      // 1. If envRec.[[ThisBindingStatus]] is lexical, return false.
      if (envRec.ThisBindingStatus === 'lexical') {
        return Value.false;
      }
      // 2. If envRec.[[FunctionObject]].[[HomeObject]] has the value undefined, return false; otherwise, return true.
      if (envRec.FunctionObject.HomeObject === Value.undefined) {
        return Value.false;
      } else {
        return Value.true;
      }
    }

    /** https://tc39.es/ecma262/#sec-function-environment-records-getthisbinding */
    GetThisBinding() {
      // 1. Let envRec be the function Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Assert: envRec.[[ThisBindingStatus]] is not lexical.
      Assert(envRec.ThisBindingStatus !== 'lexical', "envRec.ThisBindingStatus !== 'lexical'");
      // 3. If envRec.[[ThisBindingStatus]] is uninitialized, throw a ReferenceError exception.
      if (envRec.ThisBindingStatus === 'uninitialized') {
        return exports.surroundingAgent.Throw('ReferenceError', 'InvalidThis');
      }
      // 4. Return envRec.[[ThisValue]].
      return envRec.ThisValue;
    }

    /** https://tc39.es/ecma262/#sec-getsuperbase */
    GetSuperBase() {
      const envRec = this;
      // 1. Let home be envRec.[[FunctionObject]].[[HomeObject]].
      const home = envRec.FunctionObject.HomeObject;
      // 2. If home has the value undefined, return undefined.
      if (home === Value.undefined) {
        return Value.undefined;
      }
      // 3. Assert: Type(home) is Object.
      Assert(home instanceof ObjectValue, "home instanceof ObjectValue");
      // 4. Return ? home.[[GetPrototypeOf]]().
      return home.GetPrototypeOf();
    }
    mark(m) {
      super.mark(m);
      m(this.ThisValue);
      m(this.FunctionObject);
      m(this.NewTarget);
    }
  }

  /** https://tc39.es/ecma262/#sec-global-environment-records */
  class GlobalEnvironmentRecord extends EnvironmentRecord {
    ObjectRecord;
    GlobalThisValue;
    DeclarativeRecord;
    VarNames;

    /** https://tc39.es/ecma262/#sec-newglobalenvironment */
    constructor(G, thisValue) {
      // 1. Let objRec be NewObjectEnvironment(G, false, null).
      const objRec = new ObjectEnvironmentRecord(G, Value.false, Value.null);
      // 2. Let dclRec be a new declarative Environment Record containing no bindings.
      const dclRec = new DeclarativeEnvironmentRecord(Value.null);
      // 3. Let env be a new global Environment Record.
      super(Value.null);
      // 4. Set env.[[ObjectRecord]] to objRec.
      this.ObjectRecord = objRec;
      // 5. Set env.[[GlobalThisValue]] to thisValue.
      this.GlobalThisValue = thisValue;
      // 6. Set env.[[DeclarativeRecord]] to dclRec.
      this.DeclarativeRecord = dclRec;
      // 7. Set env.[[VarNames]] to a new empty List.
      this.VarNames = [];
      // 8. Set env.[[OuterEnv]] to null.
      // 9. Return env.
    }

    /** https://tc39.es/ecma262/#sec-global-environment-records-hasbinding-n */
    HasBinding(N) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let DclRec be envRec.[[DeclarativeRecord]].
      const DclRec = envRec.DeclarativeRecord;
      // 3. If DclRec.HasBinding(N) is true, return true.
      if (DclRec.HasBinding(N) === Value.true) {
        return Value.true;
      }
      // 4. If DclRec.HasBinding(N) is true, return true.
      const ObjRec = envRec.ObjectRecord;
      // 5. Let ObjRec be envRec.[[ObjectRecord]].
      return ObjRec.HasBinding(N);
    }

    /** https://tc39.es/ecma262/#sec-global-environment-records-createmutablebinding-n-d */
    CreateMutableBinding(N, D) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let DclRec be envRec.[[DeclarativeRecord]].
      const DclRec = envRec.DeclarativeRecord;
      // 3. If DclRec.HasBinding(N) is true, throw a TypeError exception.
      if (DclRec.HasBinding(N) === Value.true) {
        return exports.surroundingAgent.Throw('TypeError', 'AlreadyDeclared', N);
      }
      // 4. Return DclRec.CreateMutableBinding(N, D).
      return DclRec.CreateMutableBinding(N, D);
    }

    /** https://tc39.es/ecma262/#sec-global-environment-records-createimmutablebinding-n-s */
    CreateImmutableBinding(N, S) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let DclRec be envRec.[[DeclarativeRecord]].
      const DclRec = envRec.DeclarativeRecord;
      // 3. If DclRec.HasBinding(N) is true, throw a TypeError exception.
      if (DclRec.HasBinding(N) === Value.true) {
        return exports.surroundingAgent.Throw('TypeError', 'AlreadyDeclared', N);
      }
      // Return DclRec.CreateImmutableBinding(N, S).
      return DclRec.CreateImmutableBinding(N, S);
    }

    /** https://tc39.es/ecma262/#sec-global-environment-records-initializebinding-n-v */
    InitializeBinding(N, V) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let DclRec be envRec.[[DeclarativeRecord]].
      const DclRec = envRec.DeclarativeRecord;
      // 3. If DclRec.HasBinding(N) is true, then
      if (DclRec.HasBinding(N) === Value.true) {
        // a. Return DclRec.InitializeBinding(N, V).
        return DclRec.InitializeBinding(N, V);
      }
      // 4. Assert: If the binding exists, it must be in the object Environment Record.
      // 5. Let ObjRec be envRec.[[ObjectRecord]].
      const ObjRec = envRec.ObjectRecord;
      // 6. Return ? ObjRec.InitializeBinding(N, V).
      return ObjRec.InitializeBinding(N, V);
    }

    /** https://tc39.es/ecma262/#sec-global-environment-records-setmutablebinding-n-v-s */
    SetMutableBinding(N, V, S) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let DclRec be envRec.[[DeclarativeRecord]].
      const DclRec = envRec.DeclarativeRecord;
      // 3. If DclRec.HasBinding(N) is true, then
      if (DclRec.HasBinding(N) === Value.true) {
        // a. Return DclRec.SetMutableBinding(N, V, S).
        return DclRec.SetMutableBinding(N, V, S);
      }
      // 4. Let ObjRec be envRec.[[ObjectRecord]].
      const ObjRec = envRec.ObjectRecord;
      // 5. Return ? ObjRec.SetMutableBinding(N, V, S).
      return ObjRec.SetMutableBinding(N, V, S);
    }

    /** https://tc39.es/ecma262/#sec-global-environment-records-getbindingvalue-n-s */
    GetBindingValue(N, S) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let DclRec be envRec.[[DeclarativeRecord]].
      const DclRec = envRec.DeclarativeRecord;
      // 3. If DclRec.HasBinding(N) is true, then
      if (DclRec.HasBinding(N) === Value.true) {
        // a. Return DclRec.GetBindingValue(N, S).
        return DclRec.GetBindingValue(N, S);
      }
      // 4. Let ObjRec be envRec.[[ObjectRecord]].
      const ObjRec = envRec.ObjectRecord;
      // 5. Return ObjRec.GetBindingValue(N, S).
      return ObjRec.GetBindingValue(N, S);
    }

    /** https://tc39.es/ecma262/#sec-global-environment-records-deletebinding-n */
    DeleteBinding(N) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let DclRec be envRec.[[DeclarativeRecord]].
      const DclRec = this.DeclarativeRecord;
      // 3. Let DclRec be envRec.[[DeclarativeRecord]].
      if (DclRec.HasBinding(N) === Value.true) {
        // a. Return DclRec.DeleteBinding(N).
        return DclRec.DeleteBinding(N);
      }
      // 4. Let ObjRec be envRec.[[ObjectRecord]].
      const ObjRec = envRec.ObjectRecord;
      // 5. Let globalObject be the binding object for ObjRec.
      const globalObject = ObjRec.BindingObject;
      // 6. Let existingProp be ? HasOwnProperty(globalObject, N).
      let _temp7 = HasOwnProperty(globalObject, N);
      /* c8 ignore if */
      if (_temp7 instanceof AbruptCompletion) {
        return _temp7;
      }
      /* c8 ignore if */
      if (_temp7 instanceof Completion) {
        _temp7 = _temp7.Value;
      }
      const existingProp = _temp7;
      // 7. If existingProp is true, then
      if (existingProp === Value.true) {
        let _temp8 = ObjRec.DeleteBinding(N);
        /* c8 ignore if */
        if (_temp8 instanceof AbruptCompletion) {
          return _temp8;
        }
        /* c8 ignore if */
        if (_temp8 instanceof Completion) {
          _temp8 = _temp8.Value;
        }
        // a. Let status be ? ObjRec.DeleteBinding(N).
        const status = _temp8;
        // b. If status is true, then
        if (status === Value.true) {
          // i. Let varNames be envRec.[[VarNames]].
          const varNames = envRec.VarNames;
          // ii. If N is an element of varNames, remove that element from the varNames.
          const i = varNames.findIndex(v => v.stringValue() === N.stringValue());
          if (i >= 0) {
            varNames.splice(i, 1);
          }
        }
        // c. Return status.
        return status;
      }
      // 8. Return true.
      return Value.true;
    }

    /** https://tc39.es/ecma262/#sec-global-environment-records-hasthisbinding */
    HasThisBinding() {
      // Return true.
      return Value.true;
    }

    /** https://tc39.es/ecma262/#sec-global-environment-records-hassuperbinding */
    HasSuperBinding() {
      // 1. Return false.
      return Value.false;
    }

    /** https://tc39.es/ecma262/#sec-global-environment-records-withbaseobject */
    WithBaseObject() {
      // 1. Return undefined.
      return Value.undefined;
    }

    /** https://tc39.es/ecma262/#sec-global-environment-records-getthisbinding */
    GetThisBinding() {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Return envRec.[[GlobalThisValue]].
      return envRec.GlobalThisValue;
    }

    /** https://tc39.es/ecma262/#sec-hasvardeclaration */
    HasVarDeclaration(N) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let varDeclaredNames be envRec.[[VarNames]].
      const varDeclaredNames = envRec.VarNames;
      // 3. If varDeclaredNames contains N, return true.
      if (varDeclaredNames.some(v => v.stringValue() === N.stringValue())) {
        return Value.true;
      }
      // 4. Return false.
      return Value.false;
    }

    /** https://tc39.es/ecma262/#sec-haslexicaldeclaration */
    HasLexicalDeclaration(N) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let envRec be the global Environment Record for which the method was invoked.
      const DclRec = envRec.DeclarativeRecord;
      // 3. Let DclRec be envRec.[[DeclarativeRecord]].
      return DclRec.HasBinding(N);
    }

    /** https://tc39.es/ecma262/#sec-hasrestrictedglobalproperty */
    HasRestrictedGlobalProperty(N) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let ObjRec be envRec.[[ObjectRecord]].
      const ObjRec = envRec.ObjectRecord;
      // 3. Let globalObject be the binding object for ObjRec.
      const globalObject = ObjRec.BindingObject;
      // 4. Let existingProp be ? globalObject.[[GetOwnProperty]](N).
      let _temp9 = globalObject.GetOwnProperty(N);
      /* c8 ignore if */
      if (_temp9 instanceof AbruptCompletion) {
        return _temp9;
      }
      /* c8 ignore if */
      if (_temp9 instanceof Completion) {
        _temp9 = _temp9.Value;
      }
      const existingProp = _temp9;
      // 5. If existingProp is undefined, return false.
      if (existingProp instanceof UndefinedValue) {
        return Value.false;
      }
      // 6. If existingProp.[[Configurable]] is true, return false.
      if (existingProp.Configurable === Value.true) {
        return Value.false;
      }
      // Return true.
      return Value.true;
    }

    /** https://tc39.es/ecma262/#sec-candeclareglobalvar */
    CanDeclareGlobalVar(N) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let ObjRec be envRec.[[ObjectRecord]].
      const ObjRec = envRec.ObjectRecord;
      // 3. Let globalObject be the binding object for ObjRec.
      const globalObject = ObjRec.BindingObject;
      // 4. Let hasProperty be ? HasOwnProperty(globalObject, N).
      let _temp10 = HasOwnProperty(globalObject, N);
      /* c8 ignore if */
      if (_temp10 instanceof AbruptCompletion) {
        return _temp10;
      }
      /* c8 ignore if */
      if (_temp10 instanceof Completion) {
        _temp10 = _temp10.Value;
      }
      const hasProperty = _temp10;
      // 5. If hasProperty is true, return true.
      if (hasProperty === Value.true) {
        return Value.true;
      }
      // 6. Return ? IsExtensible(globalObject).
      return IsExtensible(globalObject);
    }

    /** https://tc39.es/ecma262/#sec-candeclareglobalfunction */
    CanDeclareGlobalFunction(N) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let ObjRec be envRec.[[ObjectRecord]].
      const ObjRec = envRec.ObjectRecord;
      // 3. Let globalObject be the binding object for ObjRec.
      const globalObject = ObjRec.BindingObject;
      // 4. Let existingProp be ? globalObject.[[GetOwnProperty]](N).
      let _temp11 = globalObject.GetOwnProperty(N);
      /* c8 ignore if */
      if (_temp11 instanceof AbruptCompletion) {
        return _temp11;
      }
      /* c8 ignore if */
      if (_temp11 instanceof Completion) {
        _temp11 = _temp11.Value;
      }
      const existingProp = _temp11;
      // 5. If existingProp is undefined, return ? IsExtensible(globalObject).
      if (existingProp instanceof UndefinedValue) {
        return IsExtensible(globalObject);
      }
      // 6. If existingProp.[[Configurable]] is true, return true.
      if (existingProp.Configurable === Value.true) {
        return Value.true;
      }
      // 7. If IsDataDescriptor(existingProp) is true and existingProp has attribute values
      //    { [[Writable]]: true, [[Enumerable]]: true }, return true.
      if (IsDataDescriptor(existingProp) === true && existingProp.Writable === Value.true && existingProp.Enumerable === Value.true) {
        return Value.true;
      }
      // 8. Return false.
      return Value.false;
    }

    /** https://tc39.es/ecma262/#sec-createglobalvarbinding */
    CreateGlobalVarBinding(N, D) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let ObjRec be envRec.[[ObjectRecord]].
      const ObjRec = envRec.ObjectRecord;
      // 3. Let globalObject be the binding object for ObjRec.
      const globalObject = ObjRec.BindingObject;
      // 4. Let hasProperty be ? HasOwnProperty(globalObject, N).
      let _temp12 = HasOwnProperty(globalObject, N);
      /* c8 ignore if */
      if (_temp12 instanceof AbruptCompletion) {
        return _temp12;
      }
      /* c8 ignore if */
      if (_temp12 instanceof Completion) {
        _temp12 = _temp12.Value;
      }
      const hasProperty = _temp12;
      // 5. Let extensible be ? IsExtensible(globalObject).
      let _temp13 = IsExtensible(globalObject);
      /* c8 ignore if */
      if (_temp13 instanceof AbruptCompletion) {
        return _temp13;
      }
      /* c8 ignore if */
      if (_temp13 instanceof Completion) {
        _temp13 = _temp13.Value;
      }
      const extensible = _temp13;
      // 6. If hasProperty is false and extensible is true, then
      if (hasProperty === Value.false && extensible === Value.true) {
        let _temp14 = ObjRec.CreateMutableBinding(N, D);
        /* c8 ignore if */
        if (_temp14 instanceof AbruptCompletion) {
          return _temp14;
        }
        /* c8 ignore if */
        if (_temp14 instanceof Completion) {
          _temp14 = _temp14.Value;
        }
        // b. Perform ? ObjRec.InitializeBinding(N, undefined).
        let _temp15 = ObjRec.InitializeBinding(N, Value.undefined);
        /* c8 ignore if */
        if (_temp15 instanceof AbruptCompletion) {
          return _temp15;
        }
        /* c8 ignore if */
        if (_temp15 instanceof Completion) {
          _temp15 = _temp15.Value;
        }
      }
      // 7. Let varDeclaredNames be envRec.[[VarNames]].
      const varDeclaredNames = envRec.VarNames;
      // 8. If varDeclaredNames does not contain N, then
      if (!varDeclaredNames.some(v => v.stringValue() === N.stringValue())) {
        // a. Append N to varDeclaredNames.
        varDeclaredNames.push(N);
      }
      // return NormalCompletion(empty).
      return NormalCompletion(undefined);
    }

    /** https://tc39.es/ecma262/#sec-createglobalfunctionbinding */
    CreateGlobalFunctionBinding(N, V, D) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Let ObjRec be envRec.[[ObjectRecord]].
      const ObjRec = envRec.ObjectRecord;
      // 3. Let globalObject be the binding object for ObjRec.
      const globalObject = ObjRec.BindingObject;
      // 4. Let existingProp be ? globalObject.[[GetOwnProperty]](N).
      let _temp16 = globalObject.GetOwnProperty(N);
      /* c8 ignore if */
      if (_temp16 instanceof AbruptCompletion) {
        return _temp16;
      }
      /* c8 ignore if */
      if (_temp16 instanceof Completion) {
        _temp16 = _temp16.Value;
      }
      const existingProp = _temp16;
      // 5. If existingProp is undefined or existingProp.[[Configurable]] is true, then
      let desc;
      if (existingProp instanceof UndefinedValue || existingProp.Configurable === Value.true) {
        // a. Let desc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: D }.
        desc = exports.Descriptor({
          Value: V,
          Writable: Value.true,
          Enumerable: Value.true,
          Configurable: D
        });
      } else {
        // a. Let desc be the PropertyDescriptor { [[Value]]: V }.
        desc = exports.Descriptor({
          Value: V
        });
      }
      // 7. Perform ? DefinePropertyOrThrow(globalObject, N, desc).
      let _temp17 = DefinePropertyOrThrow(globalObject, N, desc);
      /* c8 ignore if */
      if (_temp17 instanceof AbruptCompletion) {
        return _temp17;
      }
      /* c8 ignore if */
      if (_temp17 instanceof Completion) {
        _temp17 = _temp17.Value;
      }
      // 8. Record that the binding for N in ObjRec has been initialized.
      // 9. Perform ? Set(globalObject, N, V, false).
      let _temp18 = Set$1(globalObject, N, V, Value.false);
      /* c8 ignore if */
      if (_temp18 instanceof AbruptCompletion) {
        return _temp18;
      }
      /* c8 ignore if */
      if (_temp18 instanceof Completion) {
        _temp18 = _temp18.Value;
      }
      // 10. Let varDeclaredNames be envRec.[[VarNames]].
      const varDeclaredNames = envRec.VarNames;
      // 11. If varDeclaredNames does not contain N, then
      if (!varDeclaredNames.some(v => v.stringValue() === N.stringValue())) {
        // a. Append N to varDeclaredNames.
        varDeclaredNames.push(N);
      }
      // 1. Return NormalCompletion(empty).
      return NormalCompletion(undefined);
    }
    mark(m) {
      // TODO(ts): this function does not call super.mark(). is it a mistake?
      m(this.ObjectRecord);
      m(this.GlobalThisValue);
      m(this.DeclarativeRecord);
    }
  }

  /** https://tc39.es/ecma262/#sec-module-environment-records */
  class ModuleEnvironmentRecord extends DeclarativeEnvironmentRecord {
    /** https://tc39.es/ecma262/#sec-module-environment-records-getbindingvalue-n-s */
    GetBindingValue(N, S) {
      // 1. Assert: S is true.
      Assert(S === Value.true, "S === Value.true");
      // 2. Let envRec be the module Environment Record for which the method was invoked.
      const envRec = this;
      // 3. Assert: envRec has a binding for N.
      const binding = envRec.bindings.get(N);
      Assert(binding !== undefined, "binding !== undefined");
      // 4. If the binding for N is an indirect binding, then
      if (binding.indirect === true) {
        // a. Let M and N2 be the indirection values provided when this binding for N was created.
        const [M, N2] = binding.target;
        // b.Let targetEnv be M.[[Environment]].
        const targetEnv = M.Environment;
        // c. If targetEnv is undefined, throw a ReferenceError exception.
        if (targetEnv instanceof UndefinedValue) {
          return exports.surroundingAgent.Throw('ReferenceError', 'NotDefined', N);
        }
        // d. Return ? targetEnv.GetBindingValue(N2, true).
        return targetEnv.GetBindingValue(N2, Value.true);
      }
      // 5. If the binding for N in envRec is an uninitialized binding, throw a ReferenceError exception.
      if (binding.initialized === false) {
        return exports.surroundingAgent.Throw('ReferenceError', 'NotInitialized', N);
      }
      // 6. Return the value currently bound to N in envRec.
      return NormalCompletion(binding.value);
    }

    /** https://tc39.es/ecma262/#sec-module-environment-records-deletebinding-n */
    DeleteBinding() {
      Assert(false, 'This method is never invoked. See #sec-delete-operator-static-semantics-early-errors');
    }

    /** https://tc39.es/ecma262/#sec-module-environment-records-hasthisbinding */
    HasThisBinding() {
      // Return true.
      return Value.true;
    }

    /** https://tc39.es/ecma262/#sec-module-environment-records-getthisbinding */
    GetThisBinding() {
      // Return undefined.
      return Value.undefined;
    }

    /** https://tc39.es/ecma262/#sec-createimportbinding */
    CreateImportBinding(N, M, N2) {
      // 1. Let envRec be the module Environment Record for which the method was invoked.
      const envRec = this;
      // 2. Assert: envRec does not already have a binding for N.
      Assert(envRec.HasBinding(N) === Value.false, "envRec.HasBinding(N) === Value.false");
      // 3. Assert: M is a Module Record.
      Assert(M instanceof AbstractModuleRecord, "M instanceof AbstractModuleRecord");
      // 4. Assert: When M.[[Environment]] is instantiated it will have a direct binding for N2.
      // 5. Create an immutable indirect binding in envRec for N that references M and N2 as its target binding and record that the binding is initialized.
      envRec.bindings.set(N, {
        indirect: true,
        target: [M, N2],
        initialized: true,
        mark(m) {
          m(this.target[0]);
          m(this.target[1]);
        }
      });
      // 6. Return NormalCompletion(empty).
      return NormalCompletion(undefined);
    }
  }

  /** https://tc39.es/ecma262/#sec-getidentifierreference */
  function GetIdentifierReference(env, name, strict) {
    // 1. If lex is the value null, then
    if (env instanceof NullValue) {
      // a. Return the Reference Record { [[Base]]: unresolvable, [[ReferencedName]]: name, [[Strict]]: strict, [[ThisValue]]: empty }.
      return NormalCompletion(new ReferenceRecord({
        Base: 'unresolvable',
        ReferencedName: name,
        Strict: strict,
        ThisValue: undefined
      }));
    }
    // 2. Let exists be ? envRec.HasBinding(name).
    let _temp19 = env.HasBinding(name);
    /* c8 ignore if */
    if (_temp19 instanceof AbruptCompletion) {
      return _temp19;
    }
    /* c8 ignore if */
    if (_temp19 instanceof Completion) {
      _temp19 = _temp19.Value;
    }
    const exists = _temp19;
    // 3. If exists is true, then
    if (exists === Value.true) {
      // a. Return the Reference Record { [[Base]]: env, [[ReferencedName]]: name, [[Strict]]: strict, [[ThisValue]]: empty }.
      return NormalCompletion(new ReferenceRecord({
        Base: env,
        ReferencedName: name,
        Strict: strict,
        ThisValue: undefined
      }));
    } else {
      // a. Let outer be env.[[OuterEnv]].
      const outer = env.OuterEnv;
      // b. Return ? GetIdentifierReference(outer, name, strict).
      return GetIdentifierReference(outer, name, strict);
    }
  }
  class PrivateEnvironmentRecord {
    OuterPrivateEnvironment;
    Names = [];
    /** https://tc39.es/ecma262/#sec-newprivateenvironment */
    constructor(outerEnv) {
      this.OuterPrivateEnvironment = outerEnv;
    }
    mark(m) {
      this.Names.forEach(name => {
        m(name);
      });
    }
  }

  var _initClass2$1, _classDecs2$1;
  let createStringValue; // set by static block in StringValue for privileged access to constructor
  let createNumberValue; // set by static block in NumberValue for privileged access to constructor
  let createBigIntValue; // set by static block in BigIntValue for privileged access to constructor

  class BaseValue {}

  /** https://tc39.es/ecma262/#sec-ecmascript-language-types */

  /** https://tc39.es/ecma262/#sec-ecmascript-language-types */
  const Value = ((_initClass, _classDecs) => {
    _classDecs = [callable((_target, _thisArg, [value]) => {
      if (value === null) {
        return _Value.null;
      } else if (value === undefined) {
        return _Value.undefined;
      } else if (value === true) {
        return _Value.true;
      } else if (value === false) {
        return _Value.false;
      }
      switch (typeof value) {
        case 'string':
          return createStringValue(value);
        case 'number':
          return createNumberValue(value);
        case 'bigint':
          return createBigIntValue(value);
        /*c8 ignore next*/default:
          throw new OutOfRange$1('new Value', value);
      }
    })];
    let _Value;
    class Value extends BaseValue {
      static {
        [_Value, _initClass] = _applyDecs2203R(this, [], _classDecs).c;
      }
      static {
        _initClass();
      }
    }
    return _Value;
  })();

  /** https://tc39.es/ecma262/#sec-ecmascript-language-types */

  /** https://tc39.es/ecma262/#sec-ecmascript-language-types */

  /** https://tc39.es/ecma262/#sec-ecmascript-language-types */
  const PrimitiveValue = (() => {
    // NOTE: Using IIFE so that the class does not conflict with the type of the same name
    // NOTE: Only using IIFE because TypeScript errors when `abstract` is used on class expressions
    class PrimitiveValue extends Value {}
    return PrimitiveValue;
  })();

  /** https://tc39.es/ecma262/#sec-ecmascript-language-types-undefined-type */
  class UndefinedValue extends PrimitiveValue {
    // defined on prototype by static block
    // defined on prototype by static block

    constructor() {
      // eslint-disable-line no-useless-constructor -- Sets privacy for constructor
      super();
    }
    static {
      Object.defineProperty(this.prototype, 'type', {
        value: 'Undefined'
      });
      Object.defineProperty(this.prototype, 'value', {
        value: undefined
      });
      Object.defineProperty(Value, 'undefined', {
        value: new this()
      });
    }
  }

  /** https://tc39.es/ecma262/#sec-ecmascript-language-types-null-type */
  class NullValue extends PrimitiveValue {
    // defined on prototype by static block
    // defined on prototype by static block

    constructor() {
      // eslint-disable-line no-useless-constructor -- Sets privacy for constructor
      super();
    }
    static {
      Object.defineProperty(this.prototype, 'type', {
        value: 'Null'
      });
      Object.defineProperty(this.prototype, 'value', {
        value: null
      });
      Object.defineProperty(Value, 'null', {
        value: new this()
      });
    }
  }

  /** https://tc39.es/ecma262/#sec-ecmascript-language-types-boolean-type */
  class BooleanValue extends PrimitiveValue {
    // defined on prototype by static block
    value;
    constructor(value) {
      super();
      this.value = value;
    }
    booleanValue() {
      return this.value;
    }
    [Symbol.for('nodejs.util.inspect.custom')]() {
      return `Boolean { ${this.value} }`;
    }
    static {
      Object.defineProperty(this.prototype, 'type', {
        value: 'Boolean'
      });
      Object.defineProperty(Value, 'true', {
        value: new this(true)
      });
      Object.defineProperty(Value, 'false', {
        value: new this(false)
      });
    }
  }

  /** https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type */
  class JSStringValue extends PrimitiveValue {
    // defined on prototype by static block
    value;
    constructor(value) {
      super();
      this.value = value;
    }
    stringValue() {
      return this.value;
    }
    static {
      Object.defineProperty(this.prototype, 'type', {
        value: 'String'
      });
      createStringValue = value => new this(value);
    }
  }

  /** https://tc39.es/ecma262/#sec-ecmascript-language-types-symbol-type */
  class SymbolValue extends PrimitiveValue {
    // defined on prototype by static block
    Description;
    constructor(Description) {
      super();
      this.Description = Description;
    }
    static {
      Object.defineProperty(this.prototype, 'type', {
        value: 'Symbol'
      });
    }
  }

  /** https://tc39.es/ecma262/#sec-ecmascript-language-types-symbol-type */
  const wellKnownSymbols = {
    asyncIterator: new SymbolValue(Value('Symbol.asyncIterator')),
    hasInstance: new SymbolValue(Value('Symbol.hasInstance')),
    isConcatSpreadable: new SymbolValue(Value('Symbol.isConcatSpreadable')),
    iterator: new SymbolValue(Value('Symbol.iterator')),
    match: new SymbolValue(Value('Symbol.match')),
    matchAll: new SymbolValue(Value('Symbol.matchAll')),
    replace: new SymbolValue(Value('Symbol.replace')),
    search: new SymbolValue(Value('Symbol.search')),
    species: new SymbolValue(Value('Symbol.species')),
    split: new SymbolValue(Value('Symbol.split')),
    toPrimitive: new SymbolValue(Value('Symbol.toPrimitive')),
    toStringTag: new SymbolValue(Value('Symbol.toStringTag')),
    unscopables: new SymbolValue(Value('Symbol.unscopables'))
  };
  Object.setPrototypeOf(wellKnownSymbols, null);
  Object.freeze(wellKnownSymbols);

  /** https://tc39.es/ecma262/#sec-ecmascript-language-types-number-type */
  class NumberValue extends PrimitiveValue {
    // defined on prototype by static block
    value;
    constructor(value) {
      super();
      this.value = value;
    }
    numberValue() {
      return this.value;
    }
    isNaN() {
      return Number.isNaN(this.value);
    }
    isInfinity() {
      return !Number.isFinite(this.value) && !this.isNaN();
    }
    isFinite() {
      return Number.isFinite(this.value);
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-unaryMinus */
    static unaryMinus(x) {
      if (x.isNaN()) {
        return F(NaN);
      }
      return F(-R(x));
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-bitwiseNOT */
    static bitwiseNOT(x) {
      let _temp = ToInt32(x);
      Assert(!(_temp instanceof AbruptCompletion), "ToInt32(x)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      // 1. Let oldValue be ! ToInt32(x).
      const oldValue = _temp;
      // 2. Return the result of applying bitwise complement to oldValue. The result is a signed 32-bit integer.
      return F(~R(oldValue));
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-exponentiate */
    static exponentiate(base, exponent) {
      return F(R(base) ** R(exponent));
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-multiply */
    static multiply(x, y) {
      return F(R(x) * R(y));
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-divide */
    static divide(x, y) {
      return F(R(x) / R(y));
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-remainder */
    static remainder(n, d) {
      return F(R(n) % R(d));
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-add */
    static add(x, y) {
      return F(R(x) + R(y));
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-subtract */
    static subtract(x, y) {
      // The result of - operator is x + (-y).
      return NumberValue.add(x, F(-R(y)));
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-leftShift */
    static leftShift(x, y) {
      let _temp2 = ToInt32(x);
      Assert(!(_temp2 instanceof AbruptCompletion), "ToInt32(x)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      // 1. Let lnum be ! ToInt32(x).
      const lnum = _temp2;
      // 2. Let rnum be ! ToUint32(y).
      let _temp3 = ToUint32(y);
      Assert(!(_temp3 instanceof AbruptCompletion), "ToUint32(y)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      const rnum = _temp3;
      // 3. Let shiftCount be the result of masking out all but the least significant 5 bits of rnum, that is, compute rnum & 0x1F.
      const shiftCount = R(rnum) & 0x1F; // eslint-disable-line no-bitwise
      // 4. Return the result of left shifting lnum by shiftCount bits. The result is a signed 32-bit integer.
      return F(R(lnum) << shiftCount); // eslint-disable-line no-bitwise
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-signedRightShift */
    static signedRightShift(x, y) {
      let _temp4 = ToInt32(x);
      Assert(!(_temp4 instanceof AbruptCompletion), "ToInt32(x)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      // 1. Let lnum be ! ToInt32(x).
      const lnum = _temp4;
      // 2. Let rnum be ! ToUint32(y).
      let _temp5 = ToUint32(y);
      Assert(!(_temp5 instanceof AbruptCompletion), "ToUint32(y)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      const rnum = _temp5;
      // 3. Let shiftCount be the result of masking out all but the least significant 5 bits of rnum, that is, compute rnum & 0x1F.
      const shiftCount = R(rnum) & 0x1F; // eslint-disable-line no-bitwise
      // 4. Return the result of performing a sign-extending right shift of lnum by shiftCount bits.
      //    The most significant bit is propagated. The result is a signed 32-bit integer.
      return F(R(lnum) >> shiftCount); // eslint-disable-line no-bitwise
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-unsignedRightShift */
    static unsignedRightShift(x, y) {
      let _temp6 = ToInt32(x);
      Assert(!(_temp6 instanceof AbruptCompletion), "ToInt32(x)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
      // 1. Let lnum be ! ToInt32(x).
      const lnum = _temp6;
      // 2. Let rnum be ! ToUint32(y).
      let _temp7 = ToUint32(y);
      Assert(!(_temp7 instanceof AbruptCompletion), "ToUint32(y)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp7 instanceof Completion) {
        _temp7 = _temp7.Value;
      }
      const rnum = _temp7;
      // 3. Let shiftCount be the result of masking out all but the least significant 5 bits of rnum, that is, compute rnum & 0x1F.
      const shiftCount = R(rnum) & 0x1F; // eslint-disable-line no-bitwise
      // 4. Return the result of performing a zero-filling right shift of lnum by shiftCount bits.
      //    Vacated bits are filled with zero. The result is an unsigned 32-bit integer.
      return F(R(lnum) >>> shiftCount); // eslint-disable-line no-bitwise
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-lessThan */
    static lessThan(x, y) {
      if (x.isNaN()) {
        return Value.undefined;
      }
      if (y.isNaN()) {
        return Value.undefined;
      }
      // If nx and ny are the same Number value, return false.
      // If nx is +0 and ny is -0, return false.
      // If nx is -0 and ny is +0, return false.
      if (R(x) === R(y)) {
        return Value.false;
      }
      if (R(x) === +Infinity) {
        return Value.false;
      }
      if (R(y) === +Infinity) {
        return Value.true;
      }
      if (R(y) === -Infinity) {
        return Value.false;
      }
      if (R(x) === -Infinity) {
        return Value.true;
      }
      return R(x) < R(y) ? Value.true : Value.false;
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-equal */
    static equal(x, y) {
      if (x.isNaN()) {
        return Value.false;
      }
      if (y.isNaN()) {
        return Value.false;
      }
      const xVal = R(x);
      const yVal = R(y);
      if (xVal === yVal) {
        return Value.true;
      }
      if (Object.is(xVal, 0) && Object.is(yVal, -0)) {
        return Value.true;
      }
      if (Object.is(xVal, -0) && Object.is(yVal, 0)) {
        return Value.true;
      }
      return Value.false;
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-sameValue */
    static sameValue(x, y) {
      if (x.isNaN() && y.isNaN()) {
        return Value.true;
      }
      const xVal = R(x);
      const yVal = R(y);
      if (Object.is(xVal, 0) && Object.is(yVal, -0)) {
        return Value.false;
      }
      if (Object.is(xVal, -0) && Object.is(yVal, 0)) {
        return Value.false;
      }
      if (xVal === yVal) {
        return Value.true;
      }
      return Value.false;
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-sameValueZero */
    static sameValueZero(x, y) {
      if (x.isNaN() && y.isNaN()) {
        return Value.true;
      }
      const xVal = R(x);
      const yVal = R(y);
      if (Object.is(xVal, 0) && Object.is(yVal, -0)) {
        return Value.true;
      }
      if (Object.is(xVal, -0) && Object.is(yVal, 0)) {
        return Value.true;
      }
      if (xVal === yVal) {
        return Value.true;
      }
      return Value.false;
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-bitwiseAND */
    static bitwiseAND(x, y) {
      // 1. Return NumberBitwiseOp(&, x, y).
      return NumberBitwiseOp('&', x, y);
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-bitwiseXOR */
    static bitwiseXOR(x, y) {
      // 1. Return NumberBitwiseOp(^, x, y).
      return NumberBitwiseOp('^', x, y);
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-bitwiseOR */
    static bitwiseOR(x, y) {
      // 1. Return NumberBitwiseOp(|, x, y).
      return NumberBitwiseOp('|', x, y);
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-number-tostring */
    static toString(x) {
      if (x.isNaN()) {
        return Value('NaN');
      }
      const xVal = R(x);
      if (xVal === 0) {
        return Value('0');
      }
      if (xVal < 0) {
        let _temp8 = NumberValue.toString(F(-xVal));
        Assert(!(_temp8 instanceof AbruptCompletion), "NumberValue.toString(F(-xVal))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp8 instanceof Completion) {
          _temp8 = _temp8.Value;
        }
        const str = _temp8.stringValue();
        return Value(`-${str}`);
      }
      if (x.isInfinity()) {
        return Value('Infinity');
      }
      // TODO: implement properly
      return Value(`${xVal}`);
    }
    static unit = new NumberValue(1);
    static {
      Object.defineProperty(this.prototype, 'type', {
        value: 'Number'
      });
      createNumberValue = value => new NumberValue(value);
    }
  }

  /** https://tc39.es/ecma262/#sec-numberbitwiseop */
  function NumberBitwiseOp(op, x, y) {
    let _temp9 = ToInt32(x);
    Assert(!(_temp9 instanceof AbruptCompletion), "ToInt32(x)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    // 1. Let lnum be ! ToInt32(x).
    const lnum = _temp9;
    // 2. Let rnum be ! ToUint32(y).
    let _temp10 = ToUint32(y);
    Assert(!(_temp10 instanceof AbruptCompletion), "ToUint32(y)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    const rnum = _temp10;
    // 3. Return the result of applying the bitwise operator op to lnum and rnum. The result is a signed 32-bit integer.
    switch (op) {
      case '&':
        return F(R(lnum) & R(rnum));
      case '|':
        return F(R(lnum) | R(rnum));
      case '^':
        return F(R(lnum) ^ R(rnum));
      /*c8 ignore next*/default:
        throw new OutOfRange$1('NumberBitwiseOp', op);
    }
  }

  /** https://tc39.es/ecma262/#sec-ecmascript-language-types-bigint-type */
  NumberBitwiseOp.section = 'https://tc39.es/ecma262/#sec-numberbitwiseop';
  class BigIntValue extends PrimitiveValue {
    // defined on prototype by static block
    value;
    constructor(value) {
      super();
      this.value = value;
    }
    bigintValue() {
      return this.value;
    }
    isNaN() {
      return false;
    }
    isFinite() {
      return true;
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-unaryMinus */
    static unaryMinus(x) {
      if (R(x) === 0n) {
        return Z(0n);
      }
      return Z(-R(x));
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-bitwiseNOT */
    static bitwiseNOT(x) {
      return Z(-R(x) - 1n);
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-exponentiate */
    static exponentiate(base, exponent) {
      // 1. If exponent < 0n, throw a RangeError exception.
      if (R(exponent) < 0n) {
        return exports.surroundingAgent.Throw('RangeError', 'BigIntNegativeExponent');
      }
      // 2. If base is 0n and exponent is 0n, return 1n.
      if (R(base) === 0n && R(exponent) === 0n) {
        return Z(1n);
      }
      // 3. Return the BigInt value that represents the mathematical value of base raised to the power exponent.
      return Z(R(base) ** R(exponent));
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-multiply */
    static multiply(x, y) {
      return Z(R(x) * R(y));
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-divide */
    static divide(x, y) {
      // 1. If y is 0n, throw a RangeError exception.
      if (R(y) === 0n) {
        return exports.surroundingAgent.Throw('RangeError', 'BigIntDivideByZero');
      }
      // 2. Let quotient be the mathematical value of x divided by y.
      const quotient = R(x) / R(y);
      // 3. Return the BigInt value that represents quotient rounded towards 0 to the next integral value.
      return Z(quotient);
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-remainder */
    static remainder(n, d) {
      // 1. If d is 0n, throw a RangeError exception.
      if (R(d) === 0n) {
        return exports.surroundingAgent.Throw('RangeError', 'BigIntDivideByZero');
      }
      // 2. If n is 0n, return 0n.
      if (R(n) === 0n) {
        return Z(0n);
      }
      // 3. Let r be the BigInt defined by the mathematical relation r = n - (d × q)
      //   where q is a BigInt that is negative only if n/d is negative and positive
      //   only if n/d is positive, and whose magnitude is as large as possible without
      //   exceeding the magnitude of the true mathematical quotient of n and d.
      const r = Z(R(n) % R(d));
      // 4. Return r.
      return r;
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-add */
    static add(x, y) {
      return Z(R(x) + R(y));
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-subtract */
    static subtract(x, y) {
      return Z(R(x) - R(y));
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-leftShift */
    static leftShift(x, y) {
      return Z(R(x) << R(y)); // eslint-disable-line no-bitwise
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-signedRightShift */
    static signedRightShift(x, y) {
      // 1. Return BigInt::leftShift(x, -y).
      return BigIntValue.leftShift(x, Z(-R(y)));
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-unsignedRightShift */
    static unsignedRightShift(_x, _y) {
      return exports.surroundingAgent.Throw('TypeError', 'BigIntUnsignedRightShift');
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-lessThan */
    static lessThan(x, y) {
      return R(x) < R(y) ? Value.true : Value.false;
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-equal */
    static equal(x, y) {
      // Return true if x and y have the same mathematical integer value and false otherwise.
      return R(x) === R(y) ? Value.true : Value.false;
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-sameValue */
    static sameValue(x, y) {
      // 1. Return BigInt::equal(x, y).
      return BigIntValue.equal(x, y);
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-sameValueZero */
    static sameValueZero(x, y) {
      // 1. Return BigInt::equal(x, y).
      return BigIntValue.equal(x, y);
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-bitwiseAND */
    static bitwiseAND(x, y) {
      // 1. Return BigIntBitwiseOp(&, x, y).
      return BigIntBitwiseOp('&', x, y);
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-bitwiseXOR */
    static bitwiseXOR(x, y) {
      // 1. Return BigIntBitwiseOp(^, x, y).
      return BigIntBitwiseOp('^', x, y);
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-bitwiseOR */
    static bitwiseOR(x, y) {
      // 1. Return BigIntBitwiseOp(|, x, y);
      return BigIntBitwiseOp('|', x, y);
    }

    /** https://tc39.es/ecma262/#sec-numeric-types-bigint-tostring */
    static toString(x) {
      // 1. If x is less than zero, return the string-concatenation of the String "-" and ! BigInt::toString(-x).
      if (R(x) < 0n) {
        let _temp11 = BigIntValue.toString(Z(-R(x)));
        Assert(!(_temp11 instanceof AbruptCompletion), "BigIntValue.toString(Z(-R(x)))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp11 instanceof Completion) {
          _temp11 = _temp11.Value;
        }
        const str = _temp11.stringValue();
        return Value(`-${str}`);
      }
      // 2. Return the String value consisting of the code units of the digits of the decimal representation of x.
      return Value(`${R(x)}`);
    }
    static unit = new BigIntValue(1n);
    static {
      Object.defineProperty(this.prototype, 'type', {
        value: 'BigInt'
      });
      createBigIntValue = value => new BigIntValue(value);
    }
  }

  /** https://tc39.es/ecma262/#sec-bigintbitwiseop */
  function BigIntBitwiseOp(op, x, y) {
    // TODO: figure out why this doesn't work, probably the modulo.
    /*
    // 1. Assert: op is "&", "|", or "^".
    Assert(['&', '|', '^'].includes(op));
    // 2. Let result be 0n.
    let result = 0n;
    // 3. Let shift be 0.
    let shift = 0n;
    // 4. Repeat, until (x = 0 or x = -1) and (y = 0 or y = -1),
    while (!((x === 0n || x === -1n) && (y === 0n || y === -1n))) {
      // a. Let xDigit be x modulo 2.
      const xDigit = x % 2n;
      // b. Let yDigit be y modulo 2.
      const yDigit = y % 2n;
      // c. If op is "&", set result to result + 2^shift × BinaryAnd(xDigit, yDigit).
      if (op === '&') {
        result += (2n ** shift) * BinaryAnd(xDigit, yDigit);
      } else if (op === '|') {
        // d. Else if op is "|", set result to result + 2shift × BinaryOr(xDigit, yDigit).
        result += (2n ** shift) * BinaryXor(xDigit, yDigit);
      } else {
        // i. Assert: op is "^".
        Assert(op === '^');
        // ii. Set result to result + 2^shift × BinaryXor(xDigit, yDigit).
        result += (2n ** shift) * BinaryXor(xDigit, yDigit);
      }
      // f. Set shift to shift + 1.
      shift += 1n;
      // g. Set x to (x - xDigit) / 2.
      x = (x - xDigit) / 2n;
      // h. Set y to (y - yDigit) / 2.
      y = (y - yDigit) / 2n;
    }
    let tmp;
    // 5. If op is "&", let tmp be BinaryAnd(x modulo 2, y modulo 2).
    if (op === '&') {
      tmp = BinaryAnd(x % 2n, y % 2n);
    } else if (op === '|') {
      // 6. Else if op is "|", let tmp be BinaryOr(x modulo 2, y modulo 2).
      tmp = BinaryOr(x % 2n, y % 2n);
    } else {
      // a. Assert: op is "^".
      Assert(op === '^');
      // b. Let tmp be BinaryXor(x modulo 2, y modulo 2).
      tmp = BinaryXor(x % 2n, y % 2n);
    }
    // 8. If tmp ≠ 0, then
    if (tmp !== 0n) {
      // a. Set result to result - 2^shift. NOTE: This extends the sign.
      result -= 2n ** shift;
    }
    // 9. Return result.
    return Z(result);
    */
    switch (op) {
      case '&':
        return Z(R(x) & R(y));
      case '|':
        return Z(R(x) | R(y));
      case '^':
        return Z(R(x) ^ R(y));
      /*c8 ignore next*/default:
        throw new OutOfRange$1('BigIntBitwiseOp', op);
    }
  }

  /** https://tc39.es/ecma262/#sec-object-type */
  BigIntBitwiseOp.section = 'https://tc39.es/ecma262/#sec-bigintbitwiseop';
  class ObjectValue extends Value {
    // defined on prototype by static block
    properties;
    internalSlotsList;
    PrivateElements;
    constructor(internalSlotsList) {
      super();
      this.PrivateElements = [];
      this.properties = new ValueMap();
      this.internalSlotsList = internalSlotsList;
    }

    // UNSAFE casts below. Methods below are expected to be rewritten when the object is not an OrdinaryObject. (an example is ArgumentExoticObject)
    // If those methods aren't rewritten, it is an error.
    GetPrototypeOf() {
      return OrdinaryGetPrototypeOf(this);
    }
    SetPrototypeOf(V) {
      return OrdinarySetPrototypeOf(this, V);
    }
    IsExtensible() {
      return OrdinaryIsExtensible(this);
    }
    PreventExtensions() {
      return OrdinaryPreventExtensions(this);
    }
    GetOwnProperty(P) {
      return OrdinaryGetOwnProperty(this, P);
    }
    DefineOwnProperty(P, Desc) {
      return OrdinaryDefineOwnProperty(this, P, Desc);
    }
    HasProperty(P) {
      return OrdinaryHasProperty(this, P);
    }
    Get(P, Receiver) {
      return OrdinaryGet(this, P, Receiver);
    }
    Set(P, V, Receiver) {
      return OrdinarySet(this, P, V, Receiver);
    }
    Delete(P) {
      return OrdinaryDelete(this, P);
    }
    OwnPropertyKeys() {
      return OrdinaryOwnPropertyKeys(this);
    }

    // NON-SPEC
    mark(m) {
      m(this.properties);
      this.internalSlotsList.forEach(s => {
        // @ts-ignore
        m(this[s]);
      });
    }
    static {
      Object.defineProperty(this.prototype, 'type', {
        value: 'Object'
      });
    }
  }

  /** https://tc39.es/ecma262/#sec-private-names */
  class PrivateName {
    // NOTE: The following declaration distinguishes `PrivateName` from `SymbolValue` so that type guards can properly
    //       remove it from unions with `SymbolValue` due to structural overlap.

    Description;
    constructor(description) {
      this.Description = description;
    }
  }
  class ReferenceRecord {
    Base;
    ReferencedName;
    Strict;
    ThisValue;
    constructor({
      Base,
      ReferencedName,
      Strict,
      ThisValue
    }) {
      this.Base = Base;
      this.ReferencedName = ReferencedName;
      this.Strict = Strict;
      this.ThisValue = ThisValue;
    }

    // NON-SPEC
    mark(m) {
      m(this.Base);
      m(this.ReferencedName);
      m(this.ThisValue);
    }
  }

  // @ts-expect-error
  _classDecs2$1 = [callable()];
  exports.Descriptor = void 0;
  // @ts-expect-error
  class Descriptor {
    static {
      [exports.Descriptor, _initClass2$1] = _applyDecs2203R(this, [], _classDecs2$1).c;
    }
    Value;
    Get;
    Set;
    Writable;
    Enumerable;
    Configurable;
    constructor(O) {
      this.Value = O.Value;
      this.Get = O.Get;
      this.Set = O.Set;
      this.Writable = O.Writable;
      this.Enumerable = O.Enumerable;
      this.Configurable = O.Configurable;
    }
    everyFieldIsAbsent() {
      return this.Value === undefined && this.Get === undefined && this.Set === undefined && this.Writable === undefined && this.Enumerable === undefined && this.Configurable === undefined;
    }

    // NON-SPEC
    mark(m) {
      m(this.Value);
      m(this.Get);
      m(this.Set);
    }
    static {
      _initClass2$1();
    }
  }
  class DataBlock extends Uint8Array {
    constructor(sizeOrBuffer, byteOffset, length) {
      if (sizeOrBuffer instanceof ArrayBuffer) {
        super(sizeOrBuffer, byteOffset, length);
      } else {
        Assert(typeof sizeOrBuffer === 'number', "typeof sizeOrBuffer === 'number'");
        super(sizeOrBuffer);
      }
    }
  }
  function Type(val) {
    if (val instanceof Value) {
      return val.type;
    }
    if (val instanceof PrivateName) {
      return 'PrivateName';
    }
    if (val instanceof Completion) {
      return 'Completion';
    }
    if (val instanceof EnvironmentRecord) {
      return 'EnvironmentRecord';
    }
    if (val instanceof exports.Descriptor) {
      return 'Descriptor';
    }
    if (val instanceof DataBlock) {
      return 'Data Block';
    }
    throw new OutOfRange$1('Type', val);
  }

  // Used for Type(x)::y
  function TypeForMethod(val) {
    if (val instanceof Value) {
      return val.constructor;
    }
    throw new OutOfRange$1('TypeForValue', val);
  }

  const FEATURES = Object.freeze([{
    name: 'FinalizationRegistry.prototype.cleanupSome',
    flag: 'cleanup-some',
    url: 'https://github.com/tc39/proposal-cleanup-some'
  }, {
    name: 'Well-Formed Unicode Strings',
    flag: 'is-usv-string',
    url: 'https://github.com/tc39/proposal-is-usv-string'
  }].map(Object.freeze));
  class ExecutionContextStack extends Array {
    // This ensures that only the length taking overload is supported.
    // This is necessary to support `ArraySpeciesCreate`, which invokes
    // the constructor with argument `length`:
    constructor(length = 0) {
      super(+length);
    }
    pop(ctx) {
      if (!ctx.poppedForTailCall) {
        const popped = super.pop();
        Assert(popped === ctx, "popped === ctx");
      }
    }
  }
  let agentSignifier = 0;
  /** https://tc39.es/ecma262/#sec-agents */
  class Agent {
    AgentRecord;
    // #execution-context-stack
    executionContextStack = new ExecutionContextStack();
    // NON-SPEC
    jobQueue = [];
    scheduledForCleanup = new Set();
    hostDefinedOptions;
    constructor(options = {}) {
      // #table-agent-record
      const Signifier = agentSignifier;
      agentSignifier += 1;
      this.AgentRecord = {
        LittleEndian: Value.true,
        CanBlock: Value.true,
        Signifier,
        IsLockFree1: Value.true,
        IsLockFree2: Value.true,
        CandidateExecution: undefined,
        KeptAlive: new Set()
      };
      this.hostDefinedOptions = {
        ...options,
        features: FEATURES.reduce((acc, {
          flag
        }) => {
          if (options.features) {
            acc[flag] = options.features.includes(flag);
          } else {
            acc[flag] = false;
          }
          return acc;
        }, {})
      };
    }

    // #running-execution-context
    get runningExecutionContext() {
      return this.executionContextStack[this.executionContextStack.length - 1];
    }

    // #current-realm
    get currentRealmRecord() {
      return this.runningExecutionContext.Realm;
    }

    // #active-function-object
    get activeFunctionObject() {
      return this.runningExecutionContext.Function;
    }

    // Get an intrinsic by name for the current realm
    intrinsic(name) {
      return this.currentRealmRecord.Intrinsics[name];
    }

    // Generate a throw completion using message templates
    Throw(type, template, ...templateArgs) {
      if (type instanceof Value) {
        return ThrowCompletion(type);
      }
      const message = messages[template](...templateArgs);
      const cons = this.currentRealmRecord.Intrinsics[`%${type}%`];
      let error;
      if (type === 'AggregateError') {
        let _temp2 = CreateArrayFromList([]);
        Assert(!(_temp2 instanceof AbruptCompletion), "CreateArrayFromList([])" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp2 instanceof Completion) {
          _temp2 = _temp2.Value;
        }
        let _temp = Construct(cons, [_temp2, Value(message)]);
        Assert(!(_temp instanceof AbruptCompletion), "Construct(cons, [\n        X(CreateArrayFromList([])),\n        Value(message),\n      ])" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp instanceof Completion) {
          _temp = _temp.Value;
        }
        error = _temp;
      } else {
        let _temp3 = Construct(cons, [Value(message)]);
        Assert(!(_temp3 instanceof AbruptCompletion), "Construct(cons, [Value(message)])" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
        error = _temp3;
      }
      return ThrowCompletion(error);
    }
    queueJob(queueName, job) {
      const callerContext = this.runningExecutionContext;
      const callerRealm = callerContext.Realm;
      const callerScriptOrModule = GetActiveScriptOrModule();
      const pending = {
        queueName,
        job,
        callerRealm,
        callerScriptOrModule
      };
      this.jobQueue.push(pending);
    }

    // NON-SPEC: Check if a feature is enabled in this agent.
    feature(name) {
      return this.hostDefinedOptions.features[name];
    }

    // NON-SPEC
    mark(m) {
      this.AgentRecord.KeptAlive.forEach(v => {
        m(v);
      });
      this.executionContextStack.forEach(e => {
        m(e);
      });
      this.jobQueue.forEach(j => {
        m(j.callerRealm);
        m(j.callerScriptOrModule);
      });
    }
  }
  exports.surroundingAgent = void 0;
  function setSurroundingAgent(a) {
    exports.surroundingAgent = a;
  }

  /** https://tc39.es/ecma262/#sec-execution-contexts */
  class ExecutionContext {
    codeEvaluationState;
    Function;
    Realm;
    ScriptOrModule;
    VariableEnvironment;
    LexicalEnvironment;
    PrivateEnvironment;
    // NON-SPEC
    callSite = new CallSite(this);
    promiseCapability;
    poppedForTailCall = false;
    copy() {
      const e = new ExecutionContext();
      e.codeEvaluationState = this.codeEvaluationState;
      e.Function = this.Function;
      e.Realm = this.Realm;
      e.ScriptOrModule = this.ScriptOrModule;
      e.VariableEnvironment = this.VariableEnvironment;
      e.LexicalEnvironment = this.LexicalEnvironment;
      e.PrivateEnvironment = this.PrivateEnvironment;
      e.callSite = this.callSite.clone(e);
      e.promiseCapability = this.promiseCapability;
      return e;
    }

    // NON-SPEC
    mark(m) {
      m(this.Function);
      m(this.Realm);
      m(this.ScriptOrModule);
      m(this.VariableEnvironment);
      m(this.LexicalEnvironment);
      m(this.PrivateEnvironment);
      m(this.promiseCapability);
    }
  }

  /** https://tc39.es/ecma262/#sec-runtime-semantics-scriptevaluation */
  function ScriptEvaluation(scriptRecord) {
    if (exports.surroundingAgent.hostDefinedOptions.boost?.evaluateScript) {
      return exports.surroundingAgent.hostDefinedOptions.boost.evaluateScript(scriptRecord);
    }
    const globalEnv = scriptRecord.Realm.GlobalEnv;
    const scriptContext = new ExecutionContext();
    scriptContext.Function = Value.null;
    scriptContext.Realm = scriptRecord.Realm;
    scriptContext.ScriptOrModule = scriptRecord;
    scriptContext.VariableEnvironment = globalEnv;
    scriptContext.LexicalEnvironment = globalEnv;
    scriptContext.PrivateEnvironment = Value.null;
    scriptContext.HostDefined = scriptRecord.HostDefined;
    // Suspend runningExecutionContext
    exports.surroundingAgent.executionContextStack.push(scriptContext);
    const scriptBody = scriptRecord.ECMAScriptCode;
    let result = EnsureCompletion(GlobalDeclarationInstantiation(scriptBody, globalEnv));
    if (result.Type === 'normal') {
      result = EnsureCompletion(unwind(Evaluate(scriptBody)));
    }
    if (result.Type === 'normal' && !result.Value) {
      result = NormalCompletion(Value.undefined);
    }

    // Suspend scriptCtx
    exports.surroundingAgent.executionContextStack.pop(scriptContext);
    // Resume(surroundingAgent.runningExecutionContext);

    return result;
  }

  /** https://tc39.es/ecma262/#sec-hostenqueuepromisejob */
  function HostEnqueuePromiseJob(job, _realm) {
    exports.surroundingAgent.queueJob('PromiseJobs', job);
  }

  /** https://tc39.es/ecma262/#sec-agentsignifier */
  function AgentSignifier() {
    // 1. Let AR be the Agent Record of the surrounding agent.
    const AR = exports.surroundingAgent.AgentRecord;
    // 2. Return AR.[[Signifier]].
    return AR.Signifier;
  }
  function HostEnsureCanCompileStrings(callerRealm, calleeRealm) {
    if (exports.surroundingAgent.hostDefinedOptions.ensureCanCompileStrings !== undefined) {
      let _temp4 = exports.surroundingAgent.hostDefinedOptions.ensureCanCompileStrings(callerRealm, calleeRealm);
      /* c8 ignore if */
      if (_temp4 instanceof AbruptCompletion) {
        return _temp4;
      }
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
    }
    return NormalCompletion(undefined);
  }
  function HostPromiseRejectionTracker(promise, operation) {
    const realm = exports.surroundingAgent.currentRealmRecord;
    if (realm && realm.HostDefined.promiseRejectionTracker) {
      let _temp5 = realm.HostDefined.promiseRejectionTracker(promise, operation);
      Assert(!(_temp5 instanceof AbruptCompletion), "realm.HostDefined.promiseRejectionTracker(promise, operation)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
    }
  }
  function HostHasSourceTextAvailable(func) {
    if (exports.surroundingAgent.hostDefinedOptions.hasSourceTextAvailable) {
      let _temp6 = exports.surroundingAgent.hostDefinedOptions.hasSourceTextAvailable(func);
      Assert(!(_temp6 instanceof AbruptCompletion), "surroundingAgent.hostDefinedOptions.hasSourceTextAvailable(func)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
      return _temp6;
    }
    return Value.true;
  }

  // #sec-HostLoadImportedModule
  function HostLoadImportedModule(referrer, specifier, hostDefined, payload) {
    if (exports.surroundingAgent.hostDefinedOptions.loadImportedModule) {
      const executionContext = exports.surroundingAgent.runningExecutionContext;
      let result;
      let sync = true;
      exports.surroundingAgent.hostDefinedOptions.loadImportedModule(referrer, specifier.stringValue(), hostDefined, res => {
        result = EnsureCompletion(res);
        if (!sync) {
          // If this callback has been called asynchronously, restore the correct execution context and enqueue a job.
          exports.surroundingAgent.executionContextStack.push(executionContext);
          exports.surroundingAgent.queueJob('FinishLoadingImportedModule', () => {
            FinishLoadingImportedModule(referrer, specifier, result, payload);
          });
          exports.surroundingAgent.executionContextStack.pop(executionContext);
          runJobQueue();
        }
      });
      sync = false;
      if (result !== undefined) {
        FinishLoadingImportedModule(referrer, specifier, result, payload);
      }
    } else {
      FinishLoadingImportedModule(referrer, specifier, exports.surroundingAgent.Throw('Error', 'CouldNotResolveModule', specifier), payload);
    }
  }

  /** https://tc39.es/ecma262/#sec-hostgetimportmetaproperties */
  function HostGetImportMetaProperties(moduleRecord) {
    const realm = exports.surroundingAgent.currentRealmRecord;
    if (realm.HostDefined.getImportMetaProperties) {
      let _temp7 = realm.HostDefined.getImportMetaProperties(moduleRecord.HostDefined.public);
      Assert(!(_temp7 instanceof AbruptCompletion), "realm.HostDefined.getImportMetaProperties(moduleRecord.HostDefined.public)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp7 instanceof Completion) {
        _temp7 = _temp7.Value;
      }
      return _temp7;
    }
    return [];
  }

  /** https://tc39.es/ecma262/#sec-hostfinalizeimportmeta */
  function HostFinalizeImportMeta(importMeta, moduleRecord) {
    const realm = exports.surroundingAgent.currentRealmRecord;
    if (realm.HostDefined.finalizeImportMeta) {
      let _temp8 = realm.HostDefined.finalizeImportMeta(importMeta, moduleRecord.HostDefined.public);
      Assert(!(_temp8 instanceof AbruptCompletion), "realm.HostDefined.finalizeImportMeta(importMeta, moduleRecord.HostDefined.public)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp8 instanceof Completion) {
        _temp8 = _temp8.Value;
      }
      return _temp8;
    }
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-host-cleanup-finalization-registry */
  function HostEnqueueFinalizationRegistryCleanupJob(fg) {
    if (exports.surroundingAgent.hostDefinedOptions.cleanupFinalizationRegistry !== undefined) {
      let _temp9 = exports.surroundingAgent.hostDefinedOptions.cleanupFinalizationRegistry(fg);
      /* c8 ignore if */
      if (_temp9 instanceof AbruptCompletion) {
        return _temp9;
      }
      /* c8 ignore if */
      if (_temp9 instanceof Completion) {
        _temp9 = _temp9.Value;
      }
    } else {
      if (!exports.surroundingAgent.scheduledForCleanup.has(fg)) {
        exports.surroundingAgent.scheduledForCleanup.add(fg);
        exports.surroundingAgent.queueJob('FinalizationCleanup', () => {
          exports.surroundingAgent.scheduledForCleanup.delete(fg);
          CleanupFinalizationRegistry(fg);
        });
      }
    }
    return NormalCompletion(undefined);
  }

  /** https://tc39.es/ecma262/#sec-hostmakejobcallback */
  function HostMakeJobCallback(callback) {
    // 1. Assert: IsCallable(callback) is true.
    Assert(IsCallable(callback) === Value.true, "IsCallable(callback) === Value.true");
    // 2. Return the JobCallback Record { [[Callback]]: callback, [[HostDefined]]: empty }.
    return {
      Callback: callback,
      HostDefined: undefined
    };
  }

  /** https://tc39.es/ecma262/#sec-hostcalljobcallback */
  function HostCallJobCallback(jobCallback, V, argumentsList) {
    // 1. Assert: IsCallable(jobCallback.[[Callback]]) is true.
    Assert(IsCallable(jobCallback.Callback) === Value.true, "IsCallable(jobCallback.Callback) === Value.true");
    // 1. Return ? Call(jobCallback.[[Callback]], V, argumentsList).
    return Call(jobCallback.Callback, V, argumentsList);
  }

  var _initClass, _classDecs, _initClass2, _classDecs2, _initClass3, _classDecs3;
  let createNormalCompletion;
  let createBreakCompletion;
  let createContinueCompletion;
  let createReturnCompletion;
  let createThrowCompletion;
  _classDecs = [callable((_target, _thisArg, [completionRecord]) => {
    // 1. Assert: completionRecord is a Completion Record.
    Assert(completionRecord instanceof Completion, "completionRecord instanceof Completion");
    // 2. Return completionRecord as the Completion Record of this abstract operation.
    return completionRecord;
  })];
  let _CompletionImpl;
  new class extends _identity {
    static {
      class CompletionImpl {
        static {
          [_CompletionImpl, _initClass] = _applyDecs2203R(this, [], _classDecs).c;
        }
        Value;
        Target;
        constructor(init) {
          if (new.target === _CompletionImpl) {
            switch (init.Type) {
              case 'normal':
                return createNormalCompletion(init);
              case 'break':
                return createBreakCompletion(init);
              case 'continue':
                return createContinueCompletion(init);
              case 'return':
                return createReturnCompletion(init);
              case 'throw':
                return createThrowCompletion(init);
              /*c8 ignore next*/default:
                throw new OutOfRange$1('new Completion', init);
            }
          }
          const {
            Type,
            Value,
            Target
          } = init;
          Assert(new.target.prototype.Type === Type, "new.target.prototype.Type === Type");
          this.Value = Value;
          this.Target = Target;
        }

        // NON-SPEC
        mark(m) {
          m(this.Value);
        }
      }
    }
    constructor() {
      super(_CompletionImpl), (() => {
        Object.defineProperty(this, 'name', {
          value: 'Completion'
        });
      })(), _initClass();
    }
  }();
  /** https://tc39.es/ecma262/#sec-completion-record-specification-type */
  /** https://tc39.es/ecma262/#sec-completion-ao */
  const Completion = _CompletionImpl;
  _classDecs2 = [callable((_target, _thisArg, [value]) => {
    // eslint-disable-line arrow-body-style -- Preserve algorithm steps comments
    // 1. Return Completion { [[Type]]: normal, [[Value]]: value, [[Target]]: empty }.
    return new Completion({
      Type: 'normal',
      Value: value,
      Target: undefined
    });
  })];
  let _NormalCompletionImpl;
  new class extends _identity {
    static {
      class NormalCompletionImpl extends _CompletionImpl {
        static {
          [_NormalCompletionImpl, _initClass2] = _applyDecs2203R(this, [], _classDecs2).c;
        }
        constructor(init) {
          // eslint-disable-line no-useless-constructor -- Sets privacy for constructor
          super(init);
        }
      }
    }
    constructor() {
      super(_NormalCompletionImpl), (() => {
        Object.defineProperty(this, 'name', {
          value: 'NormalCompletion'
        });
        Object.defineProperty(this.prototype, 'Type', {
          value: 'normal'
        });
        createNormalCompletion = init => new _NormalCompletionImpl(init);
      })(), _initClass2();
    }
  }();
  /** https://tc39.es/ecma262/#sec-completion-record-specification-type */
  /** https://tc39.es/ecma262/#sec-normalcompletion */
  const NormalCompletion = _NormalCompletionImpl;

  /** https://tc39.es/ecma262/#sec-completion-record-specification-type */

  /** https://tc39.es/ecma262/#sec-completion-record-specification-type */
  const AbruptCompletion = (() => {
    class AbruptCompletion extends _CompletionImpl {
      constructor(init) {
        // eslint-disable-line no-useless-constructor -- Sets privacy for constructor
        super(init);
      }
      static {
        Object.defineProperty(this, 'name', {
          value: 'AbruptCompletion'
        });
      }
    }
    return AbruptCompletion;
  })();

  /** https://tc39.es/ecma262/#sec-completion-record-specification-type */
  class BreakCompletion extends AbruptCompletion {
    constructor(init) {
      // eslint-disable-line no-useless-constructor -- Sets privacy for constructor
      super(init);
    }
    static {
      Object.defineProperty(this, 'name', {
        value: 'BreakCompletion'
      });
      Object.defineProperty(this.prototype, 'Type', {
        value: 'break'
      });
      createBreakCompletion = init => new BreakCompletion(init);
    }
  }

  /** https://tc39.es/ecma262/#sec-completion-record-specification-type */
  class ContinueCompletion extends AbruptCompletion {
    constructor(init) {
      // eslint-disable-line no-useless-constructor -- Sets privacy for constructor
      super(init);
    }
    static {
      Object.defineProperty(this, 'name', {
        value: 'ContinueCompletion'
      });
      Object.defineProperty(this.prototype, 'Type', {
        value: 'continue'
      });
      createContinueCompletion = init => new ContinueCompletion(init);
    }
  }

  /** https://tc39.es/ecma262/#sec-completion-record-specification-type */
  class ReturnCompletion extends AbruptCompletion {
    constructor(init) {
      // eslint-disable-line no-useless-constructor -- Sets privacy for constructor
      super(init);
    }
    static {
      Object.defineProperty(this, 'name', {
        value: 'ReturnCompletion'
      });
      Object.defineProperty(this.prototype, 'Type', {
        value: 'return'
      });
      createReturnCompletion = init => new ReturnCompletion(init);
    }
  }
  _classDecs3 = [callable((_target, _thisArg, [value]) => {
    Assert(value instanceof Value, "value instanceof Value");
    // 1. Return Completion { [[Type]]: throw, [[Value]]: value, [[Target]]: empty }.
    return new Completion({
      Type: 'throw',
      Value: value,
      Target: undefined
    });
  })];
  let _ThrowCompletionImpl;
  new class extends _identity {
    static {
      class ThrowCompletionImpl extends AbruptCompletion {
        static {
          [_ThrowCompletionImpl, _initClass3] = _applyDecs2203R(this, [], _classDecs3).c;
        }
        constructor(init) {
          // eslint-disable-line no-useless-constructor -- Sets privacy for constructor
          super(init);
        }
      }
    }
    constructor() {
      super(_ThrowCompletionImpl), (() => {
        Object.defineProperty(this, 'name', {
          value: 'ThrowCompletion'
        });
        Object.defineProperty(this.prototype, 'Type', {
          value: 'throw'
        });
        createThrowCompletion = init => new _ThrowCompletionImpl(init);
      })(), _initClass3();
    }
  }();
  /** https://tc39.es/ecma262/#sec-completion-record-specification-type */
  /** https://tc39.es/ecma262/#sec-throwcompletion */
  const ThrowCompletion = _ThrowCompletionImpl;

  /** https://tc39.es/ecma262/#sec-updateempty */

  /** https://tc39.es/ecma262/#sec-updateempty */

  function UpdateEmpty(completionRecord, value) {
    // 1. Assert: If completionRecord.[[Type]] is either return or throw, then completionRecord.[[Value]] is not empty.
    Assert(!(completionRecord.Type === 'return' || completionRecord.Type === 'throw') || completionRecord.Value !== undefined, "!(completionRecord.Type === 'return' || completionRecord.Type === 'throw') || completionRecord.Value !== undefined");
    // 2. If completionRecord.[[Value]] is not empty, return Completion(completionRecord).
    if (completionRecord.Value !== undefined) {
      return Completion(completionRecord);
    }
    // 3. Return Completion { [[Type]]: completionRecord.[[Type]], [[Value]]: value, [[Target]]: completionRecord.[[Target]] }.
    return new _CompletionImpl({
      Type: completionRecord.Type,
      Value: value,
      Target: completionRecord.Target
    }); // NOTE: unsound cast
  }

  /** https://tc39.es/ecma262/#sec-returnifabrupt */

  /**
   * https://tc39.es/ecma262/#sec-returnifabrupt
   * https://tc39.es/ecma262/#sec-returnifabrupt-shorthands ? OperationName()
   */
  function ReturnIfAbrupt(_completion) {
    /* c8 skip next */
    throw new TypeError('ReturnIfAbrupt requires build');
  }

  /** https://tc39.es/ecma262/#sec-returnifabrupt-shorthands ! OperationName() */
  function X(_completion) {
    /* c8 skip next */
    throw new TypeError('X() requires build');
  }

  /** https://tc39.es/ecma262/#sec-ifabruptcloseiterator */
  // TODO(TS):
  function IfAbruptCloseIterator(_value, _iteratorRecord) {
    /* c8 skip next */
    throw new TypeError('IfAbruptCloseIterator() requires build');
  }

  /** https://tc39.es/ecma262/#sec-ifabruptrejectpromise */
  function IfAbruptRejectPromise(_value, _capability) {
    /* c8 skip next */
    throw new TypeError('IfAbruptRejectPromise requires build');
  }

  // Distribute over `T`s that are `Completion`s, but don't distribute over `T`s that aren't `Completion`s

  /** https://tc39.es/ecma262/#sec-implicit-normal-completion */

  function EnsureCompletion(val) {
    if (val instanceof Completion) {
      return val;
    }
    return NormalCompletion(val);
  }
  function* Await(value) {
    // 1. Let asyncContext be the running execution context.
    const asyncContext = exports.surroundingAgent.runningExecutionContext;
    // 2. Let promise be ? PromiseResolve(%Promise%, value).
    let _temp = PromiseResolve(exports.surroundingAgent.intrinsic('%Promise%'), value);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const promise = _temp;
    // 3. Let fulfilledClosure be a new Abstract Closure with parameters (value) that captures asyncContext and performs the following steps when called:
    const fulfilledClosure = ([valueInner = Value.undefined]) => {
      // a. Let prevContext be the running execution context.
      const prevContext = exports.surroundingAgent.runningExecutionContext;
      // b. Suspend prevContext.
      // c. Push asyncContext onto the execution context stack; asyncContext is now the running execution context.
      exports.surroundingAgent.executionContextStack.push(asyncContext);
      // d. Resume the suspended evaluation of asyncContext using NormalCompletion(value) as the result of the operation that suspended it.
      resume(asyncContext, NormalCompletion(valueInner));
      // e. Assert: When we reach this step, asyncContext has already been removed from the execution context stack and prevContext is the currently running execution context.
      Assert(exports.surroundingAgent.runningExecutionContext === prevContext, "surroundingAgent.runningExecutionContext === prevContext");
      // f. Return undefined.
      return Value.undefined;
    };
    // 4. Let onFulfilled be ! CreateBuiltinFunction(fulfilledClosure, 1, "", « »).
    let _temp2 = CreateBuiltinFunction(fulfilledClosure, 1, Value(''), []);
    Assert(!(_temp2 instanceof AbruptCompletion), "CreateBuiltinFunction(fulfilledClosure, 1, Value(''), [])" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const onFulfilled = _temp2;
    // @ts-expect-error TODO(ts): CreateBuiltinFunction should return a specalized type FunctionObjectValue that has a kAsyncContext on it.
    onFulfilled[kAsyncContext] = asyncContext;
    // 5. Let rejectedClosure be a new Abstract Closure with parameters (reason) that captures asyncContext and performs the following steps when called:
    const rejectedClosure = ([reason = Value.undefined]) => {
      // a. Let prevContext be the running execution context.
      const prevContext = exports.surroundingAgent.runningExecutionContext;
      // b. Suspend prevContext.
      // c. Push asyncContext onto the execution context stack; asyncContext is now the running execution context.
      exports.surroundingAgent.executionContextStack.push(asyncContext);
      // d. Resume the suspended evaluation of asyncContext using ThrowCompletion(reason) as the result of the operation that suspended it.
      resume(asyncContext, ThrowCompletion(reason));
      // e. Assert: When we reach this step, asyncContext has already been removed from the execution context stack and prevContext is the currently running execution context.
      Assert(exports.surroundingAgent.runningExecutionContext === prevContext, "surroundingAgent.runningExecutionContext === prevContext");
      // f. Return undefined.
      return Value.undefined;
    };
    // 6. Let onRejected be ! CreateBuiltinFunction(rejectedClosure, 1, "", « »).
    let _temp3 = CreateBuiltinFunction(rejectedClosure, 1, Value(''), []);
    Assert(!(_temp3 instanceof AbruptCompletion), "CreateBuiltinFunction(rejectedClosure, 1, Value(''), [])" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const onRejected = _temp3;
    // @ts-expect-error TODO(ts): CreateBuiltinFunction should return a specalized type FunctionObjectValue that has a kAsyncContext on it.
    onRejected[kAsyncContext] = asyncContext;
    // 7. Perform ! PerformPromiseThen(promise, onFulfilled, onRejected).
    let _temp4 = PerformPromiseThen(promise, onFulfilled, onRejected);
    Assert(!(_temp4 instanceof AbruptCompletion), "PerformPromiseThen(promise, onFulfilled, onRejected)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 8. Remove asyncContext from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.
    exports.surroundingAgent.executionContextStack.pop(asyncContext);
    // 9. Set the code evaluation state of asyncContext such that when evaluation is resumed with a Completion completion, the following steps of the algorithm that invoked Await will be performed, with completion available.
    const completion = yield Value.undefined;
    // 10. Return.
    return completion;
    // 11. NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of asyncContext.
  }

  // This file covers abstract operations defined in
  /** https://tc39.es/ecma262/#sec-arguments-exotic-objects */

  function ArgumentsGetOwnProperty(P) {
    const args = this;
    const desc = OrdinaryGetOwnProperty(args, P);
    if (desc === Value.undefined) {
      return desc;
    }
    const map = args.ParameterMap;
    let _temp = HasOwnProperty(map, P);
    Assert(!(_temp instanceof AbruptCompletion), "HasOwnProperty(map, P)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const isMapped = _temp;
    if (isMapped === Value.true) {
      desc.Value = Get(map, P);
    }
    return desc;
  }
  ArgumentsGetOwnProperty.section = 'https://tc39.es/ecma262/#sec-arguments-exotic-objects';
  function ArgumentsDefineOwnProperty(P, Desc) {
    const args = this;
    const map = args.ParameterMap;
    let _temp2 = HasOwnProperty(map, P);
    Assert(!(_temp2 instanceof AbruptCompletion), "HasOwnProperty(map, P)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const isMapped = _temp2;
    let newArgDesc = Desc;
    if (isMapped === Value.true && IsDataDescriptor(Desc) === true) {
      if (Desc.Value === undefined && Desc.Writable !== undefined && Desc.Writable === Value.false) {
        newArgDesc = exports.Descriptor({
          ...Desc
        });
        let _temp3 = Get(map, P);
        Assert(!(_temp3 instanceof AbruptCompletion), "Get(map, P)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
        newArgDesc.Value = _temp3;
      }
    }
    let _temp4 = OrdinaryDefineOwnProperty(args, P, newArgDesc);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const allowed = _temp4;
    if (allowed === Value.false) {
      return Value.false;
    }
    if (isMapped === Value.true) {
      if (IsAccessorDescriptor(Desc) === true) {
        map.Delete(P);
      } else {
        if (Desc.Value !== undefined) {
          const setStatus = Set$1(map, P, Desc.Value, Value.false);
          Assert(setStatus === Value.true, "setStatus === Value.true");
        }
        if (Desc.Writable !== undefined && Desc.Writable === Value.false) {
          map.Delete(P);
        }
      }
    }
    return Value.true;
  }
  function ArgumentsGet(P, Receiver) {
    const args = this;
    const map = args.ParameterMap;
    let _temp5 = HasOwnProperty(map, P);
    Assert(!(_temp5 instanceof AbruptCompletion), "HasOwnProperty(map, P)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const isMapped = _temp5;
    if (isMapped === Value.false) {
      return OrdinaryGet(args, P, Receiver);
    } else {
      return Get(map, P);
    }
  }
  function ArgumentsSet(P, V, Receiver) {
    const args = this;
    let isMapped;
    let map;
    if (SameValue(args, Receiver) === Value.false) {
      isMapped = false;
    } else {
      map = args.ParameterMap;
      let _temp6 = HasOwnProperty(map, P);
      Assert(!(_temp6 instanceof AbruptCompletion), "HasOwnProperty(map, P)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
      isMapped = _temp6 === Value.true;
    }
    if (isMapped) {
      const setStatus = Set$1(map, P, V, Value.false);
      Assert(setStatus === Value.true, "setStatus === Value.true");
    }
    return OrdinarySet(args, P, V, Receiver);
  }
  function ArgumentsDelete(P) {
    const args = this;
    const map = args.ParameterMap;
    let _temp7 = HasOwnProperty(map, P);
    Assert(!(_temp7 instanceof AbruptCompletion), "HasOwnProperty(map, P)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    const isMapped = _temp7;
    let _temp8 = OrdinaryDelete(args, P);
    /* c8 ignore if */
    if (_temp8 instanceof AbruptCompletion) {
      return _temp8;
    }
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    const result = _temp8;
    if (result === Value.true && isMapped === Value.true) {
      map.Delete(P);
    }
    return result;
  }

  /** https://tc39.es/ecma262/#sec-createunmappedargumentsobject */
  function CreateUnmappedArgumentsObject(argumentsList) {
    const len = argumentsList.length;
    const obj = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%Object.prototype%'), ['ParameterMap']);
    obj.ParameterMap = Value.undefined;
    DefinePropertyOrThrow(obj, Value('length'), exports.Descriptor({
      Value: F(len),
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.true
    }));
    let index = 0;
    while (index < len) {
      const val = argumentsList[index];
      let _temp10 = ToString(F(index));
      Assert(!(_temp10 instanceof AbruptCompletion), "ToString(F(index))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp10 instanceof Completion) {
        _temp10 = _temp10.Value;
      }
      let _temp9 = CreateDataProperty(obj, _temp10, val);
      Assert(!(_temp9 instanceof AbruptCompletion), "CreateDataProperty(obj, X(ToString(F(index))), val)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp9 instanceof Completion) {
        _temp9 = _temp9.Value;
      }
      index += 1;
    }
    let _temp11 = DefinePropertyOrThrow(obj, wellKnownSymbols.iterator, exports.Descriptor({
      Value: exports.surroundingAgent.intrinsic('%Array.prototype.values%'),
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.true
    }));
    Assert(!(_temp11 instanceof AbruptCompletion), "DefinePropertyOrThrow(obj, wellKnownSymbols.iterator, Descriptor({\n    Value: surroundingAgent.intrinsic('%Array.prototype.values%'),\n    Writable: Value.true,\n    Enumerable: Value.false,\n    Configurable: Value.true,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    let _temp12 = DefinePropertyOrThrow(obj, Value('callee'), exports.Descriptor({
      Get: exports.surroundingAgent.intrinsic('%ThrowTypeError%'),
      Set: exports.surroundingAgent.intrinsic('%ThrowTypeError%'),
      Enumerable: Value.false,
      Configurable: Value.false
    }));
    Assert(!(_temp12 instanceof AbruptCompletion), "DefinePropertyOrThrow(obj, Value('callee'), Descriptor({\n    Get: surroundingAgent.intrinsic('%ThrowTypeError%'),\n    Set: surroundingAgent.intrinsic('%ThrowTypeError%'),\n    Enumerable: Value.false,\n    Configurable: Value.false,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp12 instanceof Completion) {
      _temp12 = _temp12.Value;
    }
    return obj;
  }

  /** https://tc39.es/ecma262/#sec-makearggetter */
  function MakeArgGetter(name, env) {
    // 1. Let getterClosure be a new Abstract Closure with no parameters that captures name and env and performs the following steps when called:
    //   a. Return env.GetBindingValue(name, false).
    const getterClosure = () => env.GetBindingValue(name, false);
    // 2. Let getter be ! CreateBuiltinFunction(getterClosure, 0, "", « »).
    let _temp13 = CreateBuiltinFunction(getterClosure, 0, Value(''), ['Name', 'Env']);
    Assert(!(_temp13 instanceof AbruptCompletion), "CreateBuiltinFunction(getterClosure, 0, Value(''), ['Name', 'Env'])" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp13 instanceof Completion) {
      _temp13 = _temp13.Value;
    }
    const getter = _temp13;
    // 3. NOTE: getter is never directly accessible to ECMAScript code.
    // 4. Return getter.
    return getter;
  }

  /** https://tc39.es/ecma262/#sec-makeargsetter */
  MakeArgGetter.section = 'https://tc39.es/ecma262/#sec-makearggetter';
  function MakeArgSetter(name, env) {
    // 1. Let setterClosure be a new Abstract Closure with parameters (value) that captures name and env and performs the following steps when called:
    //   a. Return env.SetMutableBinding(name, value, false).
    const setterClosure = ([value = Value.undefined]) => env.SetMutableBinding(name, value, false);
    // 2. Let setter be ! CreateBuiltinFunction(setterClosure, 1, "", « »).
    let _temp14 = CreateBuiltinFunction(setterClosure, 1, Value(''), ['Name', 'Env']);
    Assert(!(_temp14 instanceof AbruptCompletion), "CreateBuiltinFunction(setterClosure, 1, Value(''), ['Name', 'Env'])" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    const setter = _temp14;
    // 3. NOTE: setter is never directly accessible to ECMAScript code.
    // 4. Return setter.
    return setter;
  }

  /** https://tc39.es/ecma262/#sec-createmappedargumentsobject */
  MakeArgSetter.section = 'https://tc39.es/ecma262/#sec-makeargsetter';
  function CreateMappedArgumentsObject(func, formals, argumentsList, env) {
    // Assert: formals does not contain a rest parameter, any binding
    // patterns, or any initializers. It may contain duplicate identifiers.
    const len = argumentsList.length;
    let _temp15 = MakeBasicObject(['Prototype', 'Extensible', 'ParameterMap']);
    Assert(!(_temp15 instanceof AbruptCompletion), "MakeBasicObject(['Prototype', 'Extensible', 'ParameterMap'])" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp15 instanceof Completion) {
      _temp15 = _temp15.Value;
    }
    const obj = _temp15;
    obj.GetOwnProperty = ArgumentsGetOwnProperty;
    obj.DefineOwnProperty = ArgumentsDefineOwnProperty;
    obj.Get = ArgumentsGet;
    obj.Set = ArgumentsSet;
    obj.Delete = ArgumentsDelete;
    obj.Prototype = exports.surroundingAgent.intrinsic('%Object.prototype%');
    const map = OrdinaryObjectCreate(Value.null);
    obj.ParameterMap = map;
    const parameterNames = BoundNames(formals);
    const numberOfParameters = parameterNames.length;
    let index = 0;
    while (index < len) {
      const val = argumentsList[index];
      let _temp17 = ToString(F(index));
      Assert(!(_temp17 instanceof AbruptCompletion), "ToString(F(index))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp17 instanceof Completion) {
        _temp17 = _temp17.Value;
      }
      let _temp16 = CreateDataProperty(obj, _temp17, val);
      Assert(!(_temp16 instanceof AbruptCompletion), "CreateDataProperty(obj, X(ToString(F(index))), val)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp16 instanceof Completion) {
        _temp16 = _temp16.Value;
      }
      index += 1;
    }
    let _temp18 = DefinePropertyOrThrow(obj, Value('length'), exports.Descriptor({
      Value: F(len),
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.true
    }));
    Assert(!(_temp18 instanceof AbruptCompletion), "DefinePropertyOrThrow(obj, Value('length'), Descriptor({\n    Value: F(len),\n    Writable: Value.true,\n    Enumerable: Value.false,\n    Configurable: Value.true,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp18 instanceof Completion) {
      _temp18 = _temp18.Value;
    }
    const mappedNames = new ValueSet();
    index = numberOfParameters - 1;
    while (index >= 0) {
      const name = parameterNames[index];
      if (!mappedNames.has(name)) {
        mappedNames.add(name);
        if (index < len) {
          const g = MakeArgGetter(name, env);
          const p = MakeArgSetter(name, env);
          let _temp20 = ToString(F(index));
          Assert(!(_temp20 instanceof AbruptCompletion), "ToString(F(index))" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp20 instanceof Completion) {
            _temp20 = _temp20.Value;
          }
          let _temp19 = map.DefineOwnProperty(_temp20, exports.Descriptor({
            Set: p,
            Get: g,
            Enumerable: Value.false,
            Configurable: Value.true
          }));
          Assert(!(_temp19 instanceof AbruptCompletion), "map.DefineOwnProperty(X(ToString(F(index))), Descriptor({\n          Set: p,\n          Get: g,\n          Enumerable: Value.false,\n          Configurable: Value.true,\n        }))" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp19 instanceof Completion) {
            _temp19 = _temp19.Value;
          }
        }
      }
      index -= 1;
    }
    let _temp21 = DefinePropertyOrThrow(obj, wellKnownSymbols.iterator, exports.Descriptor({
      Value: exports.surroundingAgent.intrinsic('%Array.prototype.values%'),
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.true
    }));
    Assert(!(_temp21 instanceof AbruptCompletion), "DefinePropertyOrThrow(obj, wellKnownSymbols.iterator, Descriptor({\n    Value: surroundingAgent.intrinsic('%Array.prototype.values%'),\n    Writable: Value.true,\n    Enumerable: Value.false,\n    Configurable: Value.true,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp21 instanceof Completion) {
      _temp21 = _temp21.Value;
    }
    let _temp22 = DefinePropertyOrThrow(obj, Value('callee'), exports.Descriptor({
      Value: func,
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.true
    }));
    Assert(!(_temp22 instanceof AbruptCompletion), "DefinePropertyOrThrow(obj, Value('callee'), Descriptor({\n    Value: func,\n    Writable: Value.true,\n    Enumerable: Value.false,\n    Configurable: Value.true,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp22 instanceof Completion) {
      _temp22 = _temp22.Value;
    }
    return obj;
  }

  /** https://tc39.es/ecma262/#sec-array-exotic-objects-defineownproperty-p-desc */
  function ArrayDefineOwnProperty(P, Desc) {
    const A = this;
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    if (P instanceof JSStringValue && P.stringValue() === 'length') {
      return ArraySetLength(A, Desc);
    } else if (isArrayIndex(P)) {
      const oldLenDesc = OrdinaryGetOwnProperty(A, Value('length'));
      let _temp = IsDataDescriptor(oldLenDesc);
      Assert(!(_temp instanceof AbruptCompletion), "IsDataDescriptor(oldLenDesc)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      Assert(_temp, "X(IsDataDescriptor(oldLenDesc))");
      Assert(oldLenDesc.Configurable === Value.false, "oldLenDesc.Configurable === Value.false");
      const oldLen = oldLenDesc.Value;
      let _temp2 = ToUint32(P);
      Assert(!(_temp2 instanceof AbruptCompletion), "ToUint32(P)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      const index = _temp2;
      if (R(index) >= R(oldLen) && oldLenDesc.Writable === Value.false) {
        return Value.false;
      }
      let _temp3 = OrdinaryDefineOwnProperty(A, P, Desc);
      Assert(!(_temp3 instanceof AbruptCompletion), "OrdinaryDefineOwnProperty(A, P, Desc)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      const succeeded = _temp3;
      if (succeeded === Value.false) {
        return Value.false;
      }
      if (R(index) >= R(oldLen)) {
        oldLenDesc.Value = F(R(index) + 1);
        const succeeded = OrdinaryDefineOwnProperty(A, Value('length'), oldLenDesc); // eslint-disable-line no-shadow
        Assert(succeeded === Value.true, "succeeded === Value.true");
      }
      return Value.true;
    }
    return OrdinaryDefineOwnProperty(A, P, Desc);
  }
  ArrayDefineOwnProperty.section = 'https://tc39.es/ecma262/#sec-array-exotic-objects-defineownproperty-p-desc';
  function isArrayExoticObject(O) {
    return O.DefineOwnProperty === ArrayDefineOwnProperty;
  }

  /** https://tc39.es/ecma262/#sec-arraycreate */
  function ArrayCreate(length, proto) {
    Assert(isNonNegativeInteger(length), "isNonNegativeInteger(length)");
    if (Object.is(length, -0)) {
      length = +0;
    }
    if (length > 2 ** 32 - 1) {
      return exports.surroundingAgent.Throw('RangeError', 'InvalidArrayLength', length);
    }
    if (proto === undefined) {
      proto = exports.surroundingAgent.intrinsic('%Array.prototype%');
    }
    let _temp4 = MakeBasicObject(['Prototype', 'Extensible']);
    Assert(!(_temp4 instanceof AbruptCompletion), "MakeBasicObject(['Prototype', 'Extensible'])" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const A = _temp4;
    A.Prototype = proto;
    A.DefineOwnProperty = ArrayDefineOwnProperty;
    let _temp5 = OrdinaryDefineOwnProperty(A, Value('length'), exports.Descriptor({
      Value: F(length),
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.false
    }));
    Assert(!(_temp5 instanceof AbruptCompletion), "OrdinaryDefineOwnProperty(A, Value('length'), Descriptor({\n    Value: F(length),\n    Writable: Value.true,\n    Enumerable: Value.false,\n    Configurable: Value.false,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    return A;
  }

  /** https://tc39.es/ecma262/#sec-arrayspeciescreate */
  function ArraySpeciesCreate(originalArray, length) {
    Assert(typeof length === 'number' && Number.isInteger(length) && length >= 0, "typeof length === 'number' && Number.isInteger(length) && length >= 0");
    if (Object.is(length, -0)) {
      length = +0;
    }
    let _temp6 = IsArray(originalArray);
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const isArray = _temp6;
    if (isArray === Value.false) {
      return ArrayCreate(length);
    }
    let _temp7 = Get(originalArray, Value('constructor'));
    /* c8 ignore if */
    if (_temp7 instanceof AbruptCompletion) {
      return _temp7;
    }
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    let C = _temp7;
    if (IsConstructor(C) === Value.true) {
      const thisRealm = exports.surroundingAgent.currentRealmRecord;
      let _temp8 = GetFunctionRealm(C);
      /* c8 ignore if */
      if (_temp8 instanceof AbruptCompletion) {
        return _temp8;
      }
      /* c8 ignore if */
      if (_temp8 instanceof Completion) {
        _temp8 = _temp8.Value;
      }
      const realmC = _temp8;
      if (thisRealm !== realmC) {
        if (SameValue(C, realmC.Intrinsics['%Array%']) === Value.true) {
          C = Value.undefined;
        }
      }
    }
    if (C instanceof ObjectValue) {
      let _temp9 = Get(C, wellKnownSymbols.species);
      /* c8 ignore if */
      if (_temp9 instanceof AbruptCompletion) {
        return _temp9;
      }
      /* c8 ignore if */
      if (_temp9 instanceof Completion) {
        _temp9 = _temp9.Value;
      }
      C = _temp9;
      if (C === Value.null) {
        C = Value.undefined;
      }
    }
    if (C === Value.undefined) {
      return ArrayCreate(length);
    }
    if (IsConstructor(C) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAConstructor', C);
    }
    return Construct(C, [F(length)]);
  }

  /** https://tc39.es/ecma262/#sec-arraysetlength */
  function ArraySetLength(A, Desc) {
    if (Desc.Value === undefined) {
      return OrdinaryDefineOwnProperty(A, Value('length'), Desc);
    }
    const newLenDesc = exports.Descriptor({
      ...Desc
    });
    let _temp10 = ToUint32(Desc.Value);
    /* c8 ignore if */
    if (_temp10 instanceof AbruptCompletion) {
      return _temp10;
    }
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    const newLen = R(_temp10);
    let _temp11 = ToNumber(Desc.Value);
    /* c8 ignore if */
    if (_temp11 instanceof AbruptCompletion) {
      return _temp11;
    }
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    const numberLen = R(_temp11);
    if (newLen !== numberLen) {
      return exports.surroundingAgent.Throw('RangeError', 'InvalidArrayLength', Desc.Value);
    }
    newLenDesc.Value = F(newLen);
    const oldLenDesc = OrdinaryGetOwnProperty(A, Value('length'));
    let _temp12 = IsDataDescriptor(oldLenDesc);
    Assert(!(_temp12 instanceof AbruptCompletion), "IsDataDescriptor(oldLenDesc)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp12 instanceof Completion) {
      _temp12 = _temp12.Value;
    }
    Assert(_temp12, "X(IsDataDescriptor(oldLenDesc))");
    Assert(oldLenDesc.Configurable === Value.false, "oldLenDesc.Configurable === Value.false");
    const oldLen = R(oldLenDesc.Value);
    if (newLen >= oldLen) {
      return OrdinaryDefineOwnProperty(A, Value('length'), newLenDesc);
    }
    if (oldLenDesc.Writable === Value.false) {
      return Value.false;
    }
    let newWritable;
    if (newLenDesc.Writable === undefined || newLenDesc.Writable === Value.true) {
      newWritable = true;
    } else {
      newWritable = false;
      newLenDesc.Writable = Value.true;
    }
    let _temp13 = OrdinaryDefineOwnProperty(A, Value('length'), newLenDesc);
    Assert(!(_temp13 instanceof AbruptCompletion), "OrdinaryDefineOwnProperty(A, Value('length'), newLenDesc)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp13 instanceof Completion) {
      _temp13 = _temp13.Value;
    }
    const succeeded = _temp13;
    if (succeeded === Value.false) {
      return Value.false;
    }
    const keys = [];
    A.properties.forEach((value, key) => {
      if (isArrayIndex(key) && Number(key.stringValue()) >= newLen) {
        keys.push(key);
      }
    });
    keys.sort((a, b) => Number(b.stringValue()) - Number(a.stringValue()));
    for (const P of keys) {
      let _temp14 = A.Delete(P);
      Assert(!(_temp14 instanceof AbruptCompletion), "A.Delete(P)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp14 instanceof Completion) {
        _temp14 = _temp14.Value;
      }
      const deleteSucceeded = _temp14;
      if (deleteSucceeded === Value.false) {
        let _temp15 = ToUint32(P);
        Assert(!(_temp15 instanceof AbruptCompletion), "ToUint32(P)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp15 instanceof Completion) {
          _temp15 = _temp15.Value;
        }
        newLenDesc.Value = F(R(_temp15) + 1);
        if (newWritable === false) {
          newLenDesc.Writable = Value.false;
        }
        let _temp16 = OrdinaryDefineOwnProperty(A, Value('length'), newLenDesc);
        Assert(!(_temp16 instanceof AbruptCompletion), "OrdinaryDefineOwnProperty(A, Value('length'), newLenDesc)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp16 instanceof Completion) {
          _temp16 = _temp16.Value;
        }
        return Value.false;
      }
    }
    if (newWritable === false) {
      const s = OrdinaryDefineOwnProperty(A, Value('length'), exports.Descriptor({
        Writable: Value.false
      }));
      Assert(s === Value.true, "s === Value.true");
    }
    return Value.true;
  }

  /** https://tc39.es/ecma262/#sec-isconcatspreadable */
  function IsConcatSpreadable(O) {
    if (!(O instanceof ObjectValue)) {
      return Value.false;
    }
    let _temp17 = Get(O, wellKnownSymbols.isConcatSpreadable);
    /* c8 ignore if */
    if (_temp17 instanceof AbruptCompletion) {
      return _temp17;
    }
    /* c8 ignore if */
    if (_temp17 instanceof Completion) {
      _temp17 = _temp17.Value;
    }
    const spreadable = _temp17;
    if (spreadable !== Value.undefined) {
      return ToBoolean(spreadable);
    }
    return IsArray(O);
  }

  /** https://tc39.es/ecma262/#sec-sortcompare */
  function SortCompare(x, y, comparefn) {
    // 1. If x and y are both undefined, return +0𝔽.
    if (x === Value.undefined && y === Value.undefined) {
      return F(+0);
    }
    // 2. If x is undefined, return 1𝔽.
    if (x === Value.undefined) {
      return F(1);
    }
    // 3. If y is undefined, return -1𝔽.
    if (y === Value.undefined) {
      return F(-1);
    }
    // 4. If comparefn is not undefined, then
    if (comparefn !== Value.undefined) {
      let _temp19 = Call(comparefn, Value.undefined, [x, y]);
      /* c8 ignore if */
      if (_temp19 instanceof AbruptCompletion) {
        return _temp19;
      }
      /* c8 ignore if */
      if (_temp19 instanceof Completion) {
        _temp19 = _temp19.Value;
      }
      let _temp18 = ToNumber(_temp19);
      /* c8 ignore if */
      if (_temp18 instanceof AbruptCompletion) {
        return _temp18;
      }
      /* c8 ignore if */
      if (_temp18 instanceof Completion) {
        _temp18 = _temp18.Value;
      }
      // a. Let v be ? ToNumber(? Call(comparefn, undefined, « x, y »)).
      const v = _temp18;
      // b. If v is NaN, return +0𝔽.
      if (v.isNaN()) {
        return F(+0);
      }
      // c. Return v.
      return v;
    }
    // 5. Let xString be ? ToString(x).
    let _temp20 = ToString(x);
    /* c8 ignore if */
    if (_temp20 instanceof AbruptCompletion) {
      return _temp20;
    }
    /* c8 ignore if */
    if (_temp20 instanceof Completion) {
      _temp20 = _temp20.Value;
    }
    const xString = _temp20;
    // 6. Let yString be ? ToString(y).
    let _temp21 = ToString(y);
    /* c8 ignore if */
    if (_temp21 instanceof AbruptCompletion) {
      return _temp21;
    }
    /* c8 ignore if */
    if (_temp21 instanceof Completion) {
      _temp21 = _temp21.Value;
    }
    const yString = _temp21;
    // 7. Let xSmaller be the result of performing Abstract Relational Comparison xString < yString.
    const xSmaller = AbstractRelationalComparison(xString, yString);
    // 8. If xSmaller is true, return -1𝔽.
    if (xSmaller === Value.true) {
      return F(-1);
    }
    // 9. Let ySmaller be the result of performing Abstract Relational Comparison yString < xString.
    const ySmaller = AbstractRelationalComparison(yString, xString);
    // 10. If ySmaller is true, return 1𝔽.
    if (ySmaller === Value.true) {
      return F(1);
    }
    // 11. Return +0𝔽.
    return F(+0);
  }

  /** https://tc39.es/ecma262/#sec-createarrayiterator */
  function CreateArrayIterator(array, kind) {
    // 1. Assert: Type(array) is Object.
    Assert(array instanceof ObjectValue, "array instanceof ObjectValue");
    // 2. Assert: kind is key+value, key, or value.
    Assert(kind === 'key+value' || kind === 'key' || kind === 'value', "kind === 'key+value' || kind === 'key' || kind === 'value'");
    // 3. Let closure be a new Abstract Closure with no parameters that captures kind and array and performs the following steps when called:
    const closure = function* closure() {
      // a. Let index be 0.
      let index = 0;
      // b. Repeat,
      while (true) {
        let len;
        // i. If array has a [[TypedArrayName]] internal slot, then
        if ('TypedArrayName' in array) {
          // 1. If IsDetachedBuffer(array.[[ViewedArrayBuffer]]) is true, throw a TypeError exception.
          if (IsDetachedBuffer(array.ViewedArrayBuffer) === Value.true) {
            return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
          }
          // 2. Let len be array.[[ArrayLength]].
          len = array.ArrayLength;
        } else {
          let _temp22 = LengthOfArrayLike(array);
          /* c8 ignore if */
          if (_temp22 instanceof AbruptCompletion) {
            return _temp22;
          }
          /* c8 ignore if */
          if (_temp22 instanceof Completion) {
            _temp22 = _temp22.Value;
          }
          // ii. Else,
          // 1. Let len be ? LengthOfArrayLike(array).
          len = _temp22;
        }
        // iii. If index ≥ len, return undefined.
        if (index >= len) {
          return Value.undefined;
        }
        // iv. If kind is key, perform ? Yield(𝔽(index)).
        if (kind === 'key') {
          let _temp23 = yield* Yield(F(index));
          /* c8 ignore if */
          if (_temp23 instanceof AbruptCompletion) {
            return _temp23;
          }
          /* c8 ignore if */
          if (_temp23 instanceof Completion) {
            _temp23 = _temp23.Value;
          }
        } else {
          let _temp24 = ToString(F(index));
          Assert(!(_temp24 instanceof AbruptCompletion), "ToString(F(index))" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp24 instanceof Completion) {
            _temp24 = _temp24.Value;
          }
          // v. Else,
          // 1. Let elementKey be ! ToString(𝔽(index)).
          const elementKey = _temp24;
          // 2. Let elementValue be ? Get(array, elementKey).
          let _temp25 = Get(array, elementKey);
          /* c8 ignore if */
          if (_temp25 instanceof AbruptCompletion) {
            return _temp25;
          }
          /* c8 ignore if */
          if (_temp25 instanceof Completion) {
            _temp25 = _temp25.Value;
          }
          const elementValue = _temp25;
          // 3. If kind is value, perform ? Yield(elementValue).
          if (kind === 'value') {
            let _temp26 = yield* Yield(elementValue);
            /* c8 ignore if */
            if (_temp26 instanceof AbruptCompletion) {
              return _temp26;
            }
            /* c8 ignore if */
            if (_temp26 instanceof Completion) {
              _temp26 = _temp26.Value;
            }
          } else {
            // 4. Else,
            // a. Assert: kind is key+value.
            Assert(kind === 'key+value', "kind === 'key+value'");
            // b. Perform ? Yield(! CreateArrayFromList(« 𝔽(index), elementValue »)).
            let _temp28 = CreateArrayFromList([F(index), elementValue]);
            Assert(!(_temp28 instanceof AbruptCompletion), "CreateArrayFromList([F(index), elementValue])" + ' returned an abrupt completion');
            /* c8 ignore if */
            if (_temp28 instanceof Completion) {
              _temp28 = _temp28.Value;
            }
            let _temp27 = yield* Yield(_temp28);
            /* c8 ignore if */
            if (_temp27 instanceof AbruptCompletion) {
              return _temp27;
            }
            /* c8 ignore if */
            if (_temp27 instanceof Completion) {
              _temp27 = _temp27.Value;
            }
          }
        }
        // vi. Set index to index + 1.
        index += 1;
      }
    };
    // 4. Return ! CreateIteratorFromClosure(closure, "%ArrayIteratorPrototype%", %ArrayIteratorPrototype%).
    let _temp29 = CreateIteratorFromClosure(closure, Value('%ArrayIteratorPrototype%'), exports.surroundingAgent.intrinsic('%ArrayIteratorPrototype%'));
    Assert(!(_temp29 instanceof AbruptCompletion), "CreateIteratorFromClosure(closure, Value('%ArrayIteratorPrototype%'), surroundingAgent.intrinsic('%ArrayIteratorPrototype%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp29 instanceof Completion) {
      _temp29 = _temp29.Value;
    }
    return _temp29;
  }

  /** https://tc39.es/ecma262/#sec-allocatearraybuffer */
  function AllocateArrayBuffer(constructor, byteLength) {
    let _temp = OrdinaryCreateFromConstructor(constructor, '%ArrayBuffer.prototype%', ['ArrayBufferData', 'ArrayBufferByteLength', 'ArrayBufferDetachKey']);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 1. Let obj be ? OrdinaryCreateFromConstructor(constructor, "%ArrayBuffer.prototype%", « [[ArrayBufferData]], [[ArrayBufferByteLength]], [[ArrayBufferDetachKey]] »).
    const obj = _temp;
    // 2. Assert: byteLength is a non-negative integer.
    Assert(isNonNegativeInteger(byteLength), "isNonNegativeInteger(byteLength)");
    // 3. Let block be ? CreateByteDataBlock(byteLength).
    let _temp2 = CreateByteDataBlock(byteLength);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const block = _temp2;
    // 4. Set obj.[[ArrayBufferData]] to block.
    obj.ArrayBufferData = block;
    // 5. Set obj.[[ArrayBufferByteLength]] to byteLength.
    obj.ArrayBufferByteLength = byteLength;
    // 6. Return obj.
    return obj;
  }

  /** https://tc39.es/ecma262/#sec-isdetachedbuffer */
  function IsDetachedBuffer(arrayBuffer) {
    // 1. Assert: Type(arrayBuffer) is Object and it has an [[ArrayBufferData]] internal slot.
    Assert(arrayBuffer instanceof ObjectValue && 'ArrayBufferData' in arrayBuffer, "arrayBuffer instanceof ObjectValue && 'ArrayBufferData' in arrayBuffer");
    // 2. If arrayBuffer.[[ArrayBufferData]] is null, return true.
    if (arrayBuffer.ArrayBufferData === Value.null) {
      return Value.true;
    }
    // 3. Return false.
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-detacharraybuffer */
  function DetachArrayBuffer(arrayBuffer, key) {
    // 1. Assert: Type(arrayBuffer) is Object and it has [[ArrayBufferData]], [[ArrayBufferByteLength]], and [[ArrayBufferDetachKey]] internal slots.
    Assert(arrayBuffer instanceof ObjectValue && 'ArrayBufferData' in arrayBuffer && 'ArrayBufferByteLength' in arrayBuffer && 'ArrayBufferDetachKey' in arrayBuffer, "arrayBuffer instanceof ObjectValue\n         && 'ArrayBufferData' in arrayBuffer\n         && 'ArrayBufferByteLength' in arrayBuffer\n         && 'ArrayBufferDetachKey' in arrayBuffer");
    // 2. Assert: IsSharedArrayBuffer(arrayBuffer) is false.
    Assert(IsSharedArrayBuffer() === Value.false, "IsSharedArrayBuffer(arrayBuffer) === Value.false");
    // 3. If key is not present, set key to undefined.
    if (key === undefined) {
      key = Value.undefined;
    }
    // 4. If SameValue(arrayBuffer.[[ArrayBufferDetachKey]], key) is false, throw a TypeError exception.
    if (SameValue(arrayBuffer.ArrayBufferDetachKey, key) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'BufferDetachKeyMismatch', key, arrayBuffer);
    }
    // 5. Set arrayBuffer.[[ArrayBufferData]] to null.
    arrayBuffer.ArrayBufferData = Value.null;
    // 6. Set arrayBuffer.[[ArrayBufferByteLength]] to 0.
    arrayBuffer.ArrayBufferByteLength = 0;
    // 7. Return NormalCompletion(null).
    return NormalCompletion(Value.null);
  }

  /** https://tc39.es/ecma262/#sec-issharedarraybuffer */
  function IsSharedArrayBuffer(_obj) {
    return Value.false;
  }
  function CloneArrayBuffer(srcBuffer, srcByteOffset, srcLength, cloneConstructor) {
    // 1. Assert: Type(srcBuffer) is Object and it has an [[ArrayBufferData]] internal slot.
    Assert(srcBuffer instanceof ObjectValue && 'ArrayBufferData' in srcBuffer, "srcBuffer instanceof ObjectValue && 'ArrayBufferData' in srcBuffer");
    // 2. Assert: IsConstructor(cloneConstructor) is true.
    Assert(IsConstructor(cloneConstructor) === Value.true, "IsConstructor(cloneConstructor) === Value.true");
    // 3. Let targetBuffer be ? AllocateArrayBuffer(cloneConstructor, srcLength).
    let _temp3 = AllocateArrayBuffer(cloneConstructor, srcLength);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const targetBuffer = _temp3;
    // 4. If IsDetachedBuffer(srcBuffer) is true, throw a TypeError exception.
    if (IsDetachedBuffer(srcBuffer) === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
    }
    // 5. Let srcBlock be srcBuffer.[[ArrayBufferData]].
    const srcBlock = srcBuffer.ArrayBufferData;
    // 6. Let targetBlock be targetBuffer.[[ArrayBufferData]].
    const targetBlock = targetBuffer.ArrayBufferData;
    // 7. Perform CopyDataBlockBytes(targetBlock, 0, srcBlock, srcByteOffset, srcLength).
    CopyDataBlockBytes(targetBlock, 0, srcBlock, srcByteOffset, srcLength);
    // 8. Return targetBuffer.
    return targetBuffer;
  }

  /** https://tc39.es/ecma262/#sec-isbigintelementtype */
  function IsBigIntElementType(type) {
    // 1. If type is BigUint64 or BigInt64, return true.
    if (type === 'BigUint64' || type === 'BigInt64') {
      return Value.true;
    }
    // 2. Return false
    return Value.false;
  }
  const throwawayBuffer = new ArrayBuffer(8);
  const throwawayDataView = new DataView(throwawayBuffer);
  const throwawayArray = new Uint8Array(throwawayBuffer);

  /** https://tc39.es/ecma262/#sec-rawbytestonumeric */
  function RawBytesToNumeric(type, rawBytes, isLittleEndian) {
    // 1. Let elementSize be the Element Size value specified in Table 61 for Element Type type.
    const elementSize = typedArrayInfoByType[type].ElementSize;
    Assert(elementSize === rawBytes.length, "elementSize === rawBytes.length");
    const dataViewType = type === 'Uint8C' ? 'Uint8' : type;
    Object.assign(throwawayArray, rawBytes);
    const result = throwawayDataView[`get${dataViewType}`](0, isLittleEndian === Value.true);
    return IsBigIntElementType(type) === Value.true ? Z(result) : F(result);
  }

  /** https://tc39.es/ecma262/#sec-getvaluefrombuffer */
  function GetValueFromBuffer(arrayBuffer, byteIndex, type, isTypedArray, order, isLittleEndian) {
    // 1. Assert: IsDetachedBuffer(arrayBuffer) is false.
    Assert(IsDetachedBuffer(arrayBuffer) === Value.false, "IsDetachedBuffer(arrayBuffer) === Value.false");
    // 2. Assert: There are sufficient bytes in arrayBuffer starting at byteIndex to represent a value of type.
    // 3. Assert: byteIndex is a non-negative integer.
    Assert(isNonNegativeInteger(byteIndex), "isNonNegativeInteger(byteIndex)");
    // 4. Let block be arrayBuffer.[[ArrayBufferData]].
    const block = arrayBuffer.ArrayBufferData;
    // 5. Let elementSize be the Element Size value specified in Table 61 for Element Type type.
    const elementSize = typedArrayInfoByType[type].ElementSize;
    // 6. If IsSharedArrayBuffer(arrayBuffer) is true, then
    if (IsSharedArrayBuffer() === Value.true) {
      Assert(false, "false");
    }
    // 7. Else, let rawValue be a List of elementSize containing, in order, the elementSize sequence of bytes starting with block[byteIndex].
    const rawValue = [...block.subarray(byteIndex, byteIndex + elementSize)];
    // 8. If isLittleEndian is not present, set isLittleEndian to the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.
    if (isLittleEndian === undefined) {
      isLittleEndian = exports.surroundingAgent.AgentRecord.LittleEndian;
    }
    // 9. Return RawBytesToNumeric(type, rawValue, isLittleEndian).
    return RawBytesToNumeric(type, rawValue, isLittleEndian);
  }
  const float32NaNLE = Object.freeze([0, 0, 192, 127]);
  const float32NaNBE = Object.freeze([127, 192, 0, 0]);
  const float64NaNLE = Object.freeze([0, 0, 0, 0, 0, 0, 248, 127]);
  const float64NaNBE = Object.freeze([127, 248, 0, 0, 0, 0, 0, 0]);

  /** https://tc39.es/ecma262/#sec-numerictorawbytes */
  function NumericToRawBytes(type, value, isLittleEndian) {
    Assert(isLittleEndian instanceof BooleanValue, "isLittleEndian instanceof BooleanValue");
    isLittleEndian = isLittleEndian === Value.true;
    let rawBytes;
    // One day, we will write our own IEEE 754 and two's complement encoder…
    if (type === 'Float32') {
      if (Number.isNaN(R(value))) {
        rawBytes = isLittleEndian ? [...float32NaNLE] : [...float32NaNBE];
      } else {
        throwawayDataView.setFloat32(0, R(value), isLittleEndian);
        rawBytes = [...throwawayArray.subarray(0, 4)];
      }
    } else if (type === 'Float64') {
      if (Number.isNaN(R(value))) {
        rawBytes = isLittleEndian ? [...float64NaNLE] : [...float64NaNBE];
      } else {
        throwawayDataView.setFloat64(0, R(value), isLittleEndian);
        rawBytes = [...throwawayArray.subarray(0, 8)];
      }
    } else {
      // a. Let n be the Element Size value specified in Table 61 for Element Type type.
      const n = typedArrayInfoByType[type].ElementSize;
      // b. Let convOp be the abstract operation named in the Conversion Operation column in Table 61 for Element Type type.
      const convOp = typedArrayInfoByType[type].ConversionOperation;
      // c. Let intValue be convOp(value) treated as a mathematical value, whether the result is a BigInt or Number.
      let _temp4 = convOp(value);
      Assert(!(_temp4 instanceof AbruptCompletion), "convOp(value)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      const intValue = _temp4;
      const dataViewType = type === 'Uint8C' ? 'Uint8' : type;
      throwawayDataView[`set${dataViewType}`](0, intValue.bigintValue ? R(intValue) : R(intValue), isLittleEndian);
      rawBytes = [...throwawayArray.subarray(0, n)];
    }
    return rawBytes;
  }

  /** https://tc39.es/ecma262/#sec-setvalueinbuffer */
  function SetValueInBuffer(arrayBuffer, byteIndex, type, value, isTypedArray, order, isLittleEndian) {
    // 1. Assert: IsDetachedBuffer(arrayBuffer) is false.
    Assert(IsDetachedBuffer(arrayBuffer) === Value.false, "IsDetachedBuffer(arrayBuffer) === Value.false");
    // 2. Assert: There are sufficient bytes in arrayBuffer starting at byteIndex to represent a value of type.
    // 3. Assert: byteIndex is a non-negative integer.
    Assert(isNonNegativeInteger(byteIndex), "isNonNegativeInteger(byteIndex)");
    // 4. Assert: Type(value) is BigInt if ! IsBigIntElementType(type) is true; otherwise, Type(value) is Number.
    let _temp5 = IsBigIntElementType(type);
    Assert(!(_temp5 instanceof AbruptCompletion), "IsBigIntElementType(type)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    if (_temp5 === Value.true) {
      Assert(value instanceof BigIntValue, "value instanceof BigIntValue");
    } else {
      Assert(value instanceof NumberValue, "value instanceof NumberValue");
    }
    // 5. Let block be arrayBuffer.[[ArrayBufferData]].
    const block = arrayBuffer.ArrayBufferData;
    // 6. Let elementSize be the Element Size value specified in Table 61 for Element Type type.
    // const elementSize = typedArrayInfo[type].ElementSize;
    // 7. If isLittleEndian is not present, set isLittleEndian to the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.
    if (isLittleEndian === undefined) {
      isLittleEndian = exports.surroundingAgent.AgentRecord.LittleEndian;
    }
    // 8. Let rawBytes be NumericToRawBytes(type, value, isLittleEndian).
    const rawBytes = NumericToRawBytes(type, value, isLittleEndian);
    // 9. If IsSharedArrayBuffer(arrayBuffer) is true, then
    if (IsSharedArrayBuffer() === Value.true) {
      Assert(false, "false");
    }
    // 10. Else, store the individual bytes of rawBytes into block, in order, starting at block[byteIndex].
    rawBytes.forEach((byte, i) => {
      block[byteIndex + i] = byte;
    });
    // 11. Return NormalCompletion(undefined).
    return NormalCompletion(Value.undefined);
  }

  // This file covers abstract operations defined in
  /** https://tc39.es/ecma262/#sec-async-function-objects */

  /** https://tc39.es/ecma262/#sec-asyncblockstart */
  function AsyncBlockStart(promiseCapability, asyncBody, asyncContext) {
    asyncContext.promiseCapability = promiseCapability;
    const runningContext = exports.surroundingAgent.runningExecutionContext;
    asyncContext.codeEvaluationState = function* resumer() {
      const result = EnsureCompletion(yield* Evaluate(asyncBody));
      // Assert: If we return here, the async function either threw an exception or performed an implicit or explicit return; all awaiting is done.
      exports.surroundingAgent.executionContextStack.pop(asyncContext);
      if (result.Type === 'normal') {
        let _temp = Call(promiseCapability.Resolve, Value.undefined, [Value.undefined]);
        Assert(!(_temp instanceof AbruptCompletion), "Call(promiseCapability.Resolve, Value.undefined, [Value.undefined])" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp instanceof Completion) {
          _temp = _temp.Value;
        }
      } else if (result.Type === 'return') {
        let _temp2 = Call(promiseCapability.Resolve, Value.undefined, [result.Value]);
        Assert(!(_temp2 instanceof AbruptCompletion), "Call(promiseCapability.Resolve, Value.undefined, [result.Value])" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp2 instanceof Completion) {
          _temp2 = _temp2.Value;
        }
      } else {
        Assert(result.Type === 'throw', "result.Type === 'throw'");
        let _temp3 = Call(promiseCapability.Reject, Value.undefined, [result.Value]);
        Assert(!(_temp3 instanceof AbruptCompletion), "Call(promiseCapability.Reject, Value.undefined, [result.Value])" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
      }
      return Value.undefined;
    }();
    exports.surroundingAgent.executionContextStack.push(asyncContext);
    const result = EnsureCompletion(resume(asyncContext, undefined));
    Assert(exports.surroundingAgent.runningExecutionContext === runningContext, "surroundingAgent.runningExecutionContext === runningContext");
    Assert(result.Type === 'normal' && result.Value === Value.undefined, "result.Type === 'normal' && result.Value === Value.undefined");
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-async-functions-abstract-operations-async-function-start */
  function AsyncFunctionStart(promiseCapability, asyncFunctionBody) {
    const runningContext = exports.surroundingAgent.runningExecutionContext;
    const asyncContext = runningContext.copy();
    let _temp4 = AsyncBlockStart(promiseCapability, asyncFunctionBody, asyncContext);
    Assert(!(_temp4 instanceof AbruptCompletion), "AsyncBlockStart(promiseCapability, asyncFunctionBody, asyncContext)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
  }

  // @ts-nocheck

  // This file covers abstract operations defined in
  /** https://tc39.es/ecma262/#sec-asyncgenerator-objects */

  /** https://tc39.es/ecma262/#sec-asyncgeneratorrequest-records */
  class AsyncGeneratorRequestRecord {
    Completion;
    Capability;
    constructor(completion, promiseCapability) {
      this.Completion = completion;
      this.Capability = promiseCapability;
    }
  }

  /** https://tc39.es/ecma262/#sec-asyncgeneratorstart */
  function AsyncGeneratorStart(generator, generatorBody) {
    // 1. Assert: generator.[[AsyncGeneratorState]] is undefined.
    Assert(generator.AsyncGeneratorState === Value.undefined, "generator.AsyncGeneratorState === Value.undefined");
    // 2. Let genContext be the running execution context.
    const genContext = exports.surroundingAgent.runningExecutionContext;
    // 3. Set the Generator component of genContext to generator.
    genContext.Generator = generator;
    // 4. Set the code evaluation state of genContext such that when evaluation
    //    is resumed for that execution context the following steps will be performed:
    genContext.codeEvaluationState = function* resumer() {
      // a. If generatorBody is a Parse Node, then
      //     i. Let result be the result of evaluating generatorBody.
      // b. Else,
      //     i. Assert: generatorBody is an Abstract Closure.
      //     ii. Let result be generatorBody().
      let result = EnsureCompletion(
      // Note: Engine262 can only perform the "If generatorBody is an Abstract Closure" check:
      yield* typeof generatorBody === 'function' ? generatorBody() : Evaluate(generatorBody));
      // c. Assert: If we return here, the async generator either threw an exception or performed either an implicit or explicit return.
      // d. Remove genContext from the execution context stack and restore the execution context
      //    that is at the top of the execution context stack as the running execution context.
      exports.surroundingAgent.executionContextStack.pop(genContext);
      // e. Set generator.[[AsyncGeneratorState]] to completed.
      generator.AsyncGeneratorState = 'completed';
      // f. If result.[[Type]] is normal, set result to NormalCompletion(undefined).
      if (result.Type === 'normal') {
        result = NormalCompletion(Value.undefined);
      }
      // g. If result.[[Type]] is return, set result to NormalCompletion(result.[[Value]]).
      if (result.Type === 'return') {
        result = NormalCompletion(result.Value);
      }
      // h. Perform ! AsyncGeneratorCompleteStep(generator, result, true).
      let _temp = AsyncGeneratorCompleteStep(generator, result, Value.true);
      Assert(!(_temp instanceof AbruptCompletion), "AsyncGeneratorCompleteStep(generator, result, Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      // i. Perform ! AsyncGeneratorDrainQueue(generator).
      let _temp2 = AsyncGeneratorDrainQueue(generator);
      Assert(!(_temp2 instanceof AbruptCompletion), "AsyncGeneratorDrainQueue(generator)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      // j. Return undefined.
      return Value.undefined;
    }();
    // 5. Set generator.[[AsyncGeneratorContext]] to genContext.
    generator.AsyncGeneratorContext = genContext;
    // 6. Set generator.[[AsyncGeneratorState]] to suspendedStart.
    generator.AsyncGeneratorState = 'suspendedStart';
    // 7. Set generator.[[AsyncGeneratorQueue]] to a new empty List.
    generator.AsyncGeneratorQueue = [];
    // 8. Return undefined.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-asyncgeneratorvalidate */
  function AsyncGeneratorValidate(generator, generatorBrand) {
    let _temp3 = RequireInternalSlot(generator, 'AsyncGeneratorContext');
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    // 2. Perform ? RequireInternalSlot(generator, [[AsyncGeneratorState]]).
    let _temp4 = RequireInternalSlot(generator, 'AsyncGeneratorState');
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 3. Perform ? RequireInternalSlot(generator, [[AsyncGeneratorQueue]]).
    let _temp5 = RequireInternalSlot(generator, 'AsyncGeneratorQueue');
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    // 4. If generator.[[GeneratorBrand]] is not the same value as generatorBrand, throw a TypeError exception.
    const brand = generator.GeneratorBrand;
    if (brand === undefined || generatorBrand === undefined ? brand !== generatorBrand : SameValue(brand, generatorBrand) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', generatorBrandToErrorMessageType(generatorBrand) || 'AsyncGenerator', generator);
    }
  }

  /** https://tc39.es/ecma262/#sec-asyncgeneratorenqueue */
  function AsyncGeneratorEnqueue(generator, completion, promiseCapability) {
    // 1. Let request be AsyncGeneratorRequest { [[Completion]]: completion, [[Capability]]: promiseCapability }.
    const request = new AsyncGeneratorRequestRecord(completion, promiseCapability);
    // 2. Append request to the end of generator.[[AsyncGeneratorQueue]].
    generator.AsyncGeneratorQueue.push(request);
  }

  /** https://tc39.es/ecma262/#sec-asyncgeneratorcompletestep */
  function AsyncGeneratorCompleteStep(generator, completion, done, realm) {
    // 1. Let queue be generator.[[AsyncGeneratorQueue]].
    const queue = generator.AsyncGeneratorQueue;
    // 2. Assert: queue is not empty.
    Assert(queue.length > 0, "queue.length > 0");
    // 3. Let next be the first element of queue.
    // 4. Remove the first element from queue.
    const next = queue.shift();
    // 5. Let promiseCapability be next.[[Capability]].
    const promiseCapability = next.Capability;
    // 6. Let value be completion.[[Value]].
    const value = completion.Value;
    // 7. If completion.[[Type]] is throw, then
    if (completion.Type === 'throw') {
      let _temp6 = Call(promiseCapability.Reject, Value.undefined, [value]);
      Assert(!(_temp6 instanceof AbruptCompletion), "Call(promiseCapability.Reject, Value.undefined, [value])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
    } else {
      // 8. Else,
      // a. Assert: completion.[[Type]] is normal.
      Assert(completion.Type === 'normal', "completion.Type === 'normal'");
      let iteratorResult;
      // b. If realm is present, then
      if (realm !== undefined) {
        // i. Let oldRealm be the running execution context's Realm.
        const oldRealm = exports.surroundingAgent.runningExecutionContext.Realm;
        // ii. Set the running execution context's Realm to realm.
        exports.surroundingAgent.runningExecutionContext.Realm = realm;
        // iii. Let iteratorResult be ! CreateIterResultObject(value, done).
        let _temp7 = CreateIterResultObject(value, done);
        Assert(!(_temp7 instanceof AbruptCompletion), "CreateIterResultObject(value, done)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp7 instanceof Completion) {
          _temp7 = _temp7.Value;
        }
        iteratorResult = _temp7;
        // iv. Set the running execution context's Realm to oldRealm.
        exports.surroundingAgent.runningExecutionContext.Realm = oldRealm;
      } else {
        let _temp8 = CreateIterResultObject(value, done);
        Assert(!(_temp8 instanceof AbruptCompletion), "CreateIterResultObject(value, done)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp8 instanceof Completion) {
          _temp8 = _temp8.Value;
        }
        // c. Else,
        // i. Let iteratorResult be ! CreateIterResultObject(value, done).
        iteratorResult = _temp8;
      }
      // d. Perform ! Call(promiseCapability.[[Resolve]], undefined, « iteratorResult »).
      let _temp9 = Call(promiseCapability.Resolve, Value.undefined, [iteratorResult]);
      Assert(!(_temp9 instanceof AbruptCompletion), "Call(promiseCapability.Resolve, Value.undefined, [iteratorResult])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp9 instanceof Completion) {
        _temp9 = _temp9.Value;
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-asyncgeneratorresume */
  AsyncGeneratorCompleteStep.section = 'https://tc39.es/ecma262/#sec-asyncgeneratorcompletestep';
  function AsyncGeneratorResume(generator, completion) {
    // 1. Assert: generator.[[AsyncGeneratorState]] is either suspendedStart or suspendedYield.
    Assert(generator.AsyncGeneratorState === 'suspendedStart' || generator.AsyncGeneratorState === 'suspendedYield', "generator.AsyncGeneratorState === 'suspendedStart' || generator.AsyncGeneratorState === 'suspendedYield'");
    // 2. Let genContext be generator.[[AsyncGeneratorContext]].
    const genContext = generator.AsyncGeneratorContext;
    // 3. Let callerContext be the running execution context.
    const callerContext = exports.surroundingAgent.runningExecutionContext;
    // 4. Suspend callerContext.
    // 5. Set generator.[[AsyncGeneratorState]] to executing.
    generator.AsyncGeneratorState = 'executing';
    // 6. Push genContext onto the execution context stack; genContext is now the running execution context.
    exports.surroundingAgent.executionContextStack.push(genContext);
    // 7. Resume the suspended evaluation of genContext using completion as the result of the operation that suspended it. Let result be the completion record returned by the resumed computation.
    const result = resume(genContext, completion);
    // 8. Assert: result is never an abrupt completion.
    Assert(!(result instanceof AbruptCompletion), "!(result instanceof AbruptCompletion)");
    // 9. Assert: When we return here, genContext has already been removed from the execution context stack and callerContext is the currently running execution context.
    Assert(exports.surroundingAgent.runningExecutionContext === callerContext, "surroundingAgent.runningExecutionContext === callerContext");
  }

  /** https://tc39.es/ecma262/#sec-asyncgeneratorunwrapyieldresumption */
  function* AsyncGeneratorUnwrapYieldResumption(resumptionValue) {
    // 1. If resumptionValue.[[Type]] is not return, return Completion(resumptionValue).
    if (resumptionValue.Type !== 'return') {
      return Completion(resumptionValue);
    }
    // 2. Let awaited be Await(resumptionValue.[[Value]]).
    const awaited = EnsureCompletion(yield* Await(resumptionValue.Value));
    // 3. If awaited.[[Type]] is throw, return Completion(awaited).
    if (awaited.Type === 'throw') {
      return Completion(awaited);
    }
    // 4. Assert: awaited.[[Type]] is normal.
    Assert(awaited.Type === 'normal', "awaited.Type === 'normal'");
    // 5. Return Completion { [[Type]]: return, [[Value]]: awaited.[[Value]], [[Target]]: empty }.
    return new Completion({
      Type: 'return',
      Value: awaited.Value,
      Target: undefined
    });
  }

  /** https://tc39.es/ecma262/#sec-asyncgeneratoryield */
  AsyncGeneratorUnwrapYieldResumption.section = 'https://tc39.es/ecma262/#sec-asyncgeneratorunwrapyieldresumption';
  function* AsyncGeneratorYield(value) {
    // 1. Let genContext be the running execution context.
    const genContext = exports.surroundingAgent.runningExecutionContext;
    // 2. Assert: genContext is the execution context of a generator.
    Assert(genContext.Generator !== Value.undefined, "genContext.Generator !== Value.undefined");
    // 3. Let generator be the value of the Generator component of genContext.
    const generator = genContext.Generator;
    // 4. Assert: GetGeneratorKind() is async.
    Assert(GetGeneratorKind() === 'async', "GetGeneratorKind() === 'async'");
    // 5. Let completion be NormalCompletion(value).
    const completion = NormalCompletion(value);
    // 6. Assert: The execution context stack has at least two elements.
    Assert(exports.surroundingAgent.executionContextStack.length >= 2, "surroundingAgent.executionContextStack.length >= 2");
    // 7. Let previousContext be the second to top element of the execution context stack.
    const previousContext = exports.surroundingAgent.executionContextStack[exports.surroundingAgent.executionContextStack.length - 2];
    // 8. Let previousRealm be previousContext's Realm.
    const previousRealm = previousContext.Realm;
    // 9. Perform ! AsyncGeneratorCompleteStep(generator, completion, false, previousRealm).
    let _temp10 = AsyncGeneratorCompleteStep(generator, completion, Value.false, previousRealm);
    Assert(!(_temp10 instanceof AbruptCompletion), "AsyncGeneratorCompleteStep(generator, completion, Value.false, previousRealm)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    // 10. Let queue be generator.[[AsyncGeneratorQueue]].
    const queue = generator.AsyncGeneratorQueue;
    // 11. If queue is not empty, then
    if (queue.length > 0) {
      // a. NOTE: Execution continues without suspending the generator.
      // b. Let toYield be the first element of queue.
      const toYield = queue[0];
      // c. Let resumptionValue be toYield.[[Completion]].
      const resumptionValue = toYield.Completion;
      // d. Return AsyncGeneratorUnwrapYieldResumption(resumptionValue).
      return yield* AsyncGeneratorUnwrapYieldResumption(resumptionValue);
    } else {
      // 12. Else,
      // a. Set generator.[[AsyncGeneratorState]] to suspendedYield.
      generator.AsyncGeneratorState = 'suspendedYield';
      // b. Remove genContext from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.
      exports.surroundingAgent.executionContextStack.pop(genContext);
      // c. Set the code evaluation state of genContext such that when evaluation is resumed with a Completion resumptionValue the following steps will be performed:
      const resumptionValue = EnsureCompletion(yield handleInResume(() => Value.undefined));
      // i. Return AsyncGeneratorUnwrapYieldResumption(resumptionValue).
      return yield* AsyncGeneratorUnwrapYieldResumption(resumptionValue);
      // ii. NOTE: When the above step returns, it returns to the evaluation of the YieldExpression production that originally called this abstract operation.

      // d. Return undefined.
      // e. NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of genContext.
    }
  }

  /** https://tc39.es/ecma262/#sec-asyncgeneratorawaitreturn */
  function AsyncGeneratorAwaitReturn(generator) {
    // 1. Let queue be generator.[[AsyncGeneratorQueue]].
    const queue = generator.AsyncGeneratorQueue;
    // 2. Assert: queue is not empty.
    Assert(queue.length > 0, "queue.length > 0");
    // 3. Let next be the first element of queue.
    const next = queue[0];
    // 4. Let completion be next.[[Completion]].
    const completion = next.Completion;
    // 5. Assert: completion.[[Type]] is return.
    Assert(completion.Type === 'return', "completion.Type === 'return'");
    // 6. Let promise be ? PromiseResolve(%Promise%, completion.[[Value]]).
    let _temp11 = PromiseResolve(exports.surroundingAgent.intrinsic('%Promise%'), completion.Value);
    /* c8 ignore if */
    if (_temp11 instanceof AbruptCompletion) {
      return _temp11;
    }
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    const promise = _temp11;
    // 7. Let fulfilledClosure be a new Abstract Closure with parameters (value) that captures generator and performs the following steps when called:
    const fulfilledClosure = ([value = Value.undefined]) => {
      // a. Set generator.[[AsyncGeneratorState]] to completed.
      generator.AsyncGeneratorState = 'completed';
      // b. Let result be NormalCompletion(value).
      const result = NormalCompletion(value);
      // c. Perform ! AsyncGeneratorCompleteStep(generator, result, true).
      let _temp12 = AsyncGeneratorCompleteStep(generator, result, Value.true);
      Assert(!(_temp12 instanceof AbruptCompletion), "AsyncGeneratorCompleteStep(generator, result, Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp12 instanceof Completion) {
        _temp12 = _temp12.Value;
      }
      // d. Perform ! AsyncGeneratorDrainQueue(generator).
      let _temp13 = AsyncGeneratorDrainQueue(generator);
      Assert(!(_temp13 instanceof AbruptCompletion), "AsyncGeneratorDrainQueue(generator)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp13 instanceof Completion) {
        _temp13 = _temp13.Value;
      }
      // e. Return undefined.
      return Value.undefined;
    };
    // 8. Let onFulfilled be ! CreateBuiltinFunction(fulfilledClosure, 1, "", « »).
    let _temp14 = CreateBuiltinFunction(fulfilledClosure, 1, Value(''), []);
    Assert(!(_temp14 instanceof AbruptCompletion), "CreateBuiltinFunction(fulfilledClosure, 1, Value(''), [])" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    const onFulfilled = _temp14;
    // 9. Let rejectedClosure be a new Abstract Closure with parameters (reason) that captures generator and performs the following steps when called:
    const rejectedClosure = ([reason = Value.undefined]) => {
      // a. Set generator.[[AsyncGeneratorState]] to completed.
      generator.AsyncGeneratorState = 'completed';
      // b. Let result be ThrowCompletion(reason).
      const result = ThrowCompletion(reason);
      // c. Perform ! AsyncGeneratorCompleteStep(generator, result, true).
      let _temp15 = AsyncGeneratorCompleteStep(generator, result, Value.true);
      Assert(!(_temp15 instanceof AbruptCompletion), "AsyncGeneratorCompleteStep(generator, result, Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp15 instanceof Completion) {
        _temp15 = _temp15.Value;
      }
      // d. Perform ! AsyncGeneratorDrainQueue(generator).
      let _temp16 = AsyncGeneratorDrainQueue(generator);
      Assert(!(_temp16 instanceof AbruptCompletion), "AsyncGeneratorDrainQueue(generator)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp16 instanceof Completion) {
        _temp16 = _temp16.Value;
      }
      // e. Return undefined.
      return Value.undefined;
    };
    // 10. Let onRejected be ! CreateBuiltinFunction(rejectedClosure, 1, "", « »).
    let _temp17 = CreateBuiltinFunction(rejectedClosure, 1, Value(''), []);
    Assert(!(_temp17 instanceof AbruptCompletion), "CreateBuiltinFunction(rejectedClosure, 1, Value(''), [])" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp17 instanceof Completion) {
      _temp17 = _temp17.Value;
    }
    const onRejected = _temp17;
    // 11. Perform ! PerformPromiseThen(promise, onFulfilled, onRejected).
    let _temp18 = PerformPromiseThen(promise, onFulfilled, onRejected);
    Assert(!(_temp18 instanceof AbruptCompletion), "PerformPromiseThen(promise, onFulfilled, onRejected)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp18 instanceof Completion) {
      _temp18 = _temp18.Value;
    }
  }

  /** https://tc39.es/ecma262/#sec-asyncgeneratordrainqueue */
  function AsyncGeneratorDrainQueue(generator) {
    // 1. Assert: generator.[[AsyncGeneratorState]] is completed.
    Assert(generator.AsyncGeneratorState === 'completed', "generator.AsyncGeneratorState === 'completed'");
    // 2. Let queue be generator.[[AsyncGeneratorQueue]].
    const queue = generator.AsyncGeneratorQueue;
    // 3. If queue is empty, return.
    if (queue.length === 0) {
      return;
    }
    // 4. Let done be false.
    let done = false;
    // 5. Repeat, while done is false,
    while (done === false) {
      // a. Let next be the first element of queue.
      const next = queue[0];
      // b. Let completion be next.[[Completion]].
      let completion = next.Completion;
      // c. If completion.[[Type]] is return, then
      if (completion.Type === 'return') {
        // i. Set generator.[[AsyncGeneratorState]] to awaiting-return.
        generator.AsyncGeneratorState = 'awaiting-return';
        // ii. Perform ! AsyncGeneratorAwaitReturn(generator).
        let _temp19 = AsyncGeneratorAwaitReturn(generator);
        Assert(!(_temp19 instanceof AbruptCompletion), "AsyncGeneratorAwaitReturn(generator)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp19 instanceof Completion) {
          _temp19 = _temp19.Value;
        }
        // iii. Set done to true.
        done = true;
      } else {
        // d. Else,
        // i. If completion.[[Type]] is normal, then
        if (completion.type === 'normal') {
          // 1. Set completion to NormalCompletion(undefined).
          completion = NormalCompletion(Value.undefined);
        }
        // ii. Perform ! AsyncGeneratorCompleteStep(generator, completion, true).
        let _temp20 = AsyncGeneratorCompleteStep(generator, completion, Value.true);
        Assert(!(_temp20 instanceof AbruptCompletion), "AsyncGeneratorCompleteStep(generator, completion, Value.true)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp20 instanceof Completion) {
          _temp20 = _temp20.Value;
        }
        // iii. If queue is empty, set done to true.
        if (queue.length === 0) {
          done = true;
        }
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-createasynciteratorfromclosure */
  AsyncGeneratorDrainQueue.section = 'https://tc39.es/ecma262/#sec-asyncgeneratordrainqueue';
  function CreateAsyncIteratorFromClosure(closure, generatorBrand, generatorPrototype) {
    Assert(typeof closure === 'function', "typeof closure === 'function'");
    // 1. NOTE: closure can contain uses of the Await shorthand, and uses of the Yield shorthand to yield an IteratorResult object.
    // 2. Let internalSlotsList be « [[AsyncGeneratorState]], [[AsyncGeneratorContext]], [[AsyncGeneratorQueue]], [[GeneratorBrand]] ».
    const internalSlotsList = ['AsyncGeneratorState', 'AsyncGeneratorContext', 'AsyncGeneratorQueue', 'GeneratorBrand'];
    // 3. Let generator be ! OrdinaryObjectCreate(generatorPrototype, internalSlotsList).
    let _temp21 = OrdinaryObjectCreate(generatorPrototype, internalSlotsList);
    Assert(!(_temp21 instanceof AbruptCompletion), "OrdinaryObjectCreate(generatorPrototype, internalSlotsList)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp21 instanceof Completion) {
      _temp21 = _temp21.Value;
    }
    const generator = _temp21;
    // 4. Set generator.[[GeneratorBrand]] to generatorBrand.
    generator.GeneratorBrand = generatorBrand;
    // 5. Set generator.[[AsyncGeneratorState]] to undefined.
    generator.AsyncGeneratorState = Value.undefined;
    // 6. Perform ? AsyncGeneratorStart(generator, closure, generatorBrand).
    let _temp22 = AsyncGeneratorStart(generator, closure);
    /* c8 ignore if */
    if (_temp22 instanceof AbruptCompletion) {
      return _temp22;
    }
    /* c8 ignore if */
    if (_temp22 instanceof Completion) {
      _temp22 = _temp22.Value;
    }
    // 7. Return generator.
    return generator;
  }

  // This file covers predicates defined in
  /** https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values */

  // 6.1.7 #integer-index
  function isIntegerIndex(V) {
    if (!(V instanceof JSStringValue)) {
      return false;
    }
    let _temp = CanonicalNumericIndexString(V);
    Assert(!(_temp instanceof AbruptCompletion), "CanonicalNumericIndexString(V)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const numeric = _temp;
    if (numeric === Value.undefined) {
      return false;
    }
    if (Object.is(R(numeric), +0)) {
      return true;
    }
    return R(numeric) > 0 && Number.isSafeInteger(R(numeric));
  }

  // 6.1.7 #array-index
  function isArrayIndex(V) {
    if (!(V instanceof JSStringValue)) {
      return false;
    }
    let _temp2 = CanonicalNumericIndexString(V);
    Assert(!(_temp2 instanceof AbruptCompletion), "CanonicalNumericIndexString(V)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const numeric = _temp2;
    if (numeric === Value.undefined) {
      return false;
    }
    if (!Number.isInteger(R(numeric))) {
      return false;
    }
    if (Object.is(R(numeric), +0)) {
      return true;
    }
    return R(numeric) > 0 && R(numeric) < 2 ** 32 - 1;
  }
  function isNonNegativeInteger(argument) {
    return Number.isInteger(argument) && argument >= 0;
  }

  // This file covers abstract operations defined in
  /** https://tc39.es/ecma262/#sec-dataview-objects */

  /** https://tc39.es/ecma262/#sec-getviewvalue */
  function GetViewValue(view, requestIndex, isLittleEndian, type) {
    let _temp = RequireInternalSlot(view, 'DataView');
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 2. Assert: view has a [[ViewedArrayBuffer]] internal slot.
    Assert('ViewedArrayBuffer' in view, "'ViewedArrayBuffer' in view");
    // 3. Let getIndex be ? ToIndex(requestIndex).
    let _temp2 = ToIndex(requestIndex);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const getIndex = _temp2;
    // 4. Set isLittleEndian to ! ToBoolean(isLittleEndian).
    let _temp3 = ToBoolean(isLittleEndian);
    Assert(!(_temp3 instanceof AbruptCompletion), "ToBoolean(isLittleEndian)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    isLittleEndian = _temp3;
    // 5. Let buffer be view.[[ViewedArrayBuffer]].
    const buffer = view.ViewedArrayBuffer;
    // 6. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.
    if (IsDetachedBuffer(buffer) === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
    }
    // 7. Let viewOffset be view.[[ByteOffset]].
    const viewOffset = view.ByteOffset;
    // 8. Let viewSize be view.[[ByteLength]].
    const viewSize = view.ByteLength;
    // 9. Let elementSize be the Element Size value specified in Table 61 for Element Type type.
    const elementSize = typedArrayInfoByType[type].ElementSize;
    // 10. If getIndex + elementSize > viewSize, throw a RangeError exception.
    if (getIndex + elementSize > viewSize) {
      return exports.surroundingAgent.Throw('RangeError', 'DataViewOOB');
    }
    // 11. Let bufferIndex be getIndex + viewOffset.
    const bufferIndex = getIndex + viewOffset;
    // 12. Return GetValueFromBuffer(buffer, bufferIndex, type, false, Unordered, isLittleEndian).
    return GetValueFromBuffer(buffer, bufferIndex, type, Value.false, 'Unordered', isLittleEndian);
  }

  /** https://tc39.es/ecma262/#sec-setviewvalue */
  function SetViewValue(view, requestIndex, isLittleEndian, type, value) {
    let _temp4 = RequireInternalSlot(view, 'DataView');
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 2. Assert: view has a [[ViewedArrayBuffer]] internal slot.
    Assert('ViewedArrayBuffer' in view, "'ViewedArrayBuffer' in view");
    // 3. Let getIndex be ? ToIndex(requestIndex).
    let _temp5 = ToIndex(requestIndex);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const getIndex = _temp5;
    // 4. If ! IsBigIntElementType(type) is true, let numberValue be ? ToBigInt(value).
    // 5. Otherwise, let numberValue be ? ToNumber(value).
    let numberValue;
    let _temp6 = IsBigIntElementType(type);
    Assert(!(_temp6 instanceof AbruptCompletion), "IsBigIntElementType(type)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    if (_temp6 === Value.true) {
      let _temp7 = ToBigInt(value);
      /* c8 ignore if */
      if (_temp7 instanceof AbruptCompletion) {
        return _temp7;
      }
      /* c8 ignore if */
      if (_temp7 instanceof Completion) {
        _temp7 = _temp7.Value;
      }
      numberValue = _temp7;
    } else {
      let _temp8 = ToNumber(value);
      /* c8 ignore if */
      if (_temp8 instanceof AbruptCompletion) {
        return _temp8;
      }
      /* c8 ignore if */
      if (_temp8 instanceof Completion) {
        _temp8 = _temp8.Value;
      }
      numberValue = _temp8;
    }
    // 6. Set isLittleEndian to ! ToBoolean(isLittleEndian).
    let _temp9 = ToBoolean(isLittleEndian);
    Assert(!(_temp9 instanceof AbruptCompletion), "ToBoolean(isLittleEndian)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    isLittleEndian = _temp9;
    // 7. Let buffer be view.[[ViewedArrayBuffer]].
    const buffer = view.ViewedArrayBuffer;
    // 8. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.
    if (IsDetachedBuffer(buffer) === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
    }
    // 9. Let viewOffset be view.[[ByteOffset]].
    const viewOffset = view.ByteOffset;
    // 10. Let viewSize be view.[[ByteLength]].
    const viewSize = view.ByteLength;
    // 11. Let elementSize be the Element Size value specified in Table 61 for Element Type type.
    const elementSize = typedArrayInfoByType[type].ElementSize;
    // 12. If getIndex + elementSize > viewSize, throw a RangeError exception.
    if (getIndex + elementSize > viewSize) {
      return exports.surroundingAgent.Throw('RangeError', 'DataViewOOB');
    }
    // 13. Let bufferIndex be getIndex + viewOffset.
    const bufferIndex = getIndex + viewOffset;
    // 14. Return SetValueInBuffer(buffer, bufferIndex, type, numberValue, false, Unordered, isLittleEndian).
    return SetValueInBuffer(buffer, bufferIndex, type, numberValue, Value.false, 'Unordered', isLittleEndian);
  }

  const mod$1 = (n, m) => {
    const r = n % m;
    return Math.floor(r >= 0 ? r : r + m);
  };
  const HoursPerDay = 24;
  const MinutesPerHour = 60;
  const SecondsPerMinute = 60;
  const msPerSecond = 1000;
  const msPerMinute = msPerSecond * SecondsPerMinute;
  const msPerHour = msPerMinute * MinutesPerHour;
  const msPerDay = msPerHour * HoursPerDay;

  /** https://tc39.es/ecma262/#sec-day-number-and-time-within-day */
  function Day(t) {
    return F(Math.floor(R(t) / msPerDay));
  }
  function TimeWithinDay(t) {
    return F(mod$1(R(t), msPerDay));
  }

  /** https://tc39.es/ecma262/#sec-year-number */
  function DaysInYear(y) {
    y = R(y);
    if (mod$1(y, 4) !== 0) {
      return F(365);
    }
    if (mod$1(y, 4) === 0 && mod$1(y, 100) !== 0) {
      return F(366);
    }
    if (mod$1(y, 100) === 0 && mod$1(y, 400) !== 0) {
      return F(365);
    }
    if (mod$1(y, 400) === 0) {
      return F(366);
    }
  }
  function DayFromYear(y) {
    y = R(y);
    return F(365 * (y - 1970) + Math.floor((y - 1969) / 4) - Math.floor((y - 1901) / 100) + Math.floor((y - 1601) / 400));
  }
  function TimeFromYear(y) {
    return F(msPerDay * R(DayFromYear(y)));
  }
  const msPerAverageYear = 12 * 30.436875 * msPerDay;
  function YearFromTime(t) {
    t = R(t);
    let year = Math.floor((t + msPerAverageYear / 2) / msPerAverageYear) + 1970;
    if (R(TimeFromYear(F(year))) > t) {
      year -= 1;
    }
    return F(year);
  }
  function InLeapYear(t) {
    if (R(DaysInYear(YearFromTime(t))) === 365) {
      return F(+0);
    }
    if (R(DaysInYear(YearFromTime(t))) === 366) {
      return F(1);
    }
  }

  /** https://tc39.es/ecma262/#sec-month-number */
  function MonthFromTime(t) {
    const dayWithinYear = R(DayWithinYear(t));
    const inLeapYear = R(InLeapYear(t));
    if (dayWithinYear >= 0 && dayWithinYear < 31) {
      return F(+0);
    }
    if (dayWithinYear >= 31 && dayWithinYear < 59 + inLeapYear) {
      return F(1);
    }
    if (dayWithinYear >= 59 + inLeapYear && dayWithinYear < 90 + inLeapYear) {
      return F(2);
    }
    if (dayWithinYear >= 90 + inLeapYear && dayWithinYear < 120 + inLeapYear) {
      return F(3);
    }
    if (dayWithinYear >= 120 + inLeapYear && dayWithinYear < 151 + inLeapYear) {
      return F(4);
    }
    if (dayWithinYear >= 151 + inLeapYear && dayWithinYear < 181 + inLeapYear) {
      return F(5);
    }
    if (dayWithinYear >= 181 + inLeapYear && dayWithinYear < 212 + inLeapYear) {
      return F(6);
    }
    if (dayWithinYear >= 212 + inLeapYear && dayWithinYear < 243 + inLeapYear) {
      return F(7);
    }
    if (dayWithinYear >= 243 + inLeapYear && dayWithinYear < 273 + inLeapYear) {
      return F(8);
    }
    if (dayWithinYear >= 273 + inLeapYear && dayWithinYear < 304 + inLeapYear) {
      return F(9);
    }
    if (dayWithinYear >= 304 + inLeapYear && dayWithinYear < 334 + inLeapYear) {
      return F(10);
    }
    if (dayWithinYear >= 334 + inLeapYear && dayWithinYear < 365 + inLeapYear) {
      return F(11);
    }
  }
  function DayWithinYear(t) {
    return F(R(Day(t)) - R(DayFromYear(YearFromTime(t))));
  }

  /** https://tc39.es/ecma262/#sec-date-number */
  function DateFromTime(t) {
    const dayWithinYear = R(DayWithinYear(t));
    const monthFromTime = R(MonthFromTime(t));
    const inLeapYear = R(InLeapYear(t));
    switch (monthFromTime) {
      case 0:
        return F(dayWithinYear + 1);
      case 1:
        return F(dayWithinYear - 30);
      case 2:
        return F(dayWithinYear - 58 - inLeapYear);
      case 3:
        return F(dayWithinYear - 89 - inLeapYear);
      case 4:
        return F(dayWithinYear - 119 - inLeapYear);
      case 5:
        return F(dayWithinYear - 150 - inLeapYear);
      case 6:
        return F(dayWithinYear - 180 - inLeapYear);
      case 7:
        return F(dayWithinYear - 211 - inLeapYear);
      case 8:
        return F(dayWithinYear - 242 - inLeapYear);
      case 9:
        return F(dayWithinYear - 272 - inLeapYear);
      case 10:
        return F(dayWithinYear - 303 - inLeapYear);
      case 11:
        return F(dayWithinYear - 333 - inLeapYear);
    }
  }

  /** https://tc39.es/ecma262/#sec-week-day */
  function WeekDay(t) {
    return F(mod$1(R(Day(t)) + 4, 7));
  }

  /** https://tc39.es/ecma262/#sec-local-time-zone-adjustment */
  function LocalTZA(_t, _isUTC) {
    // TODO: implement this function properly.
    return 0;
  }

  /** https://tc39.es/ecma262/#sec-localtime */
  function LocalTime(t) {
    return F(R(t) + LocalTZA());
  }

  /** https://tc39.es/ecma262/#sec-utc-t */
  function UTC(t) {
    return F(R(t) - LocalTZA());
  }

  /** https://tc39.es/ecma262/#sec-hours-minutes-second-and-milliseconds */
  function HourFromTime(t) {
    return F(mod$1(Math.floor(R(t) / msPerHour), HoursPerDay));
  }
  function MinFromTime(t) {
    return F(mod$1(Math.floor(R(t) / msPerMinute), MinutesPerHour));
  }
  function SecFromTime(t) {
    return F(mod$1(Math.floor(R(t) / msPerSecond), SecondsPerMinute));
  }
  function msFromTime(t) {
    return F(mod$1(R(t), msPerSecond));
  }

  /** https://tc39.es/ecma262/#sec-maketime */
  function MakeTime(hour, min, sec, ms) {
    if (!Number.isFinite(R(hour)) || !Number.isFinite(R(min)) || !Number.isFinite(R(sec)) || !Number.isFinite(R(ms))) {
      return F(NaN);
    }
    let _temp = ToIntegerOrInfinity(hour);
    Assert(!(_temp instanceof AbruptCompletion), "ToIntegerOrInfinity(hour)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const h = _temp;
    let _temp2 = ToIntegerOrInfinity(min);
    Assert(!(_temp2 instanceof AbruptCompletion), "ToIntegerOrInfinity(min)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const m = _temp2;
    let _temp3 = ToIntegerOrInfinity(sec);
    Assert(!(_temp3 instanceof AbruptCompletion), "ToIntegerOrInfinity(sec)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const s = _temp3;
    let _temp4 = ToIntegerOrInfinity(ms);
    Assert(!(_temp4 instanceof AbruptCompletion), "ToIntegerOrInfinity(ms)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const milli = _temp4;
    const t = h * msPerHour + m * msPerMinute + s * msPerSecond + milli;
    return F(t);
  }
  const daysWithinYearToEndOfMonth = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];

  /** https://tc39.es/ecma262/#sec-makeday */
  function MakeDay(year, month, date) {
    if (!Number.isFinite(R(year)) || !Number.isFinite(R(month)) || !Number.isFinite(R(date))) {
      return F(NaN);
    }
    let _temp5 = ToIntegerOrInfinity(year);
    Assert(!(_temp5 instanceof AbruptCompletion), "ToIntegerOrInfinity(year)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const y = _temp5;
    let _temp6 = ToIntegerOrInfinity(month);
    Assert(!(_temp6 instanceof AbruptCompletion), "ToIntegerOrInfinity(month)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const m = _temp6;
    let _temp7 = ToIntegerOrInfinity(date);
    Assert(!(_temp7 instanceof AbruptCompletion), "ToIntegerOrInfinity(date)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    const dt = _temp7;
    const ym = y + Math.floor(m / 12);
    const mn = mod$1(m, 12);
    const ymday = R(DayFromYear(F(ym + (mn > 1 ? 1 : 0)))) - 365 * (mn > 1 ? 1 : 0) + daysWithinYearToEndOfMonth[mn];
    const t = F(ymday * msPerDay);
    return F(R(Day(t)) + dt - 1);
  }

  /** https://tc39.es/ecma262/#sec-makedate */
  function MakeDate(day, time) {
    if (!Number.isFinite(R(day)) || !Number.isFinite(R(time))) {
      return F(NaN);
    }
    return F(R(day) * msPerDay + R(time));
  }

  /** https://tc39.es/ecma262/#sec-timeclip */
  function TimeClip(time) {
    // 1. If time is not finite, return NaN.
    if (!time.isFinite()) {
      return F(NaN);
    }
    // 2. If abs(ℝ(time)) > 8.64 × 1015, return NaN.
    if (Math.abs(R(time)) > 8.64e15) {
      return F(NaN);
    }
    // 3. Return 𝔽(! ToIntegerOrInfinity(time)).
    let _temp8 = ToIntegerOrInfinity(time);
    Assert(!(_temp8 instanceof AbruptCompletion), "ToIntegerOrInfinity(time)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    return F(_temp8);
  }

  /** https://tc39.es/ecma262/#sec-errorobjects-install-error-cause */
  function InstallErrorCause(O, options) {
    // 1. If Type(options) is Object and ? HasProperty(options, "cause") is true, then
    if (options instanceof ObjectValue) {
      let _temp = HasProperty(options, Value('cause'));
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      // nested if statement due to macro expansion
      if (_temp === Value.true) {
        let _temp2 = Get(options, Value('cause'));
        /* c8 ignore if */
        if (_temp2 instanceof AbruptCompletion) {
          return _temp2;
        }
        /* c8 ignore if */
        if (_temp2 instanceof Completion) {
          _temp2 = _temp2.Value;
        }
        // a. Let cause be ? Get(options, "cause").
        const cause = _temp2;
        // b. Perform ! CreateNonEnumerableDataPropertyOrThrow(O, "cause", cause).
        let _temp3 = DefinePropertyOrThrow(O, Value('cause'), exports.Descriptor({
          Value: cause,
          Writable: Value.true,
          Enumerable: Value.false,
          Configurable: Value.true
        }));
        Assert(!(_temp3 instanceof AbruptCompletion), "DefinePropertyOrThrow(O, Value('cause'), Descriptor({\n        Value: cause,\n        Writable: Value.true,\n        Enumerable: Value.false,\n        Configurable: Value.true,\n      }))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
      }
    }
    // 2. Return NormalCompletion(undefined).
    return NormalCompletion(Value.undefined);
  }

  // @ts-nocheck

  // This file covers abstract operations defined in
  /** https://tc39.es/ecma262/#sec-execution-contexts */

  /** https://tc39.es/ecma262/#sec-getactivescriptormodule */
  function GetActiveScriptOrModule() {
    for (let i = exports.surroundingAgent.executionContextStack.length - 1; i >= 0; i -= 1) {
      const e = exports.surroundingAgent.executionContextStack[i];
      if (e.ScriptOrModule !== Value.null) {
        return e.ScriptOrModule;
      }
    }
    return Value.null;
  }

  /** https://tc39.es/ecma262/#sec-resolvebinding */
  function ResolveBinding(name, env, strict) {
    // 1. If env is not present or if env is undefined, then
    if (env === undefined || env === Value.undefined) {
      // a. Set env to the running execution context's LexicalEnvironment.
      env = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    }
    // 2. Assert: env is an Environment Record.
    Assert(env instanceof EnvironmentRecord, "env instanceof EnvironmentRecord");
    // 3. If the code matching the syntactic production that is being evaluated is contained in strict mode code, let strict be true; else let strict be false.
    // 4. Return ? GetIdentifierReference(env, name, strict).
    return GetIdentifierReference(env, name, strict ? Value.true : Value.false);
  }

  /** https://tc39.es/ecma262/#sec-getthisenvironment */
  function GetThisEnvironment() {
    // 1. Let env be the running execution context's LexicalEnvironment.
    let env = exports.surroundingAgent.runningExecutionContext.LexicalEnvironment;
    // 2. Repeat,
    while (true) {
      // a. Let exists be env.HasThisBinding().
      const exists = env.HasThisBinding();
      // b. If exists is true, return envRec.
      if (exists === Value.true) {
        return env;
      }
      // c. Let outer be env.[[OuterEnv]].
      const outer = env.OuterEnv;
      // d. Assert: outer is not null.
      Assert(outer !== Value.null, "outer !== Value.null");
      // e. Set env to outer.
      env = outer;
    }
  }

  /** https://tc39.es/ecma262/#sec-resolvethisbinding */
  function ResolveThisBinding() {
    const envRec = GetThisEnvironment();
    return envRec.GetThisBinding();
  }

  /** https://tc39.es/ecma262/#sec-getnewtarget */
  function GetNewTarget() {
    const envRec = GetThisEnvironment();
    Assert('NewTarget' in envRec, "'NewTarget' in envRec");
    return envRec.NewTarget;
  }

  /** https://tc39.es/ecma262/#sec-getglobalobject */
  function GetGlobalObject() {
    const currentRealm = exports.surroundingAgent.currentRealmRecord;
    return currentRealm.GlobalObject;
  }

  // @ts-nocheck
  // This file covers abstract operations defined in
  /** https://tc39.es/ecma262/#sec-ecmascript-function-objects */
  /** https://tc39.es/ecma262/#sec-built-in-function-objects */
  // and
  /** https://tc39.es/ecma262/#sec-tail-position-calls */

  function isECMAScriptFunctionObject(O) {
    return 'ECMAScriptCode' in O;
  }
  function isFunctionObject(O) {
    return 'Call' in O;
  }

  /** https://tc39.es/ecma262/#sec-prepareforordinarycall */
  function PrepareForOrdinaryCall(F, newTarget) {
    // 1. Assert: Type(newTarget) is Undefined or Object.
    Assert(newTarget instanceof UndefinedValue || newTarget instanceof ObjectValue, "newTarget instanceof UndefinedValue || newTarget instanceof ObjectValue");
    // 2. Let callerContext be the running execution context.
    // const callerContext = surroundingAgent.runningExecutionContext;
    // 3. Let calleeContext be a new ECMAScript code execution context.
    const calleeContext = new ExecutionContext();
    // 4. Set the Function of calleeContext to F.
    calleeContext.Function = F;
    // 5. Let calleeRealm be F.[[Realm]].
    const calleeRealm = F.Realm;
    // 6. Set the Realm of calleeContext to calleeRealm.
    calleeContext.Realm = calleeRealm;
    // 7. Set the ScriptOrModule of calleeContext to F.[[ScriptOrModule]].
    calleeContext.ScriptOrModule = F.ScriptOrModule;
    // 8. Let localEnv be NewFunctionEnvironment(F, newTarget).
    const localEnv = new FunctionEnvironmentRecord(F, newTarget);
    // 9. Set the LexicalEnvironment of calleeContext to localEnv.
    calleeContext.LexicalEnvironment = localEnv;
    // 10. Set the VariableEnvironment of calleeContext to localEnv.
    calleeContext.VariableEnvironment = localEnv;
    // 11. Set the PrivateEnvironment of calleeContext to F.[[PrivateEnvironment]].
    calleeContext.PrivateEnvironment = F.PrivateEnvironment;
    // 12. Push calleeContext onto the execution context stack; calleeContext is now the running execution context.
    exports.surroundingAgent.executionContextStack.push(calleeContext);
    // 13. NOTE: Any exception objects produced after this point are associated with calleeRealm.
    // 14. Return calleeContext.
    return calleeContext;
  }

  /** https://tc39.es/ecma262/#sec-ordinarycallbindthis */
  function OrdinaryCallBindThis(F, calleeContext, thisArgument) {
    // 1. Let thisMode be F.[[ThisMode]].
    const thisMode = F.ThisMode;
    // 2. If thisMode is lexical, return NormalCompletion(undefined).
    if (thisMode === 'lexical') {
      return NormalCompletion(Value.undefined);
    }
    // 3. Let calleeRealm be F.[[Realm]].
    const calleeRealm = F.Realm;
    // 4. Let localEnv be the LexicalEnvironment of calleeContext.
    const localEnv = calleeContext.LexicalEnvironment;
    let thisValue;
    // 5. If thisMode is strict, let thisValue be thisArgument.
    if (thisMode === 'strict') {
      thisValue = thisArgument;
    } else {
      // 6. Else,
      // a. If thisArgument is undefined or null, then
      if (thisArgument === Value.undefined || thisArgument === Value.null) {
        // i. Let globalEnv be calleeRealm.[[GlobalEnv]].
        const globalEnv = calleeRealm.GlobalEnv;
        // ii. Assert: globalEnv is a global Environment Record.
        Assert(globalEnv instanceof GlobalEnvironmentRecord, "globalEnv instanceof GlobalEnvironmentRecord");
        // iii. Let thisValue be globalEnv.[[GlobalThisValue]].
        thisValue = globalEnv.GlobalThisValue;
      } else {
        let _temp = ToObject(thisArgument);
        Assert(!(_temp instanceof AbruptCompletion), "ToObject(thisArgument)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp instanceof Completion) {
          _temp = _temp.Value;
        }
        // b. Else,
        // i. Let thisValue be ! ToObject(thisArgument).
        thisValue = _temp;
        // ii. NOTE: ToObject produces wrapper objects using calleeRealm.
      }
    }
    // 7. Assert: localEnv is a function Environment Record.
    Assert(localEnv instanceof FunctionEnvironmentRecord, "localEnv instanceof FunctionEnvironmentRecord");
    // 8. Assert: The next step never returns an abrupt completion because localEnv.[[ThisBindingStatus]] is not initialized.
    Assert(localEnv.ThisBindingStatus !== 'initialized', "localEnv.ThisBindingStatus !== 'initialized'");
    // 10. Return localEnv.BindThisValue(thisValue).
    return localEnv.BindThisValue(thisValue);
  }

  /** https://tc39.es/ecma262/#sec-ordinarycallevaluatebody */
  function OrdinaryCallEvaluateBody(F, argumentsList) {
    // 1. Return the result of EvaluateBody of the parsed code that is F.[[ECMAScriptCode]] passing F and argumentsList as the arguments.
    return EnsureCompletion(unwind(EvaluateBody(F.ECMAScriptCode, F, argumentsList)));
  }

  /** https://tc39.es/ecma262/#sec-definefield */
  function DefineField(receiver, fieldRecord) {
    // 1. Let fieldName be fieldRecord.[[Name]].
    const fieldName = fieldRecord.Name;
    // 2. Let initializer be fieldRecord.[[Initializer]].
    const initializer = fieldRecord.Initializer;
    // 3. If initializer is not empty, then
    let initValue;
    if (initializer !== undefined) {
      let _temp2 = Call(initializer, receiver);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      // a. Let initValue be ? Call(initializer, receiver).
      initValue = _temp2;
    } else {
      // 4. Else, let initValue be undefined.
      initValue = Value.undefined;
    }
    // 5. If fieldName is a Private Name, then
    if (fieldName instanceof PrivateName) {
      let _temp3 = PrivateFieldAdd(fieldName, receiver, initValue);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
    } else {
      let _temp4 = IsPropertyKey(fieldName);
      Assert(!(_temp4 instanceof AbruptCompletion), "IsPropertyKey(fieldName)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      // 6. Else,
      // a. Assert: ! IsPropertyKey(fieldName) is true.
      Assert(_temp4, "X(IsPropertyKey(fieldName))");
      // b. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).
      let _temp5 = CreateDataPropertyOrThrow(receiver, fieldName, initValue);
      /* c8 ignore if */
      if (_temp5 instanceof AbruptCompletion) {
        return _temp5;
      }
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-initializeinstanceelements */
  function InitializeInstanceElements(O, constructor) {
    // 1. Let methods be the value of constructor.[[PrivateMethods]].
    const methods = constructor.PrivateMethods;
    // 2. For each PrivateElement method of methods, do
    for (const method of methods) {
      let _temp6 = PrivateMethodOrAccessorAdd(method, O);
      /* c8 ignore if */
      if (_temp6 instanceof AbruptCompletion) {
        return _temp6;
      }
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
    }
    // 3. Let fields be the value of constructor.[[Fields]].
    const fields = constructor.Fields;
    // 4. For each element fieldRecord of fields, do
    for (const fieldRecord of fields) {
      let _temp7 = DefineField(O, fieldRecord);
      /* c8 ignore if */
      if (_temp7 instanceof AbruptCompletion) {
        return _temp7;
      }
      /* c8 ignore if */
      if (_temp7 instanceof Completion) {
        _temp7 = _temp7.Value;
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-ecmascript-function-objects-call-thisargument-argumentslist */
  function FunctionCallSlot(thisArgument, argumentsList) {
    const F = this;

    // 1. Assert: F is an ECMAScript function object.
    Assert(isECMAScriptFunctionObject(F), "isECMAScriptFunctionObject(F)");
    // 2. Let callerContext be the running execution context.
    // 3. Let calleeContext be PrepareForOrdinaryCall(F, undefined).
    const calleeContext = PrepareForOrdinaryCall(F, Value.undefined);
    // 4. Assert: calleeContext is now the running execution context.
    Assert(exports.surroundingAgent.runningExecutionContext === calleeContext, "surroundingAgent.runningExecutionContext === calleeContext");
    // 5. If F.[[IsClassConstructor]] is true, then
    if (F.IsClassConstructor === Value.true) {
      // a. Let error be a newly created TypeError object.
      const error = exports.surroundingAgent.Throw('TypeError', 'ConstructorNonCallable', F);
      // b. NOTE: _error_ is created in _calleeContext_ with _F_'s associated Realm Record.
      // c. Remove _calleeContext_ from the execution context stack and restore _callerContext_ as the running execution context.
      exports.surroundingAgent.executionContextStack.pop(calleeContext);
      // d. Return ThrowCompletion(_error_).
      return error;
    }
    // 6. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).
    OrdinaryCallBindThis(F, calleeContext, thisArgument);
    // 7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).
    let result = OrdinaryCallEvaluateBody(F, argumentsList);
    // 8. Remove calleeContext from the execution context stack and restore callerContext as the running execution context.
    exports.surroundingAgent.executionContextStack.pop(calleeContext);
    // 9. If result.[[Type]] is return, return NormalCompletion(result.[[Value]]).
    if (result.Type === 'return') {
      return NormalCompletion(result.Value);
    }
    // 10. ReturnIfAbrupt(result).
    /* c8 ignore if */
    if (result instanceof AbruptCompletion) {
      return result;
    }
    /* c8 ignore if */
    if (result instanceof Completion) {
      result = result.Value;
    }
    // 11. Return NormalCompletion(undefined).
    return NormalCompletion(Value.undefined);
  }

  /** https://tc39.es/ecma262/#sec-ecmascript-function-objects-construct-argumentslist-newtarget */
  FunctionCallSlot.section = 'https://tc39.es/ecma262/#sec-ecmascript-function-objects-call-thisargument-argumentslist';
  function FunctionConstructSlot(argumentsList, newTarget) {
    const F = this;

    // 1. Assert: F is an ECMAScript function object.
    Assert(isECMAScriptFunctionObject(F), "isECMAScriptFunctionObject(F)");
    // 2. Assert: Type(newTarget) is Object.
    Assert(newTarget instanceof ObjectValue, "newTarget instanceof ObjectValue");
    // 3. Let callerContext be the running execution context.
    // 4. Let kind be F.[[ConstructorKind]].
    const kind = F.ConstructorKind;
    let thisArgument;
    // 5. If kind is base, then
    if (kind === 'base') {
      let _temp8 = OrdinaryCreateFromConstructor(newTarget, '%Object.prototype%');
      /* c8 ignore if */
      if (_temp8 instanceof AbruptCompletion) {
        return _temp8;
      }
      /* c8 ignore if */
      if (_temp8 instanceof Completion) {
        _temp8 = _temp8.Value;
      }
      // a. Let thisArgument be ? OrdinaryCreateFromConstructor(newTarget, "%Object.prototype%").
      thisArgument = _temp8;
    }
    // 6. Let calleeContext be PrepareForOrdinaryCall(F, newTarget).
    const calleeContext = PrepareForOrdinaryCall(F, newTarget);
    // 7. Assert: calleeContext is now the running execution context.
    Assert(exports.surroundingAgent.runningExecutionContext === calleeContext, "surroundingAgent.runningExecutionContext === calleeContext");
    exports.surroundingAgent.runningExecutionContext.callSite.constructCall = true;
    // 8. If kind is base, then
    if (kind === 'base') {
      // a. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).
      OrdinaryCallBindThis(F, calleeContext, thisArgument);
      // b. Let initializeResult be InitializeInstanceElements(thisArgument, F).
      const initializeResult = InitializeInstanceElements(thisArgument, F);
      // c. If initializeResult is an abrupt completion, then
      if (initializeResult instanceof AbruptCompletion) {
        // i. Remove calleeContext from the execution context stack and restore callerContext as the running execution context.
        exports.surroundingAgent.executionContextStack.pop(calleeContext);
        // ii. Return Completion(initializeResult).
        return Completion(initializeResult);
      }
    }
    // 9. Let constructorEnv be the LexicalEnvironment of calleeContext.
    const constructorEnv = calleeContext.LexicalEnvironment;
    // 10. Let result be OrdinaryCallEvaluateBody(F, argumentsList).
    let result = OrdinaryCallEvaluateBody(F, argumentsList);
    // 11. Remove calleeContext from the execution context stack and restore callerContext as the running execution context.
    exports.surroundingAgent.executionContextStack.pop(calleeContext);
    // 12. If result.[[Type]] is return, then
    if (result.Type === 'return') {
      // a. If Type(result.[[Value]]) is Object, return NormalCompletion(result.[[Value]]).
      if (result.Value instanceof ObjectValue) {
        return NormalCompletion(result.Value);
      }
      // b. If kind is base, return NormalCompletion(thisArgument).
      if (kind === 'base') {
        return NormalCompletion(thisArgument);
      }
      // c. If result.[[Value]] is not undefined, throw a TypeError exception.
      if (result.Value !== Value.undefined) {
        return exports.surroundingAgent.Throw('TypeError', 'DerivedConstructorReturnedNonObject');
      }
    } else {
      /* c8 ignore if */
      if (result instanceof AbruptCompletion) {
        return result;
      }
      /* c8 ignore if */
      if (result instanceof Completion) {
        result = result.Value;
      }
    }
    // 14. Return ? constructorEnv.GetThisBinding().
    return constructorEnv.GetThisBinding();
  }

  /** https://tc39.es/ecma262/#sec-functionallocate */
  FunctionConstructSlot.section = 'https://tc39.es/ecma262/#sec-ecmascript-function-objects-construct-argumentslist-newtarget';
  function OrdinaryFunctionCreate(functionPrototype, sourceText, ParameterList, Body, thisMode, Scope, PrivateScope) {
    // 1. Assert: Type(functionPrototype) is Object.
    Assert(functionPrototype instanceof ObjectValue, "functionPrototype instanceof ObjectValue");
    // 2. Let internalSlotsList be the internal slots listed in Table 33.
    const internalSlotsList = ['Environment', 'PrivateEnvironment', 'FormalParameters', 'ECMAScriptCode', 'ConstructorKind', 'Realm', 'ScriptOrModule', 'ThisMode', 'Strict', 'HomeObject', 'SourceText', 'Fields', 'PrivateMethods', 'ClassFieldInitializerName', 'IsClassConstructor'];
    // 3. Let F be ! OrdinaryObjectCreate(functionPrototype, internalSlotsList).
    let _temp9 = OrdinaryObjectCreate(functionPrototype, internalSlotsList);
    Assert(!(_temp9 instanceof AbruptCompletion), "OrdinaryObjectCreate(functionPrototype, internalSlotsList)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    const F = _temp9;
    // 4. Set F.[[Call]] to the definition specified in 10.2.1.
    F.Call = exports.surroundingAgent.hostDefinedOptions.boost?.callFunction || FunctionCallSlot;
    // 5. Set F.[[SourceText]] to sourceText.
    F.SourceText = sourceText;
    // 6. Set F.[[FormalParameters]] to ParameterList.
    F.FormalParameters = ParameterList;
    // 7. Set F.[[ECMAScriptCode]] to Body.
    F.ECMAScriptCode = Body;
    // 8. If the source text matching Body is strict mode code, let Strict be true; else let Strict be false.
    const Strict = isStrictModeCode(Body);
    // 9. Set F.[[Strict]] to Strict.
    F.Strict = Strict;
    // 10. If thisMode is lexical-this, set F.[[ThisMode]] to lexical.
    if (thisMode === 'lexical-this') {
      F.ThisMode = 'lexical';
    } else if (Strict) {
      // 11. Else if Strict is true, set F.[[ThisMode]] to strict.
      F.ThisMode = 'strict';
    } else {
      // 12. Else, set F.[[ThisMode]] to global.
      F.ThisMode = 'global';
    }
    // 13. Set F.[[IsClassConstructor]] to false.
    F.IsClassConstructor = Value.false;
    // 14. Set F.[[Environment]] to Scope.
    F.Environment = Scope;
    // 15. Set F.[[PrivateEnvironment]] to PrivateScope.
    Assert(PrivateScope, "PrivateScope");
    F.PrivateEnvironment = PrivateScope;
    // 16. Set F.[[ScriptOrModule]] to GetActiveScriptOrModule().
    F.ScriptOrModule = GetActiveScriptOrModule();
    // 17. Set F.[[Realm]] to the current Realm Record.
    F.Realm = exports.surroundingAgent.currentRealmRecord;
    // 18. Set F.[[HomeObject]] to undefined.
    F.HomeObject = Value.undefined;
    // 19. Set F.[[ClassFieldInitializerName]] to empty.
    F.ClassFieldInitializerName = undefined;
    F.PrivateMethods = [];
    F.Fields = [];
    // 20. Let len be the ExpectedArgumentCount of ParameterList.
    const len = ExpectedArgumentCount(ParameterList);
    // 21. Perform ! SetFunctionLength(F, len).
    let _temp10 = SetFunctionLength(F, len);
    Assert(!(_temp10 instanceof AbruptCompletion), "SetFunctionLength(F, len)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    // 22. Return F.
    return F;
  }

  /** https://tc39.es/ecma262/#sec-makeconstructor */
  function MakeConstructor(F, writablePrototype, prototype) {
    Assert(isECMAScriptFunctionObject(F) || F.Call === BuiltinFunctionCall, "isECMAScriptFunctionObject(F) || F.Call === BuiltinFunctionCall");
    if (isECMAScriptFunctionObject(F)) {
      Assert(IsConstructor(F) === Value.false, "IsConstructor(F) === Value.false");
      let _temp11 = IsExtensible(F);
      Assert(!(_temp11 instanceof AbruptCompletion), "IsExtensible(F)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp11 instanceof Completion) {
        _temp11 = _temp11.Value;
      }
      let _temp12 = HasOwnProperty(F, Value('prototype'));
      Assert(!(_temp12 instanceof AbruptCompletion), "HasOwnProperty(F, Value('prototype'))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp12 instanceof Completion) {
        _temp12 = _temp12.Value;
      }
      Assert(_temp11 === Value.true && _temp12 === Value.false, "X(IsExtensible(F)) === Value.true && X(HasOwnProperty(F, Value('prototype'))) === Value.false");
      F.Construct = exports.surroundingAgent.hostDefinedOptions.boost?.constructFunction || FunctionConstructSlot;
    }
    F.ConstructorKind = 'base';
    if (writablePrototype === undefined) {
      writablePrototype = Value.true;
    }
    if (prototype === undefined) {
      prototype = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%Object.prototype%'));
      let _temp13 = DefinePropertyOrThrow(prototype, Value('constructor'), exports.Descriptor({
        Value: F,
        Writable: writablePrototype,
        Enumerable: Value.false,
        Configurable: Value.true
      }));
      Assert(!(_temp13 instanceof AbruptCompletion), "DefinePropertyOrThrow(prototype, Value('constructor'), Descriptor({\n      Value: F,\n      Writable: writablePrototype,\n      Enumerable: Value.false,\n      Configurable: Value.true,\n    }))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp13 instanceof Completion) {
        _temp13 = _temp13.Value;
      }
    }
    let _temp14 = DefinePropertyOrThrow(F, Value('prototype'), exports.Descriptor({
      Value: prototype,
      Writable: writablePrototype,
      Enumerable: Value.false,
      Configurable: Value.false
    }));
    Assert(!(_temp14 instanceof AbruptCompletion), "DefinePropertyOrThrow(F, Value('prototype'), Descriptor({\n    Value: prototype,\n    Writable: writablePrototype,\n    Enumerable: Value.false,\n    Configurable: Value.false,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    return NormalCompletion(Value.undefined);
  }

  /** https://tc39.es/ecma262/#sec-makeclassconstructor */
  function MakeClassConstructor(F) {
    Assert(isECMAScriptFunctionObject(F), "isECMAScriptFunctionObject(F)");
    Assert(F.IsClassConstructor === Value.false, "F.IsClassConstructor === Value.false");
    F.IsClassConstructor = Value.true;
  }

  /** https://tc39.es/ecma262/#sec-makemethod */
  function MakeMethod(F, homeObject) {
    Assert(isECMAScriptFunctionObject(F), "isECMAScriptFunctionObject(F)");
    Assert(homeObject instanceof ObjectValue, "homeObject instanceof ObjectValue");
    F.HomeObject = homeObject;
  }

  /** https://tc39.es/ecma262/#sec-setfunctionname */
  function SetFunctionName(F, name, prefix) {
    // 1. Assert: F is an extensible object that does not have a "name" own property.
    Assert(IsExtensible(F) === Value.true && HasOwnProperty(F, Value('name')) === Value.false, "IsExtensible(F) === Value.true && HasOwnProperty(F, Value('name')) === Value.false");
    // 2. If Type(name) is Symbol, then
    if (name instanceof SymbolValue) {
      // a. Let description be name's [[Description]] value.
      const description = name.Description;
      // b. If description is undefined, set name to the empty String.
      if (description === Value.undefined) {
        name = Value('');
      } else {
        // c. Else, set name to the string-concatenation of "[", description, and "]".
        name = Value(`[${description.stringValue()}]`);
      }
    } else if (name instanceof PrivateName) {
      // 3. Else if name is a Private Name, then
      // a. Set name to name.[[Description]].
      name = name.Description;
    }
    // 4. If F has an [[InitialName]] internal slot, then
    if ('InitialName' in F) {
      // a. Set F.[[InitialName]] to name.
      F.InitialName = name;
    }
    // 5. If prefix is present, then
    if (prefix !== undefined) {
      // a. Set name to the string-concatenation of prefix, the code unit 0x0020 (SPACE), and name.
      name = Value(`${prefix.stringValue()} ${name.stringValue()}`);
    }
    // 6. Return ! DefinePropertyOrThrow(F, "name", PropertyDescriptor { [[Value]]: name, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }).
    let _temp15 = DefinePropertyOrThrow(F, Value('name'), exports.Descriptor({
      Value: name,
      Writable: Value.false,
      Enumerable: Value.false,
      Configurable: Value.true
    }));
    Assert(!(_temp15 instanceof AbruptCompletion), "DefinePropertyOrThrow(F, Value('name'), Descriptor({\n    Value: name,\n    Writable: Value.false,\n    Enumerable: Value.false,\n    Configurable: Value.true,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp15 instanceof Completion) {
      _temp15 = _temp15.Value;
    }
    return _temp15;
  }

  /** https://tc39.es/ecma262/#sec-setfunctionlength */
  function SetFunctionLength(F$1, length) {
    Assert(isNonNegativeInteger(length) || length === Infinity, "isNonNegativeInteger(length) || length === Infinity");
    // 1. Assert: F is an extensible object that does not have a "length" own property.
    Assert(IsExtensible(F$1) === Value.true && HasOwnProperty(F$1, Value('length')) === Value.false, "IsExtensible(F) === Value.true && HasOwnProperty(F, Value('length')) === Value.false");
    // 2. Return ! DefinePropertyOrThrow(F, "length", PropertyDescriptor { [[Value]]: 𝔽(length), [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }).
    let _temp16 = DefinePropertyOrThrow(F$1, Value('length'), exports.Descriptor({
      Value: F(length),
      Writable: Value.false,
      Enumerable: Value.false,
      Configurable: Value.true
    }));
    Assert(!(_temp16 instanceof AbruptCompletion), "DefinePropertyOrThrow(F, Value('length'), Descriptor({\n    Value: toNumberValue(length),\n    Writable: Value.false,\n    Enumerable: Value.false,\n    Configurable: Value.true,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp16 instanceof Completion) {
      _temp16 = _temp16.Value;
    }
    return _temp16;
  }
  function nativeCall(F, argumentsList, thisArgument, newTarget) {
    return F.nativeFunction(argumentsList, {
      thisValue: thisArgument || Value.undefined,
      NewTarget: newTarget || Value.undefined
    });
  }
  function BuiltinFunctionCall(thisArgument, argumentsList) {
    const F = this;

    // const callerContext = surroundingAgent.runningExecutionContext;
    // If callerContext is not already suspended, suspend callerContext.
    const calleeContext = new ExecutionContext();
    calleeContext.Function = F;
    const calleeRealm = F.Realm;
    calleeContext.Realm = calleeRealm;
    calleeContext.ScriptOrModule = F.ScriptOrModule;
    // 8. Perform any necessary implementation-defined initialization of calleeContext.
    exports.surroundingAgent.executionContextStack.push(calleeContext);
    const result = nativeCall(F, argumentsList, thisArgument, Value.undefined);
    // Remove calleeContext from the execution context stack and
    // restore callerContext as the running execution context.
    exports.surroundingAgent.executionContextStack.pop(calleeContext);
    return result;
  }
  function BuiltinFunctionConstruct(argumentsList, newTarget) {
    const F = this;

    // const callerContext = surroundingAgent.runningExecutionContext;
    // If callerContext is not already suspended, suspend callerContext.
    const calleeContext = new ExecutionContext();
    calleeContext.Function = F;
    const calleeRealm = F.Realm;
    calleeContext.Realm = calleeRealm;
    calleeContext.ScriptOrModule = F.ScriptOrModule;
    // 8. Perform any necessary implementation-defined initialization of calleeContext.
    exports.surroundingAgent.executionContextStack.push(calleeContext);
    exports.surroundingAgent.runningExecutionContext.callSite.constructCall = true;
    const result = nativeCall(F, argumentsList, undefined, newTarget);
    // Remove calleeContext from the execution context stack and
    // restore callerContext as the running execution context.
    exports.surroundingAgent.executionContextStack.pop(calleeContext);
    return result;
  }

  /** https://tc39.es/ecma262/#sec-createbuiltinfunction */
  function CreateBuiltinFunction(steps, length, name, internalSlotsList, realm, prototype, prefix, isConstructor = Value.false) {
    // 1. Assert: steps is either a set of algorithm steps or other definition of a function's behaviour provided in this specification.
    Assert(typeof steps === 'function', "typeof steps === 'function'");
    // 2. If realm is not present, set realm to the current Realm Record.
    if (realm === undefined) {
      realm = exports.surroundingAgent.currentRealmRecord;
    }
    // 3. Assert: realm is a Realm Record.
    Assert(realm instanceof Realm, "realm instanceof Realm");
    // 4. If prototype is not present, set prototype to realm.[[Intrinsics]].[[%Function.prototype%]].
    if (prototype === undefined) {
      prototype = realm.Intrinsics['%Function.prototype%'];
    }
    // 5. Let func be a new built-in function object that when called performs the action described by steps. The new function object has internal slots whose names are the elements of internalSlotsList.
    let _temp17 = MakeBasicObject(['Prototype', 'Extensible', 'Realm', 'ScriptOrModule', 'InitialName'].concat(internalSlotsList));
    Assert(!(_temp17 instanceof AbruptCompletion), "MakeBasicObject(['Prototype', 'Extensible', 'Realm', 'ScriptOrModule', 'InitialName'].concat(internalSlotsList))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp17 instanceof Completion) {
      _temp17 = _temp17.Value;
    }
    const func = _temp17;
    func.Call = BuiltinFunctionCall;
    if (isConstructor === Value.true) {
      func.Construct = BuiltinFunctionConstruct;
    }
    func.nativeFunction = steps;
    // 6. Set func.[[Realm]] to realm.
    func.Realm = realm;
    // 7. Set func.[[Prototype]] to prototype.
    func.Prototype = prototype;
    // 8. Set func.[[Extensible]] to true.
    func.Extensible = Value.true;
    // 9. Set func.[[ScriptOrModule]] to null.
    func.ScriptOrModule = Value.null;
    // 10. Set func.[[InitialName]] to null.
    func.InitialName = Value.null;
    // 11. Perform ! SetFunctionLength(func, length).
    let _temp18 = SetFunctionLength(func, length);
    Assert(!(_temp18 instanceof AbruptCompletion), "SetFunctionLength(func, length)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp18 instanceof Completion) {
      _temp18 = _temp18.Value;
    }
    // 12. If prefix is not present, then
    if (prefix === undefined) {
      let _temp19 = SetFunctionName(func, name);
      Assert(!(_temp19 instanceof AbruptCompletion), "SetFunctionName(func, name)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp19 instanceof Completion) {
        _temp19 = _temp19.Value;
      }
    } else {
      let _temp20 = SetFunctionName(func, name, prefix);
      Assert(!(_temp20 instanceof AbruptCompletion), "SetFunctionName(func, name, prefix)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp20 instanceof Completion) {
        _temp20 = _temp20.Value;
      }
    }
    // 13. Return func.
    return func;
  }

  /** https://tc39.es/ecma262/#sec-preparefortailcall */
  function PrepareForTailCall() {
    // 1. Let leafContext be the running execution context.
    const leafContext = exports.surroundingAgent.runningExecutionContext;
    // 2. Suspend leafContext.
    // 3. Pop leafContext from the execution context stack. The execution context now on the top of the stack becomes the running execution context.
    exports.surroundingAgent.executionContextStack.pop(leafContext);
    // 4. Assert: leafContext has no further use. It will never be activated as the running execution context.
    leafContext.poppedForTailCall = true;
  }

  /** https://tc39.es/ecma262/#sec-generator-objects */

  /** https://tc39.es/ecma262/#sec-generatorstart */
  function GeneratorStart(generator, generatorBody) {
    // 1. Assert: The value of generator.[[GeneratorState]] is undefined.
    Assert(generator.GeneratorState === Value.undefined, "generator.GeneratorState === Value.undefined");
    // 2. Let genContext be the running execution context.
    const genContext = exports.surroundingAgent.runningExecutionContext;
    // 3. Set the Generator component of genContext to generator.
    genContext.Generator = generator;
    // 4. Set the code evaluation state of genContext such that when evaluation is resumed
    //    for that execution context the following steps will be performed:
    genContext.codeEvaluationState = function* resumer() {
      // a. If generatorBody is a Parse Node, then
      //    i. Let result be the result of evaluating generatorBody.
      // b. Else,
      //    i. Assert: generatorBody is an Abstract Closure.
      //    ii. Let result be generatorBody().
      const result = EnsureCompletion(
      // Note: Engine262 can only perform the "If generatorBody is an Abstract Closure" check:
      yield* typeof generatorBody === 'function' ? generatorBody() : Evaluate(generatorBody));
      // c. Assert: If we return here, the generator either threw an exception or
      //    performed either an implicit or explicit return.
      // d. Remove genContext from the execution context stack and restore the execution context
      //    that is at the top of the execution context stack as the running execution context.
      exports.surroundingAgent.executionContextStack.pop(genContext);
      // e. Set generator.[[GeneratorState]] to completed.
      generator.GeneratorState = 'completed';
      // f. Once a generator enters the completed state it never leaves it and its
      //    associated execution context is never resumed. Any execution state associated
      //    with generator can be discarded at this point.
      genContext.codeEvaluationState = null;
      // g. If result.[[Type]] is normal, let resultValue be undefined.
      let resultValue;
      if (result.Type === 'normal') {
        resultValue = Value.undefined;
      } else if (result.Type === 'return') {
        // h. Else if result.[[Type]] is return, let resultValue be result.[[Value]].
        resultValue = result.Value;
      } else {
        // i. Else,
        // i. Assert: result.[[Type]] is throw.
        Assert(result.Type === 'throw', "result.Type === 'throw'");
        // ii. Return Completion(result).
        return Completion(result);
      }
      // j. Return CreateIterResultObject(resultValue, true).
      let _temp = CreateIterResultObject(resultValue, Value.true);
      Assert(!(_temp instanceof AbruptCompletion), "CreateIterResultObject(resultValue, Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      return _temp;
    }();
    // 5. Set generator.[[GeneratorContext]] to genContext.
    generator.GeneratorContext = genContext;
    // 6. Set generator.[[GeneratorState]] to suspendedStart.
    generator.GeneratorState = 'suspendedStart';
    // 7. Return NormalCompletion(undefined).
    return NormalCompletion(Value.undefined);
  }
  function generatorBrandToErrorMessageType(generatorBrand) {
    let expectedType;
    if (generatorBrand !== undefined) {
      expectedType = generatorBrand.stringValue();
      if (expectedType.startsWith('%') && expectedType.endsWith('Prototype%')) {
        expectedType = expectedType.slice(1, -10).trim();
        if (expectedType.endsWith('Iterator')) {
          expectedType = `${expectedType.slice(0, -8).trim()} Iterator`;
        }
      }
    }
    return expectedType;
  }

  /** https://tc39.es/ecma262/#sec-generatorvalidate */
  function GeneratorValidate(generator, generatorBrand) {
    let _temp2 = RequireInternalSlot(generator, 'GeneratorState');
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 2. Perform ? RequireInternalSlot(generator, [[GeneratorBrand]]).
    let _temp3 = RequireInternalSlot(generator, 'GeneratorBrand');
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    // 3. If generator.[[GeneratorBrand]] is not the same value as generatorBrand, throw a TypeError exception.
    const brand = generator.GeneratorBrand;
    if (brand === undefined || generatorBrand === undefined ? brand !== generatorBrand : SameValue(brand, generatorBrand) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', generatorBrandToErrorMessageType(generatorBrand) || 'Generator', generator);
    }
    // 4. Assert: generator also has a [[GeneratorContext]] internal slot.
    Assert('GeneratorContext' in generator, "'GeneratorContext' in generator");
    // 5. Let state be generator.[[GeneratorState]].
    const state = generator.GeneratorState;
    // 6. If state is executing, throw a TypeError exception.
    if (state === 'executing') {
      return exports.surroundingAgent.Throw('TypeError', 'GeneratorRunning');
    }
    // 7. Return state.
    return state;
  }

  /** https://tc39.es/ecma262/#sec-generatorresume */
  function GeneratorResume(generator, value, generatorBrand) {
    let _temp4 = GeneratorValidate(generator, generatorBrand);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 1. Let state be ? GeneratorValidate(generator, generatorBrand).
    const state = _temp4;
    // 2. If state is completed, return CreateIterResultObject(undefined, true).
    if (state === 'completed') {
      let _temp5 = CreateIterResultObject(Value.undefined, Value.true);
      Assert(!(_temp5 instanceof AbruptCompletion), "CreateIterResultObject(Value.undefined, Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      return _temp5;
    }
    // 3. Assert: state is either suspendedStart or suspendedYield.
    Assert(state === 'suspendedStart' || state === 'suspendedYield', "state === 'suspendedStart' || state === 'suspendedYield'");
    // 4. Let genContext be generator.[[GeneratorContext]].
    const genContext = generator.GeneratorContext;
    // 5. Let methodContext be the running execution context.
    // 6. Suspend methodContext.
    const methodContext = exports.surroundingAgent.runningExecutionContext;
    // 7. Set generator.[[GeneratorState]] to executing.
    generator.GeneratorState = 'executing';
    // 8. Push genContext onto the execution context stack.
    exports.surroundingAgent.executionContextStack.push(genContext);
    // 9. Resume the suspended evaluation of genContext using NormalCompletion(value) as
    //    the result of the operation that suspended it. Let result be the value returned by
    //    the resumed computation.
    const result = EnsureCompletion(resume(genContext, NormalCompletion(value)));
    // 10. Assert: When we return here, genContext has already been removed from the execution
    //     context stack and methodContext is the currently running execution context.
    Assert(exports.surroundingAgent.runningExecutionContext === methodContext, "surroundingAgent.runningExecutionContext === methodContext");
    // 11. Return Completion(result).
    return Completion(result);
  }

  /** https://tc39.es/ecma262/#sec-generatorresumeabrupt */
  function GeneratorResumeAbrupt(generator, abruptCompletion, generatorBrand) {
    let _temp6 = GeneratorValidate(generator, generatorBrand);
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    // 1. Let state be ? GeneratorValidate(generator, generatorBrand).
    let state = _temp6;
    // 2. If state is suspendedStart, then
    if (state === 'suspendedStart') {
      // a. Set generator.[[GeneratorState]] to completed.
      generator.GeneratorState = 'completed';
      // b. Once a generator enters the completed state it never leaves it and its
      //    associated execution context is never resumed. Any execution state associate
      //    with generator can be discarded at this point.
      generator.GeneratorContext = null;
      // c. Set state to completed.
      state = 'completed';
    }
    // 3. If state is completed, then
    if (state === 'completed') {
      // a. If abruptCompletion.[[Type]] is return, then
      if (abruptCompletion.Type === 'return') {
        let _temp7 = CreateIterResultObject(abruptCompletion.Value, Value.true);
        Assert(!(_temp7 instanceof AbruptCompletion), "CreateIterResultObject(abruptCompletion.Value, Value.true)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp7 instanceof Completion) {
          _temp7 = _temp7.Value;
        }
        // i. Return CreateIterResultObject(abruptCompletion.[[Value]], true).
        return _temp7;
      }
      // b. Return Completion(abruptCompletion).
      return Completion(abruptCompletion);
    }
    // 4. Assert: state is suspendedYield.
    Assert(state === 'suspendedYield', "state === 'suspendedYield'");
    // 5. Let genContext be generator.[[GeneratorContext]].
    const genContext = generator.GeneratorContext;
    // 6. Let methodContext be the running execution context.
    // 7. Suspend methodContext.
    const methodContext = exports.surroundingAgent.runningExecutionContext;
    // 8. Set generator.[[GeneratorState]] to executing.
    generator.GeneratorState = 'executing';
    // 9. Push genContext onto the execution context stack.
    exports.surroundingAgent.executionContextStack.push(genContext);
    // 10. Resume the suspended evaluation of genContext using abruptCompletion as the
    //     result of the operation that suspended it. Let result be the completion record
    //     returned by the resumed computation.
    const result = EnsureCompletion(resume(genContext, abruptCompletion));
    // 11. Assert: When we return here, genContext has already been removed from the
    //     execution context stack and methodContext is the currently running execution context.
    Assert(exports.surroundingAgent.runningExecutionContext === methodContext, "surroundingAgent.runningExecutionContext === methodContext");
    // 12. Return Completion(result).
    return Completion(result);
  }

  /** https://tc39.es/ecma262/#sec-getgeneratorkind */
  function GetGeneratorKind() {
    // 1. Let genContext be the running execution context.
    const genContext = exports.surroundingAgent.runningExecutionContext;
    // 2. If genContext does not have a Generator component, return non-generator.
    if (!genContext.Generator) {
      return 'non-generator';
    }
    // 3. Let generator be the Generator component of genContext.
    const generator = genContext.Generator;
    // 4. If generator has an [[AsyncGeneratorState]] internal slot, return async.
    if ('AsyncGeneratorState' in generator) {
      return 'async';
    }
    // 5. Else, return sync.
    return 'sync';
  }

  /** https://tc39.es/ecma262/#sec-generatoryield */
  function* GeneratorYield(iterNextObj) {
    // 1. Assert: iterNextObj is an Object that implements the IteratorResult interface.
    // 2. Let genContext be the running execution context.
    const genContext = exports.surroundingAgent.runningExecutionContext;
    // 3. Assert: genContext is the execution context of a generator.
    Assert(genContext.Generator !== undefined, "genContext.Generator !== undefined");
    // 4. Let generator be the value of the Generator component of genContext.
    const generator = genContext.Generator;
    // 5. Assert: GetGeneratorKind is sync.
    Assert(GetGeneratorKind() === 'sync', "GetGeneratorKind() === 'sync'");
    // 6. Set generator.GeneratorState to suspendedYield.
    generator.GeneratorState = 'suspendedYield';
    // 7. Remove genContext from the execution context stack.
    exports.surroundingAgent.executionContextStack.pop(genContext);
    // 8. Set the code evaluation state of genContext such that when evaluation is resumed with
    //    a Completion resumptionValue the following steps will be performed:
    //      a. Return resumptionValue
    const resumptionValue = yield NormalCompletion(iterNextObj);
    // 9. Return NormalCompletion(iterNextObj).
    return resumptionValue;
    // 10. NOTE: this returns to the evaluation of the operation that had most previously resumed evaluation of genContext.
  }

  /** https://tc39.es/ecma262/#sec-yield */
  function* Yield(value) {
    // 1. Let generatorKind be GetGeneratorKind().
    const generatorKind = GetGeneratorKind();
    // 2. If generatorKind is async, return ? AsyncGeneratorYield(? Await(value)).
    if (generatorKind === 'async') {
      let _temp8 = yield* Await(value);
      /* c8 ignore if */
      if (_temp8 instanceof AbruptCompletion) {
        return _temp8;
      }
      /* c8 ignore if */
      if (_temp8 instanceof Completion) {
        _temp8 = _temp8.Value;
      }
      return yield* AsyncGeneratorYield(_temp8);
    }
    // 3. Otherwise, return ? GeneratorYield(CreateIterResultObject(value, false)).
    return yield* GeneratorYield(CreateIterResultObject(value, Value.false));
  }

  /** https://tc39.es/ecma262/#sec-createiteratorfromclosure */
  function CreateIteratorFromClosure(closure, generatorBrand, generatorPrototype) {
    Assert(typeof closure === 'function', "typeof closure === 'function'");
    // 1. NOTE: closure can contain uses of the Yield shorthand to yield an IteratorResult object.
    // 2. Let internalSlotsList be « [[GeneratorState]], [[GeneratorContext]], [[GeneratorBrand]] ».
    const internalSlotsList = ['GeneratorState', 'GeneratorContext', 'GeneratorBrand'];
    // 3. Let generator be ! OrdinaryObjectCreate(generatorPrototype, internalSlotsList).
    let _temp9 = OrdinaryObjectCreate(generatorPrototype, internalSlotsList);
    Assert(!(_temp9 instanceof AbruptCompletion), "OrdinaryObjectCreate(generatorPrototype, internalSlotsList)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    const generator = _temp9;
    // 4. Set generator.[[GeneratorBrand]] to generatorBrand.
    generator.GeneratorBrand = generatorBrand;
    // 5. Set generator.[[GeneratorState]] to undefined.
    generator.GeneratorState = Value.undefined;
    // 6. Perform ! GeneratorStart(generator, closure).
    let _temp10 = GeneratorStart(generator, closure);
    Assert(!(_temp10 instanceof AbruptCompletion), "GeneratorStart(generator, closure)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    // 7. Return generator.
    return generator;
  }

  // @ts-nocheck

  // This file covers abstract operations defined in
  /** https://tc39.es/ecma262/#sec-global-object */

  /** https://tc39.es/ecma262/#sec-performeval */
  function PerformEval(x, callerRealm, strictCaller, direct) {
    // 1. Assert: If direct is false, then strictCaller is also false.
    if (direct === false) {
      Assert(strictCaller === false, "strictCaller === false");
    }
    // 2. If Type(x) is not String, return x.
    if (!(x instanceof JSStringValue)) {
      return x;
    }
    // 3. Let evalRealm be the current Realm Record.
    const evalRealm = exports.surroundingAgent.currentRealmRecord;
    // 4. Perform ? HostEnsureCanCompileStrings(callerRealm, evalRealm).
    let _temp = HostEnsureCanCompileStrings(callerRealm, evalRealm);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 5. Let inFunction be false.
    let inFunction = false;
    // 6. Let inMethod be false.
    let inMethod = false;
    // 7. Let inDerivedConstructor be false.
    let inDerivedConstructor = false;
    // 8. Let inClassFieldInitializer be false.
    let inClassFieldInitializer = false;
    // 9. If direct is true, then
    if (direct === true) {
      let _temp2 = GetThisEnvironment();
      Assert(!(_temp2 instanceof AbruptCompletion), "GetThisEnvironment()" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      // a. Let thisEnv be ! GetThisEnvironment().
      const thisEnv = _temp2;
      // b. If thisEnv is a function Environment Record, then
      if (thisEnv instanceof FunctionEnvironmentRecord) {
        // i. Let F be thisEnv.[[FunctionObject]].
        const F = thisEnv.FunctionObject;
        // ii. Let inFunction be true.
        inFunction = true;
        // iii. Let inMethod be thisEnv.HasSuperBinding().
        inMethod = thisEnv.HasSuperBinding() === Value.true;
        // iv. If F.[[ConstructorKind]] is derived, set inDerivedConstructor to true.
        if (F.ConstructorKind === 'derived') {
          inDerivedConstructor = true;
        }
        // v. Let classFieldIntializerName be F.[[ClassFieldInitializerName]].
        const classFieldIntializerName = F.ClassFieldInitializerName;
        // vi. If classFieldIntializerName is not empty, set inClassFieldInitializer to true.
        if (classFieldIntializerName !== undefined) {
          inClassFieldInitializer = true;
        }
      }
    }
    // 10. Perform the following substeps in an implementation-dependent order, possibly interleaving parsing and error detection:
    //   a. Let script be ParseText(! StringToCodePoints(x), Script).
    //   b. If script is a List of errors, throw a SyntaxError exception.
    //   c. If script Contains ScriptBody is false, return undefined.
    //   d. Let body be the ScriptBody of script.
    //   e. If inFunction is false, and body Contains NewTarget, throw a SyntaxError exception.
    //   f. If inMethod is false, and body Contains SuperProperty, throw a SyntaxError exception.
    //   g. If inDerivedConstructor is false, and body Contains SuperCall, throw a SyntaxError exception.
    //   h. If inClassFieldInitializer is true, and ContainsArguments of body is true, throw a SyntaxError exception.
    const privateIdentifiers = [];
    let pointer = direct ? exports.surroundingAgent.runningExecutionContext.PrivateEnvironment : Value.null;
    while (pointer !== Value.null) {
      for (const binding of pointer.Names) {
        privateIdentifiers.push(binding.Description.stringValue());
      }
      pointer = pointer.OuterPrivateEnvironment;
    }
    const script = wrappedParse({
      source: x.stringValue()
    }, parser => parser.scope.with({
      strict: strictCaller,
      newTarget: inFunction,
      superProperty: inMethod,
      superCall: inDerivedConstructor,
      private: privateIdentifiers.length > 0
    }, () => {
      privateIdentifiers.forEach(name => {
        parser.scope.privateScope.names.set(name, ['field']);
      });
      return parser.parseScript();
    }));
    if (Array.isArray(script)) {
      return exports.surroundingAgent.Throw(script[0]);
    }
    if (!script.ScriptBody) {
      return Value.undefined;
    }
    const body = script.ScriptBody;
    if (inClassFieldInitializer && ContainsArguments(body)) {
      return exports.surroundingAgent.Throw('SyntaxError', 'UnexpectedToken');
    }
    // 11. If strictCaller is true, let strictEval be true.
    // 12. Else, let strictEval be IsStrict of script.
    let strictEval;
    if (strictCaller === true) {
      strictEval = true;
    } else {
      strictEval = IsStrict(script);
    }
    // 13. Let runningContext be the running execution context.
    const runningContext = exports.surroundingAgent.runningExecutionContext;
    let lexEnv;
    let varEnv;
    let privateEnv;
    // 14. NOTE: If direct is true, runningContext will be the execution context that performed the direct eval.
    //     If direct is false, runningContext will be the execution context for the invocation of the eval function.
    // 15. If direct is true, then
    if (direct === true) {
      // a. Let lexEnv be NewDeclarativeEnvironment(runningContext's LexicalEnvironment).
      lexEnv = new DeclarativeEnvironmentRecord(runningContext.LexicalEnvironment);
      // b. Let varEnv be runningContext's VariableEnvironment.
      varEnv = runningContext.VariableEnvironment;
      // c. Let privateEnv be runningContext's PrivateEnvironment.
      privateEnv = runningContext.PrivateEnvironment;
    } else {
      // 16. Else,
      // a. Let lexEnv be NewDeclarativeEnvironment(evalRealm.[[GlobalEnv]]).
      lexEnv = new DeclarativeEnvironmentRecord(evalRealm.GlobalEnv);
      // b. Let varEnv be evalRealm.[[GlobalEnv]].
      varEnv = evalRealm.GlobalEnv;
      // c. Let privateEnv be null.
      privateEnv = Value.null;
    }
    // 17. If strictEval is true, set varEnv to lexEnv.
    if (strictEval === true) {
      varEnv = lexEnv;
    }
    // 18. If runningContext is not already suspended, suspend runningContext.
    // 19. Let evalContext be a new ECMAScript code execution context.
    const evalContext = new ExecutionContext();
    // 20. Set evalContext's Function to null.
    evalContext.Function = Value.null;
    // 21. Set evalContext's Realm to evalRealm.
    evalContext.Realm = evalRealm;
    // 22. Set evalContext's ScriptOrModule to runningContext's ScriptOrModule.
    evalContext.ScriptOrModule = runningContext.ScriptOrModule;
    // 23. Set evalContext's VariableEnvironment to varEnv.
    evalContext.VariableEnvironment = varEnv;
    // 24. Set evalContext's LexicalEnvironment to lexEnv.
    evalContext.LexicalEnvironment = lexEnv;
    // 25. Set evalContext's PrivateEnvironment to privateEnv.
    evalContext.PrivateEnvironment = privateEnv;
    // 26. Push evalContext onto the execution context stack.
    exports.surroundingAgent.executionContextStack.push(evalContext);
    // 27. Let result be EvalDeclarationInstantiation(body, varEnv, lexEnv, privateEnv, strictEval).
    let result = EnsureCompletion(EvalDeclarationInstantiation(body, varEnv, lexEnv, privateEnv, strictEval));
    // 28. If result.[[Type]] is normal, then
    if (result.Type === 'normal') {
      // a. Set result to the result of evaluating body.
      result = EnsureCompletion(unwind(Evaluate(body)));
    }
    // 29. If result.[[Type]] is normal and result.[[Value]] is empty, then
    if (result.Type === 'normal' && result.Value === undefined) {
      // a. Set result to NormalCompletion(undefined).
      result = NormalCompletion(Value.undefined);
    }
    // 30. Suspend evalContext and remove it from the execution context stack.
    // 31. Resume the context that is now on the top of the execution context stack as the running execution context.
    exports.surroundingAgent.executionContextStack.pop(evalContext);
    // 32. Return Completion(result).
    return Completion(result);
  }

  /** https://tc39.es/ecma262/#sec-evaldeclarationinstantiation */
  function EvalDeclarationInstantiation(body, varEnv, lexEnv, privateEnv, strict) {
    // 1. Let varNames be the VarDeclaredNames of body.
    const varNames = VarDeclaredNames(body);
    // 2. Let varDeclarations be the VarScopedDeclarations of body.
    const varDeclarations = VarScopedDeclarations(body);
    // 3. If strict is false, then
    if (strict === false) {
      // a. If varEnv is a global Environment Record, then
      if (varEnv instanceof GlobalEnvironmentRecord) {
        // i. For each name in varNames, do
        for (const name of varNames) {
          // 1. If varEnv.HasLexicalDeclaration(name) is true, throw a SyntaxError exception.
          if (varEnv.HasLexicalDeclaration(name) === Value.true) {
            return exports.surroundingAgent.Throw('SyntaxError', 'AlreadyDeclared', name);
          }
          // 2. NOTE: eval will not create a global var declaration that would be shadowed by a global lexical declaration.
        }
      }
      // b. Let thisLex be lexEnv.
      let thisEnv = lexEnv;
      // c. Assert: The following loop will terminate.
      // d. Repeat, while thisEnv is not the same as varEnv,
      while (thisEnv !== varEnv) {
        // i. If thisEnv is not an object Environment Record, then
        if (!(thisEnv instanceof ObjectEnvironmentRecord)) {
          // 1. NOTE: The environment of with statements cannot contain any lexical declaration so it doesn't need to be checked for var/let hoisting conflicts.
          // 2. For each name in varNames, do
          for (const name of varNames) {
            // a. If thisEnv.HasBinding(name) is true, then
            if (thisEnv.HasBinding(name) === Value.true) {
              // i. Throw a SyntaxError exception.
              return exports.surroundingAgent.Throw('SyntaxError', 'AlreadyDeclared', name);
              // ii. NOTE: Annex B.3.5 defines alternate semantics for the above step.
            }
            // b. NOTE: A direct eval will not hoist var declaration over a like-named lexical declaration
          }
        }
        // ii. Set thisEnv to thisEnv.[[OuterEnv]].
        thisEnv = thisEnv.OuterEnv;
      }
    }
    // 4. Let privateIdentifiers be a new empty List.
    const privateIdentifiers = [];
    // 5. Let pointer be privateEnv.
    let pointer = privateEnv;
    // 6. Repeat, while pointer is not null,
    while (pointer !== Value.null) {
      // a. For each Private Name binding of pointer.[[Names]], do
      for (const binding of pointer.Names) {
        // i. If privateIdentifiers does not contain binding.[[Description]], append binding.[[Description]] to privateIdentifiers.
        privateIdentifiers.push(binding.Description);
      }
      // b. Set pointer to pointer.[[OuterPrivateEnvironment]].
      pointer = pointer.OuterPrivateEnvironment;
    }
    // 7. If AllPrivateIdentifiersValid of body with argument privateIdentifiers is false, throw a SyntaxError exception.
    Assert(true, "true");
    // 8. Let functionsToInitialize be a new empty List.
    const functionsToInitialize = [];
    // 9. Let declaredFunctionNames be a new empty List.
    const declaredFunctionNames = new ValueSet();
    // 10. For each d in varDeclarations, in reverse list order, do
    for (const d of [...varDeclarations].reverse()) {
      // a. If d is neither a VariableDeclaration nor a ForBinding nor a BindingIdentifier, then
      if (d.type !== 'VariableDeclaration' && d.type !== 'ForBinding' && d.type !== 'BindingIdentifier') {
        // i. Assert: d is either a FunctionDeclaration, a GeneratorDeclaration, an AsyncFunctionDeclaration, or an AsyncGeneratorDeclaration.
        Assert(d.type === 'FunctionDeclaration' || d.type === 'GeneratorDeclaration' || d.type === 'AsyncFunctionDeclaration' || d.type === 'AsyncGeneratorDeclaration', "d.type === 'FunctionDeclaration'\n             || d.type === 'GeneratorDeclaration'\n             || d.type === 'AsyncFunctionDeclaration'\n             || d.type === 'AsyncGeneratorDeclaration'");
        // ii. NOTE: If there are multiple function declarations for the same name, the last declaration is used.
        // iii. Let fn be the sole element of the BoundNames of d.
        const fn = BoundNames(d)[0];
        // iv. If fn is not an element of declaredFunctionNames, then
        if (!declaredFunctionNames.has(fn)) {
          // 1. If varEnv is a global Environment Record, then
          if (varEnv instanceof GlobalEnvironmentRecord) {
            let _temp3 = varEnv.CanDeclareGlobalFunction(fn);
            /* c8 ignore if */
            if (_temp3 instanceof AbruptCompletion) {
              return _temp3;
            }
            /* c8 ignore if */
            if (_temp3 instanceof Completion) {
              _temp3 = _temp3.Value;
            }
            // a. Let fnDefinable be ? varEnv.CanDeclareGlobalFunction(fn).
            const fnDefinable = _temp3;
            // b. Let fnDefinable be ? varEnv.CanDeclareGlobalFunction(fn).
            if (fnDefinable === Value.false) {
              return exports.surroundingAgent.Throw('TypeError', 'AlreadyDeclared', fn);
            }
          }
          // 2. Append fn to declaredFunctionNames.
          declaredFunctionNames.add(fn);
          // 3. Insert d as the first element of functionsToInitialize.
          functionsToInitialize.unshift(d);
        }
      }
    }
    // 11. NOTE: Annex B.3.3.3 adds additional steps at this point.
    // 12. Let declaredVarNames be a new empty List.
    const declaredVarNames = new ValueSet();
    // 13. For each d in varDeclarations, do
    for (const d of varDeclarations) {
      // a. If d is a VariableDeclaration, a ForBinding, or a BindingIdentifier, then
      if (d.type === 'VariableDeclaration' || d.type === 'ForBinding' || d.type === 'BindingIdentifier') {
        // i. For each String vn in the BoundNames of d, do
        for (const vn of BoundNames(d)) {
          // 1. If vn is not an element of declaredFunctionNames, then
          if (!declaredFunctionNames.has(vn)) {
            // a. If varEnv is a global Environment Record, then
            if (varEnv instanceof GlobalEnvironmentRecord) {
              let _temp4 = varEnv.CanDeclareGlobalVar(vn);
              /* c8 ignore if */
              if (_temp4 instanceof AbruptCompletion) {
                return _temp4;
              }
              /* c8 ignore if */
              if (_temp4 instanceof Completion) {
                _temp4 = _temp4.Value;
              }
              // i. Let vnDefinable be ? varEnv.CanDeclareGlobalVar(vn).
              const vnDefinable = _temp4;
              // ii. If vnDefinable is false, throw a TypeError exception.
              if (vnDefinable === Value.false) {
                return exports.surroundingAgent.Throw('TypeError', 'AlreadyDeclared', vn);
              }
            }
            // b. If vn is not an element of declaredVarNames, then
            if (!declaredVarNames.has(vn)) {
              // i. Append vn to declaredVarNames.
              declaredVarNames.add(vn);
            }
          }
        }
      }
    }
    // 14. NOTE: No abnormal terminations occur after this algorithm step unless
    //     varEnv is a global Environment Record and the global object is a Proxy exotic object.
    // 15. Let lexDeclarations be the LexicallyScopedDeclarations of body.
    const lexDeclarations = LexicallyScopedDeclarations(body);
    // 16. For each element d in lexDeclarations, do
    for (const d of lexDeclarations) {
      // a. NOTE: Lexically declared names are only instantiated here but not initialized.
      // b. For each element dn of the BoundNames of d, do
      for (const dn of BoundNames(d)) {
        // i. If IsConstantDeclaration of d is true, then
        if (IsConstantDeclaration(d)) {
          let _temp5 = lexEnv.CreateImmutableBinding(dn, Value.true);
          /* c8 ignore if */
          if (_temp5 instanceof AbruptCompletion) {
            return _temp5;
          }
          /* c8 ignore if */
          if (_temp5 instanceof Completion) {
            _temp5 = _temp5.Value;
          }
        } else {
          let _temp6 = lexEnv.CreateMutableBinding(dn, Value.false);
          /* c8 ignore if */
          if (_temp6 instanceof AbruptCompletion) {
            return _temp6;
          }
          /* c8 ignore if */
          if (_temp6 instanceof Completion) {
            _temp6 = _temp6.Value;
          }
        }
      }
    }
    // 17. For each Parse Node f in functionsToInitialize, do
    for (const f of functionsToInitialize) {
      // a. Let fn be the sole element of the BoundNames of f.
      const fn = BoundNames(f)[0];
      // b. Let fn be the sole element of the BoundNames of f.
      const fo = InstantiateFunctionObject(f, lexEnv, privateEnv);
      // c. If varEnv is a global Environment Record, then
      if (varEnv instanceof GlobalEnvironmentRecord) {
        let _temp7 = varEnv.CreateGlobalFunctionBinding(fn, fo, Value.true);
        /* c8 ignore if */
        if (_temp7 instanceof AbruptCompletion) {
          return _temp7;
        }
        /* c8 ignore if */
        if (_temp7 instanceof Completion) {
          _temp7 = _temp7.Value;
        }
      } else {
        // d. Else,
        // i. Let bindingExists be varEnv.HasBinding(fn).
        const bindingExists = varEnv.HasBinding(fn);
        // ii. If bindingExists is false, then
        if (bindingExists === Value.false) {
          let _temp8 = varEnv.CreateMutableBinding(fn, Value.true);
          Assert(!(_temp8 instanceof AbruptCompletion), "varEnv.CreateMutableBinding(fn, Value.true)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp8 instanceof Completion) {
            _temp8 = _temp8.Value;
          }
          // 1. Let status be ! varEnv.CreateMutableBinding(fn, true).
          const status = _temp8;
          // 2. Assert: status is not an abrupt completion because of validation preceding step 12.
          Assert(!(status instanceof AbruptCompletion), "!(status instanceof AbruptCompletion)");
          // 3. Perform ! varEnv.InitializeBinding(fn, fo).
          let _temp9 = varEnv.InitializeBinding(fn, fo);
          Assert(!(_temp9 instanceof AbruptCompletion), "varEnv.InitializeBinding(fn, fo)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp9 instanceof Completion) {
            _temp9 = _temp9.Value;
          }
        } else {
          let _temp10 = varEnv.SetMutableBinding(fn, fo, Value.false);
          Assert(!(_temp10 instanceof AbruptCompletion), "varEnv.SetMutableBinding(fn, fo, Value.false)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp10 instanceof Completion) {
            _temp10 = _temp10.Value;
          }
        }
      }
    }
    // 18. For each String vn in declaredVarNames, in list order, do
    for (const vn of declaredVarNames) {
      // a. If varEnv is a global Environment Record, then
      if (varEnv instanceof GlobalEnvironmentRecord) {
        let _temp11 = varEnv.CreateGlobalVarBinding(vn, Value.true);
        /* c8 ignore if */
        if (_temp11 instanceof AbruptCompletion) {
          return _temp11;
        }
        /* c8 ignore if */
        if (_temp11 instanceof Completion) {
          _temp11 = _temp11.Value;
        }
      } else {
        // b. Else,
        // i. Let bindingExists be varEnv.HasBinding(vn).
        const bindingExists = varEnv.HasBinding(vn);
        // ii. If bindingExists is false, then
        if (bindingExists === Value.false) {
          let _temp12 = varEnv.CreateMutableBinding(vn, Value.true);
          Assert(!(_temp12 instanceof AbruptCompletion), "varEnv.CreateMutableBinding(vn, Value.true)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp12 instanceof Completion) {
            _temp12 = _temp12.Value;
          }
          // 1. Let status be ! varEnv.CreateMutableBinding(vn, true).
          const status = _temp12;
          // 2. Assert: status is not an abrupt completion because of validation preceding step 12.
          Assert(!(status instanceof AbruptCompletion), "!(status instanceof AbruptCompletion)");
          // 3. Perform ! varEnv.InitializeBinding(vn, undefined).
          let _temp13 = varEnv.InitializeBinding(vn, Value.undefined);
          Assert(!(_temp13 instanceof AbruptCompletion), "varEnv.InitializeBinding(vn, Value.undefined)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp13 instanceof Completion) {
            _temp13 = _temp13.Value;
          }
        }
      }
    }
    // 19. Return NormalCompletion(empty).
    return NormalCompletion(undefined);
  }
  EvalDeclarationInstantiation.section = 'https://tc39.es/ecma262/#sec-evaldeclarationinstantiation';

  /** https://tc39.es/ecma262/#sec-set-immutable-prototype */
  function SetImmutablePrototype(O, V) {
    // 1. Assert: Either Type(V) is Object or Type(V) is Null.
    Assert(V instanceof ObjectValue || V instanceof NullValue, "V instanceof ObjectValue || V instanceof NullValue");
    // 2. Let current be ? O.[[GetPrototypeOf]]().
    let _temp = O.GetPrototypeOf();
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const current = _temp;
    // 3. If SameValue(V, current) is true, return true.
    if (SameValue(V, current) === Value.true) {
      return Value.true;
    }
    // 4. Return false.
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-ContinueDynamicImport */
  function ContinueDynamicImport(promiseCapability, moduleCompletion) {
    // 1. If moduleCompletion is an abrupt completion, then
    if (moduleCompletion instanceof AbruptCompletion) {
      let _temp = Call(promiseCapability.Reject, undefined, [moduleCompletion.Value]);
      Assert(!(_temp instanceof AbruptCompletion), "Call(promiseCapability.Reject, undefined, [moduleCompletion.Value])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      // b. Return unused.
      return;
    }
    // 2. Let module be moduleCompletion.[[Value]].
    const module = moduleCompletion.Value;

    // 3. Let loadPromise be module.LoadRequestedModules().
    const loadPromise = module.LoadRequestedModules();

    // 4. Let rejectedClosure be a new Abstract Closure with parameters (reason) that captures promiseCapability and performs the following steps when called:
    const rejectedClosure = ([reason = Value.undefined]) => {
      let _temp2 = Call(promiseCapability.Reject, Value.undefined, [reason]);
      Assert(!(_temp2 instanceof AbruptCompletion), "Call(promiseCapability.Reject, Value.undefined, [reason])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      // b. Return unused.
    };
    // 5. Let onRejected be CreateBuiltinFunction(rejectedClosure, 1, "", « »).
    const onRejected = CreateBuiltinFunction(rejectedClosure, 1, Value(''), []);

    // 6. Let linkAndEvaluateClosure be a new Abstract Closure with no parameters that captures module, promiseCapability, and onRejected and performs the following steps when called:
    const linkAndEvaluateClosure = () => {
      // a. Let link be Completion(module.Link()).
      const link = module.Link();
      // b. If link is an abrupt completion, then
      if (link instanceof AbruptCompletion) {
        let _temp3 = Call(promiseCapability.Reject, Value.undefined, [link.Value]);
        Assert(!(_temp3 instanceof AbruptCompletion), "Call(promiseCapability.Reject, Value.undefined, [link.Value])" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
        // ii. Return unused.
        return;
      }

      // c. Let evaluatePromise be module.Evaluate().
      const evaluatePromise = module.Evaluate();

      // d. Let fulfilledClosure be a new Abstract Closure with no parameters that captures module and promiseCapability and performs the following steps when called:
      const fulfilledClosure = () => {
        // i. Let namespace be GetModuleNamespace(module).
        const namespace = GetModuleNamespace(module);
        // ii. Perform ! Call(promiseCapability.[[Resolve]], undefined, « namespace »).
        let _temp4 = Call(promiseCapability.Resolve, Value.undefined, [namespace]);
        Assert(!(_temp4 instanceof AbruptCompletion), "Call(promiseCapability.Resolve, Value.undefined, [namespace])" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp4 instanceof Completion) {
          _temp4 = _temp4.Value;
        }
        // iii. Return unused.
      };
      // e. Let onFulfilled be CreateBuiltinFunction(fulfilledClosure, 0, "", « »).
      const onFulfilled = CreateBuiltinFunction(fulfilledClosure, 0, Value(''), []);

      // f. Perform PerformPromiseThen(evaluatePromise, onFulfilled, onRejected).
      PerformPromiseThen(evaluatePromise, onFulfilled, onRejected);
      // g. Return unused.
    };
    // 7. Let linkAndEvaluate be CreateBuiltinFunction(linkAndEvaluateClosure, 0, "", « »).
    const linkAndEvaluate = CreateBuiltinFunction(linkAndEvaluateClosure, 0, Value(''), []);

    // 8. Perform PerformPromiseThen(loadPromise, linkAndEvaluate, onRejected).
    PerformPromiseThen(loadPromise, linkAndEvaluate, onRejected);
    // 9. Return unused.
  }

  function isIntegerIndexedExoticObject(O) {
    return O.GetOwnProperty === IntegerIndexedGetOwnProperty;
  }

  /** https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-getownproperty-p */
  function IntegerIndexedGetOwnProperty(P) {
    const O = this;
    // 1. Assert: IsPropertyKey(P) is true.
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    // 2. Assert: O is an Integer-Indexed exotic object.
    Assert(isIntegerIndexedExoticObject(O), "isIntegerIndexedExoticObject(O)");
    // 3. If Type(P) is String, then
    if (P instanceof JSStringValue) {
      let _temp = CanonicalNumericIndexString(P);
      Assert(!(_temp instanceof AbruptCompletion), "CanonicalNumericIndexString(P)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      // a. Let numericIndex be ! CanonicalNumericIndexString(P).
      const numericIndex = _temp;
      // b. If numericIndex is not undefined, then
      if (numericIndex !== Value.undefined) {
        let _temp2 = IntegerIndexedElementGet(O, numericIndex);
        Assert(!(_temp2 instanceof AbruptCompletion), "IntegerIndexedElementGet(O, numericIndex)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp2 instanceof Completion) {
          _temp2 = _temp2.Value;
        }
        // i. Let value be ! IntegerIndexedElementGet(O, numericIndex).
        const value = _temp2;
        // ii. If value is undefined, return undefined.
        if (value === Value.undefined) {
          return Value.undefined;
        }
        // iii. Return the PropertyDescriptor { [[Value]]: value, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true }.
        return exports.Descriptor({
          Value: value,
          Writable: Value.true,
          Enumerable: Value.true,
          Configurable: Value.true
        });
      }
    }
    // 4. Return OrdinaryGetOwnProperty(O, P).
    return OrdinaryGetOwnProperty(O, P);
  }

  /** https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-hasproperty-p */
  function IntegerIndexedHasProperty(P) {
    const O = this;
    // 1. Assert: IsPropertyKey(P) is true.
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    // 2. Assert: O is an Integer-Indexed exotic object.
    Assert(isIntegerIndexedExoticObject(O), "isIntegerIndexedExoticObject(O)");
    // 3. If Type(P) is String, then
    if (P instanceof JSStringValue) {
      let _temp3 = CanonicalNumericIndexString(P);
      Assert(!(_temp3 instanceof AbruptCompletion), "CanonicalNumericIndexString(P)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      // a. Let numericIndex be ! CanonicalNumericIndexString(P).
      const numericIndex = _temp3;
      // b. If numericIndex is not undefined, then
      if (numericIndex !== Value.undefined) {
        // i. Let buffer be O.[[ViewedArrayBuffer]].
        const buffer = O.ViewedArrayBuffer;
        // ii. If IsDetachedBuffer(buffer) is true, return false.
        if (IsDetachedBuffer(buffer) === Value.true) {
          return Value.false;
        }
        // iii. If ! IsValidIntegerIndex(O, numericIndex) is false, return false.
        if (IsValidIntegerIndex(O, numericIndex) === Value.false) {
          return Value.false;
        }
        // iv. Return true.
        return Value.true;
      }
    }
    // 4. Return ? OrdinaryHasProperty(O, P)
    return OrdinaryHasProperty(O, P);
  }

  /** https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-defineownproperty-p-desc */
  function IntegerIndexedDefineOwnProperty(P, Desc) {
    const O = this;
    // 1. Assert: IsPropertyKey(P) is true.
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    // 2. Assert: O is an Integer-Indexed exotic object.
    Assert(isIntegerIndexedExoticObject(O), "isIntegerIndexedExoticObject(O)");
    // 3. If Type(P) is String, then
    if (P instanceof JSStringValue) {
      let _temp4 = CanonicalNumericIndexString(P);
      Assert(!(_temp4 instanceof AbruptCompletion), "CanonicalNumericIndexString(P)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      // a. Let numericIndex be ! CanonicalNumericIndexString(P).
      const numericIndex = _temp4;
      // b. If numericIndex is not undefined, then
      if (numericIndex !== Value.undefined) {
        // i. If ! IsValidIntegerIndex(O, numericIndex) is false, return false.
        if (IsValidIntegerIndex(O, numericIndex) === Value.false) {
          return Value.false;
        }
        // ii. If IsAccessorDescriptor(Desc) is true, return false.
        if (IsAccessorDescriptor(Desc)) {
          return Value.false;
        }
        // iii. If Desc has a [[Configurable]] field and if Desc.[[Configurable]] is true, return false.
        if (Desc.Configurable === Value.false) {
          return Value.false;
        }
        // iv. If Desc has an [[Enumerable]] field and if Desc.[[Enumerable]] is false, return false.
        if (Desc.Enumerable === Value.false) {
          return Value.false;
        }
        // v. If Desc has a [[Writable]] field and if Desc.[[Writable]] is false, return false.
        if (Desc.Writable === Value.false) {
          return Value.false;
        }
        // vi. If Desc has a [[Value]] field, then
        if (Desc.Value !== undefined) {
          // 1. Let value be Desc.[[Value]].
          const value = Desc.Value;
          // 2. Return ? IntegerIndexedElementSet(O, numericIndex, value).
          return IntegerIndexedElementSet(O, numericIndex, value);
        }
        // vii. Return true.
        return Value.true;
      }
    }
    // 4. Return ! OrdinaryDefineOwnProperty(O, P, Desc).
    return OrdinaryDefineOwnProperty(O, P, Desc);
  }

  /** https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-get-p-receiver */
  function IntegerIndexedGet(P, Receiver) {
    const O = this;
    // 1. Assert: IsPropertykey(P) is true.
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    // 2. If Type(P) is String, then
    if (P instanceof JSStringValue) {
      let _temp5 = CanonicalNumericIndexString(P);
      Assert(!(_temp5 instanceof AbruptCompletion), "CanonicalNumericIndexString(P)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      // a. Let numericIndex be ! CanonicalNumericIndexString(P).
      const numericIndex = _temp5;
      // b. If numericIndex is not undefined, then
      if (numericIndex !== Value.undefined) {
        let _temp6 = IntegerIndexedElementGet(O, numericIndex);
        Assert(!(_temp6 instanceof AbruptCompletion), "IntegerIndexedElementGet(O, numericIndex)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp6 instanceof Completion) {
          _temp6 = _temp6.Value;
        }
        // i. Return ! IntegerIndexedElementGet(O, numericIndex).
        return _temp6;
      }
    }
    // 3. Return ? OrdinaryGet(O, P, Receiver).
    return OrdinaryGet(O, P, Receiver);
  }

  /** https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-set-p-v-receiver */
  function IntegerIndexedSet(P, V, Receiver) {
    const O = this;
    // 1. Assert: IsPropertyKey(P) is true.
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    // 2. If Type(P) is String, then
    if (P instanceof JSStringValue) {
      let _temp7 = CanonicalNumericIndexString(P);
      Assert(!(_temp7 instanceof AbruptCompletion), "CanonicalNumericIndexString(P)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp7 instanceof Completion) {
        _temp7 = _temp7.Value;
      }
      // a. Let numericIndex be ! CanonicalNumericIndexString(P).
      const numericIndex = _temp7;
      // b. If numericIndex is not undefined, then
      if (numericIndex !== Value.undefined) {
        let _temp8 = IntegerIndexedElementSet(O, numericIndex, V);
        /* c8 ignore if */
        if (_temp8 instanceof AbruptCompletion) {
          return _temp8;
        }
        /* c8 ignore if */
        if (_temp8 instanceof Completion) {
          _temp8 = _temp8.Value;
        }
        // ii. Return true.
        return Value.true;
      }
    }
    // 3. Return ? OrdinarySet(O, P, V, Receiver).
    return OrdinarySet(O, P, V, Receiver);
  }

  /** https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-delete-p */
  function IntegerIndexedDelete(P) {
    const O = this;
    // 1. Assert: IsPropertyKey(P) is true.
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    // 2. Assert: O is an Integer-Indexed exotic object.
    Assert(isIntegerIndexedExoticObject(O), "isIntegerIndexedExoticObject(O)");
    // 3. If Type(P) is String, then
    if (P instanceof JSStringValue) {
      let _temp9 = CanonicalNumericIndexString(P);
      Assert(!(_temp9 instanceof AbruptCompletion), "CanonicalNumericIndexString(P)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp9 instanceof Completion) {
        _temp9 = _temp9.Value;
      }
      // a. Let numericIndex be ! CanonicalNumericIndexString(P).
      const numericIndex = _temp9;
      // b. If numericIndex is not undefined, then
      if (numericIndex !== Value.undefined) {
        // i. If IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.
        if (IsDetachedBuffer(O.ViewedArrayBuffer) === Value.true) {
          return Value.true;
        }
        // ii. If ! IsValidIntegerIndex(O, numericIndex) is false, return true.
        let _temp10 = IsValidIntegerIndex(O, numericIndex);
        Assert(!(_temp10 instanceof AbruptCompletion), "IsValidIntegerIndex(O, numericIndex)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp10 instanceof Completion) {
          _temp10 = _temp10.Value;
        }
        if (_temp10 === Value.false) {
          return Value.true;
        }
        // iii. Return false.
        return Value.false;
      }
    }
    // 4. Return ? OrdinaryDelete(O, P).
    return OrdinaryDelete(O, P);
  }

  /** https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-ownpropertykeys */
  function IntegerIndexedOwnPropertyKeys() {
    const O = this;
    // 1. Let keys be a new empty List.
    const keys = [];
    // 2. Assert: O is an Integer-Indexed exotic object.
    Assert(isIntegerIndexedExoticObject(O), "isIntegerIndexedExoticObject(O)");
    // 3. Let len be O.[[ArrayLength]].
    const len = O.ArrayLength;
    // 4. For each integer i starting with 0 such that i < len, in ascending order, do
    for (let i = 0; i < len; i += 1) {
      let _temp11 = ToString(F(i));
      Assert(!(_temp11 instanceof AbruptCompletion), "ToString(F(i))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp11 instanceof Completion) {
        _temp11 = _temp11.Value;
      }
      // a. Add ! ToString(𝔽(i)) as the last element of keys.
      keys.push(_temp11);
    }
    // 5. For each own property key P of O such that Type(P) is String and P is not an integer index, in ascending chronological order of property creation, do
    for (const P of O.properties.keys()) {
      if (P instanceof JSStringValue) {
        if (!isIntegerIndex(P)) {
          // a. Add P as the last element of keys.
          keys.push(P);
        }
      }
    }
    // 6. For each own property key P of O such that Type(P) is Symbol, in ascending chronological order of property creation, do
    for (const P of O.properties.keys()) {
      if (P instanceof SymbolValue) {
        // a. Add P as the last element of keys.
        keys.push(P);
      }
    }
    // 7. Return keys.
    return keys;
  }

  /** https://tc39.es/ecma262/#sec-integerindexedelementget */
  function IntegerIndexedElementGet(O, index) {
    // 1. Assert: O is an Integer-Indexed exotic object.
    Assert(isIntegerIndexedExoticObject(O), "isIntegerIndexedExoticObject(O)");
    // 2. Assert: Type(index) is Number.
    Assert(index instanceof NumberValue, "index instanceof NumberValue");
    // 3. Let buffer be O.[[ViewedArrayBuffer]].
    const buffer = O.ViewedArrayBuffer;
    // 4. If IsDetachedBuffer(buffer) is true, return undefined.
    if (IsDetachedBuffer(buffer) === Value.true) {
      return Value.undefined;
    }
    // 5. If ! IsValidIntegerIndex(O, index) is false, return undefined.
    if (IsValidIntegerIndex(O, index) === Value.false) {
      return Value.undefined;
    }
    // 6. Let offset be O.[[ByteOffset]].
    const offset = O.ByteOffset;
    // 7. Let arrayTypeName be the String value of O.[[TypedArrayName]].
    const arrayTypeName = O.TypedArrayName.stringValue();
    // 8. Let elementSize be the Element Size value specified in Table 61 for arrayTypeName.
    const elementSize = typedArrayInfoByName[arrayTypeName].ElementSize;
    // 9. Let indexedPosition be (ℝ(index) × elementSize) + offset.
    const indexedPosition = R(index) * elementSize + offset;
    // 10. Let elementType be the Element Type value in Table 61 for arrayTypeName.
    const elementType = typedArrayInfoByName[arrayTypeName].ElementType;
    // 11. Return GetValueFromBuffer(buffer, indexedPosition, elementType, true, Unordered).
    return GetValueFromBuffer(buffer, indexedPosition, elementType, Value.true);
  }

  /** https://tc39.es/ecma262/#sec-integerindexedelementset */
  function IntegerIndexedElementSet(O, index, value) {
    // 1. Assert: O is an Integer-Indexed exotic object.
    Assert(isIntegerIndexedExoticObject(O), "isIntegerIndexedExoticObject(O)");
    // 2. Assert: Type(index) is Number.
    Assert(index instanceof NumberValue, "index instanceof NumberValue");
    // 3. If O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).
    // 4. Otherwise, let numValue be ? ToNumber(value).
    let numValue;
    if (O.ContentType === 'BigInt') {
      let _temp12 = ToBigInt(value);
      /* c8 ignore if */
      if (_temp12 instanceof AbruptCompletion) {
        return _temp12;
      }
      /* c8 ignore if */
      if (_temp12 instanceof Completion) {
        _temp12 = _temp12.Value;
      }
      numValue = _temp12;
    } else {
      let _temp13 = ToNumber(value);
      /* c8 ignore if */
      if (_temp13 instanceof AbruptCompletion) {
        return _temp13;
      }
      /* c8 ignore if */
      if (_temp13 instanceof Completion) {
        _temp13 = _temp13.Value;
      }
      numValue = _temp13;
    }
    // 5. Let buffer be O.[[ViewedArrayBuffer]].
    const buffer = O.ViewedArrayBuffer;
    // 6. If IsDetachedBuffer(buffer) is true, return false.
    if (IsDetachedBuffer(buffer) === Value.true) {
      return Value.false;
    }
    // 7. If ! IsValidIntegerIndex(O, index) is false, return false.
    if (IsValidIntegerIndex(O, index) === Value.false) {
      return Value.false;
    }
    // 8. Let offset be O.[[ByteOffset]].
    const offset = O.ByteOffset;
    // 9. Let arrayTypeName be the String value of O.[[TypedArrayName]].
    const arrayTypeName = O.TypedArrayName.stringValue();
    // 10. Let elementSize be the Element Size value specified in Table 61 for arrayTypeName.
    const elementSize = typedArrayInfoByName[arrayTypeName].ElementSize;
    // 11. Let indexedPosition be (ℝ(index) × elementSize) + offset.
    const indexedPosition = R(index) * elementSize + offset;
    // 12. Let elementType be the Element Type value in Table 61 for arrayTypeName.
    const elementType = typedArrayInfoByName[arrayTypeName].ElementType;
    // 13. Perform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).
    let _temp14 = SetValueInBuffer(buffer, indexedPosition, elementType, numValue, Value.true);
    Assert(!(_temp14 instanceof AbruptCompletion), "SetValueInBuffer(buffer, indexedPosition, elementType, numValue, Value.true, 'Unordered')" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    // 14. Return true.
    return Value.true;
  }

  /** https://tc39.es/ecma262/#sec-integerindexedobjectcreate */
  function IntegerIndexedObjectCreate(prototype) {
    // 1. Let internalSlotsList be « [[Prototype]], [[Extensible]], [[ViewedArrayBuffer]], [[TypedArrayName]], [[ContentType]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] ».
    const internalSlotsList = ['Prototype', 'Extensible', 'ViewedArrayBuffer', 'TypedArrayName', 'ContentType', 'ByteLength', 'ByteOffset', 'ArrayLength'];
    // 2. Let A be ! MakeBasicObject(internalSlotsList).
    let _temp15 = MakeBasicObject(internalSlotsList);
    Assert(!(_temp15 instanceof AbruptCompletion), "MakeBasicObject(internalSlotsList)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp15 instanceof Completion) {
      _temp15 = _temp15.Value;
    }
    const A = _temp15;
    // 3. Set A.[[GetOwnProperty]] as specified in 9.4.5.1.
    A.GetOwnProperty = IntegerIndexedGetOwnProperty;
    // 4. Set A.[[HasProperty]] as specified in 9.4.5.2.
    A.HasProperty = IntegerIndexedHasProperty;
    // 5. Set A.[[DefineOwnProperty]] as specified in 9.4.5.3.
    A.DefineOwnProperty = IntegerIndexedDefineOwnProperty;
    // 6. Set A.[[Get]] as specified in 9.4.5.4.
    A.Get = IntegerIndexedGet;
    // 7. Set A.[[Set]] as specified in 9.4.5.5.
    A.Set = IntegerIndexedSet;
    // 8. Set A.[[Delete]] as specified in 9.4.5.6.
    A.Delete = IntegerIndexedDelete;
    // 9. Set A.[[OwnPropertyKeys]] as specified in 9.4.5.6.
    A.OwnPropertyKeys = IntegerIndexedOwnPropertyKeys;
    // 10. Set A.[[Prototype]] to prototype.
    A.Prototype = prototype;
    // 11. Return A.
    return A;
  }

  // This file covers abstract operations defined in
  /** https://tc39.es/ecma262/#sec-operations-on-iterator-objects */
  // and
  /** https://tc39.es/ecma262/#sec-iteration */

  /** https://tc39.es/ecma262/#sec-getiterator */
  function GetIterator(obj, hint, method) {
    if (!hint) {
      hint = 'sync';
    }
    Assert(hint === 'sync' || hint === 'async', "hint === 'sync' || hint === 'async'");
    if (!method) {
      if (hint === 'async') {
        let _temp = GetMethod(obj, wellKnownSymbols.asyncIterator);
        /* c8 ignore if */
        if (_temp instanceof AbruptCompletion) {
          return _temp;
        }
        /* c8 ignore if */
        if (_temp instanceof Completion) {
          _temp = _temp.Value;
        }
        method = _temp;
        if (method === Value.undefined) {
          let _temp2 = GetMethod(obj, wellKnownSymbols.iterator);
          /* c8 ignore if */
          if (_temp2 instanceof AbruptCompletion) {
            return _temp2;
          }
          /* c8 ignore if */
          if (_temp2 instanceof Completion) {
            _temp2 = _temp2.Value;
          }
          const syncMethod = _temp2;
          let _temp3 = GetIterator(obj, 'sync', syncMethod);
          /* c8 ignore if */
          if (_temp3 instanceof AbruptCompletion) {
            return _temp3;
          }
          /* c8 ignore if */
          if (_temp3 instanceof Completion) {
            _temp3 = _temp3.Value;
          }
          const syncIteratorRecord = _temp3;
          return CreateAsyncFromSyncIterator(syncIteratorRecord);
        }
      } else {
        let _temp4 = GetMethod(obj, wellKnownSymbols.iterator);
        /* c8 ignore if */
        if (_temp4 instanceof AbruptCompletion) {
          return _temp4;
        }
        /* c8 ignore if */
        if (_temp4 instanceof Completion) {
          _temp4 = _temp4.Value;
        }
        method = _temp4;
      }
    }
    let _temp5 = Call(method, obj);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const iterator = _temp5;
    if (!(iterator instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', iterator);
    }
    let _temp6 = GetV(iterator, Value('next'));
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const nextMethod = _temp6;
    const iteratorRecord = {
      Iterator: iterator,
      NextMethod: nextMethod,
      Done: Value.false
    };
    return EnsureCompletion(iteratorRecord);
  }

  /** https://tc39.es/ecma262/#sec-iteratornext */
  function IteratorNext(iteratorRecord, value) {
    let result;
    if (!value) {
      let _temp7 = Call(iteratorRecord.NextMethod, iteratorRecord.Iterator);
      /* c8 ignore if */
      if (_temp7 instanceof AbruptCompletion) {
        return _temp7;
      }
      /* c8 ignore if */
      if (_temp7 instanceof Completion) {
        _temp7 = _temp7.Value;
      }
      result = _temp7;
    } else {
      let _temp8 = Call(iteratorRecord.NextMethod, iteratorRecord.Iterator, [value]);
      /* c8 ignore if */
      if (_temp8 instanceof AbruptCompletion) {
        return _temp8;
      }
      /* c8 ignore if */
      if (_temp8 instanceof Completion) {
        _temp8 = _temp8.Value;
      }
      result = _temp8;
    }
    if (!(result instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', result);
    }
    return EnsureCompletion(result);
  }

  /** https://tc39.es/ecma262/#sec-iteratorcomplete */
  function IteratorComplete(iterResult) {
    Assert(iterResult instanceof ObjectValue, "iterResult instanceof ObjectValue");
    let _temp9 = Get(iterResult, Value('done'));
    /* c8 ignore if */
    if (_temp9 instanceof AbruptCompletion) {
      return _temp9;
    }
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    return EnsureCompletion(ToBoolean(_temp9));
  }

  /** https://tc39.es/ecma262/#sec-iteratorvalue */
  function IteratorValue(iterResult) {
    Assert(iterResult instanceof ObjectValue, "iterResult instanceof ObjectValue");
    let _temp10 = Get(iterResult, Value('value'));
    /* c8 ignore if */
    if (_temp10 instanceof AbruptCompletion) {
      return _temp10;
    }
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    return EnsureCompletion(_temp10);
  }

  /** https://tc39.es/ecma262/#sec-iteratorstep */
  function IteratorStep(iteratorRecord) {
    let _temp11 = IteratorNext(iteratorRecord);
    /* c8 ignore if */
    if (_temp11 instanceof AbruptCompletion) {
      return _temp11;
    }
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    const result = _temp11;
    let _temp12 = IteratorComplete(result);
    /* c8 ignore if */
    if (_temp12 instanceof AbruptCompletion) {
      return _temp12;
    }
    /* c8 ignore if */
    if (_temp12 instanceof Completion) {
      _temp12 = _temp12.Value;
    }
    const done = _temp12;
    if (done === Value.true) {
      return EnsureCompletion(Value.false);
    }
    return EnsureCompletion(result);
  }

  /** https://tc39.es/ecma262/#sec-iteratorclose */
  function IteratorClose(iteratorRecord, completion) {
    // 1. Assert: Type(iteratorRecord.[[Iterator]]) is Object.
    Assert(iteratorRecord.Iterator instanceof ObjectValue, "iteratorRecord.Iterator instanceof ObjectValue");
    // 2. Assert: completion is a Completion Record.
    // TODO: completion should be a Completion Record so this should not be necessary
    completion = EnsureCompletion(completion);
    Assert(completion instanceof Completion, "completion instanceof Completion");
    // 3. Let iterator be iteratorRecord.[[Iterator]].
    const iterator = iteratorRecord.Iterator;
    // 4. Let innerResult be GetMethod(iterator, "return").
    let innerResult = EnsureCompletion(GetMethod(iterator, Value('return')));
    // 5. If innerResult.[[Type]] is normal, then
    if (innerResult.Type === 'normal') {
      // a. Let return be innerResult.[[Value]].
      const ret = innerResult.Value;
      // b. If return is undefined, return Completion(completion).
      if (ret === Value.undefined) {
        return Completion(completion);
      }
      // c. Set innerResult to Call(return, iterator).
      innerResult = Call(ret, iterator);
    }
    // 6. If completion.[[Type]] is throw, return Completion(completion).
    if (completion.Type === 'throw') {
      return Completion(completion);
    }
    // 7. If innerResult.[[Type]] is throw, return Completion(innerResult).
    if (innerResult.Type === 'throw') {
      return Completion(innerResult);
    }
    // 8. If Type(innerResult.[[Value]]) is not Object, throw a TypeError exception.
    if (!(innerResult.Value instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', innerResult.Value);
    }
    // 9. Return Completion(completion).
    return Completion(completion);
  }

  /** https://tc39.es/ecma262/#sec-asynciteratorclose */
  function* AsyncIteratorClose(iteratorRecord, completion) {
    // 1. Assert: Type(iteratorRecord.[[Iterator]]) is Object.
    Assert(iteratorRecord.Iterator instanceof ObjectValue, "iteratorRecord.Iterator instanceof ObjectValue");
    // 2. Assert: completion is a Completion Record.
    Assert(completion instanceof Completion, "completion instanceof Completion");
    // 3. Let iterator be iteratorRecord.[[Iterator]].
    const iterator = iteratorRecord.Iterator;
    // 4. Let innerResult be GetMethod(iterator, "return").
    let innerResult = EnsureCompletion(GetMethod(iterator, Value('return')));
    // 5. If innerResult.[[Type]] is normal, then
    if (innerResult.Type === 'normal') {
      // a. Let return be innerResult.[[Value]].
      const ret = innerResult.Value;
      // b. If return is undefined, return Completion(completion).
      if (ret === Value.undefined) {
        return Completion(completion);
      }
      // c. Set innerResult to Call(return, iterator).
      innerResult = Call(ret, iterator);
      // d. If innerResult.[[Type]] is normal, set innerResult to Await(innerResult.[[Value]]).
      if (innerResult.Type === 'normal') {
        innerResult = EnsureCompletion(yield* Await(innerResult.Value));
      }
    }
    // 6. If completion.[[Type]] is throw, return Completion(completion).
    if (completion.Type === 'throw') {
      return Completion(completion);
    }
    // 7. If innerResult.[[Type]] is throw, return Completion(innerResult).
    if (innerResult.Type === 'throw') {
      return Completion(innerResult);
    }
    // 8. If Type(innerResult.[[Value]]) is not Object, throw a TypeError exception.
    if (!(innerResult.Value instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', innerResult.Value);
    }
    // 9. Return Completion(completion).
    return Completion(completion);
  }

  /** https://tc39.es/ecma262/#sec-createiterresultobject */
  function CreateIterResultObject(value, done) {
    Assert(done instanceof BooleanValue, "done instanceof BooleanValue");
    const obj = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%Object.prototype%'));
    let _temp13 = CreateDataProperty(obj, Value('value'), value);
    Assert(!(_temp13 instanceof AbruptCompletion), "CreateDataProperty(obj, Value('value'), value)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp13 instanceof Completion) {
      _temp13 = _temp13.Value;
    }
    let _temp14 = CreateDataProperty(obj, Value('done'), done);
    Assert(!(_temp14 instanceof AbruptCompletion), "CreateDataProperty(obj, Value('done'), done)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    return obj;
  }

  /** https://tc39.es/ecma262/#sec-createlistiteratorRecord */
  function CreateListIteratorRecord(list) {
    // 1. Let closure be a new Abstract Closure with no parameters that captures list and performs the following steps when called:
    const closure = function* closure() {
      // a. For each element E of list, do
      for (const E of list) {
        let _temp15 = yield* Yield(E);
        /* c8 ignore if */
        if (_temp15 instanceof AbruptCompletion) {
          return _temp15;
        }
        /* c8 ignore if */
        if (_temp15 instanceof Completion) {
          _temp15 = _temp15.Value;
        }
      }
      // b. Return undefined.
      return NormalCompletion(Value.undefined);
    };
    // 2. Let iterator be ! CreateIteratorFromClosure(closure, empty, %IteratorPrototype%).
    let _temp16 = CreateIteratorFromClosure(closure, undefined, exports.surroundingAgent.intrinsic('%IteratorPrototype%'));
    Assert(!(_temp16 instanceof AbruptCompletion), "CreateIteratorFromClosure(closure, undefined, surroundingAgent.intrinsic('%IteratorPrototype%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp16 instanceof Completion) {
      _temp16 = _temp16.Value;
    }
    const iterator = _temp16;
    // 3. Return Record { [[Iterator]]: iterator, [[NextMethod]]: %GeneratorFunction.prototype.prototype.next%, [[Done]]: false }.
    return {
      Iterator: iterator,
      NextMethod: exports.surroundingAgent.intrinsic('%GeneratorFunction.prototype.prototype.next%'),
      Done: Value.false
    };
  }

  /** https://tc39.es/ecma262/#sec-createasyncfromsynciterator */
  function CreateAsyncFromSyncIterator(syncIteratorRecord) {
    let _temp17 = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%AsyncFromSyncIteratorPrototype%'), ['SyncIteratorRecord']);
    Assert(!(_temp17 instanceof AbruptCompletion), "OrdinaryObjectCreate(surroundingAgent.intrinsic('%AsyncFromSyncIteratorPrototype%'), [\n    'SyncIteratorRecord',\n  ])" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp17 instanceof Completion) {
      _temp17 = _temp17.Value;
    }
    const asyncIterator = _temp17;
    asyncIterator.SyncIteratorRecord = syncIteratorRecord;
    let _temp18 = Get(asyncIterator, Value('next'));
    Assert(!(_temp18 instanceof AbruptCompletion), "Get(asyncIterator, Value('next'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp18 instanceof Completion) {
      _temp18 = _temp18.Value;
    }
    const nextMethod = _temp18;
    return {
      Iterator: asyncIterator,
      NextMethod: nextMethod,
      Done: Value.false
    };
  }

  /** https://tc39.es/ecma262/#sec-asyncfromsynciteratorcontinuation */
  function AsyncFromSyncIteratorContinuation(result, promiseCapability) {
    // 1. Let done be IteratorComplete(result).
    let done = IteratorComplete(result);
    // 2. IfAbruptRejectPromise(done, promiseCapability).
    /* c8 ignore if */
    if (done instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [done.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (done instanceof Completion) {
      done = done.Value;
    }
    // 3. Let value be IteratorValue(result).
    let value = IteratorValue(result);
    // 4. IfAbruptRejectPromise(value, promiseCapability).
    /* c8 ignore if */
    if (value instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [value.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (value instanceof Completion) {
      value = value.Value;
    }
    // 5. Let valueWrapper be PromiseResolve(%Promise%, value).
    let valueWrapper = PromiseResolve(exports.surroundingAgent.intrinsic('%Promise%'), value);
    // 6. IfAbruptRejectPromise(valueWrapper, promiseCapability).
    /* c8 ignore if */
    if (valueWrapper instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [valueWrapper.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (valueWrapper instanceof Completion) {
      valueWrapper = valueWrapper.Value;
    }
    // 7. Let unwrap be a new Abstract Closure with parameters (value) that captures done and performs the following steps when called:
    // eslint-disable-next-line arrow-body-style
    const unwrap = ([valueInner = Value.undefined]) => {
      let _temp19 = CreateIterResultObject(valueInner, done);
      Assert(!(_temp19 instanceof AbruptCompletion), "CreateIterResultObject(valueInner, done)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp19 instanceof Completion) {
        _temp19 = _temp19.Value;
      }
      // a. Return ! CreateIterResultObject(value, done).
      return _temp19;
    };
    // 8. Let onFulfilled be ! CreateBuiltinFunction(unwrap, 1, "", « »).
    let _temp20 = CreateBuiltinFunction(unwrap, 1, Value(''), ['Done']);
    Assert(!(_temp20 instanceof AbruptCompletion), "CreateBuiltinFunction(unwrap, 1, Value(''), ['Done'])" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp20 instanceof Completion) {
      _temp20 = _temp20.Value;
    }
    const onFulfilled = _temp20;
    // 9. NOTE: onFulfilled is used when processing the "value" property of an IteratorResult object in order to wait for its value if it is a promise and re-package the result in a new "unwrapped" IteratorResult object.
    // 10. Perform ! PerformPromiseThen(valueWrapper, onFulfilled, undefined, promiseCapability).
    let _temp21 = PerformPromiseThen(valueWrapper, onFulfilled, Value.undefined, promiseCapability);
    Assert(!(_temp21 instanceof AbruptCompletion), "PerformPromiseThen(valueWrapper, onFulfilled, Value.undefined, promiseCapability)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp21 instanceof Completion) {
      _temp21 = _temp21.Value;
    }
    // 11. Return promiseCapability.[[Promise]].
    return promiseCapability.Promise;
  }

  function ModuleNamespaceSetPrototypeOf(V) {
    const O = this;
    return SetImmutablePrototype(O, V);
  }
  function ModuleNamespaceIsExtensible() {
    return Value.false;
  }
  function ModuleNamespacePreventExtensions() {
    return Value.true;
  }
  function ModuleNamespaceGetOwnProperty(P) {
    const O = this;
    if (P instanceof SymbolValue) {
      return OrdinaryGetOwnProperty(O, P);
    }
    const exports$1 = O.Exports;
    if (!exports$1.has(P)) {
      return Value.undefined;
    }
    let _temp = O.Get(P, O);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const value = _temp;
    return exports.Descriptor({
      Value: value,
      Writable: Value.true,
      Enumerable: Value.true,
      Configurable: Value.false
    });
  }
  function ModuleNamespaceDefineOwnProperty(P, Desc) {
    const O = this;
    if (P instanceof SymbolValue) {
      return OrdinaryDefineOwnProperty(O, P, Desc);
    }
    let _temp2 = O.GetOwnProperty(P);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const current = _temp2;
    if (current === Value.undefined) {
      return Value.false;
    }
    if (IsAccessorDescriptor(Desc)) {
      return Value.false;
    }
    if (Desc.Writable !== undefined && Desc.Writable === Value.false) {
      return Value.false;
    }
    if (Desc.Enumerable !== undefined && Desc.Enumerable === Value.false) {
      return Value.false;
    }
    if (Desc.Configurable !== undefined && Desc.Configurable === Value.true) {
      return Value.false;
    }
    if (Desc.Value !== undefined) {
      return SameValue(Desc.Value, current.Value);
    }
    return Value.true;
  }
  function ModuleNamespaceHasProperty(P) {
    const O = this;
    if (P instanceof SymbolValue) {
      return OrdinaryHasProperty(O, P);
    }
    const exports = O.Exports;
    if (exports.has(P)) {
      return Value.true;
    }
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-module-namespace-exotic-objects-get-p-receiver */
  function ModuleNamespaceGet(P, Receiver) {
    const O = this;

    // 1. Assert: IsPropertyKey(P) is true.
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    // 2. If Type(P) is Symbol, then
    if (P instanceof SymbolValue) {
      // a. Return ? OrdinaryGet(O, P, Receiver).
      return OrdinaryGet(O, P, Receiver);
    }
    // 3. Let exports be O.[[Exports]].
    const exports$1 = O.Exports;
    // 4. If P is not an element of exports, return undefined.
    if (!exports$1.has(P)) {
      return Value.undefined;
    }
    // 5. Let m be O.[[Module]].
    const m = O.Module;
    // 6. Let binding be ! m.ResolveExport(P).
    const binding = m.ResolveExport(P);
    // 7. Assert: binding is a ResolvedBinding Record.
    Assert(binding instanceof ResolvedBindingRecord, "binding instanceof ResolvedBindingRecord");
    // 8. Let targetModule be binding.[[Module]].
    const targetModule = binding.Module;
    // 9. Assert: targetModule is not undefined.
    Assert(targetModule !== Value.undefined, "targetModule !== Value.undefined");
    // 10. If binding.[[BindingName]] is ~namespace~, then
    if (binding.BindingName === 'namespace') {
      // a. Return ? GetModuleNamespace(targetModule).
      return GetModuleNamespace(targetModule);
    }
    // 11. Let targetEnv be targetModule.[[Environment]].
    const targetEnv = targetModule.Environment;
    // 12. If targetEnv is undefined, throw a ReferenceError exception.
    if (targetEnv === Value.undefined) {
      return exports.surroundingAgent.Throw('ReferenceError', 'NotDefined', P);
    }
    // 13. Return ? targetEnv.GetBindingValue(binding.[[BindingName]], true).
    return targetEnv.GetBindingValue(binding.BindingName, Value.true);
  }
  ModuleNamespaceGet.section = 'https://tc39.es/ecma262/#sec-module-namespace-exotic-objects-get-p-receiver';
  function ModuleNamespaceSet() {
    return Value.false;
  }
  function ModuleNamespaceDelete(P) {
    const O = this;
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    if (P instanceof SymbolValue) {
      return OrdinaryDelete(O, P);
    }
    const exports = O.Exports;
    if (exports.has(P)) {
      return Value.false;
    }
    return Value.true;
  }
  function ModuleNamespaceOwnPropertyKeys() {
    const O = this;
    const exports = [...O.Exports];
    let _temp3 = OrdinaryOwnPropertyKeys(O);
    Assert(!(_temp3 instanceof AbruptCompletion), "OrdinaryOwnPropertyKeys(O)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const symbolKeys = _temp3;
    exports.push(...symbolKeys);
    return exports;
  }

  /** https://tc39.es/ecma262/#sec-modulenamespacecreate */
  function ModuleNamespaceCreate(module, exports$1) {
    // 1. Assert: module is a Module Record.
    Assert(module instanceof AbstractModuleRecord, "module instanceof AbstractModuleRecord");
    // 2. Assert: module.[[Namespace]] is undefined.
    Assert(module.Namespace === Value.undefined, "module.Namespace === Value.undefined");
    // 3. Assert: exports is a List of String values.
    Assert(Array.isArray(exports$1), "Array.isArray(exports)");
    // 4. Let internalSlotsList be the internal slots listed in Table 31.
    const internalSlotsList = ['Module', 'Exports', 'Prototype'];
    // 5. Let M be ! MakeBasicObject(internalSlotsList).
    let _temp4 = MakeBasicObject(internalSlotsList);
    Assert(!(_temp4 instanceof AbruptCompletion), "MakeBasicObject(internalSlotsList)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const M = _temp4;
    /** https://tc39.es/ecma262/#sec-module-namespace-exotic-objects */
    M.SetPrototypeOf = ModuleNamespaceSetPrototypeOf;
    M.IsExtensible = ModuleNamespaceIsExtensible;
    M.PreventExtensions = ModuleNamespacePreventExtensions;
    M.GetOwnProperty = ModuleNamespaceGetOwnProperty;
    M.DefineOwnProperty = ModuleNamespaceDefineOwnProperty;
    M.HasProperty = ModuleNamespaceHasProperty;
    M.Get = ModuleNamespaceGet;
    M.Set = ModuleNamespaceSet;
    M.Delete = ModuleNamespaceDelete;
    M.OwnPropertyKeys = ModuleNamespaceOwnPropertyKeys;
    // 7. Set M.[[Prototype]] to null.
    M.Prototype = Value.null;
    // 8. Set M.[[Module]] to module.
    M.Module = module;
    // 9. Let sortedExports be a new List containing the same values as the list exports where the values are ordered as if an Array of the same values had been sorted using Array.prototype.sort using undefined as comparefn.
    const sortedExports = [...exports$1].sort((x, y) => {
      let _temp5 = SortCompare(x, y, Value.undefined);
      Assert(!(_temp5 instanceof AbruptCompletion), "SortCompare(x, y, Value.undefined)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      const result = _temp5;
      return R(result);
    });
    // 10. Set M.[[Exports]] to sortedExports.
    M.Exports = new ValueSet(sortedExports);
    // 11. Create own properties of M corresponding to the definitions in 26.3.
    M.properties.set(wellKnownSymbols.toStringTag, exports.Descriptor({
      Writable: Value.false,
      Enumerable: Value.false,
      Configurable: Value.false,
      Value: Value('Module')
    }));
    // 12. Set module.[[Namespace]] to M.
    module.Namespace = M;
    // 13. Return M;
    return M;
  }

  /** https://tc39.es/ecma262/#graphloadingstate-record */
  class GraphLoadingState {
    PromiseCapability;
    HostDefined;
    IsLoading = true;
    Visited = new Set();
    PendingModules = 1;
    constructor({
      PromiseCapability,
      HostDefined
    }) {
      this.PromiseCapability = PromiseCapability;
      this.HostDefined = HostDefined;
    }
  }

  /** https://tc39.es/ecma262/#sec-InnerModuleLoading */
  function InnerModuleLoading(state, module) {
    // 1. Assert: state.[[IsLoading]] is true.
    Assert(Boolean(state.IsLoading === true), "Boolean(state.IsLoading === true)"); // this Boolean() is let step 2.d.iii not having a type error.

    // 2. If module is a Cyclic Module Record, module.[[Status]] is new, and state.[[Visited]] does not contain module, then
    if (module instanceof CyclicModuleRecord && module.Status === 'new' && !state.Visited.has(module)) {
      // a. Append module to state.[[Visited]].
      state.Visited.add(module);
      // b. Let requestedModulesCount be the number of elements in module.[[RequestedModules]].
      const requestedModulesCout = module.RequestedModules.length;
      // c. Set state.[[PendingModulesCount]] to state.[[PendingModulesCount]] + requestedModulesCount.
      state.PendingModules += requestedModulesCout;
      // d. For each String required of module.[[RequestedModules]], do
      for (const required of module.RequestedModules) {
        // i. If module.[[LoadedModules]] contains a Record whose [[Specifier]] is required, then
        //    1. Let record be that Record.
        const record = getRecordWithSpecifier(module.LoadedModules, required);
        if (record !== undefined) {
          // 2. Perform InnerModuleLoading(state, record.[[Module]]).
          ContinueModuleLoading(state, NormalCompletion(record.Module));
          // ii. Else,
        } else {
          // 1. Perform HostLoadImportedModule(module, required, state.[[HostDefined]], state).
          HostLoadImportedModule(module, required, state.HostDefined, state);
        }

        // iii. If state.[[IsLoading]] is false, return unused.
        if (state.IsLoading === false) {
          return;
        }
      }
    }

    // 3. Assert: state.[[PendingModulesCount]] ≥ 1.
    Assert(state.PendingModules >= 1, "state.PendingModules >= 1");
    // 4. Set state.[[PendingModulesCount]] to state.[[PendingModulesCount]] - 1.
    state.PendingModules -= 1;
    // 5. If state.[[PendingModulesCount]] = 0, then
    if (state.PendingModules === 0) {
      // a. Set state.[[IsLoading]] to false.
      state.IsLoading = false;
      // b. For each Cyclic Module Record loaded of state.[[Visited]], do
      for (const loaded of state.Visited) {
        // i. If loaded.[[Status]] is new, set loaded.[[Status]] to unlinked.
        if (loaded.Status === 'new') {
          loaded.Status = 'unlinked';
        }
      }
      // c. Perform ! Call(state.[[PromiseCapability]].[[Resolve]], undefined, « undefined »).
      let _temp = Call(state.PromiseCapability.Resolve, Value.undefined, [Value.undefined]);
      Assert(!(_temp instanceof AbruptCompletion), "Call(state.PromiseCapability.Resolve, Value.undefined, [Value.undefined])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
    }

    // 6. Return unused.
  }

  /** https://tc39.es/ecma262/#sec-ContinueModuleLoading */
  function ContinueModuleLoading(state, result) {
    // 1. If state.[[IsLoading]] is false, return unused.
    if (state.IsLoading === false) {
      return;
    }
    // 2. If moduleCompletion is a normal completion, then
    if (result instanceof NormalCompletion) {
      // a. Perform InnerModuleLoading(state, moduleCompletion.[[Value]]).
      InnerModuleLoading(state, result.Value);
      // 3. Else,
    } else {
      // a. Set state.[[IsLoading]] to false.
      state.IsLoading = false;
      // b. Perform ! Call(state.[[PromiseCapability]].[[Reject]], undefined, « moduleCompletion.[[Value]] »).
      let _temp2 = Call(state.PromiseCapability.Reject, Value.undefined, [result.Value]);
      Assert(!(_temp2 instanceof AbruptCompletion), "Call(state.PromiseCapability.Reject, Value.undefined, [result.Value])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
    }

    // 4. Return unused.
  }

  /** https://tc39.es/ecma262/#sec-InnerModuleLinking */
  function InnerModuleLinking(module, stack, index) {
    if (!(module instanceof CyclicModuleRecord)) {
      let _temp3 = module.Link();
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      return index;
    }
    if (module.Status === 'linking' || module.Status === 'linked' || module.Status === 'evaluating-async' || module.Status === 'evaluated') {
      return index;
    }
    Assert(module.Status === 'unlinked', "module.Status === 'unlinked'");
    module.Status = 'linking';
    module.DFSIndex = index;
    module.DFSAncestorIndex = index;
    index += 1;
    stack.push(module);
    for (const required of module.RequestedModules) {
      const requiredModule = GetImportedModule(module, required);
      let _temp4 = InnerModuleLinking(requiredModule, stack, index);
      /* c8 ignore if */
      if (_temp4 instanceof AbruptCompletion) {
        return _temp4;
      }
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      index = _temp4;
      if (requiredModule instanceof CyclicModuleRecord) {
        Assert(requiredModule.Status === 'linking' || requiredModule.Status === 'linked' || requiredModule.Status === 'evaluating-async' || requiredModule.Status === 'evaluated', "requiredModule.Status === 'linking' || requiredModule.Status === 'linked' || requiredModule.Status === 'evaluating-async' || requiredModule.Status === 'evaluated'");
        Assert(requiredModule.Status === 'linking' === stack.includes(requiredModule), "(requiredModule.Status === 'linking') === stack.includes(requiredModule)");
        if (requiredModule.Status === 'linking') {
          module.DFSAncestorIndex = Math.min(module.DFSAncestorIndex, requiredModule.DFSAncestorIndex);
        }
      }
    }
    let _temp5 = module.InitializeEnvironment();
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    Assert(stack.indexOf(module) === stack.lastIndexOf(module), "stack.indexOf(module) === stack.lastIndexOf(module)");
    Assert(module.DFSAncestorIndex <= module.DFSIndex, "module.DFSAncestorIndex <= module.DFSIndex");
    if (module.DFSAncestorIndex === module.DFSIndex) {
      let done = false;
      while (done === false) {
        const requiredModule = stack.pop();
        Assert(requiredModule instanceof CyclicModuleRecord, "requiredModule instanceof CyclicModuleRecord");
        requiredModule.Status = 'linked';
        if (requiredModule === module) {
          done = true;
        }
      }
    }
    return index;
  }

  /** https://tc39.es/ecma262/#sec-innermoduleevaluation */
  function InnerModuleEvaluation(module, stack, index) {
    if (!(module instanceof CyclicModuleRecord)) {
      let _temp6 = module.Evaluate();
      /* c8 ignore if */
      if (_temp6 instanceof AbruptCompletion) {
        return _temp6;
      }
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
      return NormalCompletion(index);
    }
    if (module.Status === 'evaluating-async' || module.Status === 'evaluated') {
      if (module.EvaluationError instanceof UndefinedValue) {
        return NormalCompletion(index);
      } else {
        return module.EvaluationError;
      }
    }
    if (module.Status === 'evaluating') {
      return NormalCompletion(index);
    }
    Assert(module.Status === 'linked', "module.Status === 'linked'");
    module.Status = 'evaluating';
    module.DFSIndex = index;
    module.DFSAncestorIndex = index;
    module.PendingAsyncDependencies = 0;
    module.AsyncParentModules = [];
    index += 1;
    stack.push(module);
    for (const required of module.RequestedModules) {
      let requiredModule = GetImportedModule(module, required);
      let _temp7 = InnerModuleEvaluation(requiredModule, stack, index);
      /* c8 ignore if */
      if (_temp7 instanceof AbruptCompletion) {
        return _temp7;
      }
      /* c8 ignore if */
      if (_temp7 instanceof Completion) {
        _temp7 = _temp7.Value;
      }
      index = _temp7;
      if (requiredModule instanceof CyclicModuleRecord) {
        Assert(requiredModule.Status === 'evaluating' || requiredModule.Status === 'evaluating-async' || requiredModule.Status === 'evaluated', "requiredModule.Status === 'evaluating' || requiredModule.Status === 'evaluating-async' || requiredModule.Status === 'evaluated'");
        Assert(requiredModule.Status === 'evaluating' === stack.includes(requiredModule), "(requiredModule.Status === 'evaluating') === stack.includes(requiredModule)");
        if (requiredModule.Status === 'evaluating') {
          module.DFSAncestorIndex = Math.min(module.DFSAncestorIndex, requiredModule.DFSAncestorIndex);
        } else {
          requiredModule = GetAsyncCycleRoot(requiredModule);
          Assert(requiredModule.Status === 'evaluating-async' || requiredModule.Status === 'evaluated', "requiredModule.Status === 'evaluating-async' || requiredModule.Status === 'evaluated'");
          if (requiredModule.EvaluationError !== Value.undefined) {
            return module.EvaluationError;
          }
        }
        if (requiredModule.AsyncEvaluating === Value.true) {
          module.PendingAsyncDependencies += 1;
          requiredModule.AsyncParentModules.push(module);
        }
      }
    }
    if (module.PendingAsyncDependencies > 0) {
      module.AsyncEvaluating = Value.true;
    } else if (module.Async === Value.true) {
      let _temp8 = ExecuteAsyncModule(module);
      Assert(!(_temp8 instanceof AbruptCompletion), "ExecuteAsyncModule(module)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp8 instanceof Completion) {
        _temp8 = _temp8.Value;
      }
    } else {
      let _temp9 = module.ExecuteModule();
      /* c8 ignore if */
      if (_temp9 instanceof AbruptCompletion) {
        return _temp9;
      }
      /* c8 ignore if */
      if (_temp9 instanceof Completion) {
        _temp9 = _temp9.Value;
      }
    }
    Assert(stack.indexOf(module) === stack.lastIndexOf(module), "stack.indexOf(module) === stack.lastIndexOf(module)");
    Assert(module.DFSAncestorIndex <= module.DFSIndex, "module.DFSAncestorIndex <= module.DFSIndex");
    if (module.DFSAncestorIndex === module.DFSIndex) {
      let done = false;
      while (done === false) {
        const requiredModule = stack.pop();
        Assert(requiredModule instanceof CyclicModuleRecord, "requiredModule instanceof CyclicModuleRecord");
        if (requiredModule.AsyncEvaluating === Value.false) {
          requiredModule.Status = 'evaluated';
        } else {
          requiredModule.Status = 'evaluating-async';
        }
        if (requiredModule === module) {
          done = true;
        }
      }
    }
    return index;
  }

  /** https://tc39.es/ecma262/#sec-execute-async-module */
  function ExecuteAsyncModule(module) {
    // 1. Assert: module.[[Status]] is evaluating or evaluating-async.
    Assert(module.Status === 'evaluating' || module.Status === 'evaluating-async', "module.Status === 'evaluating' || module.Status === 'evaluating-async'");
    // 2. Assert: module.[[Async]] is true.
    Assert(module.Async === Value.true, "module.Async === Value.true");
    // 3. Set module.[[AsyncEvaluating]] to true.
    module.AsyncEvaluating = Value.true;
    // 4. Let capability be ! NewPromiseCapability(%Promise%).
    let _temp10 = NewPromiseCapability(exports.surroundingAgent.intrinsic('%Promise%'));
    Assert(!(_temp10 instanceof AbruptCompletion), "NewPromiseCapability(surroundingAgent.intrinsic('%Promise%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    const capability = _temp10;
    // 5. Let fulfilledClosure be a new Abstract Closure with no parameters that captures module and performs the following steps when called:
    const fulfilledClosure = () => {
      let _temp11 = AsyncModuleExecutionFulfilled(module);
      Assert(!(_temp11 instanceof AbruptCompletion), "AsyncModuleExecutionFulfilled(module)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp11 instanceof Completion) {
        _temp11 = _temp11.Value;
      }
      // b. Return undefined.
      return Value.undefined;
    };
    // 6. Let onFulfilled be ! CreateBuiltinFunction(fulfilledClosure, 0, "", « »).
    const onFulfilled = CreateBuiltinFunction(fulfilledClosure, 0, Value(''), ['Module']);
    // 7. Let rejectedClosure be a new Abstract Closure with parameters (error) that captures module and performs the following steps when called:
    const rejectedClosure = ([error = Value.undefined]) => {
      let _temp12 = AsyncModuleExecutionRejected(module, error);
      Assert(!(_temp12 instanceof AbruptCompletion), "AsyncModuleExecutionRejected(module, error)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp12 instanceof Completion) {
        _temp12 = _temp12.Value;
      }
      // b. Return undefined.
      return Value.undefined;
    };
    // 8. Let onRejected be ! CreateBuiltinFunction(rejectedClosure, 0, "", « »).
    const onRejected = CreateBuiltinFunction(rejectedClosure, 0, Value(''), ['Module']);
    // 9. Perform ! PerformPromiseThen(capability.[[Promise]], onFulfilled, onRejected).
    let _temp13 = PerformPromiseThen(capability.Promise, onFulfilled, onRejected);
    Assert(!(_temp13 instanceof AbruptCompletion), "PerformPromiseThen(capability.Promise as PromiseObjectValue, onFulfilled, onRejected)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp13 instanceof Completion) {
      _temp13 = _temp13.Value;
    }
    // 10. Perform ! module.ExecuteModule(capability).
    let _temp14 = module.ExecuteModule(capability);
    Assert(!(_temp14 instanceof AbruptCompletion), "module.ExecuteModule(capability)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    // 11. Return.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-getcycleroot */
  ExecuteAsyncModule.section = 'https://tc39.es/ecma262/#sec-execute-async-module';
  function GetAsyncCycleRoot(module) {
    Assert(module.Status === 'evaluated' || module.Status === 'evaluating-async', "module.Status === 'evaluated' || module.Status === 'evaluating-async'");
    if (module.AsyncParentModules.length === 0) {
      return module;
    }
    while (module.DFSIndex > module.DFSAncestorIndex) {
      Assert(module.AsyncParentModules.length > 0, "module.AsyncParentModules.length > 0");
      const nextCycleModule = module.AsyncParentModules[0];
      Assert(nextCycleModule.DFSAncestorIndex === module.DFSAncestorIndex, "nextCycleModule.DFSAncestorIndex === module.DFSAncestorIndex");
      module = nextCycleModule;
    }
    Assert(module.DFSIndex === module.DFSAncestorIndex, "module.DFSIndex === module.DFSAncestorIndex");
    return module;
  }

  /** https://tc39.es/ecma262/#sec-asyncmodulexecutionfulfilled */
  function AsyncModuleExecutionFulfilled(module) {
    if (module.Status === 'evaluated') {
      Assert(module.EvaluationError !== Value.undefined, "module.EvaluationError !== Value.undefined");
      return Value.undefined;
    }
    Assert(module.Status === 'evaluating-async', "module.Status === 'evaluating-async'");
    Assert(module.EvaluationError === Value.undefined, "module.EvaluationError === Value.undefined");
    module.AsyncEvaluating = Value.false;
    for (const m of module.AsyncParentModules) {
      if (module.DFSIndex !== module.DFSAncestorIndex) {
        Assert(m.DFSAncestorIndex === module.DFSAncestorIndex, "m.DFSAncestorIndex === module.DFSAncestorIndex");
      }
      m.PendingAsyncDependencies -= 1;
      if (m.PendingAsyncDependencies === 0 && m.EvaluationError === Value.undefined) {
        Assert(m.AsyncEvaluating === Value.true, "m.AsyncEvaluating === Value.true");
        let _temp15 = GetAsyncCycleRoot(m);
        Assert(!(_temp15 instanceof AbruptCompletion), "GetAsyncCycleRoot(m)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp15 instanceof Completion) {
          _temp15 = _temp15.Value;
        }
        const cycleRoot = _temp15;
        if (cycleRoot.EvaluationError !== Value.undefined) {
          return Value.undefined;
        }
        if (m.Async === Value.true) {
          let _temp16 = ExecuteAsyncModule(m);
          Assert(!(_temp16 instanceof AbruptCompletion), "ExecuteAsyncModule(m)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp16 instanceof Completion) {
            _temp16 = _temp16.Value;
          }
        } else {
          const result = m.ExecuteModule();
          if (result instanceof NormalCompletion) {
            let _temp17 = AsyncModuleExecutionFulfilled(m);
            Assert(!(_temp17 instanceof AbruptCompletion), "AsyncModuleExecutionFulfilled(m)" + ' returned an abrupt completion');
            /* c8 ignore if */
            if (_temp17 instanceof Completion) {
              _temp17 = _temp17.Value;
            }
          } else {
            let _temp18 = AsyncModuleExecutionRejected(m, result.Value);
            Assert(!(_temp18 instanceof AbruptCompletion), "AsyncModuleExecutionRejected(m, result.Value)" + ' returned an abrupt completion');
            /* c8 ignore if */
            if (_temp18 instanceof Completion) {
              _temp18 = _temp18.Value;
            }
          }
        }
      }
    }
    if (!(module.TopLevelCapability instanceof UndefinedValue)) {
      Assert(module.DFSIndex === module.DFSAncestorIndex, "module.DFSIndex === module.DFSAncestorIndex");
      let _temp19 = Call(module.TopLevelCapability.Resolve, Value.undefined, [Value.undefined]);
      Assert(!(_temp19 instanceof AbruptCompletion), "Call(module.TopLevelCapability.Resolve, Value.undefined, [Value.undefined])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp19 instanceof Completion) {
        _temp19 = _temp19.Value;
      }
    }
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-AsyncModuleExecutionRejected */
  AsyncModuleExecutionFulfilled.section = 'https://tc39.es/ecma262/#sec-asyncmodulexecutionfulfilled';
  function AsyncModuleExecutionRejected(module, error) {
    if (module.Status === 'evaluated') {
      Assert(module.EvaluationError !== Value.undefined, "module.EvaluationError !== Value.undefined");
      return Value.undefined;
    }
    Assert(module.Status === 'evaluating-async', "module.Status === 'evaluating-async'");
    Assert(module.EvaluationError === Value.undefined, "module.EvaluationError === Value.undefined");
    module.EvaluationError = ThrowCompletion(error);
    module.AsyncEvaluating = Value.false;
    for (const m of module.AsyncParentModules) {
      if (module.DFSIndex !== module.DFSAncestorIndex) {
        Assert(m.DFSAncestorIndex === module.DFSAncestorIndex, "m.DFSAncestorIndex === module.DFSAncestorIndex");
      }
      let _temp20 = AsyncModuleExecutionRejected(m, error);
      Assert(!(_temp20 instanceof AbruptCompletion), "AsyncModuleExecutionRejected(m, error)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp20 instanceof Completion) {
        _temp20 = _temp20.Value;
      }
    }
    if (!(module.TopLevelCapability instanceof UndefinedValue)) {
      Assert(module.DFSIndex === module.DFSAncestorIndex, "module.DFSIndex === module.DFSAncestorIndex");
      let _temp21 = Call(module.TopLevelCapability.Reject, Value.undefined, [error]);
      Assert(!(_temp21 instanceof AbruptCompletion), "Call(module.TopLevelCapability.Reject, Value.undefined, [error])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp21 instanceof Completion) {
        _temp21 = _temp21.Value;
      }
    }
    return Value.undefined;
  }
  AsyncModuleExecutionRejected.section = 'https://tc39.es/ecma262/#sec-AsyncModuleExecutionRejected';
  function getRecordWithSpecifier(loadedModules, specifier) {
    for (const record of loadedModules) {
      if (record.Specifier.stringValue() === specifier.stringValue()) {
        return record;
      }
    }
    return undefined;
  }

  /** https://tc39.es/ecma262/#sec-GetImportedModule */
  function GetImportedModule(referrer, specifier) {
    const record = getRecordWithSpecifier(referrer.LoadedModules, specifier);
    Assert(record !== undefined, "record !== undefined");
    return record.Module;
  }

  /** https://tc39.es/ecma262/#sec-FinishLoadingImportedModule */
  function FinishLoadingImportedModule(referrer, specifier, result, state) {
    // 1. If result is a normal completion, then
    if (result.Type === 'normal') {
      // a. If referrer.[[LoadedModules]] contains a Record whose [[Specifier]] is specifier, then
      const record = getRecordWithSpecifier(referrer.LoadedModules, specifier);
      if (record !== undefined) {
        // i. Assert: That Record's [[Module]] is result.[[Value]].
        Assert(record.Module === result.Value, "record.Module === result.Value");
      } else {
        // b. Else, append the Record { [[Specifier]]: specifier, [[Module]]: result.[[Value]] } to referrer.[[LoadedModules]].
        referrer.LoadedModules.push({
          Specifier: specifier,
          Module: result.Value
        });
      }
    }

    // 2. If payload is a GraphLoadingState Record, then
    if (state instanceof GraphLoadingState) {
      // a. Perform ContinueModuleLoading(payload, result).
      ContinueModuleLoading(state, result);
      // 3. Else,
    } else {
      // a. Perform ContinueDynamicImport(payload, result).
      ContinueDynamicImport(state, result);
    }

    // 4. Return unused.
  }

  /** https://tc39.es/ecma262/#sec-getmodulenamespace */
  function GetModuleNamespace(module) {
    // 1. Assert: If module is a Cyclic Module Record, then module.[[Status]] is not new or unlinked.
    if (module instanceof CyclicModuleRecord) {
      Assert(module.Status !== 'new' && module.Status !== 'unlinked', "module.Status !== 'new' && module.Status !== 'unlinked'");
    }
    // 2. Let namespace be module.[[Namespace]].
    let namespace = module.Namespace;
    // 3. If namespace is empty, then
    if (namespace === Value.undefined) {
      // a. Let exportedNames be module.GetExportedNames().
      const exportedNames = module.GetExportedNames();
      // b. Let unambiguousNames be a new empty List.
      const unambiguousNames = [];
      // c. For each element name of exportedNames, do
      for (const name of exportedNames) {
        // i. Let resolution be module.ResolveExport(name).
        const resolution = module.ResolveExport(name);
        // ii. If resolution is a ResolvedBinding Record, append name to unambiguousNames.
        if (resolution instanceof ResolvedBindingRecord) {
          unambiguousNames.push(name);
        }
      }
      // d. Set namespace to ModuleNamespaceCreate(module, unambiguousNames).
      namespace = ModuleNamespaceCreate(module, unambiguousNames);
    }
    // 4. Return namespace.
    return namespace;
  }
  function CreateSyntheticModule(exportNames, evaluationSteps, realm, hostDefined) {
    // 1. Return Synthetic Module Record {
    //      [[Realm]]: realm,
    //      [[Environment]]: undefined,
    //      [[Namespace]]: undefined,
    //      [[HostDefined]]: hostDefined,
    //      [[ExportNames]]: exportNames,
    //      [[EvaluationSteps]]: evaluationSteps
    //    }.
    return new SyntheticModuleRecord({
      Realm: realm,
      Environment: Value.undefined,
      Namespace: Value.undefined,
      HostDefined: hostDefined,
      ExportNames: exportNames,
      EvaluationSteps: evaluationSteps
    });
  }

  /** https://tc39.es/ecma262/#sec-create-default-export-synthetic-module */
  function CreateDefaultExportSyntheticModule(defaultExport, realm, hostDefined) {
    // 1. Let closure be the a Abstract Closure with parameters (module) that captures defaultExport and performs the following steps when called:
    const closure = module => {
      // eslint-disable-line arrow-body-style
      // a. Return module.SetSyntheticExport("default", defaultExport).
      return module.SetSyntheticExport(Value('default'), defaultExport);
    };
    // 2. Return CreateSyntheticModule(« "default" », closure, realm)
    return CreateSyntheticModule([Value('default')], closure, realm, hostDefined);
  }

  // @ts-nocheck

  class AssertError extends Error {}
  function Assert(invariant, source) {
    /* c8 ignore next */
    if (!invariant) {
      throw new AssertError(source);
    }
  }

  /** https://tc39.es/ecma262/#sec-requireinternalslot */
  function RequireInternalSlot(O, internalSlot) {
    if (!(O instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', O);
    }
    if (!(internalSlot in O)) {
      return exports.surroundingAgent.Throw('TypeError', 'InternalSlotMissing', O, internalSlot);
    }
  }
  function sourceTextMatchedBy(node) {
    return node.sourceText();
  }

  // An ECMAScript Script syntactic unit may be processed using either unrestricted or strict mode syntax and semantics.
  // Code is interpreted as strict mode code in the following situations:
  //
  //  - Global code is strict mode code if it begins with a Directive Prologue that contains a Use Strict Directive.
  //
  //  - Module code is always strict mode code.
  //
  //  - All parts of a ClassDeclaration or a ClassExpression are strict mode code.
  //
  //  - Eval code is strict mode code if it begins with a Directive Prologue that contains a Use Strict Directive or
  //    if the call to eval is a direct eval that is contained in strict mode code.
  //
  //  - Function code is strict mode code if the associated FunctionDeclaration, FunctionExpression, GeneratorDeclaration,
  //    GeneratorExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, AsyncGeneratorDeclaration,
  //    AsyncGeneratorExpression, MethodDefinition, ArrowFunction, or AsyncArrowFunction is contained in strict mode code
  //    or if the code that produces the value of the function's [[ECMAScriptCode]] internal slot begins with a Directive
  //    Prologue that contains a Use Strict Directive.
  //
  //  - Function code that is supplied as the arguments to the built-in Function, Generator, AsyncFunction, and
  //    AsyncGenerator constructors is strict mode code if the last argument is a String that when processed is a
  //    FunctionBody that begins with a Directive Prologue that contains a Use Strict Directive.
  function isStrictModeCode(node) {
    return node.strict;
  }

  // This file covers abstract operations defined in
  /** https://tc39.es/ecma262/#sec-operations-on-objects */

  /** https://tc39.es/ecma262/#sec-makebasicobject */
  function MakeBasicObject(internalSlotsList) {
    // 1.  Assert: internalSlotsList is a List of internal slot names.
    Assert(isArray(internalSlotsList), "isArray(internalSlotsList)");
    // 2.  Let obj be a newly created object with an internal slot for each name in internalSlotsList.
    // 3.  Set obj's essential internal methods to the default ordinary object definitions specified in 9.1.
    const obj = new ObjectValue(internalSlotsList);
    Object.assign(obj, internalSlotsList.reduce((extraFields, currentField) => {
      extraFields[currentField] = Value.undefined;
      return extraFields;
    }, {}));
    // 4.  Assert: If the caller will not be overriding both obj's [[GetPrototypeOf]] and [[SetPrototypeOf]] essential internal methods, then internalSlotsList contains [[Prototype]].
    // 5.  Assert: If the caller will not be overriding all of obj's [[SetPrototypeOf]], [[IsExtensible]], and [[PreventExtensions]] essential internal methods, then internalSlotsList contains [[Extensible]].
    // 6.  If internalSlotsList contains [[Extensible]], then set obj.[[Extensible]] to true.
    if (internalSlotsList.includes('Extensible')) {
      obj.Extensible = Value.true;
    }
    // 7.  Return obj.
    return obj;
  }

  /** https://tc39.es/ecma262/#sec-get-o-p */
  function Get(O, P) {
    Assert(O instanceof ObjectValue, "O instanceof ObjectValue");
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    // TODO: This should just return Q(O.Get(P, O))
    let _temp = O.Get(P, O);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    return NormalCompletion(_temp);
  }

  /** https://tc39.es/ecma262/#sec-getv */
  function GetV(V, P) {
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    let _temp2 = ToObject(V);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const O = _temp2;
    return O.Get(P, V);
  }

  /** https://tc39.es/ecma262/#sec-set-o-p-v-throw */
  function Set$1(O, P, V, Throw) {
    Assert(O instanceof ObjectValue, "O instanceof ObjectValue");
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    Assert(Throw instanceof BooleanValue, "Throw instanceof BooleanValue");
    let _temp3 = O.Set(P, V, O);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const success = _temp3;
    if (success === Value.false && Throw === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'CannotSetProperty', P, O);
    }
    return success;
  }

  /** https://tc39.es/ecma262/#sec-createdataproperty */
  function CreateDataProperty(O, P, V) {
    Assert(O instanceof ObjectValue, "O instanceof ObjectValue");
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    const newDesc = exports.Descriptor({
      Value: V,
      Writable: Value.true,
      Enumerable: Value.true,
      Configurable: Value.true
    });
    return O.DefineOwnProperty(P, newDesc);
  }

  /** https://tc39.es/ecma262/#sec-createmethodproperty */
  function CreateMethodProperty(O, P, V) {
    Assert(O instanceof ObjectValue, "O instanceof ObjectValue");
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    const newDesc = exports.Descriptor({
      Value: V,
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.true
    });
    return O.DefineOwnProperty(P, newDesc);
  }

  /** https://tc39.es/ecma262/#sec-createdatapropertyorthrow */
  function CreateDataPropertyOrThrow(O, P, V) {
    Assert(O instanceof ObjectValue, "O instanceof ObjectValue");
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    let _temp4 = CreateDataProperty(O, P, V);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const success = _temp4;
    if (success === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'CannotDefineProperty', P);
    }
    return success;
  }

  /** https://tc39.es/ecma262/#sec-definepropertyorthrow */
  function DefinePropertyOrThrow(O, P, desc) {
    Assert(O instanceof ObjectValue, "O instanceof ObjectValue");
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    let _temp5 = O.DefineOwnProperty(P, desc);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const success = _temp5;
    if (success === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'CannotDefineProperty', P);
    }
    return success;
  }

  /** https://tc39.es/ecma262/#sec-deletepropertyorthrow */
  function DeletePropertyOrThrow(O, P) {
    Assert(O instanceof ObjectValue, "O instanceof ObjectValue");
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    let _temp6 = O.Delete(P);
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const success = _temp6;
    if (success === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'CannotDeleteProperty', P);
    }
    return success;
  }

  /** https://tc39.es/ecma262/#sec-getmethod */
  function GetMethod(V, P) {
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    let _temp7 = GetV(V, P);
    /* c8 ignore if */
    if (_temp7 instanceof AbruptCompletion) {
      return _temp7;
    }
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    const func = _temp7;
    if (func === Value.null || func === Value.undefined) {
      return Value.undefined;
    }
    if (IsCallable(func) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', func);
    }
    return func;
  }

  /** https://tc39.es/ecma262/#sec-hasproperty */
  function HasProperty(O, P) {
    Assert(O instanceof ObjectValue, "O instanceof ObjectValue");
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    return O.HasProperty(P);
  }

  /** https://tc39.es/ecma262/#sec-hasownproperty */
  function HasOwnProperty(O, P) {
    Assert(O instanceof ObjectValue, "O instanceof ObjectValue");
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    let _temp8 = O.GetOwnProperty(P);
    /* c8 ignore if */
    if (_temp8 instanceof AbruptCompletion) {
      return _temp8;
    }
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    const desc = _temp8;
    if (desc === Value.undefined) {
      return Value.false;
    }
    return Value.true;
  }

  /** https://tc39.es/ecma262/#sec-call */
  function Call(F, V, argumentsList) {
    if (!argumentsList) {
      argumentsList = [];
    }
    Assert(argumentsList.every(a => a instanceof Value), "argumentsList.every((a) => a instanceof Value)");
    if (IsCallable(F) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', F);
    }
    let _temp9 = F.Call(V, argumentsList);
    /* c8 ignore if */
    if (_temp9 instanceof AbruptCompletion) {
      return _temp9;
    }
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    return EnsureCompletion(_temp9);
  }

  /** https://tc39.es/ecma262/#sec-construct */
  function Construct(F, argumentsList, newTarget) {
    if (!newTarget) {
      newTarget = F;
    }
    if (!argumentsList) {
      argumentsList = [];
    }
    Assert(IsConstructor(F) === Value.true, "IsConstructor(F) === Value.true");
    Assert(IsConstructor(newTarget) === Value.true, "IsConstructor(newTarget) === Value.true");
    return F.Construct(argumentsList, newTarget);
  }

  /** https://tc39.es/ecma262/#sec-setintegritylevel */
  function SetIntegrityLevel(O, level) {
    Assert(O instanceof ObjectValue, "O instanceof ObjectValue");
    Assert(level === 'sealed' || level === 'frozen', "level === 'sealed' || level === 'frozen'");
    let _temp10 = O.PreventExtensions();
    /* c8 ignore if */
    if (_temp10 instanceof AbruptCompletion) {
      return _temp10;
    }
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    const status = _temp10;
    if (status === Value.false) {
      return Value.false;
    }
    let _temp11 = O.OwnPropertyKeys();
    /* c8 ignore if */
    if (_temp11 instanceof AbruptCompletion) {
      return _temp11;
    }
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    const keys = _temp11;
    if (level === 'sealed') {
      for (const k of keys) {
        let _temp12 = DefinePropertyOrThrow(O, k, exports.Descriptor({
          Configurable: Value.false
        }));
        /* c8 ignore if */
        if (_temp12 instanceof AbruptCompletion) {
          return _temp12;
        }
        /* c8 ignore if */
        if (_temp12 instanceof Completion) {
          _temp12 = _temp12.Value;
        }
      }
    } else if (level === 'frozen') {
      for (const k of keys) {
        let _temp13 = O.GetOwnProperty(k);
        /* c8 ignore if */
        if (_temp13 instanceof AbruptCompletion) {
          return _temp13;
        }
        /* c8 ignore if */
        if (_temp13 instanceof Completion) {
          _temp13 = _temp13.Value;
        }
        const currentDesc = _temp13;
        if (currentDesc !== Value.undefined) {
          let desc;
          if (IsAccessorDescriptor(currentDesc) === true) {
            desc = exports.Descriptor({
              Configurable: Value.false
            });
          } else {
            desc = exports.Descriptor({
              Configurable: Value.false,
              Writable: Value.false
            });
          }
          let _temp14 = DefinePropertyOrThrow(O, k, desc);
          /* c8 ignore if */
          if (_temp14 instanceof AbruptCompletion) {
            return _temp14;
          }
          /* c8 ignore if */
          if (_temp14 instanceof Completion) {
            _temp14 = _temp14.Value;
          }
        }
      }
    }
    return Value.true;
  }

  /** https://tc39.es/ecma262/#sec-testintegritylevel */
  function TestIntegrityLevel(O, level) {
    Assert(O instanceof ObjectValue, "O instanceof ObjectValue");
    Assert(level === 'sealed' || level === 'frozen', "level === 'sealed' || level === 'frozen'");
    let _temp15 = IsExtensible(O);
    /* c8 ignore if */
    if (_temp15 instanceof AbruptCompletion) {
      return _temp15;
    }
    /* c8 ignore if */
    if (_temp15 instanceof Completion) {
      _temp15 = _temp15.Value;
    }
    const extensible = _temp15;
    if (extensible === Value.true) {
      return Value.false;
    }
    let _temp16 = O.OwnPropertyKeys();
    /* c8 ignore if */
    if (_temp16 instanceof AbruptCompletion) {
      return _temp16;
    }
    /* c8 ignore if */
    if (_temp16 instanceof Completion) {
      _temp16 = _temp16.Value;
    }
    const keys = _temp16;
    for (const k of keys) {
      let _temp17 = O.GetOwnProperty(k);
      /* c8 ignore if */
      if (_temp17 instanceof AbruptCompletion) {
        return _temp17;
      }
      /* c8 ignore if */
      if (_temp17 instanceof Completion) {
        _temp17 = _temp17.Value;
      }
      const currentDesc = _temp17;
      if (!(currentDesc instanceof UndefinedValue)) {
        if (currentDesc.Configurable === Value.true) {
          return Value.false;
        }
        if (level === 'frozen' && IsDataDescriptor(currentDesc)) {
          if (currentDesc.Writable === Value.true) {
            return Value.false;
          }
        }
      }
    }
    return Value.true;
  }

  /** https://tc39.es/ecma262/#sec-createarrayfromlist */
  function CreateArrayFromList(elements) {
    // 1. Assert: elements is a List whose elements are all ECMAScript language values.
    Assert(elements.every(e => e instanceof Value), "elements.every((e) => e instanceof Value)");
    // 2. Let array be ! ArrayCreate(0).
    let _temp18 = ArrayCreate(0);
    Assert(!(_temp18 instanceof AbruptCompletion), "ArrayCreate(0)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp18 instanceof Completion) {
      _temp18 = _temp18.Value;
    }
    const array = _temp18;
    // 3. Let n be 0.
    let n = 0;
    // 4. For each element e of elements, do
    for (const e of elements) {
      let _temp20 = ToString(F(n));
      Assert(!(_temp20 instanceof AbruptCompletion), "ToString(toNumberValue(n))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp20 instanceof Completion) {
        _temp20 = _temp20.Value;
      }
      let _temp19 = CreateDataPropertyOrThrow(array, _temp20, e);
      Assert(!(_temp19 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(array, X(ToString(toNumberValue(n))), e)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp19 instanceof Completion) {
        _temp19 = _temp19.Value;
      }
      // b. Set n to n + 1.
      n += 1;
    }
    // 5. Return array.
    return array;
  }

  /** https://tc39.es/ecma262/#sec-lengthofarraylike */
  function LengthOfArrayLike(obj) {
    // 1. Assert: Type(obj) is Object.
    Assert(obj instanceof ObjectValue, "obj instanceof ObjectValue");
    // 2. Return ℝ(? ToLength(? Get(obj, "length"))).
    let _temp22 = Get(obj, Value('length'));
    /* c8 ignore if */
    if (_temp22 instanceof AbruptCompletion) {
      return _temp22;
    }
    /* c8 ignore if */
    if (_temp22 instanceof Completion) {
      _temp22 = _temp22.Value;
    }
    let _temp21 = ToLength(_temp22);
    /* c8 ignore if */
    if (_temp21 instanceof AbruptCompletion) {
      return _temp21;
    }
    /* c8 ignore if */
    if (_temp21 instanceof Completion) {
      _temp21 = _temp21.Value;
    }
    return R(_temp21);
  }

  /** https://tc39.es/ecma262/#sec-createlistfromarraylike */
  function CreateListFromArrayLike(obj, elementTypes) {
    // 1. If elementTypes is not present, set elementTypes to « Undefined, Null, Boolean, String, Symbol, Number, BigInt, Object ».
    if (!elementTypes) {
      elementTypes = ['Undefined', 'Null', 'Boolean', 'String', 'Symbol', 'Number', 'BigInt', 'Object'];
    }
    // 2. If Type(obj) is not Object, throw a TypeError exception.
    if (!(obj instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', obj);
    }
    // 3. Let len be ? LengthOfArrayLike(obj).
    let _temp23 = LengthOfArrayLike(obj);
    /* c8 ignore if */
    if (_temp23 instanceof AbruptCompletion) {
      return _temp23;
    }
    /* c8 ignore if */
    if (_temp23 instanceof Completion) {
      _temp23 = _temp23.Value;
    }
    const len = _temp23;
    // 4. Let list be a new empty List.
    const list = [];
    // 5. Let index be 0.
    let index = 0;
    // 6. Repeat, while index < len,
    while (index < len) {
      let _temp24 = ToString(F(index));
      Assert(!(_temp24 instanceof AbruptCompletion), "ToString(toNumberValue(index))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp24 instanceof Completion) {
        _temp24 = _temp24.Value;
      }
      // a. Let indexName be ! ToString(𝔽(index)).
      const indexName = _temp24;
      // b. Let next be ? Get(obj, indexName).
      let _temp25 = Get(obj, indexName);
      /* c8 ignore if */
      if (_temp25 instanceof AbruptCompletion) {
        return _temp25;
      }
      /* c8 ignore if */
      if (_temp25 instanceof Completion) {
        _temp25 = _temp25.Value;
      }
      const next = _temp25;
      // c. If Type(next) is not an element of elementTypes, throw a TypeError exception.
      if (!elementTypes.includes(Type(next))) {
        return exports.surroundingAgent.Throw('TypeError', 'NotPropertyName', next);
      }
      // d. Append next as the last element of list.
      list.push(next);
      // e. Set index to index + 1.
      index += 1;
    }
    // 7. Return list.
    return list;
  }

  /** https://tc39.es/ecma262/#sec-invoke */
  function Invoke(V, P, argumentsList) {
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    if (!argumentsList) {
      argumentsList = [];
    }
    let _temp26 = GetV(V, P);
    /* c8 ignore if */
    if (_temp26 instanceof AbruptCompletion) {
      return _temp26;
    }
    /* c8 ignore if */
    if (_temp26 instanceof Completion) {
      _temp26 = _temp26.Value;
    }
    const func = _temp26;
    return Call(func, V, argumentsList);
  }

  /** https://tc39.es/ecma262/#sec-ordinaryhasinstance */
  function OrdinaryHasInstance(C, O) {
    if (IsCallable(C) === Value.false) {
      return Value.false;
    }
    if ('BoundTargetFunction' in C) {
      const BC = C.BoundTargetFunction;
      return InstanceofOperator(O, BC);
    }
    if (!(O instanceof ObjectValue)) {
      return Value.false;
    }
    let _temp27 = Get(C, Value('prototype'));
    /* c8 ignore if */
    if (_temp27 instanceof AbruptCompletion) {
      return _temp27;
    }
    /* c8 ignore if */
    if (_temp27 instanceof Completion) {
      _temp27 = _temp27.Value;
    }
    const P = _temp27;
    if (!(P instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', P);
    }
    while (true) {
      let _temp28 = O.GetPrototypeOf();
      /* c8 ignore if */
      if (_temp28 instanceof AbruptCompletion) {
        return _temp28;
      }
      /* c8 ignore if */
      if (_temp28 instanceof Completion) {
        _temp28 = _temp28.Value;
      }
      O = _temp28;
      if (O instanceof NullValue) {
        return Value.false;
      }
      if (SameValue(P, O) === Value.true) {
        return Value.true;
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-speciesconstructor */
  function SpeciesConstructor(O, defaultConstructor) {
    Assert(O instanceof ObjectValue, "O instanceof ObjectValue");
    let _temp29 = Get(O, Value('constructor'));
    /* c8 ignore if */
    if (_temp29 instanceof AbruptCompletion) {
      return _temp29;
    }
    /* c8 ignore if */
    if (_temp29 instanceof Completion) {
      _temp29 = _temp29.Value;
    }
    const C = _temp29;
    if (C === Value.undefined) {
      return defaultConstructor;
    }
    if (!(C instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', C);
    }
    let _temp30 = Get(C, wellKnownSymbols.species);
    /* c8 ignore if */
    if (_temp30 instanceof AbruptCompletion) {
      return _temp30;
    }
    /* c8 ignore if */
    if (_temp30 instanceof Completion) {
      _temp30 = _temp30.Value;
    }
    const S = _temp30;
    if (S === Value.undefined || S === Value.null) {
      return defaultConstructor;
    }
    if (IsConstructor(S) === Value.true) {
      return S;
    }
    return exports.surroundingAgent.Throw('TypeError', 'SpeciesNotConstructor');
  }

  /** https://tc39.es/ecma262/#sec-enumerableownpropertynames */
  function EnumerableOwnPropertyNames(O, kind) {
    Assert(O instanceof ObjectValue, "O instanceof ObjectValue");
    let _temp31 = O.OwnPropertyKeys();
    /* c8 ignore if */
    if (_temp31 instanceof AbruptCompletion) {
      return _temp31;
    }
    /* c8 ignore if */
    if (_temp31 instanceof Completion) {
      _temp31 = _temp31.Value;
    }
    const ownKeys = _temp31;
    const properties = [];
    for (const key of ownKeys) {
      if (key instanceof JSStringValue) {
        let _temp32 = O.GetOwnProperty(key);
        /* c8 ignore if */
        if (_temp32 instanceof AbruptCompletion) {
          return _temp32;
        }
        /* c8 ignore if */
        if (_temp32 instanceof Completion) {
          _temp32 = _temp32.Value;
        }
        const desc = _temp32;
        if (!(desc instanceof UndefinedValue) && desc.Enumerable === Value.true) {
          if (kind === 'key') {
            properties.push(key);
          } else {
            let _temp33 = Get(O, key);
            /* c8 ignore if */
            if (_temp33 instanceof AbruptCompletion) {
              return _temp33;
            }
            /* c8 ignore if */
            if (_temp33 instanceof Completion) {
              _temp33 = _temp33.Value;
            }
            const value = _temp33;
            if (kind === 'value') {
              properties.push(value);
            } else {
              Assert(kind === 'key+value', "kind === 'key+value'");
              let _temp34 = CreateArrayFromList([key, value]);
              Assert(!(_temp34 instanceof AbruptCompletion), "CreateArrayFromList([key, value])" + ' returned an abrupt completion');
              /* c8 ignore if */
              if (_temp34 instanceof Completion) {
                _temp34 = _temp34.Value;
              }
              const entry = _temp34;
              properties.push(entry);
            }
          }
        }
      }
    }
    return properties;
  }

  /** https://tc39.es/ecma262/#sec-getfunctionrealm */
  function GetFunctionRealm(obj) {
    let _temp35 = IsCallable(obj);
    Assert(!(_temp35 instanceof AbruptCompletion), "IsCallable(obj)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp35 instanceof Completion) {
      _temp35 = _temp35.Value;
    }
    Assert(_temp35 === Value.true, "X(IsCallable(obj)) === Value.true");
    if ('Realm' in obj) {
      return obj.Realm;
    }
    if ('BoundTargetFunction' in obj) {
      const target = obj.BoundTargetFunction;
      return GetFunctionRealm(target);
    }
    if (isProxyExoticObject(obj)) {
      if (obj.ProxyHandler === Value.null) {
        return exports.surroundingAgent.Throw('TypeError', 'ProxyRevoked', 'GetFunctionRealm');
      }
      const proxyTarget = obj.ProxyTarget;
      return GetFunctionRealm(proxyTarget);
    }
    return exports.surroundingAgent.currentRealmRecord;
  }

  /** https://tc39.es/ecma262/#sec-copydataproperties */
  function CopyDataProperties(target, source, excludedItems) {
    Assert(target instanceof ObjectValue, "target instanceof ObjectValue");
    Assert(excludedItems.every(i => IsPropertyKey(i)), "excludedItems.every((i) => IsPropertyKey(i))");
    if (source === Value.undefined || source === Value.null) {
      return target;
    }
    let _temp36 = ToObject(source);
    Assert(!(_temp36 instanceof AbruptCompletion), "ToObject(source)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp36 instanceof Completion) {
      _temp36 = _temp36.Value;
    }
    const from = _temp36;
    let _temp37 = from.OwnPropertyKeys();
    /* c8 ignore if */
    if (_temp37 instanceof AbruptCompletion) {
      return _temp37;
    }
    /* c8 ignore if */
    if (_temp37 instanceof Completion) {
      _temp37 = _temp37.Value;
    }
    const keys = _temp37;
    for (const nextKey of keys) {
      let excluded = false;
      for (const e of excludedItems) {
        if (SameValue(e, nextKey) === Value.true) {
          excluded = true;
        }
      }
      if (excluded === false) {
        let _temp38 = from.GetOwnProperty(nextKey);
        /* c8 ignore if */
        if (_temp38 instanceof AbruptCompletion) {
          return _temp38;
        }
        /* c8 ignore if */
        if (_temp38 instanceof Completion) {
          _temp38 = _temp38.Value;
        }
        const desc = _temp38;
        if (desc !== Value.undefined && desc.Enumerable === Value.true) {
          let _temp39 = Get(from, nextKey);
          /* c8 ignore if */
          if (_temp39 instanceof AbruptCompletion) {
            return _temp39;
          }
          /* c8 ignore if */
          if (_temp39 instanceof Completion) {
            _temp39 = _temp39.Value;
          }
          const propValue = _temp39;
          let _temp40 = CreateDataProperty(target, nextKey, propValue);
          Assert(!(_temp40 instanceof AbruptCompletion), "CreateDataProperty(target, nextKey, propValue)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp40 instanceof Completion) {
            _temp40 = _temp40.Value;
          }
        }
      }
    }
    return target;
  }

  // 9.1.1.1 OrdinaryGetPrototypeOf
  function OrdinaryGetPrototypeOf(O) {
    return O.Prototype;
  }

  // 9.1.2.1 OrdinarySetPrototypeOf
  function OrdinarySetPrototypeOf(O, V) {
    Assert(V instanceof ObjectValue || V instanceof NullValue, "V instanceof ObjectValue || V instanceof NullValue");
    const current = O.Prototype;
    if (SameValue(V, current) === Value.true) {
      return Value.true;
    }
    const extensible = O.Extensible;
    if (extensible === Value.false) {
      return Value.false;
    }
    let p = V;
    let done = false;
    while (done === false) {
      if (p === Value.null) {
        done = true;
      } else if (SameValue(p, O) === Value.true) {
        return Value.false;
      } else if (p.GetPrototypeOf !== ObjectValue.prototype.GetPrototypeOf) {
        done = true;
      } else {
        p = p.Prototype;
      }
    }
    O.Prototype = V;
    return Value.true;
  }

  // 9.1.3.1 OrdinaryIsExtensible
  function OrdinaryIsExtensible(O) {
    return O.Extensible;
  }

  // 9.1.4.1 OrdinaryPreventExtensions
  function OrdinaryPreventExtensions(O) {
    O.Extensible = Value.false;
    return Value.true;
  }

  // 9.1.5.1 OrdinaryGetOwnProperty
  function OrdinaryGetOwnProperty(O, P) {
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    if (!O.properties.has(P)) {
      return Value.undefined;
    }
    const D = exports.Descriptor({});
    const x = O.properties.get(P);
    if (IsDataDescriptor(x)) {
      D.Value = x.Value;
      D.Writable = x.Writable;
    } else if (IsAccessorDescriptor(x)) {
      D.Get = x.Get;
      D.Set = x.Set;
    }
    D.Enumerable = x.Enumerable;
    D.Configurable = x.Configurable;
    return D;
  }

  // 9.1.6.1 OrdinaryDefineOwnProperty
  function OrdinaryDefineOwnProperty(O, P, Desc) {
    let _temp = O.GetOwnProperty(P);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const current = _temp;
    let _temp2 = IsExtensible(O);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const extensible = _temp2;
    return ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc, current);
  }

  /** https://tc39.es/ecma262/#sec-iscompatiblepropertydescriptor */
  function IsCompatiblePropertyDescriptor(Extensible, Desc, Current) {
    return ValidateAndApplyPropertyDescriptor(Value.undefined, Value.undefined, Extensible, Desc, Current);
  }

  // 9.1.6.3 ValidateAndApplyPropertyDescriptor
  function ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc, current) {
    Assert(O === Value.undefined || IsPropertyKey(P), "O === Value.undefined || IsPropertyKey(P)");
    if (current === Value.undefined) {
      if (extensible === Value.false) {
        return Value.false;
      }
      Assert(extensible === Value.true, "extensible === Value.true");
      if (IsGenericDescriptor(Desc) || IsDataDescriptor(Desc)) {
        if (!(O instanceof UndefinedValue)) {
          O.properties.set(P, exports.Descriptor({
            Value: Desc.Value === undefined ? Value.undefined : Desc.Value,
            Writable: Desc.Writable === undefined ? Value.false : Desc.Writable,
            Enumerable: Desc.Enumerable === undefined ? Value.false : Desc.Enumerable,
            Configurable: Desc.Configurable === undefined ? Value.false : Desc.Configurable
          }));
        }
      } else {
        Assert(IsAccessorDescriptor(Desc), "IsAccessorDescriptor(Desc)");
        if (!(O instanceof UndefinedValue)) {
          O.properties.set(P, exports.Descriptor({
            Get: Desc.Get === undefined ? Value.undefined : Desc.Get,
            Set: Desc.Set === undefined ? Value.undefined : Desc.Set,
            Enumerable: Desc.Enumerable === undefined ? Value.false : Desc.Enumerable,
            Configurable: Desc.Configurable === undefined ? Value.false : Desc.Configurable
          }));
        }
      }
      return Value.true;
    }
    if (Desc.everyFieldIsAbsent()) {
      return Value.true;
    }
    if (current.Configurable === Value.false) {
      if (Desc.Configurable !== undefined && Desc.Configurable === Value.true) {
        return Value.false;
      }
      if (Desc.Enumerable !== undefined && Desc.Enumerable !== current.Enumerable) {
        return Value.false;
      }
    }
    if (IsGenericDescriptor(Desc)) ; else if (IsDataDescriptor(current) !== IsDataDescriptor(Desc)) {
      if (current.Configurable === Value.false) {
        return Value.false;
      }
      if (IsDataDescriptor(current)) {
        if (!(O instanceof UndefinedValue)) {
          const entry = O.properties.get(P);
          entry.Value = undefined;
          entry.Writable = undefined;
          entry.Get = Value.undefined;
          entry.Set = Value.undefined;
        }
      } else {
        if (!(O instanceof UndefinedValue)) {
          const entry = O.properties.get(P);
          entry.Get = undefined;
          entry.Set = undefined;
          entry.Value = Value.undefined;
          entry.Writable = Value.false;
        }
      }
    } else if (IsDataDescriptor(current) && IsDataDescriptor(Desc)) {
      if (current.Configurable === Value.false && current.Writable === Value.false) {
        if (Desc.Writable !== undefined && Desc.Writable === Value.true) {
          return Value.false;
        }
        if (Desc.Value !== undefined && SameValue(Desc.Value, current.Value) === Value.false) {
          return Value.false;
        }
        return Value.true;
      }
    } else {
      Assert(IsAccessorDescriptor(current) && IsAccessorDescriptor(Desc), "IsAccessorDescriptor(current) && IsAccessorDescriptor(Desc)");
      if (current.Configurable === Value.false) {
        if (Desc.Set !== undefined && SameValue(Desc.Set, current.Set) === Value.false) {
          return Value.false;
        }
        if (Desc.Get !== undefined && SameValue(Desc.Get, current.Get) === Value.false) {
          return Value.false;
        }
        return Value.true;
      }
    }
    if (!(O instanceof UndefinedValue)) {
      const target = O.properties.get(P);
      if (Desc.Value !== undefined) {
        target.Value = Desc.Value;
      }
      if (Desc.Writable !== undefined) {
        target.Writable = Desc.Writable;
      }
      if (Desc.Get !== undefined) {
        target.Get = Desc.Get;
      }
      if (Desc.Set !== undefined) {
        target.Set = Desc.Set;
      }
      if (Desc.Enumerable !== undefined) {
        target.Enumerable = Desc.Enumerable;
      }
      if (Desc.Configurable !== undefined) {
        target.Configurable = Desc.Configurable;
      }
    }
    return Value.true;
  }

  // 9.1.7.1 OrdinaryHasProperty
  function OrdinaryHasProperty(O, P) {
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    let _temp3 = O.GetOwnProperty(P);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const hasOwn = _temp3;
    if (!(hasOwn instanceof UndefinedValue)) {
      return Value.true;
    }
    let _temp4 = O.GetPrototypeOf();
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const parent = _temp4;
    if (!(parent instanceof NullValue)) {
      return parent.HasProperty(P);
    }
    return Value.false;
  }

  // 9.1.8.1
  function OrdinaryGet(O, P, Receiver) {
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    let _temp5 = O.GetOwnProperty(P);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const desc = _temp5;
    if (desc instanceof UndefinedValue) {
      let _temp6 = O.GetPrototypeOf();
      /* c8 ignore if */
      if (_temp6 instanceof AbruptCompletion) {
        return _temp6;
      }
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
      const parent = _temp6;
      if (parent instanceof NullValue) {
        return Value.undefined;
      }
      return parent.Get(P, Receiver);
    }
    if (IsDataDescriptor(desc)) {
      return desc.Value;
    }
    Assert(IsAccessorDescriptor(desc), "IsAccessorDescriptor(desc)");
    const getter = desc.Get;
    if (getter instanceof UndefinedValue) {
      return Value.undefined;
    }
    return Call(getter, Receiver);
  }

  // 9.1.9.1 OrdinarySet
  function OrdinarySet(O, P, V, Receiver) {
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    let _temp7 = O.GetOwnProperty(P);
    /* c8 ignore if */
    if (_temp7 instanceof AbruptCompletion) {
      return _temp7;
    }
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    const ownDesc = _temp7;
    return OrdinarySetWithOwnDescriptor(O, P, V, Receiver, ownDesc);
  }

  // 9.1.9.2 OrdinarySetWithOwnDescriptor
  function OrdinarySetWithOwnDescriptor(O, P, V, Receiver, ownDesc) {
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    if (ownDesc instanceof UndefinedValue) {
      let _temp8 = O.GetPrototypeOf();
      /* c8 ignore if */
      if (_temp8 instanceof AbruptCompletion) {
        return _temp8;
      }
      /* c8 ignore if */
      if (_temp8 instanceof Completion) {
        _temp8 = _temp8.Value;
      }
      const parent = _temp8;
      if (!(parent instanceof NullValue)) {
        return parent.Set(P, V, Receiver);
      }
      ownDesc = exports.Descriptor({
        Value: Value.undefined,
        Writable: Value.true,
        Enumerable: Value.true,
        Configurable: Value.true
      });
    }
    if (IsDataDescriptor(ownDesc)) {
      if (ownDesc.Writable !== undefined && ownDesc.Writable === Value.false) {
        return Value.false;
      }
      if (!(Receiver instanceof ObjectValue)) {
        return Value.false;
      }
      let _temp9 = Receiver.GetOwnProperty(P);
      /* c8 ignore if */
      if (_temp9 instanceof AbruptCompletion) {
        return _temp9;
      }
      /* c8 ignore if */
      if (_temp9 instanceof Completion) {
        _temp9 = _temp9.Value;
      }
      const existingDescriptor = _temp9;
      if (!(existingDescriptor instanceof UndefinedValue)) {
        if (IsAccessorDescriptor(existingDescriptor)) {
          return Value.false;
        }
        if (existingDescriptor.Writable === Value.false) {
          return Value.false;
        }
        const valueDesc = exports.Descriptor({
          Value: V
        });
        return Receiver.DefineOwnProperty(P, valueDesc);
      }
      return CreateDataProperty(Receiver, P, V);
    }
    Assert(IsAccessorDescriptor(ownDesc), "IsAccessorDescriptor(ownDesc)");
    const setter = ownDesc.Set;
    if (setter === undefined || setter instanceof UndefinedValue) {
      return Value.false;
    }
    let _temp10 = Call(setter, Receiver, [V]);
    /* c8 ignore if */
    if (_temp10 instanceof AbruptCompletion) {
      return _temp10;
    }
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    return Value.true;
  }

  // 9.1.10.1 OrdinaryDelete
  function OrdinaryDelete(O, P) {
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    let _temp11 = O.GetOwnProperty(P);
    /* c8 ignore if */
    if (_temp11 instanceof AbruptCompletion) {
      return _temp11;
    }
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    const desc = _temp11;
    if (desc instanceof UndefinedValue) {
      return Value.true;
    }
    if (desc.Configurable === Value.true) {
      O.properties.delete(P);
      return Value.true;
    }
    return Value.false;
  }

  // 9.1.11.1
  function OrdinaryOwnPropertyKeys(O) {
    const keys = [];

    // For each own property key P of O that is an array index, in ascending numeric index order, do
    //   Add P as the last element of keys.
    for (const P of O.properties.keys()) {
      if (isArrayIndex(P)) {
        keys.push(P);
      }
    }
    keys.sort((a, b) => Number.parseInt(a.stringValue(), 10) - Number.parseInt(b.stringValue(), 10));

    // For each own property key P of O such that Type(P) is String and
    // P is not an array index, in ascending chronological order of property creation, do
    //   Add P as the last element of keys.
    for (const P of O.properties.keys()) {
      if (P instanceof JSStringValue && isArrayIndex(P) === false) {
        keys.push(P);
      }
    }

    // For each own property key P of O such that Type(P) is Symbol,
    // in ascending chronological order of property creation, do
    //   Add P as the last element of keys.
    for (const P of O.properties.keys()) {
      if (P instanceof SymbolValue) {
        keys.push(P);
      }
    }
    return keys;
  }

  /** https://tc39.es/ecma262/#sec-ordinaryobjectcreate */
  function OrdinaryObjectCreate(proto, additionalInternalSlotsList) {
    // 1. Let internalSlotsList be « [[Prototype]], [[Extensible]] ».
    const internalSlotsList = ['Prototype', 'Extensible'];
    // 2. If additionalInternalSlotsList is present, append each of its elements to internalSlotsList.
    if (additionalInternalSlotsList !== undefined) {
      internalSlotsList.push(...additionalInternalSlotsList);
    }
    // 3. Let O be ! MakeBasicObject(internalSlotsList).
    let _temp12 = MakeBasicObject(internalSlotsList);
    Assert(!(_temp12 instanceof AbruptCompletion), "MakeBasicObject(internalSlotsList)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp12 instanceof Completion) {
      _temp12 = _temp12.Value;
    }
    const O = _temp12;
    // 4. Set O.[[Prototype]] to proto.
    O.Prototype = proto;
    // 5. Return O.
    return O;
  }

  // 9.1.13 OrdinaryCreateFromConstructor
  function OrdinaryCreateFromConstructor(constructor, intrinsicDefaultProto, internalSlotsList) {
    let _temp13 = GetPrototypeFromConstructor(constructor, intrinsicDefaultProto);
    /* c8 ignore if */
    if (_temp13 instanceof AbruptCompletion) {
      return _temp13;
    }
    /* c8 ignore if */
    if (_temp13 instanceof Completion) {
      _temp13 = _temp13.Value;
    }
    // Assert: intrinsicDefaultProto is a String value that is this specification's name of an intrinsic object.
    const proto = _temp13;
    return OrdinaryObjectCreate(proto, internalSlotsList);
  }

  // 9.1.14 GetPrototypeFromConstructor
  function GetPrototypeFromConstructor(constructor, intrinsicDefaultProto) {
    // Assert: intrinsicDefaultProto is a String value that
    // is this specification's name of an intrinsic object.
    Assert(IsCallable(constructor) === Value.true, "IsCallable(constructor) === Value.true");
    let _temp14 = Get(constructor, Value('prototype'));
    /* c8 ignore if */
    if (_temp14 instanceof AbruptCompletion) {
      return _temp14;
    }
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    let proto = _temp14;
    if (!(proto instanceof ObjectValue)) {
      let _temp15 = GetFunctionRealm(constructor);
      /* c8 ignore if */
      if (_temp15 instanceof AbruptCompletion) {
        return _temp15;
      }
      /* c8 ignore if */
      if (_temp15 instanceof Completion) {
        _temp15 = _temp15.Value;
      }
      const realm = _temp15;
      proto = realm.Intrinsics[intrinsicDefaultProto];
    }
    return proto;
  }

  /** https://tc39.es/ecma262/#sec-privateelementfind */
  function PrivateElementFind(P, O) {
    const entry = O.PrivateElements.find(e => e.Key === P);
    // 1. If O.[[PrivateElements]] contains a PrivateElement whose [[Key]] is P, then
    if (entry) {
      // a. Let entry be that PrivateElement.
      // b. Return entry.
      return entry;
    }
    // 2. Return empty.
    return undefined;
  }

  /** https://tc39.es/ecma262/#sec-privateget */
  function PrivateGet(P, O) {
    let _temp = PrivateElementFind(P, O);
    Assert(!(_temp instanceof AbruptCompletion), "PrivateElementFind(P, O)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 1. Let entry be ! PrivateElementFind(P, O).
    const entry = _temp;
    // 2. If entry is empty, throw a TypeError exception.
    if (entry === undefined) {
      return exports.surroundingAgent.Throw('TypeError', 'UnknownPrivateName', O, P);
    }
    // 3. If entry.[[Kind]] is field or method, then
    if (entry.Kind === 'field' || entry.Kind === 'method') {
      // a. Return entry.[[Value]].
      return entry.Value;
    }
    // 4. Assert: entry.[[Kind]] is accessor.
    Assert(entry.Kind === 'accessor', "entry.Kind === 'accessor'");
    // 5. If entry.[[Get]] is undefined, throw a TypeError exception.
    if (entry.Get === Value.undefined) {
      return exports.surroundingAgent.Throw('TypeError', 'PrivateNameNoGetter', P);
    }
    // 6. Let getter be entry.[[Get]].
    const getter = entry.Get;
    // 7. Return ? Call(getter, O).
    return Call(getter, O);
  }
  function PrivateSet(P, O, value) {
    let _temp2 = PrivateElementFind(P, O);
    Assert(!(_temp2 instanceof AbruptCompletion), "PrivateElementFind(P, O)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 1. Let entry be ! PrivateElementFind(P, O).
    const entry = _temp2;
    // 2. If entry is empty, throw a TypeError exception.
    if (entry === undefined) {
      return exports.surroundingAgent.Throw('TypeError', 'UnknownPrivateName', O, P);
    }
    // 3. If entry.[[Kind]] is field, then
    if (entry.Kind === 'field') {
      // a. Set entry.[[Value]] to value.
      entry.Value = value;
    } else if (entry.Kind === 'method') {
      // 4. Else if entry.[[Kind]] is method, then
      // a. Throw a TypeError exception.
      return exports.surroundingAgent.Throw('TypeError', 'PrivateNameIsMethod', P);
    } else {
      // 5. Else,
      // a. Assert: entry.[[Kind]] is accessor.
      Assert(entry.Kind === 'accessor', "entry.Kind === 'accessor'");
      // b. If entry.[[Set]] is undefined, throw a TypeError exception.
      if (entry.Set === Value.undefined) {
        return exports.surroundingAgent.Throw('TypeError', 'PrivateNameNoSetter', P);
      }
      // c. Let setter be entry.[[Set]].
      const setter = entry.Set;
      // d. Perform ? Call(setter, O, « value »).
      let _temp3 = Call(setter, O, [value]);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-privatemethodoraccessoradd */
  function PrivateMethodOrAccessorAdd(method, O) {
    // 1. Assert: method.[[Kind]] is either method or accessor.
    Assert(method.Kind === 'method' || method.Kind === 'accessor', "method.Kind === 'method' || method.Kind === 'accessor'");
    // 2. Let entry be ! PrivateElementFind(method.[[Key]], O).
    let _temp4 = PrivateElementFind(method.Key, O);
    Assert(!(_temp4 instanceof AbruptCompletion), "PrivateElementFind(method.Key, O)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const entry = _temp4;
    // 3. If entry is not empty, throw a TypeError exception.
    if (entry !== undefined) {
      return exports.surroundingAgent.Throw('TypeError', 'AlreadyDeclared', method.Key);
    }
    // 4. Append method to O.[[PrivateElements]].
    O.PrivateElements.push(method);
    // 5. NOTE: The values for private methods and accessors are shared across instances.
    //          This step does not create a new copy of the method or accessor.
  }

  /** https://tc39.es/ecma262/#sec-privatefieldadd */
  function PrivateFieldAdd(P, O, value) {
    let _temp5 = PrivateElementFind(P, O);
    Assert(!(_temp5 instanceof AbruptCompletion), "PrivateElementFind(P, O)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    // 1. Let entry be ! PrivateElementFind(P, O).
    const entry = _temp5;
    // 2. If entry is not empty, throw a TypeError exception.
    if (entry !== undefined) {
      return exports.surroundingAgent.Throw('TypeError', 'AlreadyDeclared', P);
    }
    // 3. Append PrivateElement { [[Key]]: P, [[Kind]]: field, [[Value]]: value } to O.[[PrivateElements]].
    O.PrivateElements.push(new PrivateElementRecord({
      Key: P,
      Kind: 'field',
      Value: value
    }));
  }

  // @ts-nocheck

  // This file covers abstract operations defined in
  /** https://tc39.es/ecma262/#sec-promise-objects */

  /** https://tc39.es/ecma262/#table-internal-slots-of-promise-instances */

  /** https://tc39.es/ecma262/#sec-promisecapability-records */
  class PromiseCapabilityRecord {
    Promise;
    Resolve;
    Reject;
    constructor() {
      this.Promise = Value.undefined;
      this.Resolve = Value.undefined;
      this.Reject = Value.undefined;
    }
  }

  /** https://tc39.es/ecma262/#sec-promisereaction-records */
  class PromiseReactionRecord {
    Capability;
    Type;
    Handler;
    constructor(O) {
      Assert(O.Capability instanceof PromiseCapabilityRecord || O.Capability === Value.undefined, "O.Capability instanceof PromiseCapabilityRecord\n        || O.Capability === Value.undefined");
      Assert(O.Type === 'Fulfill' || O.Type === 'Reject', "O.Type === 'Fulfill' || O.Type === 'Reject'");
      Assert(O.Handler === undefined || isFunctionObject(O.Handler.Callback), "O.Handler === undefined\n           || isFunctionObject(O.Handler.Callback)");
      this.Capability = O.Capability;
      this.Type = O.Type;
      this.Handler = O.Handler;
    }
  }

  /** https://tc39.es/ecma262/#sec-createresolvingfunctions */
  function CreateResolvingFunctions(promise) {
    // 1. Let alreadyResolved be the Record { [[Value]]: false }.
    const alreadyResolved = {
      Value: false
    };
    // 2. Let stepsResolve be the algorithm steps defined in Promise Resolve Functions.
    const stepsResolve = PromiseResolveFunctions;
    // 3. Let lengthResolve be the number of non-optional parameters of the function definition in Promise Resolve Functions.
    const lengthResolve = 1;
    // 4. Let resolve be ! CreateBuiltinFunction(stepsResolve, lengthResolve, "", « [[Promise]], [[AlreadyResolved]] »).
    let _temp = CreateBuiltinFunction(stepsResolve, lengthResolve, Value(''), ['Promise', 'AlreadyResolved']);
    Assert(!(_temp instanceof AbruptCompletion), "CreateBuiltinFunction(stepsResolve, lengthResolve, Value(''), ['Promise', 'AlreadyResolved'])" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const resolve = _temp;
    // 5. Set resolve.[[Promise]] to promise.
    resolve.Promise = promise;
    // 6. Set resolve.[[AlreadyResolved]] to alreadyResolved.
    resolve.AlreadyResolved = alreadyResolved;
    // 7. Let stepsReject be the algorithm steps defined in Promise Reject Functions.
    const stepsReject = PromiseRejectFunctions;
    // 8. Let lengthReject be the number of non-optional parameters of the function definition in Promise Reject Functions.
    const lengthReject = 1;
    // 9. Let reject be ! CreateBuiltinFunction(stepsReject, lengthReject, "", « [[Promise]], [[AlreadyResolved]] »).
    let _temp2 = CreateBuiltinFunction(stepsReject, lengthReject, Value(''), ['Promise', 'AlreadyResolved']);
    Assert(!(_temp2 instanceof AbruptCompletion), "CreateBuiltinFunction(stepsReject, lengthReject, Value(''), ['Promise', 'AlreadyResolved'])" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const reject = _temp2;
    // 10. Set reject.[[Promise]] to promise.
    reject.Promise = promise;
    // 11. Set reject.[[AlreadyResolved]] to alreadyResolved.
    reject.AlreadyResolved = alreadyResolved;
    // 12. Return the Record { [[Resolve]]: resolve, [[Reject]]: reject }.
    return {
      Resolve: resolve,
      Reject: reject
    };
  }

  /** https://tc39.es/ecma262/#sec-promise-reject-functions */
  function PromiseRejectFunctions([reason = Value.undefined]) {
    const F = this;
    Assert('Promise' in F && F.Promise instanceof ObjectValue, "'Promise' in F && F.Promise instanceof ObjectValue");
    const promise = F.Promise;
    const alreadyResolved = F.AlreadyResolved;
    if (alreadyResolved.Value === true) {
      return Value.undefined;
    }
    alreadyResolved.Value = true;
    return RejectPromise(promise, reason);
  }

  /** https://tc39.es/ecma262/#sec-newpromiseresolvethenablejob */
  PromiseRejectFunctions.section = 'https://tc39.es/ecma262/#sec-promise-reject-functions';
  function NewPromiseResolveThenableJob(promiseToResolve, thenable, then) {
    // 1. Let job be a new Job abstract closure with no parameters that captures
    //    promiseToResolve, thenable, and then and performs the following steps when called:
    const job = () => {
      // a. Let resolvingFunctions be CreateResolvingFunctions(promiseToResolve).
      const resolvingFunctions = CreateResolvingFunctions(promiseToResolve);
      // b. Let thenCallResult be HostCallJobCallback(then, thenable, « resolvingFunctions.[[Resolve]], resolvingFunctions.[[Reject]] »).
      const thenCallResult = HostCallJobCallback(then, thenable, [resolvingFunctions.Resolve, resolvingFunctions.Reject]);
      // c. If thenCallResult is an abrupt completion, then
      if (thenCallResult instanceof AbruptCompletion) {
        // i .Let status be Call(resolvingFunctions.[[Reject]], undefined, « thenCallResult.[[Value]] »).
        const status = Call(resolvingFunctions.Reject, Value.undefined, [thenCallResult.Value]);
        // ii. Return Completion(status).
        return Completion(status);
      }
      // d. Return Completion(thenCallResult).
      return Completion(thenCallResult);
    };
    // 2. Let getThenRealmResult be GetFunctionRealm(then.[[Callback]]).
    const getThenRealmResult = EnsureCompletion(GetFunctionRealm(then.Callback));
    // 3. If getThenRealmResult is a normal completion, then let thenRealm be getThenRealmResult.[[Value]].
    let thenRealm;
    if (getThenRealmResult instanceof NormalCompletion) {
      thenRealm = getThenRealmResult.Value;
    } else {
      // 4. Else, let _thenRealm_ be the current Realm Record.
      thenRealm = exports.surroundingAgent.currentRealmRecord;
    }
    // 5. NOTE: _thenRealm_ is never *null*. When _then_.[[Callback]] is a revoked Proxy and no code runs, _thenRealm_ is used to create error objects.
    // 6. Return { [[Job]]: job, [[Realm]]: thenRealm }.
    return {
      Job: job,
      Realm: thenRealm
    };
  }

  /** https://tc39.es/ecma262/#sec-promise-resolve-functions */
  NewPromiseResolveThenableJob.section = 'https://tc39.es/ecma262/#sec-newpromiseresolvethenablejob';
  function PromiseResolveFunctions([resolution = Value.undefined]) {
    // 1. Let F be the active function object.
    const F = this;
    // 2. Assert: F has a [[Promise]] internal slot whose value is an Object.
    Assert('Promise' in F && F.Promise instanceof ObjectValue, "'Promise' in F && F.Promise instanceof ObjectValue");
    // 3. Let promise be F.[[Promise]].
    const promise = F.Promise;
    // 4. Let alreadyResolved be F.[[AlreadyResolved]].
    const alreadyResolved = F.AlreadyResolved;
    // 5. If alreadyResolved.[[Value]] is true, return undefined.
    if (alreadyResolved.Value === true) {
      return Value.undefined;
    }
    // 6. Set alreadyResolved.[[Value]] to true.
    alreadyResolved.Value = true;
    // 7. If SameValue(resolution, promise) is true, then
    if (SameValue(resolution, promise) === Value.true) {
      // a. Let selfResolutionError be a newly created TypeError object.
      const selfResolutionError = exports.surroundingAgent.Throw('TypeError', 'CannotResolvePromiseWithItself').Value;
      // b. Return RejectPromise(promise, selfResolutionError).
      return RejectPromise(promise, selfResolutionError);
    }
    // 8. If Type(resolution) is not Object, then
    if (!(resolution instanceof ObjectValue)) {
      // a. Return FulfillPromise(promise, resolution).
      return FulfillPromise(promise, resolution);
    }
    // 9. Let then be Get(resolution, "then").
    const then = Get(resolution, Value('then'));
    // 10. If then is an abrupt completion, then
    if (then instanceof AbruptCompletion) {
      // a. Return RejectPromise(promise, then.[[Value]]).
      return RejectPromise(promise, then.Value);
    }
    // 11. Let thenAction be then.[[Value]].
    const thenAction = then.Value;
    // 12. If IsCallable(thenAction) is false, then
    if (IsCallable(thenAction) === Value.false) {
      // a. Return FulfillPromise(promise, resolution).
      return FulfillPromise(promise, resolution);
    }
    // 13. Let thenJobCallback be HostMakeJobCallback(thenAction).
    const thenJobCallback = HostMakeJobCallback(thenAction);
    // 14. Let job be NewPromiseResolveThenableJob(promise, resolution, thenJobCallback).
    const job = NewPromiseResolveThenableJob(promise, resolution, thenJobCallback);
    // 15. Perform HostEnqueuePromiseJob(job.[[Job]], job.[[Realm]]).
    HostEnqueuePromiseJob(job.Job);
    // 16. Return undefined.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-fulfillpromise */
  PromiseResolveFunctions.section = 'https://tc39.es/ecma262/#sec-promise-resolve-functions';
  function FulfillPromise(promise, value) {
    Assert(promise.PromiseState === 'pending', "promise.PromiseState === 'pending'");
    const reactions = promise.PromiseFulfillReactions;
    promise.PromiseResult = value;
    promise.PromiseFulfillReactions = undefined;
    promise.PromiseRejectReactions = undefined;
    promise.PromiseState = 'fulfilled';
    return TriggerPromiseReactions(reactions, value);
  }

  /** https://tc39.es/ecma262/#sec-newpromisecapability */
  FulfillPromise.section = 'https://tc39.es/ecma262/#sec-fulfillpromise';
  function NewPromiseCapability(C) {
    // 1. If IsConstructor(C) is false, throw a TypeError exception.
    if (IsConstructor(C) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAConstructor', C);
    }
    // 2. NOTE: C is assumed to be a constructor function that supports the parameter conventions of the Promise constructor (see 26.2.3.1).
    // 3. Let promiseCapability be the PromiseCapability Record { [[Promise]]: undefined, [[Resolve]]: undefined, [[Reject]]: undefined }.
    const promiseCapability = new PromiseCapabilityRecord();
    // 4. Let executorClosure be a new Abstract Closure with parameters (resolve, reject) that captures promiseCapability and performs the following steps when called:
    const executorClosure = ([resolve = Value.undefined, reject = Value.undefined]) => {
      // a. If promiseCapability.[[Resolve]] is not undefined, throw a TypeError exception.
      if (!(promiseCapability.Resolve instanceof UndefinedValue)) {
        return exports.surroundingAgent.Throw('TypeError', 'PromiseCapabilityFunctionAlreadySet', 'resolve');
      }
      // b. If promiseCapability.[[Reject]] is not undefined, throw a TypeError exception.
      if (!(promiseCapability.Reject instanceof UndefinedValue)) {
        return exports.surroundingAgent.Throw('TypeError', 'PromiseCapabilityFunctionAlreadySet', 'reject');
      }
      // c. Set promiseCapability.[[Resolve]] to resolve.
      promiseCapability.Resolve = resolve;
      // d. Set promiseCapability.[[Reject]] to reject.
      promiseCapability.Reject = reject;
      // e. Return undefined.
      return Value.undefined;
    };
    // 5. Let executor be ! CreateBuiltinFunction(executorClosure, 2, "", « »).
    let _temp3 = CreateBuiltinFunction(executorClosure, 2, Value(''), []);
    Assert(!(_temp3 instanceof AbruptCompletion), "CreateBuiltinFunction(executorClosure, 2, Value(''), [])" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const executor = _temp3;
    // 8. Let promise be ? Construct(C, « executor »).
    let _temp4 = Construct(C, [executor]);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const promise = _temp4;
    // 9. If IsCallable(promiseCapability.[[Resolve]]) is false, throw a TypeError exception.
    if (IsCallable(promiseCapability.Resolve) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'PromiseResolveFunction', promiseCapability.Resolve);
    }
    // 10. If IsCallable(promiseCapability.[[Reject]]) is false, throw a TypeError exception.
    if (IsCallable(promiseCapability.Reject) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'PromiseRejectFunction', promiseCapability.Reject);
    }
    // 11. Set promiseCapability.[[Promise]] to promise.
    promiseCapability.Promise = promise;
    // 12. Return promiseCapability.
    return NormalCompletion(promiseCapability);
  }

  /** https://tc39.es/ecma262/#sec-ispromise */
  function IsPromise(x) {
    if (!(x instanceof ObjectValue)) {
      return Value.false;
    }
    if (!('PromiseState' in x)) {
      return Value.false;
    }
    return Value.true;
  }

  /** https://tc39.es/ecma262/#sec-rejectpromise */
  function RejectPromise(promise, reason) {
    Assert(promise.PromiseState === 'pending', "promise.PromiseState === 'pending'");
    const reactions = promise.PromiseRejectReactions;
    promise.PromiseResult = reason;
    promise.PromiseFulfillReactions = undefined;
    promise.PromiseRejectReactions = undefined;
    promise.PromiseState = 'rejected';
    if (promise.PromiseIsHandled === Value.false) {
      HostPromiseRejectionTracker(promise, 'reject');
    }
    return TriggerPromiseReactions(reactions, reason);
  }

  /** https://tc39.es/ecma262/#sec-triggerpromisereactions */
  RejectPromise.section = 'https://tc39.es/ecma262/#sec-rejectpromise';
  function TriggerPromiseReactions(reactions, argument) {
    // 1. For each reaction in reactions, do
    reactions.forEach(reaction => {
      // a. Let job be NewPromiseReactionJob(reaction, argument).
      const job = NewPromiseReactionJob(reaction, argument);
      // b. Perform HostEnqueuePromiseJob(job.[[Job]], job.[[Realm]]).
      HostEnqueuePromiseJob(job.Job);
    });
    // 2. Return undefined.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-promise-resolve */
  TriggerPromiseReactions.section = 'https://tc39.es/ecma262/#sec-triggerpromisereactions';
  function PromiseResolve(C, x) {
    Assert(C instanceof ObjectValue, "C instanceof ObjectValue");
    if (IsPromise(x) === Value.true) {
      let _temp5 = Get(x, Value('constructor'));
      /* c8 ignore if */
      if (_temp5 instanceof AbruptCompletion) {
        return _temp5;
      }
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      const xConstructor = _temp5;
      if (SameValue(xConstructor, C) === Value.true) {
        return x;
      }
    }
    let _temp6 = NewPromiseCapability(C);
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const promiseCapability = _temp6;
    let _temp7 = Call(promiseCapability.Resolve, Value.undefined, [x]);
    /* c8 ignore if */
    if (_temp7 instanceof AbruptCompletion) {
      return _temp7;
    }
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    return promiseCapability.Promise;
  }

  /** https://tc39.es/ecma262/#sec-newpromisereactionjob */
  function NewPromiseReactionJob(reaction, argument) {
    // 1. Let job be a new Job abstract closure with no parameters that captures
    //    reaction and argument and performs the following steps when called:
    const job = () => {
      // a. Assert: reaction is a PromiseReaction Record.
      Assert(reaction instanceof PromiseReactionRecord, "reaction instanceof PromiseReactionRecord");
      // b. Let promiseCapability be reaction.[[Capability]].
      const promiseCapability = reaction.Capability;
      // c. Let type be reaction.[[Type]].
      const type = reaction.Type;
      // d. Let handler be reaction.[[Handler]].
      const handler = reaction.Handler;
      let handlerResult;
      // e. If handler is empty, then
      if (handler === undefined) {
        // i. If type is Fulfill, let handlerResult be NormalCompletion(argument).
        if (type === 'Fulfill') {
          handlerResult = NormalCompletion(argument);
        } else {
          // 1. Assert: type is Reject.
          Assert(type === 'Reject', "type === 'Reject'");
          // 2. Let handlerResult be ThrowCompletion(argument).
          handlerResult = ThrowCompletion(argument);
        }
      } else {
        // f. Else, let handlerResult be HostCallJobCallback(handler, undefined, « argument »).
        handlerResult = HostCallJobCallback(handler, Value.undefined, [argument]);
      }
      // g. If promiseCapability is undefined, then
      if (promiseCapability instanceof UndefinedValue) {
        // i. Assert: handlerResult is not an abrupt completion.
        Assert(!(handlerResult instanceof AbruptCompletion), "!(handlerResult instanceof AbruptCompletion)");
        // ii. Return NormalCompletion(empty).
        return NormalCompletion(undefined);
      }
      let status;
      // h. If handlerResult is an abrupt completion, then
      if (handlerResult instanceof AbruptCompletion) {
        // i. Let status be Call(promiseCapability.[[Reject]], undefined, « handlerResult.[[Value]] »).
        status = Call(promiseCapability.Reject, Value.undefined, [handlerResult.Value]);
      } else {
        // ii. Let status be Call(promiseCapability.[[Resolve]], undefined, « handlerResult.[[Value]] »).
        status = Call(promiseCapability.Resolve, Value.undefined, [handlerResult.Value]);
      }
      // j. Return Completion(status).
      return Completion(status);
    };
    // 2. Let handlerRealm be null.
    let handlerRealm = Value.null;
    // 3. If reaction.[[Handler]] is not empty, then
    if (reaction.Handler !== undefined) {
      // a. Let getHandlerRealmResult be GetFunctionRealm(reaction.[[Handler]].[[Callback]]).
      const getHandlerRealmResult = EnsureCompletion(GetFunctionRealm(reaction.Handler.Callback));
      // b. If getHandlerRealmResult is a normal completion, then set handlerRealm to getHandlerRealmResult.[[Value]].
      if (getHandlerRealmResult instanceof NormalCompletion) {
        handlerRealm = getHandlerRealmResult.Value;
      } else {
        // c. Else, set _handlerRealm_ to the current Realm Record.
        handlerRealm = exports.surroundingAgent.currentRealmRecord;
      }
      // d. NOTE: _handlerRealm_ is never *null* unless the handler is *undefined*. When the handler
      //    is a revoked Proxy and no ECMAScript code runs, _handlerRealm_ is used to create error objects.
    }
    // 4. Return { [[Job]]: job, [[Realm]]: handlerRealm }.
    return {
      Job: job,
      Realm: handlerRealm
    };
  }

  /** https://tc39.es/ecma262/#sec-performpromisethen */
  NewPromiseReactionJob.section = 'https://tc39.es/ecma262/#sec-newpromisereactionjob';
  function PerformPromiseThen(promise, onFulfilled, onRejected, resultCapability) {
    // 1. Assert: IsPromise(promise) is true.
    Assert(IsPromise(promise) === Value.true, "IsPromise(promise) === Value.true");
    // 2. If resultCapability is not present, then
    if (resultCapability === undefined) {
      // a. Set resultCapability to undefined.
      resultCapability = Value.undefined;
    }
    let onFulfilledJobCallback;
    // 3. If IsCallable(onFulfilled) is false, then
    if (IsCallable(onFulfilled) === Value.false) {
      // a. Let onFulfilledJobCallback be empty.
      onFulfilledJobCallback = undefined;
    } else {
      // 4. Else,
      // a. Let onFulfilledJobCallback be HostMakeJobCallback(onFulfilled).
      onFulfilledJobCallback = HostMakeJobCallback(onFulfilled);
    }
    let onRejectedJobCallback;
    // 5. If IsCallable(onRejected) is false, then
    if (IsCallable(onRejected) === Value.false) {
      // a. Let onRejectedJobCallback be empty.
      onRejectedJobCallback = undefined;
    } else {
      // 6. Else,
      onRejectedJobCallback = HostMakeJobCallback(onRejected);
    }
    // 7. Let fulfillReaction be the PromiseReaction { [[Capability]]: resultCapability, [[Type]]: Fulfill, [[Handler]]: onFulfilled }.
    const fulfillReaction = new PromiseReactionRecord({
      Capability: resultCapability,
      Type: 'Fulfill',
      Handler: onFulfilledJobCallback
    });
    // 8. Let rejectReaction be the PromiseReaction { [[Capability]]: resultCapability, [[Type]]: Reject, [[Handler]]: onRejected }.
    const rejectReaction = new PromiseReactionRecord({
      Capability: resultCapability,
      Type: 'Reject',
      Handler: onRejectedJobCallback
    });
    // 9. If promise.[[PromiseState]] is pending, then
    if (promise.PromiseState === 'pending') {
      // a. Append fulfillReaction as the last element of the List that is promise.[[PromiseFulfillReactions]].
      promise.PromiseFulfillReactions.push(fulfillReaction);
      // b. Append rejectReaction as the last element of the List that is promise.[[PromiseRejectReactions]].
      promise.PromiseRejectReactions.push(rejectReaction);
    } else if (promise.PromiseState === 'fulfilled') {
      // a. Let value be promise.[[PromiseResult]].
      const value = promise.PromiseResult;
      // b. Let fulfillJob be NewPromiseReactionJob(fulfillReaction, value).
      const fulfillJob = NewPromiseReactionJob(fulfillReaction, value);
      // c. Perform HostEnqueuePromiseJob(fulfillJob.[[Job]], fulfillJob.[[Realm]]).
      HostEnqueuePromiseJob(fulfillJob.Job);
    } else {
      // a. Assert: The value of promise.[[PromiseState]] is rejected.
      Assert(promise.PromiseState === 'rejected', "promise.PromiseState === 'rejected'");
      // b. Let reason be promise.[[PromiseResult]].
      const reason = promise.PromiseResult;
      // c. If promise.[[PromiseIsHandled]] is false, perform HostPromiseRejectionTracker(promise, "handle").
      if (promise.PromiseIsHandled === Value.false) {
        HostPromiseRejectionTracker(promise, 'handle');
      }
      // d. Let rejectJob be NewPromiseReactionJob(rejectReaction, reason).
      const rejectJob = NewPromiseReactionJob(rejectReaction, reason);
      // e. Perform HostEnqueuePromiseJob(rejectJob.[[Job]], rejectJob.[[Realm]]).
      HostEnqueuePromiseJob(rejectJob.Job);
    }
    // 12. Set promise.[[PromiseIsHandled]] to true.
    promise.PromiseIsHandled = Value.true;
    // 13. If resultCapability is undefined, then
    if (resultCapability instanceof UndefinedValue) {
      // a. Return undefined.
      return Value.undefined;
    } else {
      // 14. Else,
      // a. Return resultCapability.[[Promise]].
      return resultCapability.Promise;
    }
  }

  /** https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-getprototypeof */
  function ProxyGetPrototypeOf() {
    const O = this;
    const handler = O.ProxyHandler;
    if (handler === Value.null) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyRevoked', 'getPrototypeOf');
    }
    Assert(handler instanceof ObjectValue, "handler instanceof ObjectValue");
    const target = O.ProxyTarget;
    let _temp = GetMethod(handler, Value('getPrototypeOf'));
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const trap = _temp;
    if (trap === Value.undefined) {
      return target.GetPrototypeOf();
    }
    let _temp2 = Call(trap, handler, [target]);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const handlerProto = _temp2;
    if (!(handlerProto instanceof ObjectValue) && !(handlerProto instanceof NullValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyGetPrototypeOfInvalid');
    }
    let _temp3 = IsExtensible(target);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const extensibleTarget = _temp3;
    if (extensibleTarget === Value.true) {
      return handlerProto;
    }
    let _temp4 = target.GetPrototypeOf();
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const targetProto = _temp4;
    if (SameValue(handlerProto, targetProto) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyGetPrototypeOfNonExtensible');
    }
    return handlerProto;
  }

  /** https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v */
  ProxyGetPrototypeOf.section = 'https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-getprototypeof';
  function ProxySetPrototypeOf(V) {
    const O = this;
    Assert(V instanceof ObjectValue || V instanceof NullValue, "V instanceof ObjectValue || V instanceof NullValue");
    const handler = O.ProxyHandler;
    if (handler === Value.null) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyRevoked', 'setPrototypeOf');
    }
    Assert(handler instanceof ObjectValue, "handler instanceof ObjectValue");
    const target = O.ProxyTarget;
    let _temp5 = GetMethod(handler, Value('setPrototypeOf'));
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const trap = _temp5;
    if (trap === Value.undefined) {
      return target.SetPrototypeOf(V);
    }
    let _temp6 = Call(trap, handler, [target, V]);
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const booleanTrapResult = ToBoolean(_temp6);
    if (booleanTrapResult === Value.false) {
      return Value.false;
    }
    let _temp7 = IsExtensible(target);
    /* c8 ignore if */
    if (_temp7 instanceof AbruptCompletion) {
      return _temp7;
    }
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    const extensibleTarget = _temp7;
    if (extensibleTarget === Value.true) {
      return Value.true;
    }
    let _temp8 = target.GetPrototypeOf();
    /* c8 ignore if */
    if (_temp8 instanceof AbruptCompletion) {
      return _temp8;
    }
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    const targetProto = _temp8;
    if (SameValue(V, targetProto) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxySetPrototypeOfNonExtensible');
    }
    return Value.true;
  }

  /** https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-isextensible */
  ProxySetPrototypeOf.section = 'https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v';
  function ProxyIsExtensible() {
    const O = this;
    const handler = O.ProxyHandler;
    if (handler === Value.null) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyRevoked', 'isExtensible');
    }
    Assert(handler instanceof ObjectValue, "handler instanceof ObjectValue");
    const target = O.ProxyTarget;
    let _temp9 = GetMethod(handler, Value('isExtensible'));
    /* c8 ignore if */
    if (_temp9 instanceof AbruptCompletion) {
      return _temp9;
    }
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    const trap = _temp9;
    if (trap === Value.undefined) {
      return IsExtensible(target);
    }
    let _temp10 = Call(trap, handler, [target]);
    /* c8 ignore if */
    if (_temp10 instanceof AbruptCompletion) {
      return _temp10;
    }
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    const booleanTrapResult = ToBoolean(_temp10);
    let _temp11 = IsExtensible(target);
    /* c8 ignore if */
    if (_temp11 instanceof AbruptCompletion) {
      return _temp11;
    }
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    const targetResult = _temp11;
    if (SameValue(booleanTrapResult, targetResult) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyIsExtensibleInconsistent', targetResult);
    }
    return booleanTrapResult;
  }

  /** https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-preventextensions */
  ProxyIsExtensible.section = 'https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-isextensible';
  function ProxyPreventExtensions() {
    const O = this;
    const handler = O.ProxyHandler;
    if (handler === Value.null) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyRevoked', 'preventExtensions');
    }
    Assert(handler instanceof ObjectValue, "handler instanceof ObjectValue");
    const target = O.ProxyTarget;
    let _temp12 = GetMethod(handler, Value('preventExtensions'));
    /* c8 ignore if */
    if (_temp12 instanceof AbruptCompletion) {
      return _temp12;
    }
    /* c8 ignore if */
    if (_temp12 instanceof Completion) {
      _temp12 = _temp12.Value;
    }
    const trap = _temp12;
    if (trap === Value.undefined) {
      return target.PreventExtensions();
    }
    let _temp13 = Call(trap, handler, [target]);
    /* c8 ignore if */
    if (_temp13 instanceof AbruptCompletion) {
      return _temp13;
    }
    /* c8 ignore if */
    if (_temp13 instanceof Completion) {
      _temp13 = _temp13.Value;
    }
    const booleanTrapResult = ToBoolean(_temp13);
    if (booleanTrapResult === Value.true) {
      let _temp14 = IsExtensible(target);
      /* c8 ignore if */
      if (_temp14 instanceof AbruptCompletion) {
        return _temp14;
      }
      /* c8 ignore if */
      if (_temp14 instanceof Completion) {
        _temp14 = _temp14.Value;
      }
      const extensibleTarget = _temp14;
      if (extensibleTarget === Value.true) {
        return exports.surroundingAgent.Throw('TypeError', 'ProxyPreventExtensionsExtensible');
      }
    }
    return booleanTrapResult;
  }

  /** https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p */
  ProxyPreventExtensions.section = 'https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-preventextensions';
  function ProxyGetOwnProperty(P) {
    const O = this;

    // 1. Assert: IsPropertyKey(P) is true.
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    // 2. Let handler be O.[[ProxyHandler]].
    const handler = O.ProxyHandler;
    // 3. If handler is null, throw a TypeError exception.
    if (handler === Value.null) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyRevoked', 'getOwnPropertyDescriptor');
    }
    // 4. Assert: Type(Handler) is Object.
    Assert(handler instanceof ObjectValue, "handler instanceof ObjectValue");
    // 5. Let target be O.[[ProxyTarget]].
    const target = O.ProxyTarget;
    // 6. Let trap be ? Getmethod(handler, "getOwnPropertyDescriptor").
    let _temp15 = GetMethod(handler, Value('getOwnPropertyDescriptor'));
    /* c8 ignore if */
    if (_temp15 instanceof AbruptCompletion) {
      return _temp15;
    }
    /* c8 ignore if */
    if (_temp15 instanceof Completion) {
      _temp15 = _temp15.Value;
    }
    const trap = _temp15;
    // 7. If trap is undefined, then
    if (trap === Value.undefined) {
      // a. Return ? target.[[GetOwnProperty]](P).
      return target.GetOwnProperty(P);
    }
    // 8. Let trapResultObj be ? Call(trap, handler, « target, P »).
    let _temp16 = Call(trap, handler, [target, P]);
    /* c8 ignore if */
    if (_temp16 instanceof AbruptCompletion) {
      return _temp16;
    }
    /* c8 ignore if */
    if (_temp16 instanceof Completion) {
      _temp16 = _temp16.Value;
    }
    const trapResultObj = _temp16;
    // 9. If Type(trapResultObj) is neither Object nor Undefined, throw a TypeError exception.
    if (!(trapResultObj instanceof ObjectValue) && !(trapResultObj instanceof UndefinedValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyGetOwnPropertyDescriptorInvalid', P);
    }
    // 10. Let targetDesc be ? target.[[GetOwnProperty]](P).
    let _temp17 = target.GetOwnProperty(P);
    /* c8 ignore if */
    if (_temp17 instanceof AbruptCompletion) {
      return _temp17;
    }
    /* c8 ignore if */
    if (_temp17 instanceof Completion) {
      _temp17 = _temp17.Value;
    }
    const targetDesc = _temp17;
    // 11. If trapResultObj is undefined, then
    if (trapResultObj === Value.undefined) {
      // a. If targetDesc is undefined, return undefined.
      if (targetDesc === Value.undefined) {
        return Value.undefined;
      }
      // b. If targetDesc.[[Configurable]] is false, throw a TypeError exception.
      if (targetDesc.Configurable === Value.false) {
        return exports.surroundingAgent.Throw('TypeError', 'ProxyGetOwnPropertyDescriptorUndefined', P);
      }
      // c. Let extensibleTarget be ? IsExtensible(target).
      let _temp18 = IsExtensible(target);
      /* c8 ignore if */
      if (_temp18 instanceof AbruptCompletion) {
        return _temp18;
      }
      /* c8 ignore if */
      if (_temp18 instanceof Completion) {
        _temp18 = _temp18.Value;
      }
      const extensibleTarget = _temp18;
      // d. If extensibleTarget is false, throw a TypeError exception.
      if (extensibleTarget === Value.false) {
        return exports.surroundingAgent.Throw('TypeError', 'ProxyGetOwnPropertyDescriptorNonExtensible', P);
      }
      // e. Return undefined.
      return Value.undefined;
    }
    // 12. Let extensibleTarget be ? IsExtensible(target).
    let _temp19 = IsExtensible(target);
    /* c8 ignore if */
    if (_temp19 instanceof AbruptCompletion) {
      return _temp19;
    }
    /* c8 ignore if */
    if (_temp19 instanceof Completion) {
      _temp19 = _temp19.Value;
    }
    const extensibleTarget = _temp19;
    // 13. Let resultDesc be ? ToPropertyDescriptor(trapResultObj).
    let _temp20 = ToPropertyDescriptor(trapResultObj);
    /* c8 ignore if */
    if (_temp20 instanceof AbruptCompletion) {
      return _temp20;
    }
    /* c8 ignore if */
    if (_temp20 instanceof Completion) {
      _temp20 = _temp20.Value;
    }
    const resultDesc = _temp20;
    // 14. Call CompletePropertyDescriptor(resultDesc).
    CompletePropertyDescriptor(resultDesc);
    // 15. Let valid be IsCompatiblePropertyDescriptor(extensibleTarget, resultDesc, targetDesc).
    const valid = IsCompatiblePropertyDescriptor(extensibleTarget, resultDesc, targetDesc);
    // 16. If valid is false, throw a TypeError exception.
    if (valid === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyGetOwnPropertyDescriptorIncompatible', P);
    }
    // 17. If resultDesc.[[Configurable]] is false, then
    if (resultDesc.Configurable === Value.false) {
      // a. If targetDesc is undefined or targetDesc.[[Configurable]] is true, then
      if (targetDesc === Value.undefined || targetDesc.Configurable === Value.true) {
        // i. Throw a TypeError exception.
        return exports.surroundingAgent.Throw('TypeError', 'ProxyGetOwnPropertyDescriptorNonConfigurable', P);
      }
      // b. If resultDesc has a [[Writable]] field and resultDesc.[[Writable]] is false, then
      if ('Writable' in resultDesc && resultDesc.Writable === Value.false) {
        // i. If targetDesc.[[Writable]] is true, throw a TypeError exception.
        if (targetDesc.Writable === Value.true) {
          return exports.surroundingAgent.Throw('TypeError', 'ProxyGetOwnPropertyDescriptorNonConfigurableWritable', P);
        }
      }
    }
    // 18. Return resultDesc.
    return resultDesc;
  }

  /** https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc */
  ProxyGetOwnProperty.section = 'https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p';
  function ProxyDefineOwnProperty(P, Desc) {
    const O = this;

    // 1. Assert: IsPropertyKey(P) is true.
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    // 2. Let handler be O.[[ProxyHandler]].
    const handler = O.ProxyHandler;
    // 3. If handler is null, throw a TypeError exception.
    if (handler === Value.null) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyRevoked', 'defineProperty');
    }
    // 4. Assert: Type(handler) is Object.
    Assert(handler instanceof ObjectValue, "handler instanceof ObjectValue");
    // 5. Let target be O.[[ProxyTarget]].
    const target = O.ProxyTarget;
    // 6. Let trap be ? GetMethod(handler, "defineProperty").
    let _temp21 = GetMethod(handler, Value('defineProperty'));
    /* c8 ignore if */
    if (_temp21 instanceof AbruptCompletion) {
      return _temp21;
    }
    /* c8 ignore if */
    if (_temp21 instanceof Completion) {
      _temp21 = _temp21.Value;
    }
    const trap = _temp21;
    // 7. If trap is undefined, then
    if (trap === Value.undefined) {
      // a. Return ? target.[[DefineOwnProperty]](P, Desc).
      return target.DefineOwnProperty(P, Desc);
    }
    // 8. Let descObj be FromPropertyDescriptor(Desc).
    const descObj = FromPropertyDescriptor(Desc);
    // 9. Let booleanTrapResult be ! ToBoolean(? Call(trap, handler, « target, P, descObj »)).
    let _temp22 = Call(trap, handler, [target, P, descObj]);
    /* c8 ignore if */
    if (_temp22 instanceof AbruptCompletion) {
      return _temp22;
    }
    /* c8 ignore if */
    if (_temp22 instanceof Completion) {
      _temp22 = _temp22.Value;
    }
    const booleanTrapResult = ToBoolean(_temp22);
    // 10. If booleanTrapResult is false, return false.
    if (booleanTrapResult === Value.false) {
      return Value.false;
    }
    // 11. Let targetDesc be ? target.[[GetOwnProperty]](P).
    let _temp23 = target.GetOwnProperty(P);
    /* c8 ignore if */
    if (_temp23 instanceof AbruptCompletion) {
      return _temp23;
    }
    /* c8 ignore if */
    if (_temp23 instanceof Completion) {
      _temp23 = _temp23.Value;
    }
    const targetDesc = _temp23;
    // 12. Let extensibleTarget be ? IsExtensible(target).
    let _temp24 = IsExtensible(target);
    /* c8 ignore if */
    if (_temp24 instanceof AbruptCompletion) {
      return _temp24;
    }
    /* c8 ignore if */
    if (_temp24 instanceof Completion) {
      _temp24 = _temp24.Value;
    }
    const extensibleTarget = _temp24;
    let settingConfigFalse;
    // 13. If Desc has a [[Configurable]] field and if Desc.[[Configurable]] is false, then
    if (Desc.Configurable !== undefined && Desc.Configurable === Value.false) {
      // a. Let settingConfigFalse be true.
      settingConfigFalse = true;
    } else {
      // Else, let settingConfigFalse be false.
      settingConfigFalse = false;
    }
    // 15. If targetDesc is undefined, then
    if (targetDesc === Value.undefined) {
      // a. If extensibleTarget is false, throw a TypeError exception.
      if (extensibleTarget === Value.false) {
        return exports.surroundingAgent.Throw('TypeError', 'ProxyDefinePropertyNonExtensible', P);
      }
      // b. If settingConfigFalse is true, throw a TypeError exception.
      if (settingConfigFalse === true) {
        return exports.surroundingAgent.Throw('TypeError', 'ProxyDefinePropertyNonConfigurable', P);
      }
    } else {
      // a. If IsCompatiblePropertyDescriptor(extensibleTarget, Desc, targetDesc) is false, throw a TypeError exception.
      if (IsCompatiblePropertyDescriptor(extensibleTarget, Desc, targetDesc) === Value.false) {
        return exports.surroundingAgent.Throw('TypeError', 'ProxyDefinePropertyIncompatible', P);
      }
      // b. If settingConfigFalse is true and targetDesc.[[Configurable]] is true, throw a TypeError exception.
      if (settingConfigFalse === true && targetDesc.Configurable === Value.true) {
        return exports.surroundingAgent.Throw('TypeError', 'ProxyDefinePropertyNonConfigurable', P);
      }
      // c. If IsDataDescriptor(targetDesc) is true, targetDesc.[[Configurable]] is false, and targetDesc.[[Writable]] is true, then
      if (IsDataDescriptor(targetDesc) && targetDesc.Configurable === Value.false && targetDesc.Writable === Value.true) {
        // i. If Desc has a [[Writable]] field and Desc.[[Writable]] is false, throw a TypeError exception.
        if ('Writable' in Desc && Desc.Writable === Value.false) {
          return exports.surroundingAgent.Throw('TypeError', 'ProxyDefinePropertyNonConfigurableWritable', P);
        }
      }
    }
    return Value.true;
  }

  /** https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p */
  ProxyDefineOwnProperty.section = 'https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc';
  function ProxyHasProperty(P) {
    const O = this;
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    const handler = O.ProxyHandler;
    if (handler === Value.null) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyRevoked', 'has');
    }
    Assert(handler instanceof ObjectValue, "handler instanceof ObjectValue");
    const target = O.ProxyTarget;
    let _temp25 = GetMethod(handler, Value('has'));
    /* c8 ignore if */
    if (_temp25 instanceof AbruptCompletion) {
      return _temp25;
    }
    /* c8 ignore if */
    if (_temp25 instanceof Completion) {
      _temp25 = _temp25.Value;
    }
    const trap = _temp25;
    if (trap === Value.undefined) {
      return target.HasProperty(P);
    }
    let _temp26 = Call(trap, handler, [target, P]);
    /* c8 ignore if */
    if (_temp26 instanceof AbruptCompletion) {
      return _temp26;
    }
    /* c8 ignore if */
    if (_temp26 instanceof Completion) {
      _temp26 = _temp26.Value;
    }
    const booleanTrapResult = ToBoolean(_temp26);
    if (booleanTrapResult === Value.false) {
      let _temp27 = target.GetOwnProperty(P);
      /* c8 ignore if */
      if (_temp27 instanceof AbruptCompletion) {
        return _temp27;
      }
      /* c8 ignore if */
      if (_temp27 instanceof Completion) {
        _temp27 = _temp27.Value;
      }
      const targetDesc = _temp27;
      if (targetDesc !== Value.undefined) {
        if (targetDesc.Configurable === Value.false) {
          return exports.surroundingAgent.Throw('TypeError', 'ProxyHasNonConfigurable', P);
        }
        let _temp28 = IsExtensible(target);
        /* c8 ignore if */
        if (_temp28 instanceof AbruptCompletion) {
          return _temp28;
        }
        /* c8 ignore if */
        if (_temp28 instanceof Completion) {
          _temp28 = _temp28.Value;
        }
        const extensibleTarget = _temp28;
        if (extensibleTarget === Value.false) {
          return exports.surroundingAgent.Throw('TypeError', 'ProxyHasNonExtensible', P);
        }
      }
    }
    return booleanTrapResult;
  }

  /** https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver */
  ProxyHasProperty.section = 'https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p';
  function ProxyGet(P, Receiver) {
    const O = this;
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    const handler = O.ProxyHandler;
    if (handler === Value.null) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyRevoked', 'get');
    }
    Assert(handler instanceof ObjectValue, "handler instanceof ObjectValue");
    const target = O.ProxyTarget;
    let _temp29 = GetMethod(handler, Value('get'));
    /* c8 ignore if */
    if (_temp29 instanceof AbruptCompletion) {
      return _temp29;
    }
    /* c8 ignore if */
    if (_temp29 instanceof Completion) {
      _temp29 = _temp29.Value;
    }
    const trap = _temp29;
    if (trap === Value.undefined) {
      return target.Get(P, Receiver);
    }
    let _temp30 = Call(trap, handler, [target, P, Receiver]);
    /* c8 ignore if */
    if (_temp30 instanceof AbruptCompletion) {
      return _temp30;
    }
    /* c8 ignore if */
    if (_temp30 instanceof Completion) {
      _temp30 = _temp30.Value;
    }
    const trapResult = _temp30;
    let _temp31 = target.GetOwnProperty(P);
    /* c8 ignore if */
    if (_temp31 instanceof AbruptCompletion) {
      return _temp31;
    }
    /* c8 ignore if */
    if (_temp31 instanceof Completion) {
      _temp31 = _temp31.Value;
    }
    const targetDesc = _temp31;
    if (targetDesc !== Value.undefined && targetDesc.Configurable === Value.false) {
      if (IsDataDescriptor(targetDesc) === true && targetDesc.Writable === Value.false) {
        if (SameValue(trapResult, targetDesc.Value) === Value.false) {
          return exports.surroundingAgent.Throw('TypeError', 'ProxyGetNonConfigurableData', P);
        }
      }
      if (IsAccessorDescriptor(targetDesc) === true && targetDesc.Get === Value.undefined) {
        if (trapResult !== Value.undefined) {
          return exports.surroundingAgent.Throw('TypeError', 'ProxyGetNonConfigurableAccessor', P);
        }
      }
    }
    return trapResult;
  }

  /** https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver */
  ProxyGet.section = 'https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver';
  function ProxySet(P, V, Receiver) {
    const O = this;
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    const handler = O.ProxyHandler;
    if (handler === Value.null) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyRevoked', 'set');
    }
    Assert(handler instanceof ObjectValue, "handler instanceof ObjectValue");
    const target = O.ProxyTarget;
    let _temp32 = GetMethod(handler, Value('set'));
    /* c8 ignore if */
    if (_temp32 instanceof AbruptCompletion) {
      return _temp32;
    }
    /* c8 ignore if */
    if (_temp32 instanceof Completion) {
      _temp32 = _temp32.Value;
    }
    const trap = _temp32;
    if (trap === Value.undefined) {
      return target.Set(P, V, Receiver);
    }
    let _temp33 = Call(trap, handler, [target, P, V, Receiver]);
    /* c8 ignore if */
    if (_temp33 instanceof AbruptCompletion) {
      return _temp33;
    }
    /* c8 ignore if */
    if (_temp33 instanceof Completion) {
      _temp33 = _temp33.Value;
    }
    const booleanTrapResult = ToBoolean(_temp33);
    if (booleanTrapResult === Value.false) {
      return Value.false;
    }
    let _temp34 = target.GetOwnProperty(P);
    /* c8 ignore if */
    if (_temp34 instanceof AbruptCompletion) {
      return _temp34;
    }
    /* c8 ignore if */
    if (_temp34 instanceof Completion) {
      _temp34 = _temp34.Value;
    }
    const targetDesc = _temp34;
    if (targetDesc !== Value.undefined && targetDesc.Configurable === Value.false) {
      if (IsDataDescriptor(targetDesc) === true && targetDesc.Writable === Value.false) {
        if (SameValue(V, targetDesc.Value) === Value.false) {
          return exports.surroundingAgent.Throw('TypeError', 'ProxySetFrozenData', P);
        }
      }
      if (IsAccessorDescriptor(targetDesc) === true) {
        if (targetDesc.Set === Value.undefined) {
          return exports.surroundingAgent.Throw('TypeError', 'ProxySetFrozenAccessor', P);
        }
      }
    }
    return Value.true;
  }

  /** https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-delete-p */
  ProxySet.section = 'https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver';
  function ProxyDelete(P) {
    const O = this;

    // 1. Assert: IsPropertyKey(P) is true.
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    // 2. Let handler be O.[[ProxyHandler]].
    const handler = O.ProxyHandler;
    // 3. If handler is null, throw a TypeError exception.
    if (handler === Value.null) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyRevoked', 'deleteProperty');
    }
    // 4. Assert: Type(handler) is Object.
    Assert(handler instanceof ObjectValue, "handler instanceof ObjectValue");
    // 5. Let target be O.[[ProxyTarget]].
    const target = O.ProxyTarget;
    // 6. Let trap be ? GetMethod(handler, "deleteProperty").
    let _temp35 = GetMethod(handler, Value('deleteProperty'));
    /* c8 ignore if */
    if (_temp35 instanceof AbruptCompletion) {
      return _temp35;
    }
    /* c8 ignore if */
    if (_temp35 instanceof Completion) {
      _temp35 = _temp35.Value;
    }
    const trap = _temp35;
    // 7. If trap is undefined, then
    if (trap === Value.undefined) {
      // a. Return ? target.[[Delete]](P).
      return target.Delete(P);
    }
    // 8. Let booleanTrapResult be ! ToBoolean(? Call(trap, handler, « target, P »)).
    let _temp36 = Call(trap, handler, [target, P]);
    /* c8 ignore if */
    if (_temp36 instanceof AbruptCompletion) {
      return _temp36;
    }
    /* c8 ignore if */
    if (_temp36 instanceof Completion) {
      _temp36 = _temp36.Value;
    }
    const booleanTrapResult = ToBoolean(_temp36);
    // 9. If booleanTrapResult is false, return false.
    if (booleanTrapResult === Value.false) {
      return Value.false;
    }
    // 10. Let targetDesc be ? target.[[GetOwnProperty]](P).
    let _temp37 = target.GetOwnProperty(P);
    /* c8 ignore if */
    if (_temp37 instanceof AbruptCompletion) {
      return _temp37;
    }
    /* c8 ignore if */
    if (_temp37 instanceof Completion) {
      _temp37 = _temp37.Value;
    }
    const targetDesc = _temp37;
    // 11. If targetDesc is undefined, return true.
    if (targetDesc === Value.undefined) {
      return Value.true;
    }
    // 12. If targetDesc.[[Configurable]] is false, throw a TypeError exception.
    if (targetDesc.Configurable === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyDeletePropertyNonConfigurable', P);
    }
    // 13. Let extensibleTarget be ? IsExtensible(target).
    let _temp38 = IsExtensible(target);
    /* c8 ignore if */
    if (_temp38 instanceof AbruptCompletion) {
      return _temp38;
    }
    /* c8 ignore if */
    if (_temp38 instanceof Completion) {
      _temp38 = _temp38.Value;
    }
    const extensibleTarget = _temp38;
    // 14. If extensibleTarget is false, throw a TypeError exception.
    if (extensibleTarget === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyDeletePropertyNonExtensible', P);
    }
    // 15. Return true.
    return Value.true;
  }

  /** https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys */
  ProxyDelete.section = 'https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-delete-p';
  function ProxyOwnPropertyKeys() {
    const O = this;
    const handler = O.ProxyHandler;
    if (handler === Value.null) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyRevoked', 'ownKeys');
    }
    Assert(handler instanceof ObjectValue, "handler instanceof ObjectValue");
    const target = O.ProxyTarget;
    let _temp39 = GetMethod(handler, Value('ownKeys'));
    /* c8 ignore if */
    if (_temp39 instanceof AbruptCompletion) {
      return _temp39;
    }
    /* c8 ignore if */
    if (_temp39 instanceof Completion) {
      _temp39 = _temp39.Value;
    }
    const trap = _temp39;
    if (trap === Value.undefined) {
      return target.OwnPropertyKeys();
    }
    let _temp40 = Call(trap, handler, [target]);
    /* c8 ignore if */
    if (_temp40 instanceof AbruptCompletion) {
      return _temp40;
    }
    /* c8 ignore if */
    if (_temp40 instanceof Completion) {
      _temp40 = _temp40.Value;
    }
    const trapResultArray = _temp40;
    let _temp41 = CreateListFromArrayLike(trapResultArray, ['String', 'Symbol']);
    /* c8 ignore if */
    if (_temp41 instanceof AbruptCompletion) {
      return _temp41;
    }
    /* c8 ignore if */
    if (_temp41 instanceof Completion) {
      _temp41 = _temp41.Value;
    }
    const trapResult = _temp41;
    if (new ValueSet(trapResult).size !== trapResult.length) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyOwnKeysDuplicateEntries');
    }
    let _temp42 = IsExtensible(target);
    /* c8 ignore if */
    if (_temp42 instanceof AbruptCompletion) {
      return _temp42;
    }
    /* c8 ignore if */
    if (_temp42 instanceof Completion) {
      _temp42 = _temp42.Value;
    }
    const extensibleTarget = _temp42;
    let _temp43 = target.OwnPropertyKeys();
    /* c8 ignore if */
    if (_temp43 instanceof AbruptCompletion) {
      return _temp43;
    }
    /* c8 ignore if */
    if (_temp43 instanceof Completion) {
      _temp43 = _temp43.Value;
    }
    const targetKeys = _temp43;
    // Assert: targetKeys is a List containing only String and Symbol values.
    // Assert: targetKeys contains no duplicate entries.
    const targetConfigurableKeys = [];
    const targetNonconfigurableKeys = [];
    for (const key of targetKeys) {
      let _temp44 = target.GetOwnProperty(key);
      /* c8 ignore if */
      if (_temp44 instanceof AbruptCompletion) {
        return _temp44;
      }
      /* c8 ignore if */
      if (_temp44 instanceof Completion) {
        _temp44 = _temp44.Value;
      }
      const desc = _temp44;
      if (desc !== Value.undefined && desc.Configurable === Value.false) {
        targetNonconfigurableKeys.push(key);
      } else {
        targetConfigurableKeys.push(key);
      }
    }
    if (extensibleTarget === Value.true && targetNonconfigurableKeys.length === 0) {
      return trapResult;
    }
    const uncheckedResultKeys = new ValueSet(trapResult);
    for (const key of targetNonconfigurableKeys) {
      if (!uncheckedResultKeys.has(key)) {
        return exports.surroundingAgent.Throw('TypeError', 'ProxyOwnKeysMissing', 'non-configurable key');
      }
      uncheckedResultKeys.delete(key);
    }
    if (extensibleTarget === Value.true) {
      return trapResult;
    }
    for (const key of targetConfigurableKeys) {
      if (!uncheckedResultKeys.has(key)) {
        return exports.surroundingAgent.Throw('TypeError', 'ProxyOwnKeysMissing', 'configurable key');
      }
      uncheckedResultKeys.delete(key);
    }
    if (uncheckedResultKeys.size > 0) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyOwnKeysNonExtensible');
    }
    return trapResult;
  }

  /** https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist */
  ProxyOwnPropertyKeys.section = 'https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys';
  function ProxyCall(thisArgument, argumentsList) {
    const O = this;
    const handler = O.ProxyHandler;
    if (handler === Value.null) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyRevoked', 'apply');
    }
    Assert(handler instanceof ObjectValue, "handler instanceof ObjectValue");
    const target = O.ProxyTarget;
    let _temp45 = GetMethod(handler, Value('apply'));
    /* c8 ignore if */
    if (_temp45 instanceof AbruptCompletion) {
      return _temp45;
    }
    /* c8 ignore if */
    if (_temp45 instanceof Completion) {
      _temp45 = _temp45.Value;
    }
    const trap = _temp45;
    if (trap === Value.undefined) {
      return Call(target, thisArgument, argumentsList);
    }
    let _temp46 = CreateArrayFromList(argumentsList);
    Assert(!(_temp46 instanceof AbruptCompletion), "CreateArrayFromList(argumentsList)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp46 instanceof Completion) {
      _temp46 = _temp46.Value;
    }
    const argArray = _temp46;
    return Call(trap, handler, [target, thisArgument, argArray]);
  }

  /** https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget */
  ProxyCall.section = 'https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist';
  function ProxyConstruct(argumentsList, newTarget) {
    const O = this;
    const handler = O.ProxyHandler;
    if (handler === Value.null) {
      return exports.surroundingAgent.Throw('TypeError', 'ProxyRevoked', 'construct');
    }
    Assert(handler instanceof ObjectValue, "handler instanceof ObjectValue");
    const target = O.ProxyTarget;
    Assert(IsConstructor(target) === Value.true, "IsConstructor(target) === Value.true");
    let _temp47 = GetMethod(handler, Value('construct'));
    /* c8 ignore if */
    if (_temp47 instanceof AbruptCompletion) {
      return _temp47;
    }
    /* c8 ignore if */
    if (_temp47 instanceof Completion) {
      _temp47 = _temp47.Value;
    }
    const trap = _temp47;
    if (trap === Value.undefined) {
      return Construct(target, argumentsList, newTarget);
    }
    let _temp48 = CreateArrayFromList(argumentsList);
    Assert(!(_temp48 instanceof AbruptCompletion), "CreateArrayFromList(argumentsList)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp48 instanceof Completion) {
      _temp48 = _temp48.Value;
    }
    const argArray = _temp48;
    let _temp49 = Call(trap, handler, [target, argArray, newTarget]);
    /* c8 ignore if */
    if (_temp49 instanceof AbruptCompletion) {
      return _temp49;
    }
    /* c8 ignore if */
    if (_temp49 instanceof Completion) {
      _temp49 = _temp49.Value;
    }
    const newObj = _temp49;
    if (!(newObj instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', newObj);
    }
    return newObj;
  }
  ProxyConstruct.section = 'https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget';
  function isProxyExoticObject(O) {
    return 'ProxyHandler' in O;
  }

  /** https://tc39.es/ecma262/#sec-proxycreate */
  function ProxyCreate(target, handler) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!(target instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'CannotCreateProxyWith', 'non-object', 'target');
    }
    // 2. If Type(handler) is not Object, throw a TypeError exception.
    if (!(handler instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'CannotCreateProxyWith', 'non-object', 'handler');
    }
    // 3. Let P be ! MakeBasicObject(« [[ProxyHandler]], [[ProxyTarget]] »).
    let _temp50 = MakeBasicObject(['ProxyHandler', 'ProxyTarget']);
    Assert(!(_temp50 instanceof AbruptCompletion), "MakeBasicObject(['ProxyHandler', 'ProxyTarget'])" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp50 instanceof Completion) {
      _temp50 = _temp50.Value;
    }
    const P = _temp50;
    // 4. Set P's essential internal methods, except for [[Call]] and [[Construct]], to the definitions specified in 9.5.
    P.GetPrototypeOf = ProxyGetPrototypeOf;
    P.SetPrototypeOf = ProxySetPrototypeOf;
    P.IsExtensible = ProxyIsExtensible;
    P.PreventExtensions = ProxyPreventExtensions;
    P.GetOwnProperty = ProxyGetOwnProperty;
    P.DefineOwnProperty = ProxyDefineOwnProperty;
    P.HasProperty = ProxyHasProperty;
    P.Get = ProxyGet;
    P.Set = ProxySet;
    P.Delete = ProxyDelete;
    P.OwnPropertyKeys = ProxyOwnPropertyKeys;
    // 5. If IsCallable(target) is true, then
    if (IsCallable(target) === Value.true) {
      /** https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist. */
      P.Call = ProxyCall;
      // b. If IsConstructor(target) is true, then
      if (IsConstructor(target) === Value.true) {
        /** https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget. */
        P.Construct = ProxyConstruct;
      }
    }
    // 6. Set P.[[ProxyTarget]] to target.
    P.ProxyTarget = target;
    // 7. Set P.[[ProxyHandler]] to handler.
    P.ProxyHandler = handler;
    // 8. Return P.
    return P;
  }

  /** https://tc39.es/ecma262/#sec-object.prototype.hasownproperty */
  function ObjectProto_hasOwnProperty([V = Value.undefined], {
    thisValue
  }) {
    let _temp = ToPropertyKey(V);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 1. Let P be ? ToPropertyKey(V).
    const P = _temp;
    // 2. Let O be ? ToObject(this value).
    let _temp2 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const O = _temp2;
    // 3. Return ? HasOwnProperty(O, P).
    return HasOwnProperty(O, P);
  }

  /** https://tc39.es/ecma262/#sec-object.prototype.isprototypeof */
  ObjectProto_hasOwnProperty.section = 'https://tc39.es/ecma262/#sec-object.prototype.hasownproperty';
  function ObjectProto_isPrototypeOf([V = Value.undefined], {
    thisValue
  }) {
    // 1. If Type(V) is not Object, return false.
    if (!(V instanceof ObjectValue)) {
      return Value.false;
    }
    // 2. Let O be ? ToObject(this value).
    let _temp3 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const O = _temp3;
    // 3. Repeat,
    while (true) {
      let _temp4 = V.GetPrototypeOf();
      /* c8 ignore if */
      if (_temp4 instanceof AbruptCompletion) {
        return _temp4;
      }
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      // a. Set V to ? V.[[GetPrototypeOf]]().
      V = _temp4;
      // b. If V is null, return false.
      if (V === Value.null) {
        return Value.false;
      }
      // c. If SameValue(O, V) is true, return true.
      if (SameValue(O, V) === Value.true) {
        return Value.true;
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable */
  ObjectProto_isPrototypeOf.section = 'https://tc39.es/ecma262/#sec-object.prototype.isprototypeof';
  function ObjectProto_propertyIsEnumerable([V = Value.undefined], {
    thisValue
  }) {
    let _temp5 = ToPropertyKey(V);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    // 1. Let P be ? ToPropertyKey(V).
    const P = _temp5;
    // 2. Let O be ? ToObject(this value).
    let _temp6 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const O = _temp6;
    // 3. Let desc be ? O.[[GetOwnProperty]](P).
    let _temp7 = O.GetOwnProperty(P);
    /* c8 ignore if */
    if (_temp7 instanceof AbruptCompletion) {
      return _temp7;
    }
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    const desc = _temp7;
    // 4. If desc is undefined, return false.
    if (desc instanceof UndefinedValue) {
      return Value.false;
    }
    // 5. Return desc.[[Enumerable]].
    return desc.Enumerable;
  }

  /** https://tc39.es/ecma262/#sec-object.prototype.tolocalestring */
  ObjectProto_propertyIsEnumerable.section = 'https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable';
  function ObjectProto_toLocaleString(argList, {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Return ? Invoke(O, "toString").
    return Invoke(O, Value('toString'));
  }

  /** https://tc39.es/ecma262/#sec-object.prototype.tostring */
  ObjectProto_toLocaleString.section = 'https://tc39.es/ecma262/#sec-object.prototype.tolocalestring';
  function ObjectProto_toString(argList, {
    thisValue
  }) {
    // 1. If the this value is undefined, return "[object Undefined]".
    if (thisValue === Value.undefined) {
      return Value('[object Undefined]');
    }
    // 2. If the this value is null, return "[object Null]".
    if (thisValue === Value.null) {
      return Value('[object Null]');
    }
    // 3. Let O be ! ToObject(this value).
    let _temp8 = ToObject(thisValue);
    Assert(!(_temp8 instanceof AbruptCompletion), "ToObject(thisValue)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    const O = _temp8;
    // 4. Let isArray be ? IsArray(O).
    let _temp9 = IsArray(O);
    /* c8 ignore if */
    if (_temp9 instanceof AbruptCompletion) {
      return _temp9;
    }
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    const isArray = _temp9;
    let builtinTag;
    // 5. If isArray is true, let builtinTag be "Array".
    if (isArray === Value.true) {
      builtinTag = 'Array';
    } else if ('ParameterMap' in O) {
      // 6. Else if O has a [[ParameterMap]] internal slot, let builtinTag be "Arguments".
      builtinTag = 'Arguments';
    } else if ('Call' in O) {
      // 7. Else if O has a [[Call]] internal method, let builtinTag be "Function".
      builtinTag = 'Function';
    } else if ('ErrorData' in O) {
      // 8. Else if O has an [[ErrorData]] internal slot, let builtinTag be "Error".
      builtinTag = 'Error';
    } else if ('BooleanData' in O) {
      // 9. Else if O has a [[BooleanData]] internal slot, let builtinTag be "Boolean".
      builtinTag = 'Boolean';
    } else if ('NumberData' in O) {
      // 10. Else if O has a [[NumberData]] internal slot, let builtinTag be "Number".
      builtinTag = 'Number';
    } else if ('StringData' in O) {
      // 11. Else if O has a [[StringData]] internal slot, let builtinTag be "String".
      builtinTag = 'String';
    } else if ('DateValue' in O) {
      // 12. Else if O has a [[DateValue]] internal slot, let builtinTag be "Date".
      builtinTag = 'Date';
    } else if ('RegExpMatcher' in O) {
      // 13. Else if O has a [[RegExpMatcher]] internal slot, let builtinTag be "RegExp".
      builtinTag = 'RegExp';
    } else {
      // 14. Else, let builtinTag be "Object".
      builtinTag = 'Object';
    }
    // 15. Let tag be ? Get(O, @@toStringTag).
    let _temp10 = Get(O, wellKnownSymbols.toStringTag);
    /* c8 ignore if */
    if (_temp10 instanceof AbruptCompletion) {
      return _temp10;
    }
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    let tag = _temp10;
    // 16. If Type(tag) is not String, set tag to builtinTag.
    if (!(tag instanceof JSStringValue)) {
      tag = builtinTag;
    }
    // 17. Return the string-concatenation of "[object ", tag, and "]".
    return Value(`[object ${tag.stringValue ? tag.stringValue() : tag}]`);
  }

  /** https://tc39.es/ecma262/#sec-object.prototype.valueof */
  ObjectProto_toString.section = 'https://tc39.es/ecma262/#sec-object.prototype.tostring';
  function ObjectProto_valueOf(argList, {
    thisValue
  }) {
    // 1. Return ? ToObject(this value).
    return ToObject(thisValue);
  }

  /** https://tc39.es/ecma262/#sec-object.prototype.__defineGetter__ */
  ObjectProto_valueOf.section = 'https://tc39.es/ecma262/#sec-object.prototype.valueof';
  function ObjectProto__defineGetter__([P = Value.undefined, getter = Value.undefined], {
    thisValue
  }) {
    let _temp11 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp11 instanceof AbruptCompletion) {
      return _temp11;
    }
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    // 1. Let O be ? ToObject(this value).
    const O = _temp11;
    // 2. If IsCallable(getter) is false, throw a TypeError exception.
    if (IsCallable(getter) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', getter);
    }
    // 3. Let desc be PropertyDescriptor { [[Get]]: getter, [[Enumerable]]: true, [[Configurable]]: true }.
    const desc = exports.Descriptor({
      Get: getter,
      Enumerable: Value.true,
      Configurable: Value.true
    });
    // 4. Let key be ? ToPropertyKey(P).
    let _temp12 = ToPropertyKey(P);
    /* c8 ignore if */
    if (_temp12 instanceof AbruptCompletion) {
      return _temp12;
    }
    /* c8 ignore if */
    if (_temp12 instanceof Completion) {
      _temp12 = _temp12.Value;
    }
    const key = _temp12;
    // 5. Perform ? DefinePropertyOrThrow(O, key, desc).
    let _temp13 = DefinePropertyOrThrow(O, key, desc);
    /* c8 ignore if */
    if (_temp13 instanceof AbruptCompletion) {
      return _temp13;
    }
    /* c8 ignore if */
    if (_temp13 instanceof Completion) {
      _temp13 = _temp13.Value;
    }
    // 6. Return undefined.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-object.prototype.__defineSetter__ */
  ObjectProto__defineGetter__.section = 'https://tc39.es/ecma262/#sec-object.prototype.__defineGetter__';
  function ObjectProto__defineSetter__([P = Value.undefined, setter = Value.undefined], {
    thisValue
  }) {
    let _temp14 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp14 instanceof AbruptCompletion) {
      return _temp14;
    }
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    // 1. Let O be ? ToObject(this value).
    const O = _temp14;
    // 2. If IsCallable(setter) is false, throw a TypeError exception.
    if (IsCallable(setter) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', setter);
    }
    // 3. Let desc be PropertyDescriptor { [[Set]]: setter, [[Enumerable]]: true, [[Configurable]]: true }.
    const desc = exports.Descriptor({
      Set: setter,
      Enumerable: Value.true,
      Configurable: Value.true
    });
    // 4. Let key be ? ToPropertyKey(P).
    let _temp15 = ToPropertyKey(P);
    /* c8 ignore if */
    if (_temp15 instanceof AbruptCompletion) {
      return _temp15;
    }
    /* c8 ignore if */
    if (_temp15 instanceof Completion) {
      _temp15 = _temp15.Value;
    }
    const key = _temp15;
    // 5. Perform ? DefinePropertyOrThrow(O, key, desc).
    let _temp16 = DefinePropertyOrThrow(O, key, desc);
    /* c8 ignore if */
    if (_temp16 instanceof AbruptCompletion) {
      return _temp16;
    }
    /* c8 ignore if */
    if (_temp16 instanceof Completion) {
      _temp16 = _temp16.Value;
    }
    // 6. Return undefined.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-object.prototype.__lookupGetter__ */
  ObjectProto__defineSetter__.section = 'https://tc39.es/ecma262/#sec-object.prototype.__defineSetter__';
  function ObjectProto__lookupGetter__([P = Value.undefined], {
    thisValue
  }) {
    let _temp17 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp17 instanceof AbruptCompletion) {
      return _temp17;
    }
    /* c8 ignore if */
    if (_temp17 instanceof Completion) {
      _temp17 = _temp17.Value;
    }
    // 1. Let O be ? ToObject(this value).
    let O = _temp17;
    // 2. Let key be ? ToPropertyKey(P).
    let _temp18 = ToPropertyKey(P);
    /* c8 ignore if */
    if (_temp18 instanceof AbruptCompletion) {
      return _temp18;
    }
    /* c8 ignore if */
    if (_temp18 instanceof Completion) {
      _temp18 = _temp18.Value;
    }
    const key = _temp18;
    // 3. Repeat,
    while (true) {
      let _temp19 = O.GetOwnProperty(key);
      /* c8 ignore if */
      if (_temp19 instanceof AbruptCompletion) {
        return _temp19;
      }
      /* c8 ignore if */
      if (_temp19 instanceof Completion) {
        _temp19 = _temp19.Value;
      }
      // a. Let desc be ? O.[[GetOwnProperty]](key).
      const desc = _temp19;
      // b. If desc is not undefined, then
      if (desc !== Value.undefined) {
        // i. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].
        if (IsAccessorDescriptor(desc)) {
          return desc.Get;
        }
        // ii. Return undefined.
        return Value.undefined;
      }
      // c. Set O to ? O.[[GetPrototypeOf]]().
      let _temp20 = O.GetPrototypeOf();
      /* c8 ignore if */
      if (_temp20 instanceof AbruptCompletion) {
        return _temp20;
      }
      /* c8 ignore if */
      if (_temp20 instanceof Completion) {
        _temp20 = _temp20.Value;
      }
      O = _temp20;
      // d. If O is null, return undefined.
      if (O === Value.null) {
        return Value.undefined;
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-object.prototype.__lookupSetter__ */
  ObjectProto__lookupGetter__.section = 'https://tc39.es/ecma262/#sec-object.prototype.__lookupGetter__';
  function ObjectProto__lookupSetter__([P = Value.undefined], {
    thisValue
  }) {
    let _temp21 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp21 instanceof AbruptCompletion) {
      return _temp21;
    }
    /* c8 ignore if */
    if (_temp21 instanceof Completion) {
      _temp21 = _temp21.Value;
    }
    // 1. Let O be ? ToObject(this value).
    let O = _temp21;
    // 2. Let key be ? ToPropertyKey(P).
    let _temp22 = ToPropertyKey(P);
    /* c8 ignore if */
    if (_temp22 instanceof AbruptCompletion) {
      return _temp22;
    }
    /* c8 ignore if */
    if (_temp22 instanceof Completion) {
      _temp22 = _temp22.Value;
    }
    const key = _temp22;
    // 3. Repeat,
    while (true) {
      let _temp23 = O.GetOwnProperty(key);
      /* c8 ignore if */
      if (_temp23 instanceof AbruptCompletion) {
        return _temp23;
      }
      /* c8 ignore if */
      if (_temp23 instanceof Completion) {
        _temp23 = _temp23.Value;
      }
      // a. Let desc be ? O.[[GetOwnProperty]](key).
      const desc = _temp23;
      // b. If desc is not undefined, then
      if (desc !== Value.undefined) {
        // i. If IsAccessorDescriptor(desc) is true, return desc.[[Set]].
        if (IsAccessorDescriptor(desc)) {
          return desc.Set;
        }
        // ii. Return undefined.
        return Value.undefined;
      }
      // c. Set O to ? O.[[GetPrototypeOf]]().
      let _temp24 = O.GetPrototypeOf();
      /* c8 ignore if */
      if (_temp24 instanceof AbruptCompletion) {
        return _temp24;
      }
      /* c8 ignore if */
      if (_temp24 instanceof Completion) {
        _temp24 = _temp24.Value;
      }
      O = _temp24;
      // d. If O is null, return undefined.
      if (O === Value.null) {
        return Value.undefined;
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-get-object.prototype.__proto__ */
  ObjectProto__lookupSetter__.section = 'https://tc39.es/ecma262/#sec-object.prototype.__lookupSetter__';
  function ObjectProto__proto__Get(args, {
    thisValue
  }) {
    let _temp25 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp25 instanceof AbruptCompletion) {
      return _temp25;
    }
    /* c8 ignore if */
    if (_temp25 instanceof Completion) {
      _temp25 = _temp25.Value;
    }
    // 1. Let O be ? ToObject(this value).
    const O = _temp25;
    // 2. Return ? O.[[GetPrototypeOf]]().
    return O.GetPrototypeOf();
  }

  /** https://tc39.es/ecma262/#sec-set-object.prototype.__proto__ */
  ObjectProto__proto__Get.section = 'https://tc39.es/ecma262/#sec-get-object.prototype.__proto__';
  function ObjectProto__proto__Set([proto = Value.undefined], {
    thisValue
  }) {
    let _temp26 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp26 instanceof AbruptCompletion) {
      return _temp26;
    }
    /* c8 ignore if */
    if (_temp26 instanceof Completion) {
      _temp26 = _temp26.Value;
    }
    // 1. Let O be ? RequireObjectCoercible(this value).
    const O = _temp26;
    // 2. If Type(proto) is neither Object nor Null, return undefined.
    if (!(proto instanceof ObjectValue) && !(proto instanceof NullValue)) {
      return Value.undefined;
    }
    // 3. If Type(O) is not Object, return undefined.
    if (!(O instanceof ObjectValue)) {
      return Value.undefined;
    }
    // 4. Let status be ? O.[[SetPrototypeOf]](proto).
    let _temp27 = O.SetPrototypeOf(proto);
    /* c8 ignore if */
    if (_temp27 instanceof AbruptCompletion) {
      return _temp27;
    }
    /* c8 ignore if */
    if (_temp27 instanceof Completion) {
      _temp27 = _temp27.Value;
    }
    const status = _temp27;
    // 5. If status is false, throw a TypeError exception.
    if (status === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'ObjectSetPrototype');
    }
    // 6. Return undefined.
    return Value.undefined;
  }
  ObjectProto__proto__Set.section = 'https://tc39.es/ecma262/#sec-set-object.prototype.__proto__';
  function bootstrapObjectPrototype(realmRec) {
    const proto = realmRec.Intrinsics['%Object.prototype%'];
    assignProps(realmRec, proto, [['hasOwnProperty', ObjectProto_hasOwnProperty, 1], ['isPrototypeOf', ObjectProto_isPrototypeOf, 1], ['propertyIsEnumerable', ObjectProto_propertyIsEnumerable, 1], ['toLocaleString', ObjectProto_toLocaleString, 0], ['toString', ObjectProto_toString, 0], ['valueOf', ObjectProto_valueOf, 0], ['__defineGetter__', ObjectProto__defineGetter__, 2], ['__defineSetter__', ObjectProto__defineSetter__, 2], ['__lookupGetter__', ObjectProto__lookupGetter__, 1], ['__lookupSetter__', ObjectProto__lookupSetter__, 1], ['__proto__', [ObjectProto__proto__Get, ObjectProto__proto__Set]]]);
    let _temp28 = Get(proto, Value('toString'));
    Assert(!(_temp28 instanceof AbruptCompletion), "Get(proto, Value('toString'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp28 instanceof Completion) {
      _temp28 = _temp28.Value;
    }
    realmRec.Intrinsics['%Object.prototype.toString%'] = _temp28;
    let _temp29 = Get(proto, Value('valueOf'));
    Assert(!(_temp29 instanceof AbruptCompletion), "Get(proto, Value('valueOf'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp29 instanceof Completion) {
      _temp29 = _temp29.Value;
    }
    realmRec.Intrinsics['%Object.prototype.valueOf%'] = _temp29;
  }

  function AddEntriesFromIterable(target, iterable, adder) {
    if (IsCallable(adder) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', adder);
    }
    Assert(iterable !== undefined && iterable !== Value.undefined && iterable !== Value.null, "iterable !== undefined && iterable !== Value.undefined && iterable !== Value.null");
    let _temp = GetIterator(iterable);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const iteratorRecord = _temp;
    while (true) {
      let _temp2 = IteratorStep(iteratorRecord);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      const next = _temp2;
      if (next === Value.false) {
        return target;
      }
      let _temp3 = IteratorValue(next);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      const nextItem = _temp3;
      if (!(nextItem instanceof ObjectValue)) {
        const error = exports.surroundingAgent.Throw('TypeError', 'NotAnObject', nextItem);
        return IteratorClose(iteratorRecord, error);
      }
      // e. Let k be Get(nextItem, "0").
      let k = Get(nextItem, Value('0'));
      // f. IfAbruptCloseIterator(k, iteratorRecord).
      /* c8 ignore if */
      if (k instanceof AbruptCompletion) {
        return IteratorClose(iteratorRecord, k);
      }
      /* c8 ignore if */
      if (k instanceof Completion) {
        k = k.Value;
      }
      // g. Let v be Get(nextItem, "1").
      let v = Get(nextItem, Value('1'));
      // h. IfAbruptCloseIterator(v, iteratorRecord).
      /* c8 ignore if */
      if (v instanceof AbruptCompletion) {
        return IteratorClose(iteratorRecord, v);
      }
      /* c8 ignore if */
      if (v instanceof Completion) {
        v = v.Value;
      }
      // i. Let status be Call(adder, target, « k, v »).
      let status = Call(adder, target, [k, v]);
      // j. IfAbruptCloseIterator(status, iteratorRecord).
      /* c8 ignore if */
      if (status instanceof AbruptCompletion) {
        return IteratorClose(iteratorRecord, status);
      }
      /* c8 ignore if */
      if (status instanceof Completion) {
        status = status.Value;
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-map-iterable */
  function MapConstructor([iterable = Value.undefined], {
    NewTarget
  }) {
    // 1. If NewTarget is undefined, throw a TypeError exception.
    if (NewTarget === Value.undefined) {
      return exports.surroundingAgent.Throw('TypeError', 'ConstructorNonCallable', this);
    }
    // 2. Let map be ? OrdinaryCreateFromConstructor(NewTarget, "%Map.prototype%", « [[MapData]] »).
    let _temp4 = OrdinaryCreateFromConstructor(NewTarget, '%Map.prototype%', ['MapData']);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const map = _temp4;
    // 3. Set map.[[MapData]] to a new empty List.
    map.MapData = [];
    // 4. If iterable is either undefined or null, return map.
    if (iterable === Value.undefined || iterable === Value.null) {
      return map;
    }
    // 5. Let adder be ? Get(map, "set").
    let _temp5 = Get(map, Value('set'));
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const adder = _temp5;
    // 6. Return ? AddEntriesFromIterable(map, iterable, adder).
    return AddEntriesFromIterable(map, iterable, adder);
  }

  /** https://tc39.es/ecma262/#sec-get-map-@@species */
  MapConstructor.section = 'https://tc39.es/ecma262/#sec-map-iterable';
  function Map_speciesGetter(args, {
    thisValue
  }) {
    // 1. Return the this value.
    return thisValue;
  }
  Map_speciesGetter.section = 'https://tc39.es/ecma262/#sec-get-map-@@species';
  function bootstrapMap(realmRec) {
    const mapConstructor = bootstrapConstructor(realmRec, MapConstructor, 'Map', 0, realmRec.Intrinsics['%Map.prototype%'], [[wellKnownSymbols.species, [Map_speciesGetter]]]);
    realmRec.Intrinsics['%Map%'] = mapConstructor;
  }

  /** https://tc39.es/ecma262/#sec-object-value */
  function ObjectConstructor([value = Value.undefined], {
    NewTarget
  }) {
    // 1. If NewTarget is neither undefined nor the active function, then
    if (NewTarget !== Value.undefined && NewTarget !== exports.surroundingAgent.activeFunctionObject) {
      // a. Return ? OrdinaryCreateFromConstructor(NewTarget, "%Object.prototype%").
      return OrdinaryCreateFromConstructor(NewTarget, '%Object.prototype%');
    }
    // 2. If value is undefined or null, return OrdinaryObjectCreate(%Object.prototype%).
    if (value === Value.null || value === Value.undefined) {
      return OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%Object.prototype%'));
    }
    // 3. Return ! ToObject(value).
    let _temp = ToObject(value);
    Assert(!(_temp instanceof AbruptCompletion), "ToObject(value)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    return _temp;
  }

  /** https://tc39.es/ecma262/#sec-object.assign */
  ObjectConstructor.section = 'https://tc39.es/ecma262/#sec-object-value';
  function Object_assign([target = Value.undefined, ...sources]) {
    let _temp2 = ToObject(target);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 1. Let to be ? ToObject(target).
    const to = _temp2;
    // 2. If only one argument was passed, return to.
    if (sources.length === 0) {
      return to;
    }
    // 3. Let sources be the List of argument values starting with the second argument.
    // 4. For each element nextSource of sources, in ascending index order, do
    for (const nextSource of sources) {
      // a. If nextSource is neither undefined nor null, then
      if (nextSource !== Value.undefined && nextSource !== Value.null) {
        let _temp3 = ToObject(nextSource);
        Assert(!(_temp3 instanceof AbruptCompletion), "ToObject(nextSource)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
        // i. Let from be ! ToObject(nextSource).
        const from = _temp3;
        // ii. Let keys be ? from.[[OwnPropertyKeys]]().
        let _temp4 = from.OwnPropertyKeys();
        /* c8 ignore if */
        if (_temp4 instanceof AbruptCompletion) {
          return _temp4;
        }
        /* c8 ignore if */
        if (_temp4 instanceof Completion) {
          _temp4 = _temp4.Value;
        }
        const keys = _temp4;
        // iii. For each element nextKey of keys in List order, do
        for (const nextKey of keys) {
          let _temp5 = from.GetOwnProperty(nextKey);
          /* c8 ignore if */
          if (_temp5 instanceof AbruptCompletion) {
            return _temp5;
          }
          /* c8 ignore if */
          if (_temp5 instanceof Completion) {
            _temp5 = _temp5.Value;
          }
          // 1. Let desc be ? from.[[GetOwnProperty]](nextKey).
          const desc = _temp5;
          // 2. If desc is not undefined and desc.[[Enumerable]] is true, then
          if (desc !== Value.undefined && desc.Enumerable === Value.true) {
            let _temp6 = Get(from, nextKey);
            /* c8 ignore if */
            if (_temp6 instanceof AbruptCompletion) {
              return _temp6;
            }
            /* c8 ignore if */
            if (_temp6 instanceof Completion) {
              _temp6 = _temp6.Value;
            }
            // a. Let propValue be ? Get(from, nextKey).
            const propValue = _temp6;
            // b. Perform ? Set(to, nextKey, propValue, true).
            let _temp7 = Set$1(to, nextKey, propValue, Value.true);
            /* c8 ignore if */
            if (_temp7 instanceof AbruptCompletion) {
              return _temp7;
            }
            /* c8 ignore if */
            if (_temp7 instanceof Completion) {
              _temp7 = _temp7.Value;
            }
          }
        }
      }
    }
    // 5. Return to.
    return to;
  }

  /** https://tc39.es/ecma262/#sec-object.create */
  Object_assign.section = 'https://tc39.es/ecma262/#sec-object.assign';
  function Object_create([O = Value.undefined, Properties = Value.undefined]) {
    // 1. If Type(O) is neither Object nor Null, throw a TypeError exception.
    if (!(O instanceof ObjectValue) && !(O instanceof NullValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'ObjectPrototypeType');
    }
    // 2. Let obj be OrdinaryObjectCreate(O).
    const obj = OrdinaryObjectCreate(O);
    // 3. If Properties is not undefined, then
    if (Properties !== Value.undefined) {
      // a. Return ? ObjectDefineProperties(obj, Properties).
      return ObjectDefineProperties(obj, Properties);
    }
    // 4. Return obj.
    return obj;
  }

  /** https://tc39.es/ecma262/#sec-object.defineproperties */
  Object_create.section = 'https://tc39.es/ecma262/#sec-object.create';
  function Object_defineProperties([O = Value.undefined, Properties = Value.undefined]) {
    // 1. Return ? ObjectDefineProperties(O, Properties).
    return ObjectDefineProperties(O, Properties);
  }

  /** https://tc39.es/ecma262/#sec-objectdefineproperties ObjectDefineProperties */
  Object_defineProperties.section = 'https://tc39.es/ecma262/#sec-object.defineproperties';
  function ObjectDefineProperties(O, Properties) {
    // 1. If Type(O) is not Object, throw a TypeError exception.
    if (!(O instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', O);
    }
    // 2. Let props be ? ToObject(Properties).
    let _temp8 = ToObject(Properties);
    /* c8 ignore if */
    if (_temp8 instanceof AbruptCompletion) {
      return _temp8;
    }
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    const props = _temp8;
    // 3. Let keys be ? props.[[OwnPropertyKeys]]().
    let _temp9 = props.OwnPropertyKeys();
    /* c8 ignore if */
    if (_temp9 instanceof AbruptCompletion) {
      return _temp9;
    }
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    const keys = _temp9;
    // 4. Let descriptors be a new empty List.
    const descriptors = [];
    // 5. For each element nextKey of keys in List order, do
    for (const nextKey of keys) {
      let _temp10 = props.GetOwnProperty(nextKey);
      /* c8 ignore if */
      if (_temp10 instanceof AbruptCompletion) {
        return _temp10;
      }
      /* c8 ignore if */
      if (_temp10 instanceof Completion) {
        _temp10 = _temp10.Value;
      }
      // a. Let propDesc be ? props.[[GetOwnProperty]](nextKey).
      const propDesc = _temp10;
      // b. If propDesc is not undefined and propDesc.[[Enumerable]] is true, then
      if (propDesc !== Value.undefined && propDesc.Enumerable === Value.true) {
        let _temp11 = Get(props, nextKey);
        /* c8 ignore if */
        if (_temp11 instanceof AbruptCompletion) {
          return _temp11;
        }
        /* c8 ignore if */
        if (_temp11 instanceof Completion) {
          _temp11 = _temp11.Value;
        }
        // i. Let descObj be ? Get(props, nextKey).
        const descObj = _temp11;
        // ii. Let desc be ? ToPropertyDescriptor(descObj).
        let _temp12 = ToPropertyDescriptor(descObj);
        /* c8 ignore if */
        if (_temp12 instanceof AbruptCompletion) {
          return _temp12;
        }
        /* c8 ignore if */
        if (_temp12 instanceof Completion) {
          _temp12 = _temp12.Value;
        }
        const desc = _temp12;
        // iii. Append the pair (a two element List) consisting of nextKey and desc to the end of descriptors.
        descriptors.push([nextKey, desc]);
      }
    }
    // 6. For each pair from descriptors in list order, do
    for (const pair of descriptors) {
      // a. Let P be the first element of pair.
      const P = pair[0];
      // b. Let desc be the second element of pair.
      const desc = pair[1];
      // c. Perform ? DefinePropertyOrThrow(O, P, desc).
      let _temp13 = DefinePropertyOrThrow(O, P, desc);
      /* c8 ignore if */
      if (_temp13 instanceof AbruptCompletion) {
        return _temp13;
      }
      /* c8 ignore if */
      if (_temp13 instanceof Completion) {
        _temp13 = _temp13.Value;
      }
    }
    // 7. Return O.
    return O;
  }

  /** https://tc39.es/ecma262/#sec-object.defineproperty */
  ObjectDefineProperties.section = 'https://tc39.es/ecma262/#sec-objectdefineproperties';
  function Object_defineProperty([O = Value.undefined, P = Value.undefined, Attributes = Value.undefined]) {
    // 1. If Type(O) is not Object, throw a TypeError exception.
    if (!(O instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', O);
    }
    // 2. Let key be ? ToPropertyKey(P).
    let _temp14 = ToPropertyKey(P);
    /* c8 ignore if */
    if (_temp14 instanceof AbruptCompletion) {
      return _temp14;
    }
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    const key = _temp14;
    // 3. Let desc be ? ToPropertyDescriptor(Attributes).
    let _temp15 = ToPropertyDescriptor(Attributes);
    /* c8 ignore if */
    if (_temp15 instanceof AbruptCompletion) {
      return _temp15;
    }
    /* c8 ignore if */
    if (_temp15 instanceof Completion) {
      _temp15 = _temp15.Value;
    }
    const desc = _temp15;
    // 4. Perform ? DefinePropertyOrThrow(O, key, desc).
    let _temp16 = DefinePropertyOrThrow(O, key, desc);
    /* c8 ignore if */
    if (_temp16 instanceof AbruptCompletion) {
      return _temp16;
    }
    /* c8 ignore if */
    if (_temp16 instanceof Completion) {
      _temp16 = _temp16.Value;
    }
    // 5. Return O.
    return O;
  }

  /** https://tc39.es/ecma262/#sec-object.entries */
  Object_defineProperty.section = 'https://tc39.es/ecma262/#sec-object.defineproperty';
  function Object_entries([O = Value.undefined]) {
    let _temp17 = ToObject(O);
    /* c8 ignore if */
    if (_temp17 instanceof AbruptCompletion) {
      return _temp17;
    }
    /* c8 ignore if */
    if (_temp17 instanceof Completion) {
      _temp17 = _temp17.Value;
    }
    // 1. Let obj be ? ToObject(O).
    const obj = _temp17;
    // 2. Let nameList be ? EnumerableOwnPropertyNames(obj, key+value).
    let _temp18 = EnumerableOwnPropertyNames(obj, 'key+value');
    /* c8 ignore if */
    if (_temp18 instanceof AbruptCompletion) {
      return _temp18;
    }
    /* c8 ignore if */
    if (_temp18 instanceof Completion) {
      _temp18 = _temp18.Value;
    }
    const nameList = _temp18;
    // 3. Return CreateArrayFromList(nameList).
    return CreateArrayFromList(nameList);
  }

  /** https://tc39.es/ecma262/#sec-object.freeze */
  Object_entries.section = 'https://tc39.es/ecma262/#sec-object.entries';
  function Object_freeze([O = Value.undefined]) {
    // 1. If Type(O) is not Object, return O.
    if (!(O instanceof ObjectValue)) {
      return O;
    }
    // 2. Let status be ? SetIntegrityLevel(O, frozen).
    let _temp19 = SetIntegrityLevel(O, 'frozen');
    /* c8 ignore if */
    if (_temp19 instanceof AbruptCompletion) {
      return _temp19;
    }
    /* c8 ignore if */
    if (_temp19 instanceof Completion) {
      _temp19 = _temp19.Value;
    }
    const status = _temp19;
    // 3. If status is false, throw a TypeError exception.
    if (status === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'UnableToFreeze', O);
    }
    // 4. Return O.
    return O;
  }

  /** https://tc39.es/ecma262/#sec-object.fromentries */
  Object_freeze.section = 'https://tc39.es/ecma262/#sec-object.freeze';
  function Object_fromEntries([iterable = Value.undefined]) {
    let _temp20 = RequireObjectCoercible(iterable);
    /* c8 ignore if */
    if (_temp20 instanceof AbruptCompletion) {
      return _temp20;
    }
    /* c8 ignore if */
    if (_temp20 instanceof Completion) {
      _temp20 = _temp20.Value;
    }
    // 2. Let obj be ! OrdinaryObjectCreate(%Object.prototype%).
    let _temp21 = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%Object.prototype%'));
    Assert(!(_temp21 instanceof AbruptCompletion), "OrdinaryObjectCreate(surroundingAgent.intrinsic('%Object.prototype%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp21 instanceof Completion) {
      _temp21 = _temp21.Value;
    }
    const obj = _temp21;
    // 3. Assert: obj is an extensible ordinary object with no own properties.
    Assert(obj.Extensible === Value.true && obj.properties.size === 0, "obj.Extensible === Value.true && obj.properties.size === 0");
    // 4. Let closure be a new Abstract Closure with parameters (key, value) that captures obj and performs the following steps when called:
    const closure = ([key = Value.undefined, value = Value.undefined]) => {
      let _temp22 = ToPropertyKey(key);
      /* c8 ignore if */
      if (_temp22 instanceof AbruptCompletion) {
        return _temp22;
      }
      /* c8 ignore if */
      if (_temp22 instanceof Completion) {
        _temp22 = _temp22.Value;
      }
      // a. Let propertyKey be ? ToPropertyKey(key).
      const propertyKey = _temp22;
      // b. Perform ! CreateDataPropertyOrThrow(obj, propertyKey, value).
      let _temp23 = CreateDataPropertyOrThrow(obj, propertyKey, value);
      Assert(!(_temp23 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(obj, propertyKey, value)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp23 instanceof Completion) {
        _temp23 = _temp23.Value;
      }
      // c. Return undefined.
      return Value.undefined;
    };
    // 5. Let adder be ! CreateBuiltinFunction(closure, 2, "", « »).
    let _temp24 = CreateBuiltinFunction(closure, 2, Value(''), []);
    Assert(!(_temp24 instanceof AbruptCompletion), "CreateBuiltinFunction(closure, 2, Value(''), [])" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp24 instanceof Completion) {
      _temp24 = _temp24.Value;
    }
    const adder = _temp24;
    // 6. Return ? AddEntriesFromIterable(obj, iterable, adder).
    return AddEntriesFromIterable(obj, iterable, adder);
  }

  /** https://tc39.es/ecma262/#sec-object.getownpropertydescriptor */
  Object_fromEntries.section = 'https://tc39.es/ecma262/#sec-object.fromentries';
  function Object_getOwnPropertyDescriptor([O = Value.undefined, P = Value.undefined]) {
    let _temp25 = ToObject(O);
    /* c8 ignore if */
    if (_temp25 instanceof AbruptCompletion) {
      return _temp25;
    }
    /* c8 ignore if */
    if (_temp25 instanceof Completion) {
      _temp25 = _temp25.Value;
    }
    // 1. Let obj be ? ToObject(O).
    const obj = _temp25;
    // 2. Let key be ? ToPropertyKey(P).
    let _temp26 = ToPropertyKey(P);
    /* c8 ignore if */
    if (_temp26 instanceof AbruptCompletion) {
      return _temp26;
    }
    /* c8 ignore if */
    if (_temp26 instanceof Completion) {
      _temp26 = _temp26.Value;
    }
    const key = _temp26;
    // 3. Let desc be ? obj.[[GetOwnProperty]](key).
    let _temp27 = obj.GetOwnProperty(key);
    /* c8 ignore if */
    if (_temp27 instanceof AbruptCompletion) {
      return _temp27;
    }
    /* c8 ignore if */
    if (_temp27 instanceof Completion) {
      _temp27 = _temp27.Value;
    }
    const desc = _temp27;
    // 4. Return FromPropertyDescriptor(desc).
    return FromPropertyDescriptor(desc);
  }

  /** https://tc39.es/ecma262/#sec-object.getownpropertydescriptors */
  Object_getOwnPropertyDescriptor.section = 'https://tc39.es/ecma262/#sec-object.getownpropertydescriptor';
  function Object_getOwnPropertyDescriptors([O = Value.undefined]) {
    let _temp28 = ToObject(O);
    /* c8 ignore if */
    if (_temp28 instanceof AbruptCompletion) {
      return _temp28;
    }
    /* c8 ignore if */
    if (_temp28 instanceof Completion) {
      _temp28 = _temp28.Value;
    }
    // 1. Let obj be ? ToObject(O).
    const obj = _temp28;
    // 2. Let ownKeys be ? obj.[[OwnPropertyKeys]]().
    let _temp29 = obj.OwnPropertyKeys();
    /* c8 ignore if */
    if (_temp29 instanceof AbruptCompletion) {
      return _temp29;
    }
    /* c8 ignore if */
    if (_temp29 instanceof Completion) {
      _temp29 = _temp29.Value;
    }
    const ownKeys = _temp29;
    // 3. Let descriptors be ! OrdinaryObjectCreate(%Object.prototype%).
    let _temp30 = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%Object.prototype%'));
    Assert(!(_temp30 instanceof AbruptCompletion), "OrdinaryObjectCreate(surroundingAgent.intrinsic('%Object.prototype%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp30 instanceof Completion) {
      _temp30 = _temp30.Value;
    }
    const descriptors = _temp30;
    // 4. For each element key of ownKeys in List order, do
    for (const key of ownKeys) {
      let _temp31 = obj.GetOwnProperty(key);
      /* c8 ignore if */
      if (_temp31 instanceof AbruptCompletion) {
        return _temp31;
      }
      /* c8 ignore if */
      if (_temp31 instanceof Completion) {
        _temp31 = _temp31.Value;
      }
      // a. Let desc be ? obj.[[GetOwnProperty]](key).
      const desc = _temp31;
      // b. Let descriptor be ! FromPropertyDescriptor(desc).
      let _temp32 = FromPropertyDescriptor(desc);
      Assert(!(_temp32 instanceof AbruptCompletion), "FromPropertyDescriptor(desc)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp32 instanceof Completion) {
        _temp32 = _temp32.Value;
      }
      const descriptor = _temp32;
      // c. If descriptor is not undefined, perform ! CreateDataPropertyOrThrow(descriptors, key, descriptor).
      if (descriptor !== Value.undefined) {
        let _temp33 = CreateDataProperty(descriptors, key, descriptor);
        Assert(!(_temp33 instanceof AbruptCompletion), "CreateDataProperty(descriptors, key, descriptor)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp33 instanceof Completion) {
          _temp33 = _temp33.Value;
        }
      }
    }
    // 5. Return descriptors.
    return descriptors;
  }

  /** https://tc39.es/ecma262/#sec-getownpropertykeys */
  Object_getOwnPropertyDescriptors.section = 'https://tc39.es/ecma262/#sec-object.getownpropertydescriptors';
  function GetOwnPropertyKeys(O, type) {
    let _temp34 = ToObject(O);
    /* c8 ignore if */
    if (_temp34 instanceof AbruptCompletion) {
      return _temp34;
    }
    /* c8 ignore if */
    if (_temp34 instanceof Completion) {
      _temp34 = _temp34.Value;
    }
    // 1. Let obj be ? ToObject(O).
    const obj = _temp34;
    // 2. Let keys be ? obj.[[OwnPropertyKeys]]().
    let _temp35 = obj.OwnPropertyKeys();
    /* c8 ignore if */
    if (_temp35 instanceof AbruptCompletion) {
      return _temp35;
    }
    /* c8 ignore if */
    if (_temp35 instanceof Completion) {
      _temp35 = _temp35.Value;
    }
    const keys = _temp35;
    // 3. Let nameList be a new empty List.
    const nameList = [];
    // 4. For each element nextKey of keys in List order, do
    keys.forEach(nextKey => {
      // a. If Type(nextKey) is Symbol and type is symbol or Type(nextKey) is String and type is string, then
      if (Type(nextKey) === type) {
        // i. Append nextKey as the last element of nameList.
        nameList.push(nextKey);
      }
    });
    return CreateArrayFromList(nameList);
  }

  /** https://tc39.es/ecma262/#sec-object.getownpropertynames */
  GetOwnPropertyKeys.section = 'https://tc39.es/ecma262/#sec-getownpropertykeys';
  function Object_getOwnPropertyNames([O = Value.undefined]) {
    // 1. Return ? GetOwnPropertyKeys(O, string).
    return GetOwnPropertyKeys(O, 'String');
  }

  /** https://tc39.es/ecma262/#sec-object.getownpropertysymbols */
  Object_getOwnPropertyNames.section = 'https://tc39.es/ecma262/#sec-object.getownpropertynames';
  function Object_getOwnPropertySymbols([O = Value.undefined]) {
    // 1. Return ? GetOwnPropertyKeys(O, symbol).
    return GetOwnPropertyKeys(O, 'Symbol');
  }

  /** https://tc39.es/ecma262/#sec-object.getprototypeof */
  Object_getOwnPropertySymbols.section = 'https://tc39.es/ecma262/#sec-object.getownpropertysymbols';
  function Object_getPrototypeOf([O = Value.undefined]) {
    let _temp36 = ToObject(O);
    /* c8 ignore if */
    if (_temp36 instanceof AbruptCompletion) {
      return _temp36;
    }
    /* c8 ignore if */
    if (_temp36 instanceof Completion) {
      _temp36 = _temp36.Value;
    }
    // 1. Let obj be ? ToObject(O).
    const obj = _temp36;
    // 2. Return ? obj.[[GetPrototypeOf]]().
    return obj.GetPrototypeOf();
  }

  /** https://tc39.es/ecma262/#sec-object.hasown */
  Object_getPrototypeOf.section = 'https://tc39.es/ecma262/#sec-object.getprototypeof';
  function Object_hasOwn([O = Value.undefined, P = Value.undefined]) {
    let _temp37 = ToObject(O);
    /* c8 ignore if */
    if (_temp37 instanceof AbruptCompletion) {
      return _temp37;
    }
    /* c8 ignore if */
    if (_temp37 instanceof Completion) {
      _temp37 = _temp37.Value;
    }
    // 1. Let obj be ? ToObject(O).
    const obj = _temp37;
    // 2. Let O be ? ToObject(this value).
    let _temp38 = ToPropertyKey(P);
    /* c8 ignore if */
    if (_temp38 instanceof AbruptCompletion) {
      return _temp38;
    }
    /* c8 ignore if */
    if (_temp38 instanceof Completion) {
      _temp38 = _temp38.Value;
    }
    const key = _temp38;
    // 3. Return ? HasOwnProperty(obj, key).
    return HasOwnProperty(obj, key);
  }

  /** https://tc39.es/ecma262/#sec-object.is */
  Object_hasOwn.section = 'https://tc39.es/ecma262/#sec-object.hasown';
  function Object_is([value1 = Value.undefined, value2 = Value.undefined]) {
    // 1. Return SameValue(value1, value2).
    return SameValue(value1, value2);
  }

  /** https://tc39.es/ecma262/#sec-object.isextensible */
  Object_is.section = 'https://tc39.es/ecma262/#sec-object.is';
  function Object_isExtensible([O = Value.undefined]) {
    // 1. If Type(O) is not Object, return false.
    if (!(O instanceof ObjectValue)) {
      return Value.false;
    }
    // 2. Return ? IsExtensible(O).
    return IsExtensible(O);
  }

  /** https://tc39.es/ecma262/#sec-object.isfrozen */
  Object_isExtensible.section = 'https://tc39.es/ecma262/#sec-object.isextensible';
  function Object_isFrozen([O = Value.undefined]) {
    // 1. If Type(O) is not Object, return true.
    if (!(O instanceof ObjectValue)) {
      return Value.true;
    }
    // 2. Return ? TestIntegrityLevel(O, frozen).
    return TestIntegrityLevel(O, 'frozen');
  }

  /** https://tc39.es/ecma262/#sec-object.issealed */
  Object_isFrozen.section = 'https://tc39.es/ecma262/#sec-object.isfrozen';
  function Object_isSealed([O = Value.undefined]) {
    // 1. If Type(O) is not Object, return true.
    if (!(O instanceof ObjectValue)) {
      return Value.true;
    }
    // 2. Return ? TestIntegrityLevel(O, sealed).
    return TestIntegrityLevel(O, 'sealed');
  }

  /** https://tc39.es/ecma262/#sec-object.keys */
  Object_isSealed.section = 'https://tc39.es/ecma262/#sec-object.issealed';
  function Object_keys([O = Value.undefined]) {
    let _temp39 = ToObject(O);
    /* c8 ignore if */
    if (_temp39 instanceof AbruptCompletion) {
      return _temp39;
    }
    /* c8 ignore if */
    if (_temp39 instanceof Completion) {
      _temp39 = _temp39.Value;
    }
    // 1. Let obj be ? ToObject(O).
    const obj = _temp39;
    // 2. Let nameList be ? EnumerableOwnPropertyNames(obj, key).
    let _temp40 = EnumerableOwnPropertyNames(obj, 'key');
    /* c8 ignore if */
    if (_temp40 instanceof AbruptCompletion) {
      return _temp40;
    }
    /* c8 ignore if */
    if (_temp40 instanceof Completion) {
      _temp40 = _temp40.Value;
    }
    const nameList = _temp40;
    // 3. Return CreateArrayFromList(nameList).
    return CreateArrayFromList(nameList);
  }

  /** https://tc39.es/ecma262/#sec-object.preventextensions */
  Object_keys.section = 'https://tc39.es/ecma262/#sec-object.keys';
  function Object_preventExtensions([O = Value.undefined]) {
    // 1. If Type(O) is not Object, return O.
    if (!(O instanceof ObjectValue)) {
      return O;
    }
    // 2. Let status be ? O.[[PreventExtensions]]().
    let _temp41 = O.PreventExtensions();
    /* c8 ignore if */
    if (_temp41 instanceof AbruptCompletion) {
      return _temp41;
    }
    /* c8 ignore if */
    if (_temp41 instanceof Completion) {
      _temp41 = _temp41.Value;
    }
    const status = _temp41;
    // 3. If status is false, throw a TypeError exception.
    if (status === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'UnableToPreventExtensions', O);
    }
    // 4. Return O.
    return O;
  }

  /** https://tc39.es/ecma262/#sec-object.seal */
  Object_preventExtensions.section = 'https://tc39.es/ecma262/#sec-object.preventextensions';
  function Object_seal([O = Value.undefined]) {
    // 1. If Type(O) is not Object, return O.
    if (!(O instanceof ObjectValue)) {
      return O;
    }
    // 2. Let status be ? SetIntegrityLevel(O, sealed).
    let _temp42 = SetIntegrityLevel(O, 'sealed');
    /* c8 ignore if */
    if (_temp42 instanceof AbruptCompletion) {
      return _temp42;
    }
    /* c8 ignore if */
    if (_temp42 instanceof Completion) {
      _temp42 = _temp42.Value;
    }
    const status = _temp42;
    // 3. If status is false, throw a TypeError exception.
    if (status === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'UnableToSeal', O);
    }
    // 4. Return O.
    return O;
  }

  /** https://tc39.es/ecma262/#sec-object.setprototypeof */
  Object_seal.section = 'https://tc39.es/ecma262/#sec-object.seal';
  function Object_setPrototypeOf([O = Value.undefined, proto = Value.undefined]) {
    let _temp43 = RequireObjectCoercible(O);
    /* c8 ignore if */
    if (_temp43 instanceof AbruptCompletion) {
      return _temp43;
    }
    /* c8 ignore if */
    if (_temp43 instanceof Completion) {
      _temp43 = _temp43.Value;
    }
    // 1. Set O to ? RequireObjectCoercible(O).
    O = _temp43;
    // 2. If Type(proto) is neither Object nor Null, throw a TypeError exception.
    if (!(proto instanceof ObjectValue) && !(proto instanceof NullValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'ObjectPrototypeType');
    }
    // 3. If Type(O) is not Object, return O.
    if (!(O instanceof ObjectValue)) {
      return O;
    }
    // 4. Let status be ? O.[[SetPrototypeOf]](proto).
    let _temp44 = O.SetPrototypeOf(proto);
    /* c8 ignore if */
    if (_temp44 instanceof AbruptCompletion) {
      return _temp44;
    }
    /* c8 ignore if */
    if (_temp44 instanceof Completion) {
      _temp44 = _temp44.Value;
    }
    const status = _temp44;
    // 5. If status is false, throw a TypeError exception.
    if (status === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'ObjectSetPrototype');
    }
    // 6. Return O.
    return O;
  }

  /** https://tc39.es/ecma262/#sec-object.values */
  Object_setPrototypeOf.section = 'https://tc39.es/ecma262/#sec-object.setprototypeof';
  function Object_values([O = Value.undefined]) {
    let _temp45 = ToObject(O);
    /* c8 ignore if */
    if (_temp45 instanceof AbruptCompletion) {
      return _temp45;
    }
    /* c8 ignore if */
    if (_temp45 instanceof Completion) {
      _temp45 = _temp45.Value;
    }
    // 1. Let obj be ? ToObject(O).
    const obj = _temp45;
    // 2. Let nameList be ? EnumerableOwnPropertyNames(obj, value).
    let _temp46 = EnumerableOwnPropertyNames(obj, 'value');
    /* c8 ignore if */
    if (_temp46 instanceof AbruptCompletion) {
      return _temp46;
    }
    /* c8 ignore if */
    if (_temp46 instanceof Completion) {
      _temp46 = _temp46.Value;
    }
    const nameList = _temp46;
    // 3. Return CreateArrayFromList(nameList).
    return CreateArrayFromList(nameList);
  }
  Object_values.section = 'https://tc39.es/ecma262/#sec-object.values';
  function bootstrapObject(realmRec) {
    const objectConstructor = bootstrapConstructor(realmRec, ObjectConstructor, 'Object', 1, realmRec.Intrinsics['%Object.prototype%'], [['assign', Object_assign, 2], ['create', Object_create, 2], ['defineProperties', Object_defineProperties, 2], ['defineProperty', Object_defineProperty, 3], ['entries', Object_entries, 1], ['freeze', Object_freeze, 1], ['fromEntries', Object_fromEntries, 1], ['getOwnPropertyDescriptor', Object_getOwnPropertyDescriptor, 2], ['getOwnPropertyDescriptors', Object_getOwnPropertyDescriptors, 1], ['getOwnPropertyNames', Object_getOwnPropertyNames, 1], ['getOwnPropertySymbols', Object_getOwnPropertySymbols, 1], ['getPrototypeOf', Object_getPrototypeOf, 1], ['hasOwn', Object_hasOwn, 2], ['is', Object_is, 2], ['isExtensible', Object_isExtensible, 1], ['isFrozen', Object_isFrozen, 1], ['isSealed', Object_isSealed, 1], ['keys', Object_keys, 1], ['preventExtensions', Object_preventExtensions, 1], ['seal', Object_seal, 1], ['setPrototypeOf', Object_setPrototypeOf, 2], ['values', Object_values, 1]]);
    realmRec.Intrinsics['%Object%'] = objectConstructor;
  }

  // Algorithms and methods shared between %Array.prototype% and
  // %TypedArray.prototype%.

  /** https://tc39.es/ecma262/#sec-array.prototype.sort */
  /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort */
  //
  // If internalMethodsRestricted is true, then Asserts are used to ensure that
  // "The only internal methods of the this object that the algorithm may call
  // are [[Get]] and [[Set]]," a requirement of %TypedArray%.prototype.sort.
  function ArrayProto_sortBody(obj, len, SortCompare, internalMethodsRestricted = false) {
    const items = [];
    let k = 0;
    while (k < len) {
      let _temp = ToString(F(k));
      Assert(!(_temp instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      const Pk = _temp;
      if (internalMethodsRestricted) {
        let _temp2 = Get(obj, Pk);
        /* c8 ignore if */
        if (_temp2 instanceof AbruptCompletion) {
          return _temp2;
        }
        /* c8 ignore if */
        if (_temp2 instanceof Completion) {
          _temp2 = _temp2.Value;
        }
        items.push(_temp2);
      } else {
        let _temp3 = HasProperty(obj, Pk);
        /* c8 ignore if */
        if (_temp3 instanceof AbruptCompletion) {
          return _temp3;
        }
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
        const kPresent = _temp3;
        if (kPresent === Value.true) {
          let _temp4 = Get(obj, Pk);
          /* c8 ignore if */
          if (_temp4 instanceof AbruptCompletion) {
            return _temp4;
          }
          /* c8 ignore if */
          if (_temp4 instanceof Completion) {
            _temp4 = _temp4.Value;
          }
          const kValue = _temp4;
          items.push(kValue);
        }
      }
      k += 1;
    }
    const itemCount = items.length;

    // Mergesort.
    const lBuffer = [];
    const rBuffer = [];
    for (let step = 1; step < items.length; step *= 2) {
      for (let start = 0; start < items.length - 1; start += 2 * step) {
        const sizeLeft = step;
        const mid = start + sizeLeft;
        const sizeRight = Math.min(step, items.length - mid);
        if (sizeRight < 0) {
          continue;
        }

        // Merge.
        for (let l = 0; l < sizeLeft; l += 1) {
          lBuffer[l] = items[start + l];
        }
        for (let r = 0; r < sizeRight; r += 1) {
          rBuffer[r] = items[mid + r];
        }
        {
          let l = 0;
          let r = 0;
          let o = start;
          while (l < sizeLeft && r < sizeRight) {
            let _temp5 = SortCompare(lBuffer[l], rBuffer[r]);
            /* c8 ignore if */
            if (_temp5 instanceof AbruptCompletion) {
              return _temp5;
            }
            /* c8 ignore if */
            if (_temp5 instanceof Completion) {
              _temp5 = _temp5.Value;
            }
            const cmp = R(_temp5);
            if (cmp <= 0) {
              items[o] = lBuffer[l];
              o += 1;
              l += 1;
            } else {
              items[o] = rBuffer[r];
              o += 1;
              r += 1;
            }
          }
          while (l < sizeLeft) {
            items[o] = lBuffer[l];
            o += 1;
            l += 1;
          }
          while (r < sizeRight) {
            items[o] = rBuffer[r];
            o += 1;
            r += 1;
          }
        }
      }
    }
    let j = 0;
    while (j < itemCount) {
      let _temp7 = ToString(F(j));
      Assert(!(_temp7 instanceof AbruptCompletion), "ToString(F(j))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp7 instanceof Completion) {
        _temp7 = _temp7.Value;
      }
      let _temp6 = Set$1(obj, _temp7, items[j], Value.true);
      /* c8 ignore if */
      if (_temp6 instanceof AbruptCompletion) {
        return _temp6;
      }
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
      j += 1;
    }
    while (j < len) {
      let _temp9 = ToString(F(j));
      Assert(!(_temp9 instanceof AbruptCompletion), "ToString(F(j))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp9 instanceof Completion) {
        _temp9 = _temp9.Value;
      }
      let _temp8 = DeletePropertyOrThrow(obj, _temp9);
      /* c8 ignore if */
      if (_temp8 instanceof AbruptCompletion) {
        return _temp8;
      }
      /* c8 ignore if */
      if (_temp8 instanceof Completion) {
        _temp8 = _temp8.Value;
      }
      j += 1;
    }
    return obj;
  }
  function bootstrapArrayPrototypeShared(realmRec, proto, priorToEvaluatingAlgorithm, objectToLength) {
    /** https://tc39.es/ecma262/#sec-array.prototype.every */
    /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.every */
    function ArrayProto_every([callbackFn = Value.undefined, thisArg = Value.undefined], {
      thisValue
    }) {
      let _temp10 = priorToEvaluatingAlgorithm(thisValue);
      /* c8 ignore if */
      if (_temp10 instanceof AbruptCompletion) {
        return _temp10;
      }
      /* c8 ignore if */
      if (_temp10 instanceof Completion) {
        _temp10 = _temp10.Value;
      }
      let _temp11 = ToObject(thisValue);
      /* c8 ignore if */
      if (_temp11 instanceof AbruptCompletion) {
        return _temp11;
      }
      /* c8 ignore if */
      if (_temp11 instanceof Completion) {
        _temp11 = _temp11.Value;
      }
      const O = _temp11;
      let _temp12 = objectToLength(O);
      /* c8 ignore if */
      if (_temp12 instanceof AbruptCompletion) {
        return _temp12;
      }
      /* c8 ignore if */
      if (_temp12 instanceof Completion) {
        _temp12 = _temp12.Value;
      }
      const len = _temp12;
      if (IsCallable(callbackFn) === Value.false) {
        return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', callbackFn);
      }
      let k = 0;
      while (k < len) {
        let _temp13 = ToString(F(k));
        Assert(!(_temp13 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp13 instanceof Completion) {
          _temp13 = _temp13.Value;
        }
        const Pk = _temp13;
        let _temp14 = HasProperty(O, Pk);
        /* c8 ignore if */
        if (_temp14 instanceof AbruptCompletion) {
          return _temp14;
        }
        /* c8 ignore if */
        if (_temp14 instanceof Completion) {
          _temp14 = _temp14.Value;
        }
        const kPresent = _temp14;
        if (kPresent === Value.true) {
          let _temp15 = Get(O, Pk);
          /* c8 ignore if */
          if (_temp15 instanceof AbruptCompletion) {
            return _temp15;
          }
          /* c8 ignore if */
          if (_temp15 instanceof Completion) {
            _temp15 = _temp15.Value;
          }
          const kValue = _temp15;
          let _temp16 = Call(callbackFn, thisArg, [kValue, F(k), O]);
          /* c8 ignore if */
          if (_temp16 instanceof AbruptCompletion) {
            return _temp16;
          }
          /* c8 ignore if */
          if (_temp16 instanceof Completion) {
            _temp16 = _temp16.Value;
          }
          const testResult = ToBoolean(_temp16);
          if (testResult === Value.false) {
            return Value.false;
          }
        }
        k += 1;
      }
      return Value.true;
    }

    /** https://tc39.es/ecma262/#sec-array.prototype.find */
    /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.find */
    ArrayProto_every.section = 'https://tc39.es/ecma262/#sec-array.prototype.every';
    function ArrayProto_find([predicate = Value.undefined, thisArg = Value.undefined], {
      thisValue
    }) {
      let _temp17 = priorToEvaluatingAlgorithm(thisValue);
      /* c8 ignore if */
      if (_temp17 instanceof AbruptCompletion) {
        return _temp17;
      }
      /* c8 ignore if */
      if (_temp17 instanceof Completion) {
        _temp17 = _temp17.Value;
      }
      let _temp18 = ToObject(thisValue);
      /* c8 ignore if */
      if (_temp18 instanceof AbruptCompletion) {
        return _temp18;
      }
      /* c8 ignore if */
      if (_temp18 instanceof Completion) {
        _temp18 = _temp18.Value;
      }
      const O = _temp18;
      let _temp19 = objectToLength(O);
      /* c8 ignore if */
      if (_temp19 instanceof AbruptCompletion) {
        return _temp19;
      }
      /* c8 ignore if */
      if (_temp19 instanceof Completion) {
        _temp19 = _temp19.Value;
      }
      const len = _temp19;
      if (IsCallable(predicate) === Value.false) {
        return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', predicate);
      }
      let k = 0;
      while (k < len) {
        let _temp20 = ToString(F(k));
        Assert(!(_temp20 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp20 instanceof Completion) {
          _temp20 = _temp20.Value;
        }
        const Pk = _temp20;
        let _temp21 = Get(O, Pk);
        /* c8 ignore if */
        if (_temp21 instanceof AbruptCompletion) {
          return _temp21;
        }
        /* c8 ignore if */
        if (_temp21 instanceof Completion) {
          _temp21 = _temp21.Value;
        }
        const kValue = _temp21;
        let _temp22 = Call(predicate, thisArg, [kValue, F(k), O]);
        /* c8 ignore if */
        if (_temp22 instanceof AbruptCompletion) {
          return _temp22;
        }
        /* c8 ignore if */
        if (_temp22 instanceof Completion) {
          _temp22 = _temp22.Value;
        }
        const testResult = ToBoolean(_temp22);
        if (testResult === Value.true) {
          return kValue;
        }
        k += 1;
      }
      return Value.undefined;
    }

    /** https://tc39.es/ecma262/#sec-array.prototype.findindex */
    /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex */
    ArrayProto_find.section = 'https://tc39.es/ecma262/#sec-array.prototype.find';
    function ArrayProto_findIndex([predicate = Value.undefined, thisArg = Value.undefined], {
      thisValue
    }) {
      let _temp23 = priorToEvaluatingAlgorithm(thisValue);
      /* c8 ignore if */
      if (_temp23 instanceof AbruptCompletion) {
        return _temp23;
      }
      /* c8 ignore if */
      if (_temp23 instanceof Completion) {
        _temp23 = _temp23.Value;
      }
      let _temp24 = ToObject(thisValue);
      /* c8 ignore if */
      if (_temp24 instanceof AbruptCompletion) {
        return _temp24;
      }
      /* c8 ignore if */
      if (_temp24 instanceof Completion) {
        _temp24 = _temp24.Value;
      }
      const O = _temp24;
      let _temp25 = objectToLength(O);
      /* c8 ignore if */
      if (_temp25 instanceof AbruptCompletion) {
        return _temp25;
      }
      /* c8 ignore if */
      if (_temp25 instanceof Completion) {
        _temp25 = _temp25.Value;
      }
      const len = _temp25;
      if (IsCallable(predicate) === Value.false) {
        return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', predicate);
      }
      let k = 0;
      while (k < len) {
        let _temp26 = ToString(F(k));
        Assert(!(_temp26 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp26 instanceof Completion) {
          _temp26 = _temp26.Value;
        }
        const Pk = _temp26;
        let _temp27 = Get(O, Pk);
        /* c8 ignore if */
        if (_temp27 instanceof AbruptCompletion) {
          return _temp27;
        }
        /* c8 ignore if */
        if (_temp27 instanceof Completion) {
          _temp27 = _temp27.Value;
        }
        const kValue = _temp27;
        let _temp28 = Call(predicate, thisArg, [kValue, F(k), O]);
        /* c8 ignore if */
        if (_temp28 instanceof AbruptCompletion) {
          return _temp28;
        }
        /* c8 ignore if */
        if (_temp28 instanceof Completion) {
          _temp28 = _temp28.Value;
        }
        const testResult = ToBoolean(_temp28);
        if (testResult === Value.true) {
          return F(k);
        }
        k += 1;
      }
      return F(-1);
    }

    /** https://tc39.es/ecma262/#sec-array.prototype.findlast */
    /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.findlast */
    ArrayProto_findIndex.section = 'https://tc39.es/ecma262/#sec-array.prototype.findindex';
    function ArrayProto_findLast([predicate = Value.undefined, thisArg = Value.undefined], {
      thisValue
    }) {
      let _temp29 = priorToEvaluatingAlgorithm(thisValue);
      /* c8 ignore if */
      if (_temp29 instanceof AbruptCompletion) {
        return _temp29;
      }
      /* c8 ignore if */
      if (_temp29 instanceof Completion) {
        _temp29 = _temp29.Value;
      }
      // Let O be ? ToObject(this value).
      let _temp30 = ToObject(thisValue);
      /* c8 ignore if */
      if (_temp30 instanceof AbruptCompletion) {
        return _temp30;
      }
      /* c8 ignore if */
      if (_temp30 instanceof Completion) {
        _temp30 = _temp30.Value;
      }
      const O = _temp30;
      // 2. Let len be ? LengthOfArrayLike(O).
      let _temp31 = objectToLength(O);
      /* c8 ignore if */
      if (_temp31 instanceof AbruptCompletion) {
        return _temp31;
      }
      /* c8 ignore if */
      if (_temp31 instanceof Completion) {
        _temp31 = _temp31.Value;
      }
      const len = _temp31;
      // 3. If IsCallable(predicate) is false, throw a TypeError exception.
      if (IsCallable(predicate) === Value.false) {
        return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', predicate);
      }
      // 4. Let k be len - 1.
      let k = len - 1;
      // 5. Repeat, while k ≥ 0,
      while (k >= 0) {
        let _temp32 = ToString(F(k));
        Assert(!(_temp32 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp32 instanceof Completion) {
          _temp32 = _temp32.Value;
        }
        // a. Let Pk be ! ToString(𝔽(k)).
        const Pk = _temp32;
        // b. Let kValue be ? Get(O, Pk).
        let _temp33 = Get(O, Pk);
        /* c8 ignore if */
        if (_temp33 instanceof AbruptCompletion) {
          return _temp33;
        }
        /* c8 ignore if */
        if (_temp33 instanceof Completion) {
          _temp33 = _temp33.Value;
        }
        const kValue = _temp33;
        // c. Let testResult be ToBoolean(? Call(predicate, thisArg, « kValue, 𝔽(k), O »)).
        let _temp34 = Call(predicate, thisArg, [kValue, F(k), O]);
        /* c8 ignore if */
        if (_temp34 instanceof AbruptCompletion) {
          return _temp34;
        }
        /* c8 ignore if */
        if (_temp34 instanceof Completion) {
          _temp34 = _temp34.Value;
        }
        const testResult = ToBoolean(_temp34);
        // d. If testResult is true, return kValue.
        if (testResult === Value.true) {
          return kValue;
        }
        // e. Set k to k - 1.
        k -= 1;
      }
      // 6. Return undefined.
      return Value.undefined;
    }

    /** https://tc39.es/ecma262/#sec-array.prototype.findlastindex */
    /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.findlastindex */
    ArrayProto_findLast.section = 'https://tc39.es/ecma262/#sec-array.prototype.findlast';
    function ArrayProto_findLastIndex([predicate = Value.undefined, thisArg = Value.undefined], {
      thisValue
    }) {
      let _temp35 = priorToEvaluatingAlgorithm(thisValue);
      /* c8 ignore if */
      if (_temp35 instanceof AbruptCompletion) {
        return _temp35;
      }
      /* c8 ignore if */
      if (_temp35 instanceof Completion) {
        _temp35 = _temp35.Value;
      }
      // Let O be ? ToObject(this value).
      let _temp36 = ToObject(thisValue);
      /* c8 ignore if */
      if (_temp36 instanceof AbruptCompletion) {
        return _temp36;
      }
      /* c8 ignore if */
      if (_temp36 instanceof Completion) {
        _temp36 = _temp36.Value;
      }
      const O = _temp36;
      // 2. Let len be ? LengthOfArrayLike(O).
      let _temp37 = objectToLength(O);
      /* c8 ignore if */
      if (_temp37 instanceof AbruptCompletion) {
        return _temp37;
      }
      /* c8 ignore if */
      if (_temp37 instanceof Completion) {
        _temp37 = _temp37.Value;
      }
      const len = _temp37;
      // 3. If IsCallable(predicate) is false, throw a TypeError exception.
      if (IsCallable(predicate) === Value.false) {
        return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', predicate);
      }
      // 4. Let k be len - 1.
      let k = len - 1;
      // 5. Repeat, while k ≥ 0,
      while (k >= 0) {
        let _temp38 = ToString(F(k));
        Assert(!(_temp38 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp38 instanceof Completion) {
          _temp38 = _temp38.Value;
        }
        // a. Let Pk be ! ToString(𝔽(k)).
        const Pk = _temp38;
        // b. Let kValue be ? Get(O, Pk).
        let _temp39 = Get(O, Pk);
        /* c8 ignore if */
        if (_temp39 instanceof AbruptCompletion) {
          return _temp39;
        }
        /* c8 ignore if */
        if (_temp39 instanceof Completion) {
          _temp39 = _temp39.Value;
        }
        const kValue = _temp39;
        // c. Let testResult be ToBoolean(? Call(predicate, thisArg, « kValue, 𝔽(k), O »)).
        let _temp40 = Call(predicate, thisArg, [kValue, F(k), O]);
        /* c8 ignore if */
        if (_temp40 instanceof AbruptCompletion) {
          return _temp40;
        }
        /* c8 ignore if */
        if (_temp40 instanceof Completion) {
          _temp40 = _temp40.Value;
        }
        const testResult = ToBoolean(_temp40);
        // d. If testResult is true, return 𝔽(k).
        if (testResult === Value.true) {
          return F(k);
        }
        // e. Set k to k - 1.
        k -= 1;
      }
      // 6. Return Return -1𝔽.
      return F(-1);
    }

    /** https://tc39.es/ecma262/#sec-array.prototype.foreach */
    /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach */
    ArrayProto_findLastIndex.section = 'https://tc39.es/ecma262/#sec-array.prototype.findlastindex';
    function ArrayProto_forEach([callbackfn = Value.undefined, thisArg = Value.undefined], {
      thisValue
    }) {
      let _temp41 = priorToEvaluatingAlgorithm(thisValue);
      /* c8 ignore if */
      if (_temp41 instanceof AbruptCompletion) {
        return _temp41;
      }
      /* c8 ignore if */
      if (_temp41 instanceof Completion) {
        _temp41 = _temp41.Value;
      }
      let _temp42 = ToObject(thisValue);
      /* c8 ignore if */
      if (_temp42 instanceof AbruptCompletion) {
        return _temp42;
      }
      /* c8 ignore if */
      if (_temp42 instanceof Completion) {
        _temp42 = _temp42.Value;
      }
      const O = _temp42;
      let _temp43 = objectToLength(O);
      /* c8 ignore if */
      if (_temp43 instanceof AbruptCompletion) {
        return _temp43;
      }
      /* c8 ignore if */
      if (_temp43 instanceof Completion) {
        _temp43 = _temp43.Value;
      }
      const len = _temp43;
      if (IsCallable(callbackfn) === Value.false) {
        return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', callbackfn);
      }
      let k = 0;
      while (k < len) {
        let _temp44 = ToString(F(k));
        Assert(!(_temp44 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp44 instanceof Completion) {
          _temp44 = _temp44.Value;
        }
        const Pk = _temp44;
        let _temp45 = HasProperty(O, Pk);
        /* c8 ignore if */
        if (_temp45 instanceof AbruptCompletion) {
          return _temp45;
        }
        /* c8 ignore if */
        if (_temp45 instanceof Completion) {
          _temp45 = _temp45.Value;
        }
        const kPresent = _temp45;
        if (kPresent === Value.true) {
          let _temp46 = Get(O, Pk);
          /* c8 ignore if */
          if (_temp46 instanceof AbruptCompletion) {
            return _temp46;
          }
          /* c8 ignore if */
          if (_temp46 instanceof Completion) {
            _temp46 = _temp46.Value;
          }
          const kValue = _temp46;
          let _temp47 = Call(callbackfn, thisArg, [kValue, F(k), O]);
          /* c8 ignore if */
          if (_temp47 instanceof AbruptCompletion) {
            return _temp47;
          }
          /* c8 ignore if */
          if (_temp47 instanceof Completion) {
            _temp47 = _temp47.Value;
          }
        }
        k += 1;
      }
      return Value.undefined;
    }

    /** https://tc39.es/ecma262/#sec-array.prototype.includes */
    /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes */
    ArrayProto_forEach.section = 'https://tc39.es/ecma262/#sec-array.prototype.foreach';
    function ArrayProto_includes([searchElement = Value.undefined, fromIndex = Value.undefined], {
      thisValue
    }) {
      let _temp48 = priorToEvaluatingAlgorithm(thisValue);
      /* c8 ignore if */
      if (_temp48 instanceof AbruptCompletion) {
        return _temp48;
      }
      /* c8 ignore if */
      if (_temp48 instanceof Completion) {
        _temp48 = _temp48.Value;
      }
      let _temp49 = ToObject(thisValue);
      /* c8 ignore if */
      if (_temp49 instanceof AbruptCompletion) {
        return _temp49;
      }
      /* c8 ignore if */
      if (_temp49 instanceof Completion) {
        _temp49 = _temp49.Value;
      }
      const O = _temp49;
      let _temp50 = objectToLength(O);
      /* c8 ignore if */
      if (_temp50 instanceof AbruptCompletion) {
        return _temp50;
      }
      /* c8 ignore if */
      if (_temp50 instanceof Completion) {
        _temp50 = _temp50.Value;
      }
      const len = _temp50;
      if (len === 0) {
        return Value.false;
      }
      let _temp51 = ToIntegerOrInfinity(fromIndex);
      /* c8 ignore if */
      if (_temp51 instanceof AbruptCompletion) {
        return _temp51;
      }
      /* c8 ignore if */
      if (_temp51 instanceof Completion) {
        _temp51 = _temp51.Value;
      }
      const n = _temp51;
      if (fromIndex === Value.undefined) {
        Assert(n === 0, "n === 0");
      }
      let k;
      if (n >= 0) {
        k = n;
      } else {
        k = len + n;
        if (k < 0) {
          k = 0;
        }
      }
      while (k < len) {
        let _temp52 = ToString(F(k));
        Assert(!(_temp52 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp52 instanceof Completion) {
          _temp52 = _temp52.Value;
        }
        const kStr = _temp52;
        let _temp53 = Get(O, kStr);
        /* c8 ignore if */
        if (_temp53 instanceof AbruptCompletion) {
          return _temp53;
        }
        /* c8 ignore if */
        if (_temp53 instanceof Completion) {
          _temp53 = _temp53.Value;
        }
        const elementK = _temp53;
        if (SameValueZero(searchElement, elementK) === Value.true) {
          return Value.true;
        }
        k += 1;
      }
      return Value.false;
    }

    /** https://tc39.es/ecma262/#sec-array.prototype.indexof */
    /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof */
    ArrayProto_includes.section = 'https://tc39.es/ecma262/#sec-array.prototype.includes';
    function ArrayProto_indexOf([searchElement = Value.undefined, fromIndex = Value.undefined], {
      thisValue
    }) {
      let _temp54 = priorToEvaluatingAlgorithm(thisValue);
      /* c8 ignore if */
      if (_temp54 instanceof AbruptCompletion) {
        return _temp54;
      }
      /* c8 ignore if */
      if (_temp54 instanceof Completion) {
        _temp54 = _temp54.Value;
      }
      let _temp55 = ToObject(thisValue);
      /* c8 ignore if */
      if (_temp55 instanceof AbruptCompletion) {
        return _temp55;
      }
      /* c8 ignore if */
      if (_temp55 instanceof Completion) {
        _temp55 = _temp55.Value;
      }
      const O = _temp55;
      let _temp56 = objectToLength(O);
      /* c8 ignore if */
      if (_temp56 instanceof AbruptCompletion) {
        return _temp56;
      }
      /* c8 ignore if */
      if (_temp56 instanceof Completion) {
        _temp56 = _temp56.Value;
      }
      const len = _temp56;
      if (len === 0) {
        return F(-1);
      }
      let _temp57 = ToIntegerOrInfinity(fromIndex);
      /* c8 ignore if */
      if (_temp57 instanceof AbruptCompletion) {
        return _temp57;
      }
      /* c8 ignore if */
      if (_temp57 instanceof Completion) {
        _temp57 = _temp57.Value;
      }
      const n = _temp57;
      if (fromIndex === Value.undefined) {
        Assert(n === 0, "n === 0");
      }
      if (n >= len) {
        return F(-1);
      }
      let k;
      if (n >= 0) {
        k = n;
      } else {
        k = len + n;
        if (k < 0) {
          k = 0;
        }
      }
      while (k < len) {
        let _temp58 = ToString(F(k));
        Assert(!(_temp58 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp58 instanceof Completion) {
          _temp58 = _temp58.Value;
        }
        const kStr = _temp58;
        let _temp59 = HasProperty(O, kStr);
        /* c8 ignore if */
        if (_temp59 instanceof AbruptCompletion) {
          return _temp59;
        }
        /* c8 ignore if */
        if (_temp59 instanceof Completion) {
          _temp59 = _temp59.Value;
        }
        const kPresent = _temp59;
        if (kPresent === Value.true) {
          let _temp60 = Get(O, kStr);
          /* c8 ignore if */
          if (_temp60 instanceof AbruptCompletion) {
            return _temp60;
          }
          /* c8 ignore if */
          if (_temp60 instanceof Completion) {
            _temp60 = _temp60.Value;
          }
          const elementK = _temp60;
          const same = StrictEqualityComparison(searchElement, elementK);
          if (same === Value.true) {
            return F(k);
          }
        }
        k += 1;
      }
      return F(-1);
    }

    /** https://tc39.es/ecma262/#sec-array.prototype.join */
    /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.join */
    ArrayProto_indexOf.section = 'https://tc39.es/ecma262/#sec-array.prototype.indexof';
    function ArrayProto_join([separator = Value.undefined], {
      thisValue
    }) {
      let _temp61 = priorToEvaluatingAlgorithm(thisValue);
      /* c8 ignore if */
      if (_temp61 instanceof AbruptCompletion) {
        return _temp61;
      }
      /* c8 ignore if */
      if (_temp61 instanceof Completion) {
        _temp61 = _temp61.Value;
      }
      let _temp62 = ToObject(thisValue);
      /* c8 ignore if */
      if (_temp62 instanceof AbruptCompletion) {
        return _temp62;
      }
      /* c8 ignore if */
      if (_temp62 instanceof Completion) {
        _temp62 = _temp62.Value;
      }
      const O = _temp62;
      let _temp63 = objectToLength(O);
      /* c8 ignore if */
      if (_temp63 instanceof AbruptCompletion) {
        return _temp63;
      }
      /* c8 ignore if */
      if (_temp63 instanceof Completion) {
        _temp63 = _temp63.Value;
      }
      const len = _temp63;
      let sep;
      if (separator instanceof UndefinedValue) {
        sep = ',';
      } else {
        let _temp64 = ToString(separator);
        /* c8 ignore if */
        if (_temp64 instanceof AbruptCompletion) {
          return _temp64;
        }
        /* c8 ignore if */
        if (_temp64 instanceof Completion) {
          _temp64 = _temp64.Value;
        }
        sep = _temp64.stringValue();
      }
      let R = '';
      let k = 0;
      while (k < len) {
        if (k > 0) {
          R = `${R}${sep}`;
        }
        let _temp65 = ToString(F(k));
        Assert(!(_temp65 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp65 instanceof Completion) {
          _temp65 = _temp65.Value;
        }
        const kStr = _temp65;
        let _temp66 = Get(O, kStr);
        /* c8 ignore if */
        if (_temp66 instanceof AbruptCompletion) {
          return _temp66;
        }
        /* c8 ignore if */
        if (_temp66 instanceof Completion) {
          _temp66 = _temp66.Value;
        }
        const element = _temp66;
        let next;
        if (element instanceof UndefinedValue || element instanceof NullValue) {
          next = '';
        } else {
          let _temp67 = ToString(element);
          /* c8 ignore if */
          if (_temp67 instanceof AbruptCompletion) {
            return _temp67;
          }
          /* c8 ignore if */
          if (_temp67 instanceof Completion) {
            _temp67 = _temp67.Value;
          }
          next = _temp67.stringValue();
        }
        R = `${R}${next}`;
        k += 1;
      }
      return Value(R);
    }

    /** https://tc39.es/ecma262/#sec-array.prototype.lastindexof */
    /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof */
    ArrayProto_join.section = 'https://tc39.es/ecma262/#sec-array.prototype.join';
    function ArrayProto_lastIndexOf([searchElement = Value.undefined, fromIndex], {
      thisValue
    }) {
      let _temp68 = priorToEvaluatingAlgorithm(thisValue);
      /* c8 ignore if */
      if (_temp68 instanceof AbruptCompletion) {
        return _temp68;
      }
      /* c8 ignore if */
      if (_temp68 instanceof Completion) {
        _temp68 = _temp68.Value;
      }
      let _temp69 = ToObject(thisValue);
      /* c8 ignore if */
      if (_temp69 instanceof AbruptCompletion) {
        return _temp69;
      }
      /* c8 ignore if */
      if (_temp69 instanceof Completion) {
        _temp69 = _temp69.Value;
      }
      const O = _temp69;
      let _temp70 = objectToLength(O);
      /* c8 ignore if */
      if (_temp70 instanceof AbruptCompletion) {
        return _temp70;
      }
      /* c8 ignore if */
      if (_temp70 instanceof Completion) {
        _temp70 = _temp70.Value;
      }
      const len = _temp70;
      if (len === 0) {
        return F(-1);
      }
      let n;
      if (fromIndex !== undefined) {
        let _temp71 = ToIntegerOrInfinity(fromIndex);
        /* c8 ignore if */
        if (_temp71 instanceof AbruptCompletion) {
          return _temp71;
        }
        /* c8 ignore if */
        if (_temp71 instanceof Completion) {
          _temp71 = _temp71.Value;
        }
        n = _temp71;
      } else {
        n = len - 1;
      }
      let k;
      if (n >= 0) {
        k = Math.min(n, len - 1);
      } else {
        k = len + n;
      }
      while (k >= 0) {
        let _temp72 = ToString(F(k));
        Assert(!(_temp72 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp72 instanceof Completion) {
          _temp72 = _temp72.Value;
        }
        const kStr = _temp72;
        let _temp73 = HasProperty(O, kStr);
        /* c8 ignore if */
        if (_temp73 instanceof AbruptCompletion) {
          return _temp73;
        }
        /* c8 ignore if */
        if (_temp73 instanceof Completion) {
          _temp73 = _temp73.Value;
        }
        const kPresent = _temp73;
        if (kPresent === Value.true) {
          let _temp74 = Get(O, kStr);
          /* c8 ignore if */
          if (_temp74 instanceof AbruptCompletion) {
            return _temp74;
          }
          /* c8 ignore if */
          if (_temp74 instanceof Completion) {
            _temp74 = _temp74.Value;
          }
          const elementK = _temp74;
          const same = StrictEqualityComparison(searchElement, elementK);
          if (same === Value.true) {
            return F(k);
          }
        }
        k -= 1;
      }
      return F(-1);
    }

    /** https://tc39.es/ecma262/#sec-array.prototype.reduce */
    /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce */
    ArrayProto_lastIndexOf.section = 'https://tc39.es/ecma262/#sec-array.prototype.lastindexof';
    function ArrayProto_reduce([callbackfn = Value.undefined, initialValue], {
      thisValue
    }) {
      let _temp75 = priorToEvaluatingAlgorithm(thisValue);
      /* c8 ignore if */
      if (_temp75 instanceof AbruptCompletion) {
        return _temp75;
      }
      /* c8 ignore if */
      if (_temp75 instanceof Completion) {
        _temp75 = _temp75.Value;
      }
      let _temp76 = ToObject(thisValue);
      /* c8 ignore if */
      if (_temp76 instanceof AbruptCompletion) {
        return _temp76;
      }
      /* c8 ignore if */
      if (_temp76 instanceof Completion) {
        _temp76 = _temp76.Value;
      }
      const O = _temp76;
      let _temp77 = objectToLength(O);
      /* c8 ignore if */
      if (_temp77 instanceof AbruptCompletion) {
        return _temp77;
      }
      /* c8 ignore if */
      if (_temp77 instanceof Completion) {
        _temp77 = _temp77.Value;
      }
      const len = _temp77;
      if (IsCallable(callbackfn) === Value.false) {
        return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', callbackfn);
      }
      if (len === 0 && initialValue === undefined) {
        return exports.surroundingAgent.Throw('TypeError', 'ArrayEmptyReduce');
      }
      let k = 0;
      let accumulator = Value.undefined;
      if (initialValue !== undefined) {
        accumulator = initialValue;
      } else {
        let kPresent = false;
        while (kPresent === false && k < len) {
          let _temp78 = ToString(F(k));
          Assert(!(_temp78 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp78 instanceof Completion) {
            _temp78 = _temp78.Value;
          }
          const Pk = _temp78;
          let _temp79 = HasProperty(O, Pk);
          /* c8 ignore if */
          if (_temp79 instanceof AbruptCompletion) {
            return _temp79;
          }
          /* c8 ignore if */
          if (_temp79 instanceof Completion) {
            _temp79 = _temp79.Value;
          }
          kPresent = _temp79 === Value.true;
          if (kPresent === true) {
            let _temp80 = Get(O, Pk);
            /* c8 ignore if */
            if (_temp80 instanceof AbruptCompletion) {
              return _temp80;
            }
            /* c8 ignore if */
            if (_temp80 instanceof Completion) {
              _temp80 = _temp80.Value;
            }
            accumulator = _temp80;
          }
          k += 1;
        }
        if (kPresent === false) {
          return exports.surroundingAgent.Throw('TypeError', 'ArrayEmptyReduce');
        }
      }
      while (k < len) {
        let _temp81 = ToString(F(k));
        Assert(!(_temp81 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp81 instanceof Completion) {
          _temp81 = _temp81.Value;
        }
        const Pk = _temp81;
        let _temp82 = HasProperty(O, Pk);
        /* c8 ignore if */
        if (_temp82 instanceof AbruptCompletion) {
          return _temp82;
        }
        /* c8 ignore if */
        if (_temp82 instanceof Completion) {
          _temp82 = _temp82.Value;
        }
        const kPresent = _temp82;
        if (kPresent === Value.true) {
          let _temp83 = Get(O, Pk);
          /* c8 ignore if */
          if (_temp83 instanceof AbruptCompletion) {
            return _temp83;
          }
          /* c8 ignore if */
          if (_temp83 instanceof Completion) {
            _temp83 = _temp83.Value;
          }
          const kValue = _temp83;
          let _temp84 = Call(callbackfn, Value.undefined, [accumulator, kValue, F(k), O]);
          /* c8 ignore if */
          if (_temp84 instanceof AbruptCompletion) {
            return _temp84;
          }
          /* c8 ignore if */
          if (_temp84 instanceof Completion) {
            _temp84 = _temp84.Value;
          }
          accumulator = _temp84;
        }
        k += 1;
      }
      return accumulator;
    }

    /** https://tc39.es/ecma262/#sec-array.prototype.reduceright */
    /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright */
    ArrayProto_reduce.section = 'https://tc39.es/ecma262/#sec-array.prototype.reduce';
    function ArrayProto_reduceRight([callbackfn = Value.undefined, initialValue], {
      thisValue
    }) {
      let _temp85 = priorToEvaluatingAlgorithm(thisValue);
      /* c8 ignore if */
      if (_temp85 instanceof AbruptCompletion) {
        return _temp85;
      }
      /* c8 ignore if */
      if (_temp85 instanceof Completion) {
        _temp85 = _temp85.Value;
      }
      let _temp86 = ToObject(thisValue);
      /* c8 ignore if */
      if (_temp86 instanceof AbruptCompletion) {
        return _temp86;
      }
      /* c8 ignore if */
      if (_temp86 instanceof Completion) {
        _temp86 = _temp86.Value;
      }
      const O = _temp86;
      let _temp87 = objectToLength(O);
      /* c8 ignore if */
      if (_temp87 instanceof AbruptCompletion) {
        return _temp87;
      }
      /* c8 ignore if */
      if (_temp87 instanceof Completion) {
        _temp87 = _temp87.Value;
      }
      const len = _temp87;
      if (IsCallable(callbackfn) === Value.false) {
        return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', callbackfn);
      }
      if (len === 0 && initialValue === undefined) {
        return exports.surroundingAgent.Throw('TypeError', 'ArrayEmptyReduce');
      }
      let k = len - 1;
      let accumulator = Value.undefined;
      if (initialValue !== undefined) {
        accumulator = initialValue;
      } else {
        let kPresent = false;
        while (kPresent === false && k >= 0) {
          let _temp88 = ToString(F(k));
          Assert(!(_temp88 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp88 instanceof Completion) {
            _temp88 = _temp88.Value;
          }
          const Pk = _temp88;
          let _temp89 = HasProperty(O, Pk);
          /* c8 ignore if */
          if (_temp89 instanceof AbruptCompletion) {
            return _temp89;
          }
          /* c8 ignore if */
          if (_temp89 instanceof Completion) {
            _temp89 = _temp89.Value;
          }
          kPresent = _temp89 === Value.true;
          if (kPresent === true) {
            let _temp90 = Get(O, Pk);
            /* c8 ignore if */
            if (_temp90 instanceof AbruptCompletion) {
              return _temp90;
            }
            /* c8 ignore if */
            if (_temp90 instanceof Completion) {
              _temp90 = _temp90.Value;
            }
            accumulator = _temp90;
          }
          k -= 1;
        }
        if (kPresent === false) {
          return exports.surroundingAgent.Throw('TypeError', 'ArrayEmptyReduce');
        }
      }
      while (k >= 0) {
        let _temp91 = ToString(F(k));
        Assert(!(_temp91 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp91 instanceof Completion) {
          _temp91 = _temp91.Value;
        }
        const Pk = _temp91;
        let _temp92 = HasProperty(O, Pk);
        /* c8 ignore if */
        if (_temp92 instanceof AbruptCompletion) {
          return _temp92;
        }
        /* c8 ignore if */
        if (_temp92 instanceof Completion) {
          _temp92 = _temp92.Value;
        }
        const kPresent = _temp92;
        if (kPresent === Value.true) {
          let _temp93 = Get(O, Pk);
          /* c8 ignore if */
          if (_temp93 instanceof AbruptCompletion) {
            return _temp93;
          }
          /* c8 ignore if */
          if (_temp93 instanceof Completion) {
            _temp93 = _temp93.Value;
          }
          const kValue = _temp93;
          let _temp94 = Call(callbackfn, Value.undefined, [accumulator, kValue, F(k), O]);
          /* c8 ignore if */
          if (_temp94 instanceof AbruptCompletion) {
            return _temp94;
          }
          /* c8 ignore if */
          if (_temp94 instanceof Completion) {
            _temp94 = _temp94.Value;
          }
          accumulator = _temp94;
        }
        k -= 1;
      }
      return accumulator;
    }

    /** https://tc39.es/ecma262/#sec-array.prototype.reverse */
    /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse */
    ArrayProto_reduceRight.section = 'https://tc39.es/ecma262/#sec-array.prototype.reduceright';
    function ArrayProto_reverse(args, {
      thisValue
    }) {
      let _temp95 = priorToEvaluatingAlgorithm(thisValue);
      /* c8 ignore if */
      if (_temp95 instanceof AbruptCompletion) {
        return _temp95;
      }
      /* c8 ignore if */
      if (_temp95 instanceof Completion) {
        _temp95 = _temp95.Value;
      }
      let _temp96 = ToObject(thisValue);
      /* c8 ignore if */
      if (_temp96 instanceof AbruptCompletion) {
        return _temp96;
      }
      /* c8 ignore if */
      if (_temp96 instanceof Completion) {
        _temp96 = _temp96.Value;
      }
      const O = _temp96;
      let _temp97 = objectToLength(O);
      /* c8 ignore if */
      if (_temp97 instanceof AbruptCompletion) {
        return _temp97;
      }
      /* c8 ignore if */
      if (_temp97 instanceof Completion) {
        _temp97 = _temp97.Value;
      }
      const len = _temp97;
      const middle = Math.floor(len / 2);
      let lower = 0;
      while (lower !== middle) {
        const upper = len - lower - 1;
        let _temp98 = ToString(F(upper));
        Assert(!(_temp98 instanceof AbruptCompletion), "ToString(F(upper))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp98 instanceof Completion) {
          _temp98 = _temp98.Value;
        }
        const upperP = _temp98;
        let _temp99 = ToString(F(lower));
        Assert(!(_temp99 instanceof AbruptCompletion), "ToString(F(lower))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp99 instanceof Completion) {
          _temp99 = _temp99.Value;
        }
        const lowerP = _temp99;
        let _temp100 = HasProperty(O, lowerP);
        /* c8 ignore if */
        if (_temp100 instanceof AbruptCompletion) {
          return _temp100;
        }
        /* c8 ignore if */
        if (_temp100 instanceof Completion) {
          _temp100 = _temp100.Value;
        }
        const lowerExists = _temp100;
        let lowerValue;
        let upperValue;
        if (lowerExists === Value.true) {
          let _temp101 = Get(O, lowerP);
          /* c8 ignore if */
          if (_temp101 instanceof AbruptCompletion) {
            return _temp101;
          }
          /* c8 ignore if */
          if (_temp101 instanceof Completion) {
            _temp101 = _temp101.Value;
          }
          lowerValue = _temp101;
        }
        let _temp102 = HasProperty(O, upperP);
        /* c8 ignore if */
        if (_temp102 instanceof AbruptCompletion) {
          return _temp102;
        }
        /* c8 ignore if */
        if (_temp102 instanceof Completion) {
          _temp102 = _temp102.Value;
        }
        const upperExists = _temp102;
        if (upperExists === Value.true) {
          let _temp103 = Get(O, upperP);
          /* c8 ignore if */
          if (_temp103 instanceof AbruptCompletion) {
            return _temp103;
          }
          /* c8 ignore if */
          if (_temp103 instanceof Completion) {
            _temp103 = _temp103.Value;
          }
          upperValue = _temp103;
        }
        if (lowerExists === Value.true && upperExists === Value.true) {
          let _temp104 = Set$1(O, lowerP, upperValue, Value.true);
          /* c8 ignore if */
          if (_temp104 instanceof AbruptCompletion) {
            return _temp104;
          }
          /* c8 ignore if */
          if (_temp104 instanceof Completion) {
            _temp104 = _temp104.Value;
          }
          let _temp105 = Set$1(O, upperP, lowerValue, Value.true);
          /* c8 ignore if */
          if (_temp105 instanceof AbruptCompletion) {
            return _temp105;
          }
          /* c8 ignore if */
          if (_temp105 instanceof Completion) {
            _temp105 = _temp105.Value;
          }
        } else if (lowerExists === Value.false && upperExists === Value.true) {
          let _temp106 = Set$1(O, lowerP, upperValue, Value.true);
          /* c8 ignore if */
          if (_temp106 instanceof AbruptCompletion) {
            return _temp106;
          }
          /* c8 ignore if */
          if (_temp106 instanceof Completion) {
            _temp106 = _temp106.Value;
          }
          let _temp107 = DeletePropertyOrThrow(O, upperP);
          /* c8 ignore if */
          if (_temp107 instanceof AbruptCompletion) {
            return _temp107;
          }
          /* c8 ignore if */
          if (_temp107 instanceof Completion) {
            _temp107 = _temp107.Value;
          }
        } else if (lowerExists === Value.true && upperExists === Value.false) {
          let _temp108 = DeletePropertyOrThrow(O, lowerP);
          /* c8 ignore if */
          if (_temp108 instanceof AbruptCompletion) {
            return _temp108;
          }
          /* c8 ignore if */
          if (_temp108 instanceof Completion) {
            _temp108 = _temp108.Value;
          }
          let _temp109 = Set$1(O, upperP, lowerValue, Value.true);
          /* c8 ignore if */
          if (_temp109 instanceof AbruptCompletion) {
            return _temp109;
          }
          /* c8 ignore if */
          if (_temp109 instanceof Completion) {
            _temp109 = _temp109.Value;
          }
        } else ;
        lower += 1;
      }
      return O;
    }

    /** https://tc39.es/ecma262/#sec-array.prototype.some */
    /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.some */
    ArrayProto_reverse.section = 'https://tc39.es/ecma262/#sec-array.prototype.reverse';
    function ArrayProto_some([callbackfn = Value.undefined, thisArg = Value.undefined], {
      thisValue
    }) {
      let _temp110 = priorToEvaluatingAlgorithm(thisValue);
      /* c8 ignore if */
      if (_temp110 instanceof AbruptCompletion) {
        return _temp110;
      }
      /* c8 ignore if */
      if (_temp110 instanceof Completion) {
        _temp110 = _temp110.Value;
      }
      let _temp111 = ToObject(thisValue);
      /* c8 ignore if */
      if (_temp111 instanceof AbruptCompletion) {
        return _temp111;
      }
      /* c8 ignore if */
      if (_temp111 instanceof Completion) {
        _temp111 = _temp111.Value;
      }
      const O = _temp111;
      let _temp112 = objectToLength(O);
      /* c8 ignore if */
      if (_temp112 instanceof AbruptCompletion) {
        return _temp112;
      }
      /* c8 ignore if */
      if (_temp112 instanceof Completion) {
        _temp112 = _temp112.Value;
      }
      const len = _temp112;
      if (IsCallable(callbackfn) === Value.false) {
        return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', callbackfn);
      }
      let k = 0;
      while (k < len) {
        let _temp113 = ToString(F(k));
        Assert(!(_temp113 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp113 instanceof Completion) {
          _temp113 = _temp113.Value;
        }
        const Pk = _temp113;
        let _temp114 = HasProperty(O, Pk);
        /* c8 ignore if */
        if (_temp114 instanceof AbruptCompletion) {
          return _temp114;
        }
        /* c8 ignore if */
        if (_temp114 instanceof Completion) {
          _temp114 = _temp114.Value;
        }
        const kPresent = _temp114;
        if (kPresent === Value.true) {
          let _temp115 = Get(O, Pk);
          /* c8 ignore if */
          if (_temp115 instanceof AbruptCompletion) {
            return _temp115;
          }
          /* c8 ignore if */
          if (_temp115 instanceof Completion) {
            _temp115 = _temp115.Value;
          }
          const kValue = _temp115;
          let _temp116 = Call(callbackfn, thisArg, [kValue, F(k), O]);
          /* c8 ignore if */
          if (_temp116 instanceof AbruptCompletion) {
            return _temp116;
          }
          /* c8 ignore if */
          if (_temp116 instanceof Completion) {
            _temp116 = _temp116.Value;
          }
          const testResult = ToBoolean(_temp116);
          if (testResult === Value.true) {
            return Value.true;
          }
        }
        k += 1;
      }
      return Value.false;
    }

    /** https://tc39.es/ecma262/#sec-array.prototype.tolocalestring */
    /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring */
    ArrayProto_some.section = 'https://tc39.es/ecma262/#sec-array.prototype.some';
    function ArrayProto_toLocaleString(args, {
      thisValue
    }) {
      let _temp117 = priorToEvaluatingAlgorithm(thisValue);
      /* c8 ignore if */
      if (_temp117 instanceof AbruptCompletion) {
        return _temp117;
      }
      /* c8 ignore if */
      if (_temp117 instanceof Completion) {
        _temp117 = _temp117.Value;
      }
      let _temp118 = ToObject(thisValue);
      /* c8 ignore if */
      if (_temp118 instanceof AbruptCompletion) {
        return _temp118;
      }
      /* c8 ignore if */
      if (_temp118 instanceof Completion) {
        _temp118 = _temp118.Value;
      }
      const array = _temp118;
      let _temp119 = objectToLength(array);
      /* c8 ignore if */
      if (_temp119 instanceof AbruptCompletion) {
        return _temp119;
      }
      /* c8 ignore if */
      if (_temp119 instanceof Completion) {
        _temp119 = _temp119.Value;
      }
      const len = _temp119;
      const separator = ', ';
      let R = '';
      let k = 0;
      while (k < len) {
        if (k > 0) {
          R = `${R}${separator}`;
        }
        let _temp120 = ToString(F(k));
        Assert(!(_temp120 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp120 instanceof Completion) {
          _temp120 = _temp120.Value;
        }
        const kStr = _temp120;
        let _temp121 = Get(array, kStr);
        /* c8 ignore if */
        if (_temp121 instanceof AbruptCompletion) {
          return _temp121;
        }
        /* c8 ignore if */
        if (_temp121 instanceof Completion) {
          _temp121 = _temp121.Value;
        }
        const nextElement = _temp121;
        if (nextElement !== Value.undefined && nextElement !== Value.null) {
          let _temp123 = Invoke(nextElement, Value('toLocaleString'));
          /* c8 ignore if */
          if (_temp123 instanceof AbruptCompletion) {
            return _temp123;
          }
          /* c8 ignore if */
          if (_temp123 instanceof Completion) {
            _temp123 = _temp123.Value;
          }
          let _temp122 = ToString(_temp123);
          /* c8 ignore if */
          if (_temp122 instanceof AbruptCompletion) {
            return _temp122;
          }
          /* c8 ignore if */
          if (_temp122 instanceof Completion) {
            _temp122 = _temp122.Value;
          }
          const S = _temp122.stringValue();
          R = `${R}${S}`;
        }
        k += 1;
      }
      return Value(R);
    }
    ArrayProto_toLocaleString.section = 'https://tc39.es/ecma262/#sec-array.prototype.tolocalestring';
    assignProps(realmRec, proto, [['every', ArrayProto_every, 1], ['find', ArrayProto_find, 1], ['findIndex', ArrayProto_findIndex, 1], ['findLast', ArrayProto_findLast, 1], ['findLastIndex', ArrayProto_findLastIndex, 1], ['forEach', ArrayProto_forEach, 1], ['includes', ArrayProto_includes, 1], ['indexOf', ArrayProto_indexOf, 1], ['join', ArrayProto_join, 1], ['lastIndexOf', ArrayProto_lastIndexOf, 1], ['reduce', ArrayProto_reduce, 1], ['reduceRight', ArrayProto_reduceRight, 1], ['reverse', ArrayProto_reverse, 0], ['some', ArrayProto_some, 1], ['toLocaleString', ArrayProto_toLocaleString, 0]]);
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.concat */
  function ArrayProto_concat(args, {
    thisValue
  }) {
    let _temp = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const O = _temp;
    let _temp2 = ArraySpeciesCreate(O, 0);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const A = _temp2;
    let n = 0;
    const items = [O, ...args];
    while (items.length > 0) {
      const E = items.shift();
      let _temp3 = IsConcatSpreadable(E);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      const spreadable = _temp3;
      if (spreadable === Value.true) {
        let k = 0;
        let _temp4 = LengthOfArrayLike(E);
        /* c8 ignore if */
        if (_temp4 instanceof AbruptCompletion) {
          return _temp4;
        }
        /* c8 ignore if */
        if (_temp4 instanceof Completion) {
          _temp4 = _temp4.Value;
        }
        const len = _temp4;
        if (n + len > 2 ** 53 - 1) {
          return exports.surroundingAgent.Throw('TypeError', 'ArrayPastSafeLength');
        }
        while (k < len) {
          let _temp5 = ToString(F(k));
          Assert(!(_temp5 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp5 instanceof Completion) {
            _temp5 = _temp5.Value;
          }
          const P = _temp5;
          let _temp6 = HasProperty(E, P);
          /* c8 ignore if */
          if (_temp6 instanceof AbruptCompletion) {
            return _temp6;
          }
          /* c8 ignore if */
          if (_temp6 instanceof Completion) {
            _temp6 = _temp6.Value;
          }
          const exists = _temp6;
          if (exists === Value.true) {
            let _temp7 = Get(E, P);
            /* c8 ignore if */
            if (_temp7 instanceof AbruptCompletion) {
              return _temp7;
            }
            /* c8 ignore if */
            if (_temp7 instanceof Completion) {
              _temp7 = _temp7.Value;
            }
            const subElement = _temp7;
            let _temp8 = ToString(F(n));
            Assert(!(_temp8 instanceof AbruptCompletion), "ToString(F(n))" + ' returned an abrupt completion');
            /* c8 ignore if */
            if (_temp8 instanceof Completion) {
              _temp8 = _temp8.Value;
            }
            const nStr = _temp8;
            let _temp9 = CreateDataPropertyOrThrow(A, nStr, subElement);
            /* c8 ignore if */
            if (_temp9 instanceof AbruptCompletion) {
              return _temp9;
            }
            /* c8 ignore if */
            if (_temp9 instanceof Completion) {
              _temp9 = _temp9.Value;
            }
          }
          n += 1;
          k += 1;
        }
      } else {
        if (n >= 2 ** 53 - 1) {
          return exports.surroundingAgent.Throw('TypeError', 'ArrayPastSafeLength');
        }
        let _temp10 = ToString(F(n));
        Assert(!(_temp10 instanceof AbruptCompletion), "ToString(F(n))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp10 instanceof Completion) {
          _temp10 = _temp10.Value;
        }
        const nStr = _temp10;
        let _temp11 = CreateDataPropertyOrThrow(A, nStr, E);
        /* c8 ignore if */
        if (_temp11 instanceof AbruptCompletion) {
          return _temp11;
        }
        /* c8 ignore if */
        if (_temp11 instanceof Completion) {
          _temp11 = _temp11.Value;
        }
        n += 1;
      }
    }
    let _temp12 = Set$1(A, Value('length'), F(n), Value.true);
    /* c8 ignore if */
    if (_temp12 instanceof AbruptCompletion) {
      return _temp12;
    }
    /* c8 ignore if */
    if (_temp12 instanceof Completion) {
      _temp12 = _temp12.Value;
    }
    return A;
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.copywithin */
  ArrayProto_concat.section = 'https://tc39.es/ecma262/#sec-array.prototype.concat';
  function ArrayProto_copyWithin([target = Value.undefined, start = Value.undefined, end = Value.undefined], {
    thisValue
  }) {
    let _temp13 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp13 instanceof AbruptCompletion) {
      return _temp13;
    }
    /* c8 ignore if */
    if (_temp13 instanceof Completion) {
      _temp13 = _temp13.Value;
    }
    const O = _temp13;
    let _temp14 = LengthOfArrayLike(O);
    /* c8 ignore if */
    if (_temp14 instanceof AbruptCompletion) {
      return _temp14;
    }
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    const len = _temp14;
    let _temp15 = ToIntegerOrInfinity(target);
    /* c8 ignore if */
    if (_temp15 instanceof AbruptCompletion) {
      return _temp15;
    }
    /* c8 ignore if */
    if (_temp15 instanceof Completion) {
      _temp15 = _temp15.Value;
    }
    const relativeTarget = _temp15;
    let to;
    if (relativeTarget < 0) {
      to = Math.max(len + relativeTarget, 0);
    } else {
      to = Math.min(relativeTarget, len);
    }
    let _temp16 = ToIntegerOrInfinity(start);
    /* c8 ignore if */
    if (_temp16 instanceof AbruptCompletion) {
      return _temp16;
    }
    /* c8 ignore if */
    if (_temp16 instanceof Completion) {
      _temp16 = _temp16.Value;
    }
    const relativeStart = _temp16;
    let from;
    if (relativeStart < 0) {
      from = Math.max(len + relativeStart, 0);
    } else {
      from = Math.min(relativeStart, len);
    }
    let relativeEnd;
    if (end === Value.undefined) {
      relativeEnd = len;
    } else {
      let _temp17 = ToIntegerOrInfinity(end);
      /* c8 ignore if */
      if (_temp17 instanceof AbruptCompletion) {
        return _temp17;
      }
      /* c8 ignore if */
      if (_temp17 instanceof Completion) {
        _temp17 = _temp17.Value;
      }
      relativeEnd = _temp17;
    }
    let final;
    if (relativeEnd < 0) {
      final = Math.max(len + relativeEnd, 0);
    } else {
      final = Math.min(relativeEnd, len);
    }
    let count = Math.min(final - from, len - to);
    let direction;
    if (from < to && to < from + count) {
      direction = -1;
      from += count - 1;
      to += count - 1;
    } else {
      direction = 1;
    }
    while (count > 0) {
      let _temp18 = ToString(F(from));
      Assert(!(_temp18 instanceof AbruptCompletion), "ToString(F(from))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp18 instanceof Completion) {
        _temp18 = _temp18.Value;
      }
      const fromKey = _temp18;
      let _temp19 = ToString(F(to));
      Assert(!(_temp19 instanceof AbruptCompletion), "ToString(F(to))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp19 instanceof Completion) {
        _temp19 = _temp19.Value;
      }
      const toKey = _temp19;
      let _temp20 = HasProperty(O, fromKey);
      /* c8 ignore if */
      if (_temp20 instanceof AbruptCompletion) {
        return _temp20;
      }
      /* c8 ignore if */
      if (_temp20 instanceof Completion) {
        _temp20 = _temp20.Value;
      }
      const fromPresent = _temp20;
      if (fromPresent === Value.true) {
        let _temp21 = Get(O, fromKey);
        /* c8 ignore if */
        if (_temp21 instanceof AbruptCompletion) {
          return _temp21;
        }
        /* c8 ignore if */
        if (_temp21 instanceof Completion) {
          _temp21 = _temp21.Value;
        }
        const fromVal = _temp21;
        let _temp22 = Set$1(O, toKey, fromVal, Value.true);
        /* c8 ignore if */
        if (_temp22 instanceof AbruptCompletion) {
          return _temp22;
        }
        /* c8 ignore if */
        if (_temp22 instanceof Completion) {
          _temp22 = _temp22.Value;
        }
      } else {
        let _temp23 = DeletePropertyOrThrow(O, toKey);
        /* c8 ignore if */
        if (_temp23 instanceof AbruptCompletion) {
          return _temp23;
        }
        /* c8 ignore if */
        if (_temp23 instanceof Completion) {
          _temp23 = _temp23.Value;
        }
      }
      from += direction;
      to += direction;
      count -= 1;
    }
    return O;
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.entries */
  ArrayProto_copyWithin.section = 'https://tc39.es/ecma262/#sec-array.prototype.copywithin';
  function ArrayProto_entries(args, {
    thisValue
  }) {
    let _temp24 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp24 instanceof AbruptCompletion) {
      return _temp24;
    }
    /* c8 ignore if */
    if (_temp24 instanceof Completion) {
      _temp24 = _temp24.Value;
    }
    const O = _temp24;
    return CreateArrayIterator(O, 'key+value');
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.fill */
  ArrayProto_entries.section = 'https://tc39.es/ecma262/#sec-array.prototype.entries';
  function ArrayProto_fill([value = Value.undefined, start = Value.undefined, end = Value.undefined], {
    thisValue
  }) {
    let _temp25 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp25 instanceof AbruptCompletion) {
      return _temp25;
    }
    /* c8 ignore if */
    if (_temp25 instanceof Completion) {
      _temp25 = _temp25.Value;
    }
    const O = _temp25;
    let _temp26 = LengthOfArrayLike(O);
    /* c8 ignore if */
    if (_temp26 instanceof AbruptCompletion) {
      return _temp26;
    }
    /* c8 ignore if */
    if (_temp26 instanceof Completion) {
      _temp26 = _temp26.Value;
    }
    const len = _temp26;
    let _temp27 = ToIntegerOrInfinity(start);
    /* c8 ignore if */
    if (_temp27 instanceof AbruptCompletion) {
      return _temp27;
    }
    /* c8 ignore if */
    if (_temp27 instanceof Completion) {
      _temp27 = _temp27.Value;
    }
    const relativeStart = _temp27;
    let k;
    if (relativeStart < 0) {
      k = Math.max(len + relativeStart, 0);
    } else {
      k = Math.min(relativeStart, len);
    }
    let relativeEnd;
    if (end instanceof UndefinedValue) {
      relativeEnd = len;
    } else {
      let _temp28 = ToIntegerOrInfinity(end);
      /* c8 ignore if */
      if (_temp28 instanceof AbruptCompletion) {
        return _temp28;
      }
      /* c8 ignore if */
      if (_temp28 instanceof Completion) {
        _temp28 = _temp28.Value;
      }
      relativeEnd = _temp28;
    }
    let final;
    if (relativeEnd < 0) {
      final = Math.max(len + relativeEnd, 0);
    } else {
      final = Math.min(relativeEnd, len);
    }
    while (k < final) {
      let _temp29 = ToString(F(k));
      Assert(!(_temp29 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp29 instanceof Completion) {
        _temp29 = _temp29.Value;
      }
      const Pk = _temp29;
      let _temp30 = Set$1(O, Pk, value, Value.true);
      /* c8 ignore if */
      if (_temp30 instanceof AbruptCompletion) {
        return _temp30;
      }
      /* c8 ignore if */
      if (_temp30 instanceof Completion) {
        _temp30 = _temp30.Value;
      }
      k += 1;
    }
    return O;
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.filter */
  ArrayProto_fill.section = 'https://tc39.es/ecma262/#sec-array.prototype.fill';
  function ArrayProto_filter([callbackfn = Value.undefined, thisArg = Value.undefined], {
    thisValue
  }) {
    let _temp31 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp31 instanceof AbruptCompletion) {
      return _temp31;
    }
    /* c8 ignore if */
    if (_temp31 instanceof Completion) {
      _temp31 = _temp31.Value;
    }
    const O = _temp31;
    let _temp32 = LengthOfArrayLike(O);
    /* c8 ignore if */
    if (_temp32 instanceof AbruptCompletion) {
      return _temp32;
    }
    /* c8 ignore if */
    if (_temp32 instanceof Completion) {
      _temp32 = _temp32.Value;
    }
    const len = _temp32;
    if (IsCallable(callbackfn) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', callbackfn);
    }
    let _temp33 = ArraySpeciesCreate(O, 0);
    /* c8 ignore if */
    if (_temp33 instanceof AbruptCompletion) {
      return _temp33;
    }
    /* c8 ignore if */
    if (_temp33 instanceof Completion) {
      _temp33 = _temp33.Value;
    }
    const A = _temp33;
    let k = 0;
    let to = 0;
    while (k < len) {
      let _temp34 = ToString(F(k));
      Assert(!(_temp34 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp34 instanceof Completion) {
        _temp34 = _temp34.Value;
      }
      const Pk = _temp34;
      let _temp35 = HasProperty(O, Pk);
      /* c8 ignore if */
      if (_temp35 instanceof AbruptCompletion) {
        return _temp35;
      }
      /* c8 ignore if */
      if (_temp35 instanceof Completion) {
        _temp35 = _temp35.Value;
      }
      const kPresent = _temp35;
      if (kPresent === Value.true) {
        let _temp36 = Get(O, Pk);
        /* c8 ignore if */
        if (_temp36 instanceof AbruptCompletion) {
          return _temp36;
        }
        /* c8 ignore if */
        if (_temp36 instanceof Completion) {
          _temp36 = _temp36.Value;
        }
        const kValue = _temp36;
        let _temp37 = Call(callbackfn, thisArg, [kValue, F(k), O]);
        /* c8 ignore if */
        if (_temp37 instanceof AbruptCompletion) {
          return _temp37;
        }
        /* c8 ignore if */
        if (_temp37 instanceof Completion) {
          _temp37 = _temp37.Value;
        }
        const selected = ToBoolean(_temp37);
        if (selected === Value.true) {
          let _temp39 = ToString(F(to));
          Assert(!(_temp39 instanceof AbruptCompletion), "ToString(F(to))" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp39 instanceof Completion) {
            _temp39 = _temp39.Value;
          }
          let _temp38 = CreateDataPropertyOrThrow(A, _temp39, kValue);
          /* c8 ignore if */
          if (_temp38 instanceof AbruptCompletion) {
            return _temp38;
          }
          /* c8 ignore if */
          if (_temp38 instanceof Completion) {
            _temp38 = _temp38.Value;
          }
          to += 1;
        }
      }
      k += 1;
    }
    return A;
  }

  /** https://tc39.es/ecma262/#sec-flattenintoarray */
  ArrayProto_filter.section = 'https://tc39.es/ecma262/#sec-array.prototype.filter';
  function FlattenIntoArray(target, source, sourceLen, start, depth, mapperFunction, thisArg) {
    Assert(target instanceof ObjectValue, "target instanceof ObjectValue");
    Assert(source instanceof ObjectValue, "source instanceof ObjectValue");
    Assert(sourceLen >= 0, "sourceLen >= 0");
    Assert(start >= 0, "start >= 0");
    // Assert: _depth_ is an integer Number, *+&infin;*, or *-&infin;*.
    // Assert(mapperFunction === undefined || (X(IsCallable(mapperFunction)) === Value.true && thisArg !== undefined && depth === 1));
    let targetIndex = start;
    let sourceIndex = 0;
    while (sourceIndex < sourceLen) {
      let _temp40 = ToString(F(sourceIndex));
      Assert(!(_temp40 instanceof AbruptCompletion), "ToString(F(sourceIndex))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp40 instanceof Completion) {
        _temp40 = _temp40.Value;
      }
      const P = _temp40;
      let _temp41 = HasProperty(source, P);
      /* c8 ignore if */
      if (_temp41 instanceof AbruptCompletion) {
        return _temp41;
      }
      /* c8 ignore if */
      if (_temp41 instanceof Completion) {
        _temp41 = _temp41.Value;
      }
      const exists = _temp41;
      if (exists === Value.true) {
        let _temp42 = Get(source, P);
        /* c8 ignore if */
        if (_temp42 instanceof AbruptCompletion) {
          return _temp42;
        }
        /* c8 ignore if */
        if (_temp42 instanceof Completion) {
          _temp42 = _temp42.Value;
        }
        let element = _temp42;
        if (mapperFunction) {
          Assert(thisArg, "thisArg");
          let _temp43 = Call(mapperFunction, thisArg, [element, F(sourceIndex), source]);
          /* c8 ignore if */
          if (_temp43 instanceof AbruptCompletion) {
            return _temp43;
          }
          /* c8 ignore if */
          if (_temp43 instanceof Completion) {
            _temp43 = _temp43.Value;
          }
          element = _temp43;
        }
        let shouldFlatten = Value.false;
        if (depth > 0) {
          let _temp44 = IsArray(element);
          /* c8 ignore if */
          if (_temp44 instanceof AbruptCompletion) {
            return _temp44;
          }
          /* c8 ignore if */
          if (_temp44 instanceof Completion) {
            _temp44 = _temp44.Value;
          }
          shouldFlatten = _temp44;
        }
        if (shouldFlatten === Value.true) {
          let _temp45 = LengthOfArrayLike(element);
          /* c8 ignore if */
          if (_temp45 instanceof AbruptCompletion) {
            return _temp45;
          }
          /* c8 ignore if */
          if (_temp45 instanceof Completion) {
            _temp45 = _temp45.Value;
          }
          const elementLen = _temp45;
          let _temp46 = FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1);
          /* c8 ignore if */
          if (_temp46 instanceof AbruptCompletion) {
            return _temp46;
          }
          /* c8 ignore if */
          if (_temp46 instanceof Completion) {
            _temp46 = _temp46.Value;
          }
          targetIndex = _temp46;
        } else {
          if (targetIndex >= 2 ** 53 - 1) {
            return exports.surroundingAgent.Throw('TypeError', 'OutOfRange', targetIndex);
          }
          let _temp48 = ToString(F(targetIndex));
          Assert(!(_temp48 instanceof AbruptCompletion), "ToString(F(targetIndex))" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp48 instanceof Completion) {
            _temp48 = _temp48.Value;
          }
          let _temp47 = CreateDataPropertyOrThrow(target, _temp48, element);
          /* c8 ignore if */
          if (_temp47 instanceof AbruptCompletion) {
            return _temp47;
          }
          /* c8 ignore if */
          if (_temp47 instanceof Completion) {
            _temp47 = _temp47.Value;
          }
          targetIndex += 1;
        }
      }
      sourceIndex += 1;
    }
    return targetIndex;
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.flat */
  FlattenIntoArray.section = 'https://tc39.es/ecma262/#sec-flattenintoarray';
  function ArrayProto_flat([depth = Value.undefined], {
    thisValue
  }) {
    let _temp49 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp49 instanceof AbruptCompletion) {
      return _temp49;
    }
    /* c8 ignore if */
    if (_temp49 instanceof Completion) {
      _temp49 = _temp49.Value;
    }
    const O = _temp49;
    let _temp50 = LengthOfArrayLike(O);
    /* c8 ignore if */
    if (_temp50 instanceof AbruptCompletion) {
      return _temp50;
    }
    /* c8 ignore if */
    if (_temp50 instanceof Completion) {
      _temp50 = _temp50.Value;
    }
    const sourceLen = _temp50;
    let depthNum = 1;
    if (depth !== Value.undefined) {
      let _temp51 = ToIntegerOrInfinity(depth);
      /* c8 ignore if */
      if (_temp51 instanceof AbruptCompletion) {
        return _temp51;
      }
      /* c8 ignore if */
      if (_temp51 instanceof Completion) {
        _temp51 = _temp51.Value;
      }
      depthNum = _temp51;
    }
    let _temp52 = ArraySpeciesCreate(O, 0);
    /* c8 ignore if */
    if (_temp52 instanceof AbruptCompletion) {
      return _temp52;
    }
    /* c8 ignore if */
    if (_temp52 instanceof Completion) {
      _temp52 = _temp52.Value;
    }
    const A = _temp52;
    let _temp53 = FlattenIntoArray(A, O, sourceLen, 0, depthNum);
    /* c8 ignore if */
    if (_temp53 instanceof AbruptCompletion) {
      return _temp53;
    }
    /* c8 ignore if */
    if (_temp53 instanceof Completion) {
      _temp53 = _temp53.Value;
    }
    return A;
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.flatmap */
  ArrayProto_flat.section = 'https://tc39.es/ecma262/#sec-array.prototype.flat';
  function ArrayProto_flatMap([mapperFunction = Value.undefined, thisArg = Value.undefined], {
    thisValue
  }) {
    let _temp54 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp54 instanceof AbruptCompletion) {
      return _temp54;
    }
    /* c8 ignore if */
    if (_temp54 instanceof Completion) {
      _temp54 = _temp54.Value;
    }
    const O = _temp54;
    let _temp55 = LengthOfArrayLike(O);
    /* c8 ignore if */
    if (_temp55 instanceof AbruptCompletion) {
      return _temp55;
    }
    /* c8 ignore if */
    if (_temp55 instanceof Completion) {
      _temp55 = _temp55.Value;
    }
    const sourceLen = _temp55;
    let _temp56 = IsCallable(mapperFunction);
    Assert(!(_temp56 instanceof AbruptCompletion), "IsCallable(mapperFunction)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp56 instanceof Completion) {
      _temp56 = _temp56.Value;
    }
    if (_temp56 === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', mapperFunction);
    }
    let _temp57 = ArraySpeciesCreate(O, 0);
    /* c8 ignore if */
    if (_temp57 instanceof AbruptCompletion) {
      return _temp57;
    }
    /* c8 ignore if */
    if (_temp57 instanceof Completion) {
      _temp57 = _temp57.Value;
    }
    const A = _temp57;
    let _temp58 = FlattenIntoArray(A, O, sourceLen, 0, 1, mapperFunction, thisArg);
    /* c8 ignore if */
    if (_temp58 instanceof AbruptCompletion) {
      return _temp58;
    }
    /* c8 ignore if */
    if (_temp58 instanceof Completion) {
      _temp58 = _temp58.Value;
    }
    return A;
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.keys */
  ArrayProto_flatMap.section = 'https://tc39.es/ecma262/#sec-array.prototype.flatmap';
  function ArrayProto_keys(args, {
    thisValue
  }) {
    let _temp59 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp59 instanceof AbruptCompletion) {
      return _temp59;
    }
    /* c8 ignore if */
    if (_temp59 instanceof Completion) {
      _temp59 = _temp59.Value;
    }
    const O = _temp59;
    return CreateArrayIterator(O, 'key');
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.map */
  ArrayProto_keys.section = 'https://tc39.es/ecma262/#sec-array.prototype.keys';
  function ArrayProto_map([callbackfn = Value.undefined, thisArg = Value.undefined], {
    thisValue
  }) {
    let _temp60 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp60 instanceof AbruptCompletion) {
      return _temp60;
    }
    /* c8 ignore if */
    if (_temp60 instanceof Completion) {
      _temp60 = _temp60.Value;
    }
    const O = _temp60;
    let _temp61 = LengthOfArrayLike(O);
    /* c8 ignore if */
    if (_temp61 instanceof AbruptCompletion) {
      return _temp61;
    }
    /* c8 ignore if */
    if (_temp61 instanceof Completion) {
      _temp61 = _temp61.Value;
    }
    const len = _temp61;
    if (IsCallable(callbackfn) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', callbackfn);
    }
    let _temp62 = ArraySpeciesCreate(O, len);
    /* c8 ignore if */
    if (_temp62 instanceof AbruptCompletion) {
      return _temp62;
    }
    /* c8 ignore if */
    if (_temp62 instanceof Completion) {
      _temp62 = _temp62.Value;
    }
    const A = _temp62;
    let k = 0;
    while (k < len) {
      let _temp63 = ToString(F(k));
      Assert(!(_temp63 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp63 instanceof Completion) {
        _temp63 = _temp63.Value;
      }
      const Pk = _temp63;
      let _temp64 = HasProperty(O, Pk);
      /* c8 ignore if */
      if (_temp64 instanceof AbruptCompletion) {
        return _temp64;
      }
      /* c8 ignore if */
      if (_temp64 instanceof Completion) {
        _temp64 = _temp64.Value;
      }
      const kPresent = _temp64;
      if (kPresent === Value.true) {
        let _temp65 = Get(O, Pk);
        /* c8 ignore if */
        if (_temp65 instanceof AbruptCompletion) {
          return _temp65;
        }
        /* c8 ignore if */
        if (_temp65 instanceof Completion) {
          _temp65 = _temp65.Value;
        }
        const kValue = _temp65;
        let _temp66 = Call(callbackfn, thisArg, [kValue, F(k), O]);
        /* c8 ignore if */
        if (_temp66 instanceof AbruptCompletion) {
          return _temp66;
        }
        /* c8 ignore if */
        if (_temp66 instanceof Completion) {
          _temp66 = _temp66.Value;
        }
        const mappedValue = _temp66;
        let _temp67 = CreateDataPropertyOrThrow(A, Pk, mappedValue);
        /* c8 ignore if */
        if (_temp67 instanceof AbruptCompletion) {
          return _temp67;
        }
        /* c8 ignore if */
        if (_temp67 instanceof Completion) {
          _temp67 = _temp67.Value;
        }
      }
      k += 1;
    }
    return A;
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.pop */
  ArrayProto_map.section = 'https://tc39.es/ecma262/#sec-array.prototype.map';
  function ArrayProto_pop(args, {
    thisValue
  }) {
    let _temp68 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp68 instanceof AbruptCompletion) {
      return _temp68;
    }
    /* c8 ignore if */
    if (_temp68 instanceof Completion) {
      _temp68 = _temp68.Value;
    }
    const O = _temp68;
    let _temp69 = LengthOfArrayLike(O);
    /* c8 ignore if */
    if (_temp69 instanceof AbruptCompletion) {
      return _temp69;
    }
    /* c8 ignore if */
    if (_temp69 instanceof Completion) {
      _temp69 = _temp69.Value;
    }
    const len = _temp69;
    if (len === 0) {
      let _temp70 = Set$1(O, Value('length'), F(+0), Value.true);
      /* c8 ignore if */
      if (_temp70 instanceof AbruptCompletion) {
        return _temp70;
      }
      /* c8 ignore if */
      if (_temp70 instanceof Completion) {
        _temp70 = _temp70.Value;
      }
      return Value.undefined;
    } else {
      const newLen = len - 1;
      let _temp71 = ToString(F(newLen));
      /* c8 ignore if */
      if (_temp71 instanceof AbruptCompletion) {
        return _temp71;
      }
      /* c8 ignore if */
      if (_temp71 instanceof Completion) {
        _temp71 = _temp71.Value;
      }
      const index = _temp71;
      let _temp72 = Get(O, index);
      /* c8 ignore if */
      if (_temp72 instanceof AbruptCompletion) {
        return _temp72;
      }
      /* c8 ignore if */
      if (_temp72 instanceof Completion) {
        _temp72 = _temp72.Value;
      }
      const element = _temp72;
      let _temp73 = DeletePropertyOrThrow(O, index);
      /* c8 ignore if */
      if (_temp73 instanceof AbruptCompletion) {
        return _temp73;
      }
      /* c8 ignore if */
      if (_temp73 instanceof Completion) {
        _temp73 = _temp73.Value;
      }
      let _temp74 = Set$1(O, Value('length'), F(newLen), Value.true);
      /* c8 ignore if */
      if (_temp74 instanceof AbruptCompletion) {
        return _temp74;
      }
      /* c8 ignore if */
      if (_temp74 instanceof Completion) {
        _temp74 = _temp74.Value;
      }
      return element;
    }
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.push */
  ArrayProto_pop.section = 'https://tc39.es/ecma262/#sec-array.prototype.pop';
  function ArrayProto_push(items, {
    thisValue
  }) {
    let _temp75 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp75 instanceof AbruptCompletion) {
      return _temp75;
    }
    /* c8 ignore if */
    if (_temp75 instanceof Completion) {
      _temp75 = _temp75.Value;
    }
    const O = _temp75;
    let _temp76 = LengthOfArrayLike(O);
    /* c8 ignore if */
    if (_temp76 instanceof AbruptCompletion) {
      return _temp76;
    }
    /* c8 ignore if */
    if (_temp76 instanceof Completion) {
      _temp76 = _temp76.Value;
    }
    let len = _temp76;
    const argCount = items.length;
    if (len + argCount > 2 ** 53 - 1) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayPastSafeLength');
    }
    while (items.length > 0) {
      const E = items.shift();
      let _temp78 = ToString(F(len));
      Assert(!(_temp78 instanceof AbruptCompletion), "ToString(F(len))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp78 instanceof Completion) {
        _temp78 = _temp78.Value;
      }
      let _temp77 = Set$1(O, _temp78, E, Value.true);
      /* c8 ignore if */
      if (_temp77 instanceof AbruptCompletion) {
        return _temp77;
      }
      /* c8 ignore if */
      if (_temp77 instanceof Completion) {
        _temp77 = _temp77.Value;
      }
      len += 1;
    }
    let _temp79 = Set$1(O, Value('length'), F(len), Value.true);
    /* c8 ignore if */
    if (_temp79 instanceof AbruptCompletion) {
      return _temp79;
    }
    /* c8 ignore if */
    if (_temp79 instanceof Completion) {
      _temp79 = _temp79.Value;
    }
    return F(len);
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.shift */
  ArrayProto_push.section = 'https://tc39.es/ecma262/#sec-array.prototype.push';
  function ArrayProto_shift(args, {
    thisValue
  }) {
    let _temp80 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp80 instanceof AbruptCompletion) {
      return _temp80;
    }
    /* c8 ignore if */
    if (_temp80 instanceof Completion) {
      _temp80 = _temp80.Value;
    }
    const O = _temp80;
    let _temp81 = LengthOfArrayLike(O);
    /* c8 ignore if */
    if (_temp81 instanceof AbruptCompletion) {
      return _temp81;
    }
    /* c8 ignore if */
    if (_temp81 instanceof Completion) {
      _temp81 = _temp81.Value;
    }
    const len = _temp81;
    if (len === 0) {
      let _temp82 = Set$1(O, Value('length'), F(+0), Value.true);
      /* c8 ignore if */
      if (_temp82 instanceof AbruptCompletion) {
        return _temp82;
      }
      /* c8 ignore if */
      if (_temp82 instanceof Completion) {
        _temp82 = _temp82.Value;
      }
      return Value.undefined;
    }
    let _temp83 = Get(O, Value('0'));
    /* c8 ignore if */
    if (_temp83 instanceof AbruptCompletion) {
      return _temp83;
    }
    /* c8 ignore if */
    if (_temp83 instanceof Completion) {
      _temp83 = _temp83.Value;
    }
    const first = _temp83;
    let k = 1;
    while (k < len) {
      let _temp84 = ToString(F(k));
      Assert(!(_temp84 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp84 instanceof Completion) {
        _temp84 = _temp84.Value;
      }
      const from = _temp84;
      let _temp85 = ToString(F(k - 1));
      Assert(!(_temp85 instanceof AbruptCompletion), "ToString(F(k - 1))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp85 instanceof Completion) {
        _temp85 = _temp85.Value;
      }
      const to = _temp85;
      let _temp86 = HasProperty(O, from);
      /* c8 ignore if */
      if (_temp86 instanceof AbruptCompletion) {
        return _temp86;
      }
      /* c8 ignore if */
      if (_temp86 instanceof Completion) {
        _temp86 = _temp86.Value;
      }
      const fromPresent = _temp86;
      if (fromPresent === Value.true) {
        let _temp87 = Get(O, from);
        /* c8 ignore if */
        if (_temp87 instanceof AbruptCompletion) {
          return _temp87;
        }
        /* c8 ignore if */
        if (_temp87 instanceof Completion) {
          _temp87 = _temp87.Value;
        }
        const fromVal = _temp87;
        let _temp88 = Set$1(O, to, fromVal, Value.true);
        /* c8 ignore if */
        if (_temp88 instanceof AbruptCompletion) {
          return _temp88;
        }
        /* c8 ignore if */
        if (_temp88 instanceof Completion) {
          _temp88 = _temp88.Value;
        }
      } else {
        let _temp89 = DeletePropertyOrThrow(O, to);
        /* c8 ignore if */
        if (_temp89 instanceof AbruptCompletion) {
          return _temp89;
        }
        /* c8 ignore if */
        if (_temp89 instanceof Completion) {
          _temp89 = _temp89.Value;
        }
      }
      k += 1;
    }
    let _temp92 = ToString(F(len - 1));
    Assert(!(_temp92 instanceof AbruptCompletion), "ToString(F(len - 1))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp92 instanceof Completion) {
      _temp92 = _temp92.Value;
    }
    let _temp90 = DeletePropertyOrThrow(O, _temp92);
    /* c8 ignore if */
    if (_temp90 instanceof AbruptCompletion) {
      return _temp90;
    }
    /* c8 ignore if */
    if (_temp90 instanceof Completion) {
      _temp90 = _temp90.Value;
    }
    let _temp91 = Set$1(O, Value('length'), F(len - 1), Value.true);
    /* c8 ignore if */
    if (_temp91 instanceof AbruptCompletion) {
      return _temp91;
    }
    /* c8 ignore if */
    if (_temp91 instanceof Completion) {
      _temp91 = _temp91.Value;
    }
    return first;
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.slice */
  ArrayProto_shift.section = 'https://tc39.es/ecma262/#sec-array.prototype.shift';
  function ArrayProto_slice([start = Value.undefined, end = Value.undefined], {
    thisValue
  }) {
    let _temp93 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp93 instanceof AbruptCompletion) {
      return _temp93;
    }
    /* c8 ignore if */
    if (_temp93 instanceof Completion) {
      _temp93 = _temp93.Value;
    }
    const O = _temp93;
    let _temp94 = LengthOfArrayLike(O);
    /* c8 ignore if */
    if (_temp94 instanceof AbruptCompletion) {
      return _temp94;
    }
    /* c8 ignore if */
    if (_temp94 instanceof Completion) {
      _temp94 = _temp94.Value;
    }
    const len = _temp94;
    let _temp95 = ToIntegerOrInfinity(start);
    /* c8 ignore if */
    if (_temp95 instanceof AbruptCompletion) {
      return _temp95;
    }
    /* c8 ignore if */
    if (_temp95 instanceof Completion) {
      _temp95 = _temp95.Value;
    }
    const relativeStart = _temp95;
    let k;
    if (relativeStart < 0) {
      k = Math.max(len + relativeStart, 0);
    } else {
      k = Math.min(relativeStart, len);
    }
    let relativeEnd;
    if (end instanceof UndefinedValue) {
      relativeEnd = len;
    } else {
      let _temp96 = ToIntegerOrInfinity(end);
      /* c8 ignore if */
      if (_temp96 instanceof AbruptCompletion) {
        return _temp96;
      }
      /* c8 ignore if */
      if (_temp96 instanceof Completion) {
        _temp96 = _temp96.Value;
      }
      relativeEnd = _temp96;
    }
    let final;
    if (relativeEnd < 0) {
      final = Math.max(len + relativeEnd, 0);
    } else {
      final = Math.min(relativeEnd, len);
    }
    const count = Math.max(final - k, 0);
    let _temp97 = ArraySpeciesCreate(O, count);
    /* c8 ignore if */
    if (_temp97 instanceof AbruptCompletion) {
      return _temp97;
    }
    /* c8 ignore if */
    if (_temp97 instanceof Completion) {
      _temp97 = _temp97.Value;
    }
    const A = _temp97;
    let n = 0;
    while (k < final) {
      let _temp98 = ToString(F(k));
      Assert(!(_temp98 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp98 instanceof Completion) {
        _temp98 = _temp98.Value;
      }
      const Pk = _temp98;
      let _temp99 = HasProperty(O, Pk);
      /* c8 ignore if */
      if (_temp99 instanceof AbruptCompletion) {
        return _temp99;
      }
      /* c8 ignore if */
      if (_temp99 instanceof Completion) {
        _temp99 = _temp99.Value;
      }
      const kPresent = _temp99;
      if (kPresent === Value.true) {
        let _temp100 = Get(O, Pk);
        /* c8 ignore if */
        if (_temp100 instanceof AbruptCompletion) {
          return _temp100;
        }
        /* c8 ignore if */
        if (_temp100 instanceof Completion) {
          _temp100 = _temp100.Value;
        }
        const kValue = _temp100;
        let _temp101 = ToString(F(n));
        Assert(!(_temp101 instanceof AbruptCompletion), "ToString(F(n))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp101 instanceof Completion) {
          _temp101 = _temp101.Value;
        }
        const nStr = _temp101;
        let _temp102 = CreateDataPropertyOrThrow(A, nStr, kValue);
        /* c8 ignore if */
        if (_temp102 instanceof AbruptCompletion) {
          return _temp102;
        }
        /* c8 ignore if */
        if (_temp102 instanceof Completion) {
          _temp102 = _temp102.Value;
        }
      }
      k += 1;
      n += 1;
    }
    let _temp103 = Set$1(A, Value('length'), F(n), Value.true);
    /* c8 ignore if */
    if (_temp103 instanceof AbruptCompletion) {
      return _temp103;
    }
    /* c8 ignore if */
    if (_temp103 instanceof Completion) {
      _temp103 = _temp103.Value;
    }
    return A;
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.sort */
  ArrayProto_slice.section = 'https://tc39.es/ecma262/#sec-array.prototype.slice';
  function ArrayProto_sort([comparefn = Value.undefined], {
    thisValue
  }) {
    if (comparefn !== Value.undefined && IsCallable(comparefn) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', comparefn);
    }
    let _temp104 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp104 instanceof AbruptCompletion) {
      return _temp104;
    }
    /* c8 ignore if */
    if (_temp104 instanceof Completion) {
      _temp104 = _temp104.Value;
    }
    const obj = _temp104;
    let _temp105 = LengthOfArrayLike(obj);
    /* c8 ignore if */
    if (_temp105 instanceof AbruptCompletion) {
      return _temp105;
    }
    /* c8 ignore if */
    if (_temp105 instanceof Completion) {
      _temp105 = _temp105.Value;
    }
    const len = _temp105;
    return ArrayProto_sortBody(obj, len, (x, y) => SortCompare(x, y, comparefn));
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.splice */
  ArrayProto_sort.section = 'https://tc39.es/ecma262/#sec-array.prototype.sort';
  function ArrayProto_splice(args, {
    thisValue
  }) {
    const [start = Value.undefined, deleteCount = Value.undefined, ...items] = args;
    let _temp106 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp106 instanceof AbruptCompletion) {
      return _temp106;
    }
    /* c8 ignore if */
    if (_temp106 instanceof Completion) {
      _temp106 = _temp106.Value;
    }
    const O = _temp106;
    let _temp107 = LengthOfArrayLike(O);
    /* c8 ignore if */
    if (_temp107 instanceof AbruptCompletion) {
      return _temp107;
    }
    /* c8 ignore if */
    if (_temp107 instanceof Completion) {
      _temp107 = _temp107.Value;
    }
    const len = _temp107;
    let _temp108 = ToIntegerOrInfinity(start);
    /* c8 ignore if */
    if (_temp108 instanceof AbruptCompletion) {
      return _temp108;
    }
    /* c8 ignore if */
    if (_temp108 instanceof Completion) {
      _temp108 = _temp108.Value;
    }
    const relativeStart = _temp108;
    let actualStart;
    if (relativeStart < 0) {
      actualStart = Math.max(len + relativeStart, 0);
    } else {
      actualStart = Math.min(relativeStart, len);
    }
    let insertCount;
    let actualDeleteCount;
    if (args.length === 0) {
      insertCount = 0;
      actualDeleteCount = 0;
    } else if (args.length === 1) {
      insertCount = 0;
      actualDeleteCount = len - actualStart;
    } else {
      insertCount = args.length - 2;
      let _temp109 = ToIntegerOrInfinity(deleteCount);
      /* c8 ignore if */
      if (_temp109 instanceof AbruptCompletion) {
        return _temp109;
      }
      /* c8 ignore if */
      if (_temp109 instanceof Completion) {
        _temp109 = _temp109.Value;
      }
      const dc = _temp109;
      actualDeleteCount = Math.min(Math.max(dc, 0), len - actualStart);
    }
    if (len + insertCount - actualDeleteCount > 2 ** 53 - 1) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayPastSafeLength');
    }
    let _temp110 = ArraySpeciesCreate(O, actualDeleteCount);
    /* c8 ignore if */
    if (_temp110 instanceof AbruptCompletion) {
      return _temp110;
    }
    /* c8 ignore if */
    if (_temp110 instanceof Completion) {
      _temp110 = _temp110.Value;
    }
    const A = _temp110;
    let k = 0;
    while (k < actualDeleteCount) {
      let _temp111 = ToString(F(actualStart + k));
      Assert(!(_temp111 instanceof AbruptCompletion), "ToString(F(actualStart + k))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp111 instanceof Completion) {
        _temp111 = _temp111.Value;
      }
      const from = _temp111;
      let _temp112 = HasProperty(O, from);
      /* c8 ignore if */
      if (_temp112 instanceof AbruptCompletion) {
        return _temp112;
      }
      /* c8 ignore if */
      if (_temp112 instanceof Completion) {
        _temp112 = _temp112.Value;
      }
      const fromPresent = _temp112;
      if (fromPresent === Value.true) {
        let _temp113 = Get(O, from);
        /* c8 ignore if */
        if (_temp113 instanceof AbruptCompletion) {
          return _temp113;
        }
        /* c8 ignore if */
        if (_temp113 instanceof Completion) {
          _temp113 = _temp113.Value;
        }
        const fromValue = _temp113;
        let _temp115 = ToString(F(k));
        Assert(!(_temp115 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp115 instanceof Completion) {
          _temp115 = _temp115.Value;
        }
        let _temp114 = CreateDataPropertyOrThrow(A, _temp115, fromValue);
        /* c8 ignore if */
        if (_temp114 instanceof AbruptCompletion) {
          return _temp114;
        }
        /* c8 ignore if */
        if (_temp114 instanceof Completion) {
          _temp114 = _temp114.Value;
        }
      }
      k += 1;
    }
    let _temp116 = Set$1(A, Value('length'), F(actualDeleteCount), Value.true);
    /* c8 ignore if */
    if (_temp116 instanceof AbruptCompletion) {
      return _temp116;
    }
    /* c8 ignore if */
    if (_temp116 instanceof Completion) {
      _temp116 = _temp116.Value;
    }
    const itemCount = items.length;
    if (itemCount < actualDeleteCount) {
      k = actualStart;
      while (k < len - actualDeleteCount) {
        let _temp117 = ToString(F(k + actualDeleteCount));
        Assert(!(_temp117 instanceof AbruptCompletion), "ToString(F(k + actualDeleteCount))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp117 instanceof Completion) {
          _temp117 = _temp117.Value;
        }
        const from = _temp117;
        let _temp118 = ToString(F(k + itemCount));
        Assert(!(_temp118 instanceof AbruptCompletion), "ToString(F(k + itemCount))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp118 instanceof Completion) {
          _temp118 = _temp118.Value;
        }
        const to = _temp118;
        let _temp119 = HasProperty(O, from);
        /* c8 ignore if */
        if (_temp119 instanceof AbruptCompletion) {
          return _temp119;
        }
        /* c8 ignore if */
        if (_temp119 instanceof Completion) {
          _temp119 = _temp119.Value;
        }
        const fromPresent = _temp119;
        if (fromPresent === Value.true) {
          let _temp120 = Get(O, from);
          /* c8 ignore if */
          if (_temp120 instanceof AbruptCompletion) {
            return _temp120;
          }
          /* c8 ignore if */
          if (_temp120 instanceof Completion) {
            _temp120 = _temp120.Value;
          }
          const fromValue = _temp120;
          let _temp121 = Set$1(O, to, fromValue, Value.true);
          /* c8 ignore if */
          if (_temp121 instanceof AbruptCompletion) {
            return _temp121;
          }
          /* c8 ignore if */
          if (_temp121 instanceof Completion) {
            _temp121 = _temp121.Value;
          }
        } else {
          let _temp122 = DeletePropertyOrThrow(O, to);
          /* c8 ignore if */
          if (_temp122 instanceof AbruptCompletion) {
            return _temp122;
          }
          /* c8 ignore if */
          if (_temp122 instanceof Completion) {
            _temp122 = _temp122.Value;
          }
        }
        k += 1;
      }
      k = len;
      while (k > len - actualDeleteCount + itemCount) {
        let _temp124 = ToString(F(k - 1));
        Assert(!(_temp124 instanceof AbruptCompletion), "ToString(F(k - 1))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp124 instanceof Completion) {
          _temp124 = _temp124.Value;
        }
        let _temp123 = DeletePropertyOrThrow(O, _temp124);
        /* c8 ignore if */
        if (_temp123 instanceof AbruptCompletion) {
          return _temp123;
        }
        /* c8 ignore if */
        if (_temp123 instanceof Completion) {
          _temp123 = _temp123.Value;
        }
        k -= 1;
      }
    } else if (itemCount > actualDeleteCount) {
      k = len - actualDeleteCount;
      while (k > actualStart) {
        let _temp125 = ToString(F(k + actualDeleteCount - 1));
        Assert(!(_temp125 instanceof AbruptCompletion), "ToString(F(k + actualDeleteCount - 1))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp125 instanceof Completion) {
          _temp125 = _temp125.Value;
        }
        const from = _temp125;
        let _temp126 = ToString(F(k + itemCount - 1));
        Assert(!(_temp126 instanceof AbruptCompletion), "ToString(F(k + itemCount - 1))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp126 instanceof Completion) {
          _temp126 = _temp126.Value;
        }
        const to = _temp126;
        let _temp127 = HasProperty(O, from);
        /* c8 ignore if */
        if (_temp127 instanceof AbruptCompletion) {
          return _temp127;
        }
        /* c8 ignore if */
        if (_temp127 instanceof Completion) {
          _temp127 = _temp127.Value;
        }
        const fromPresent = _temp127;
        if (fromPresent === Value.true) {
          let _temp128 = Get(O, from);
          /* c8 ignore if */
          if (_temp128 instanceof AbruptCompletion) {
            return _temp128;
          }
          /* c8 ignore if */
          if (_temp128 instanceof Completion) {
            _temp128 = _temp128.Value;
          }
          const fromValue = _temp128;
          let _temp129 = Set$1(O, to, fromValue, Value.true);
          /* c8 ignore if */
          if (_temp129 instanceof AbruptCompletion) {
            return _temp129;
          }
          /* c8 ignore if */
          if (_temp129 instanceof Completion) {
            _temp129 = _temp129.Value;
          }
        } else {
          let _temp130 = DeletePropertyOrThrow(O, to);
          /* c8 ignore if */
          if (_temp130 instanceof AbruptCompletion) {
            return _temp130;
          }
          /* c8 ignore if */
          if (_temp130 instanceof Completion) {
            _temp130 = _temp130.Value;
          }
        }
        k -= 1;
      }
    }
    k = actualStart;
    while (items.length > 0) {
      const E = items.shift();
      let _temp132 = ToString(F(k));
      Assert(!(_temp132 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp132 instanceof Completion) {
        _temp132 = _temp132.Value;
      }
      let _temp131 = Set$1(O, _temp132, E, Value.true);
      /* c8 ignore if */
      if (_temp131 instanceof AbruptCompletion) {
        return _temp131;
      }
      /* c8 ignore if */
      if (_temp131 instanceof Completion) {
        _temp131 = _temp131.Value;
      }
      k += 1;
    }
    let _temp133 = Set$1(O, Value('length'), F(len - actualDeleteCount + itemCount), Value.true);
    /* c8 ignore if */
    if (_temp133 instanceof AbruptCompletion) {
      return _temp133;
    }
    /* c8 ignore if */
    if (_temp133 instanceof Completion) {
      _temp133 = _temp133.Value;
    }
    return A;
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.tostring */
  ArrayProto_splice.section = 'https://tc39.es/ecma262/#sec-array.prototype.splice';
  function ArrayProto_toString(a, {
    thisValue
  }) {
    let _temp134 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp134 instanceof AbruptCompletion) {
      return _temp134;
    }
    /* c8 ignore if */
    if (_temp134 instanceof Completion) {
      _temp134 = _temp134.Value;
    }
    const array = _temp134;
    let _temp135 = Get(array, Value('join'));
    /* c8 ignore if */
    if (_temp135 instanceof AbruptCompletion) {
      return _temp135;
    }
    /* c8 ignore if */
    if (_temp135 instanceof Completion) {
      _temp135 = _temp135.Value;
    }
    let func = _temp135;
    if (IsCallable(func) === Value.false) {
      func = exports.surroundingAgent.intrinsic('%Object.prototype.toString%');
    }
    return Call(func, array);
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.unshift */
  ArrayProto_toString.section = 'https://tc39.es/ecma262/#sec-array.prototype.tostring';
  function ArrayProto_unshift(args, {
    thisValue
  }) {
    let _temp136 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp136 instanceof AbruptCompletion) {
      return _temp136;
    }
    /* c8 ignore if */
    if (_temp136 instanceof Completion) {
      _temp136 = _temp136.Value;
    }
    const O = _temp136;
    let _temp137 = LengthOfArrayLike(O);
    /* c8 ignore if */
    if (_temp137 instanceof AbruptCompletion) {
      return _temp137;
    }
    /* c8 ignore if */
    if (_temp137 instanceof Completion) {
      _temp137 = _temp137.Value;
    }
    const len = _temp137;
    const argCount = args.length;
    if (argCount > 0) {
      if (len + argCount > 2 ** 53 - 1) {
        return exports.surroundingAgent.Throw('TypeError', 'ArrayPastSafeLength');
      }
      let k = len;
      while (k > 0) {
        let _temp138 = ToString(F(k - 1));
        Assert(!(_temp138 instanceof AbruptCompletion), "ToString(F(k - 1))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp138 instanceof Completion) {
          _temp138 = _temp138.Value;
        }
        const from = _temp138;
        let _temp139 = ToString(F(k + argCount - 1));
        Assert(!(_temp139 instanceof AbruptCompletion), "ToString(F(k + argCount - 1))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp139 instanceof Completion) {
          _temp139 = _temp139.Value;
        }
        const to = _temp139;
        let _temp140 = HasProperty(O, from);
        /* c8 ignore if */
        if (_temp140 instanceof AbruptCompletion) {
          return _temp140;
        }
        /* c8 ignore if */
        if (_temp140 instanceof Completion) {
          _temp140 = _temp140.Value;
        }
        const fromPresent = _temp140;
        if (fromPresent === Value.true) {
          let _temp141 = Get(O, from);
          /* c8 ignore if */
          if (_temp141 instanceof AbruptCompletion) {
            return _temp141;
          }
          /* c8 ignore if */
          if (_temp141 instanceof Completion) {
            _temp141 = _temp141.Value;
          }
          const fromValue = _temp141;
          let _temp142 = Set$1(O, to, fromValue, Value.true);
          /* c8 ignore if */
          if (_temp142 instanceof AbruptCompletion) {
            return _temp142;
          }
          /* c8 ignore if */
          if (_temp142 instanceof Completion) {
            _temp142 = _temp142.Value;
          }
        } else {
          let _temp143 = DeletePropertyOrThrow(O, to);
          /* c8 ignore if */
          if (_temp143 instanceof AbruptCompletion) {
            return _temp143;
          }
          /* c8 ignore if */
          if (_temp143 instanceof Completion) {
            _temp143 = _temp143.Value;
          }
        }
        k -= 1;
      }
      let j = 0;
      const items = args;
      while (items.length !== 0) {
        const E = items.shift();
        let _temp144 = ToString(F(j));
        Assert(!(_temp144 instanceof AbruptCompletion), "ToString(F(j))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp144 instanceof Completion) {
          _temp144 = _temp144.Value;
        }
        const jStr = _temp144;
        let _temp145 = Set$1(O, jStr, E, Value.true);
        /* c8 ignore if */
        if (_temp145 instanceof AbruptCompletion) {
          return _temp145;
        }
        /* c8 ignore if */
        if (_temp145 instanceof Completion) {
          _temp145 = _temp145.Value;
        }
        j += 1;
      }
    }
    let _temp146 = Set$1(O, Value('length'), F(len + argCount), Value.true);
    /* c8 ignore if */
    if (_temp146 instanceof AbruptCompletion) {
      return _temp146;
    }
    /* c8 ignore if */
    if (_temp146 instanceof Completion) {
      _temp146 = _temp146.Value;
    }
    return F(len + argCount);
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.values */
  ArrayProto_unshift.section = 'https://tc39.es/ecma262/#sec-array.prototype.unshift';
  function ArrayProto_values(args, {
    thisValue
  }) {
    let _temp147 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp147 instanceof AbruptCompletion) {
      return _temp147;
    }
    /* c8 ignore if */
    if (_temp147 instanceof Completion) {
      _temp147 = _temp147.Value;
    }
    const O = _temp147;
    return CreateArrayIterator(O, 'value');
  }

  /** https://tc39.es/ecma262/#sec-array.prototype.at */
  ArrayProto_values.section = 'https://tc39.es/ecma262/#sec-array.prototype.values';
  function ArrayProto_at([index = Value.undefined], {
    thisValue
  }) {
    let _temp148 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp148 instanceof AbruptCompletion) {
      return _temp148;
    }
    /* c8 ignore if */
    if (_temp148 instanceof Completion) {
      _temp148 = _temp148.Value;
    }
    // 1. Let O be ? ToObject(this value).
    const O = _temp148;
    // 2. Let len be ? LengthOfArrayLike(O).
    let _temp149 = LengthOfArrayLike(O);
    /* c8 ignore if */
    if (_temp149 instanceof AbruptCompletion) {
      return _temp149;
    }
    /* c8 ignore if */
    if (_temp149 instanceof Completion) {
      _temp149 = _temp149.Value;
    }
    const len = _temp149;
    // 3. Let relativeIndex be ? ToIntegerOrInfinity(index).
    let _temp150 = ToIntegerOrInfinity(index);
    /* c8 ignore if */
    if (_temp150 instanceof AbruptCompletion) {
      return _temp150;
    }
    /* c8 ignore if */
    if (_temp150 instanceof Completion) {
      _temp150 = _temp150.Value;
    }
    const relativeIndex = _temp150;
    let k;
    // 4. If relativeIndex ≥ 0, then
    if (relativeIndex >= 0) {
      // a. Let k be relativeIndex.
      k = relativeIndex;
    } else {
      // 5. Else,
      // a. Let k be len + relativeIndex.
      k = len + relativeIndex;
    }
    // 6. If k < 0 or k ≥ len, then return undefined.
    if (k < 0 || k >= len) {
      return Value.undefined;
    }
    // 7. Return ? Get(O, ! ToString(k)).
    let _temp151 = ToString(F(k));
    Assert(!(_temp151 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp151 instanceof Completion) {
      _temp151 = _temp151.Value;
    }
    return Get(O, _temp151);
  }
  ArrayProto_at.section = 'https://tc39.es/ecma262/#sec-array.prototype.at';
  function bootstrapArrayPrototype(realmRec) {
    let _temp152 = ArrayCreate(0, realmRec.Intrinsics['%Object.prototype%']);
    Assert(!(_temp152 instanceof AbruptCompletion), "ArrayCreate(0, realmRec.Intrinsics['%Object.prototype%'])" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp152 instanceof Completion) {
      _temp152 = _temp152.Value;
    }
    const proto = _temp152;
    assignProps(realmRec, proto, [['concat', ArrayProto_concat, 1], ['copyWithin', ArrayProto_copyWithin, 2], ['entries', ArrayProto_entries, 0], ['fill', ArrayProto_fill, 1], ['filter', ArrayProto_filter, 1], ['flat', ArrayProto_flat, 0], ['flatMap', ArrayProto_flatMap, 1], ['at', ArrayProto_at, 1], ['keys', ArrayProto_keys, 0], ['map', ArrayProto_map, 1], ['pop', ArrayProto_pop, 0], ['push', ArrayProto_push, 1], ['shift', ArrayProto_shift, 0], ['slice', ArrayProto_slice, 2], ['sort', ArrayProto_sort, 1], ['splice', ArrayProto_splice, 2], ['toString', ArrayProto_toString, 0], ['unshift', ArrayProto_unshift, 1], ['values', ArrayProto_values, 0]]);
    bootstrapArrayPrototypeShared(realmRec, proto,
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    () => {}, O => LengthOfArrayLike(O));
    proto.DefineOwnProperty(wellKnownSymbols.iterator, proto.GetOwnProperty(Value('values')));
    {
      const unscopableList = OrdinaryObjectCreate(Value.null);
      let _temp153 = CreateDataProperty(unscopableList, Value('copyWithin'), Value.true);
      Assert(!(_temp153 instanceof AbruptCompletion), "CreateDataProperty(unscopableList, Value('copyWithin'), Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp153 instanceof Completion) {
        _temp153 = _temp153.Value;
      }
      Assert(_temp153 === Value.true, "X(CreateDataProperty(unscopableList, Value('copyWithin'), Value.true)) === Value.true");
      let _temp154 = CreateDataProperty(unscopableList, Value('entries'), Value.true);
      Assert(!(_temp154 instanceof AbruptCompletion), "CreateDataProperty(unscopableList, Value('entries'), Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp154 instanceof Completion) {
        _temp154 = _temp154.Value;
      }
      Assert(_temp154 === Value.true, "X(CreateDataProperty(unscopableList, Value('entries'), Value.true)) === Value.true");
      let _temp155 = CreateDataProperty(unscopableList, Value('fill'), Value.true);
      Assert(!(_temp155 instanceof AbruptCompletion), "CreateDataProperty(unscopableList, Value('fill'), Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp155 instanceof Completion) {
        _temp155 = _temp155.Value;
      }
      Assert(_temp155 === Value.true, "X(CreateDataProperty(unscopableList, Value('fill'), Value.true)) === Value.true");
      let _temp156 = CreateDataProperty(unscopableList, Value('find'), Value.true);
      Assert(!(_temp156 instanceof AbruptCompletion), "CreateDataProperty(unscopableList, Value('find'), Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp156 instanceof Completion) {
        _temp156 = _temp156.Value;
      }
      Assert(_temp156 === Value.true, "X(CreateDataProperty(unscopableList, Value('find'), Value.true)) === Value.true");
      let _temp157 = CreateDataProperty(unscopableList, Value('findLast'), Value.true);
      Assert(!(_temp157 instanceof AbruptCompletion), "CreateDataProperty(unscopableList, Value('findLast'), Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp157 instanceof Completion) {
        _temp157 = _temp157.Value;
      }
      Assert(_temp157 === Value.true, "X(CreateDataProperty(unscopableList, Value('findLast'), Value.true)) === Value.true");
      let _temp158 = CreateDataProperty(unscopableList, Value('findIndex'), Value.true);
      Assert(!(_temp158 instanceof AbruptCompletion), "CreateDataProperty(unscopableList, Value('findIndex'), Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp158 instanceof Completion) {
        _temp158 = _temp158.Value;
      }
      Assert(_temp158 === Value.true, "X(CreateDataProperty(unscopableList, Value('findIndex'), Value.true)) === Value.true");
      let _temp159 = CreateDataProperty(unscopableList, Value('findLastIndex'), Value.true);
      Assert(!(_temp159 instanceof AbruptCompletion), "CreateDataProperty(unscopableList, Value('findLastIndex'), Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp159 instanceof Completion) {
        _temp159 = _temp159.Value;
      }
      Assert(_temp159 === Value.true, "X(CreateDataProperty(unscopableList, Value('findLastIndex'), Value.true)) === Value.true");
      let _temp160 = CreateDataProperty(unscopableList, Value('flat'), Value.true);
      Assert(!(_temp160 instanceof AbruptCompletion), "CreateDataProperty(unscopableList, Value('flat'), Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp160 instanceof Completion) {
        _temp160 = _temp160.Value;
      }
      Assert(_temp160 === Value.true, "X(CreateDataProperty(unscopableList, Value('flat'), Value.true)) === Value.true");
      let _temp161 = CreateDataProperty(unscopableList, Value('flatMap'), Value.true);
      Assert(!(_temp161 instanceof AbruptCompletion), "CreateDataProperty(unscopableList, Value('flatMap'), Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp161 instanceof Completion) {
        _temp161 = _temp161.Value;
      }
      Assert(_temp161 === Value.true, "X(CreateDataProperty(unscopableList, Value('flatMap'), Value.true)) === Value.true");
      let _temp162 = CreateDataProperty(unscopableList, Value('includes'), Value.true);
      Assert(!(_temp162 instanceof AbruptCompletion), "CreateDataProperty(unscopableList, Value('includes'), Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp162 instanceof Completion) {
        _temp162 = _temp162.Value;
      }
      Assert(_temp162 === Value.true, "X(CreateDataProperty(unscopableList, Value('includes'), Value.true)) === Value.true");
      let _temp163 = CreateDataProperty(unscopableList, Value('keys'), Value.true);
      Assert(!(_temp163 instanceof AbruptCompletion), "CreateDataProperty(unscopableList, Value('keys'), Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp163 instanceof Completion) {
        _temp163 = _temp163.Value;
      }
      Assert(_temp163 === Value.true, "X(CreateDataProperty(unscopableList, Value('keys'), Value.true)) === Value.true");
      let _temp164 = CreateDataProperty(unscopableList, Value('values'), Value.true);
      Assert(!(_temp164 instanceof AbruptCompletion), "CreateDataProperty(unscopableList, Value('values'), Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp164 instanceof Completion) {
        _temp164 = _temp164.Value;
      }
      Assert(_temp164 === Value.true, "X(CreateDataProperty(unscopableList, Value('values'), Value.true)) === Value.true");
      let _temp165 = proto.DefineOwnProperty(wellKnownSymbols.unscopables, exports.Descriptor({
        Value: unscopableList,
        Writable: Value.false,
        Enumerable: Value.false,
        Configurable: Value.true
      }));
      Assert(!(_temp165 instanceof AbruptCompletion), "proto.DefineOwnProperty(wellKnownSymbols.unscopables, Descriptor({\n      Value: unscopableList,\n      Writable: Value.false,\n      Enumerable: Value.false,\n      Configurable: Value.true,\n    }))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp165 instanceof Completion) {
        _temp165 = _temp165.Value;
      }
    }

    // Used in `arguments` objects.
    let _temp166 = Get(proto, Value('values'));
    Assert(!(_temp166 instanceof AbruptCompletion), "Get(proto, Value('values'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp166 instanceof Completion) {
      _temp166 = _temp166.Value;
    }
    realmRec.Intrinsics['%Array.prototype.values%'] = _temp166;
    realmRec.Intrinsics['%Array.prototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-array-constructor */
  function ArrayConstructor(argumentsList, {
    NewTarget
  }) {
    const numberOfArgs = argumentsList.length;
    if (numberOfArgs === 0) {
      /** https://tc39.es/ecma262/#sec-array-constructor-array */
      Assert(numberOfArgs === 0, "numberOfArgs === 0");
      if (NewTarget instanceof UndefinedValue) {
        NewTarget = exports.surroundingAgent.activeFunctionObject;
      }
      const proto = GetPrototypeFromConstructor(NewTarget, '%Array.prototype%');
      return ArrayCreate(0, proto);
    } else if (numberOfArgs === 1) {
      /** https://tc39.es/ecma262/#sec-array-len */
      const [len] = argumentsList;
      Assert(numberOfArgs === 1, "numberOfArgs === 1");
      if (NewTarget instanceof UndefinedValue) {
        NewTarget = exports.surroundingAgent.activeFunctionObject;
      }
      const proto = GetPrototypeFromConstructor(NewTarget, '%Array.prototype%');
      const array = ArrayCreate(0, proto);
      let intLen;
      if (!(len instanceof NumberValue)) {
        let _temp = CreateDataProperty(array, Value('0'), len);
        Assert(!(_temp instanceof AbruptCompletion), "CreateDataProperty(array, Value('0'), len)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp instanceof Completion) {
          _temp = _temp.Value;
        }
        const defineStatus = _temp;
        Assert(defineStatus === Value.true, "defineStatus === Value.true");
        intLen = F(1);
      } else {
        let _temp2 = ToUint32(len);
        Assert(!(_temp2 instanceof AbruptCompletion), "ToUint32(len)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp2 instanceof Completion) {
          _temp2 = _temp2.Value;
        }
        intLen = _temp2;
        if (R(intLen) !== R(len)) {
          return exports.surroundingAgent.Throw('RangeError', 'InvalidArrayLength', len);
        }
      }
      Set$1(array, Value('length'), intLen, Value.true);
      return array;
    } else if (numberOfArgs >= 2) {
      /** https://tc39.es/ecma262/#sec-array-items */
      const items = argumentsList;
      Assert(numberOfArgs >= 2, "numberOfArgs >= 2");
      if (NewTarget instanceof UndefinedValue) {
        NewTarget = exports.surroundingAgent.activeFunctionObject;
      }
      const proto = GetPrototypeFromConstructor(NewTarget, '%Array.prototype%');
      const array = ArrayCreate(0, proto);
      let k = 0;
      while (k < numberOfArgs) {
        let _temp3 = ToString(F(k));
        Assert(!(_temp3 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
        const Pk = _temp3;
        const itemK = items[k];
        let _temp4 = CreateDataProperty(array, Pk, itemK);
        Assert(!(_temp4 instanceof AbruptCompletion), "CreateDataProperty(array, Pk, itemK)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp4 instanceof Completion) {
          _temp4 = _temp4.Value;
        }
        const defineStatus = _temp4;
        Assert(defineStatus === Value.true, "defineStatus === Value.true");
        k += 1;
      }
      let _temp5 = Get(array, Value('length'));
      Assert(!(_temp5 instanceof AbruptCompletion), "Get(array, Value('length'))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      Assert(R(_temp5) === numberOfArgs, "R(X(Get(array, Value('length')))) === numberOfArgs");
      return array;
    }
    throw new OutOfRange$1('ArrayConstructor', numberOfArgs);
  }

  /** https://tc39.es/ecma262/#sec-array.from */
  ArrayConstructor.section = 'https://tc39.es/ecma262/#sec-array-constructor';
  function Array_from([items = Value.undefined, mapfn = Value.undefined, thisArg = Value.undefined], {
    thisValue
  }) {
    const C = thisValue;
    let mapping;
    let A;
    if (mapfn === Value.undefined) {
      mapping = false;
    } else {
      if (IsCallable(mapfn) === Value.false) {
        return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', mapfn);
      }
      mapping = true;
    }
    let _temp6 = GetMethod(items, wellKnownSymbols.iterator);
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const usingIterator = _temp6;
    if (usingIterator !== Value.undefined) {
      if (IsConstructor(C) === Value.true) {
        let _temp7 = Construct(C);
        /* c8 ignore if */
        if (_temp7 instanceof AbruptCompletion) {
          return _temp7;
        }
        /* c8 ignore if */
        if (_temp7 instanceof Completion) {
          _temp7 = _temp7.Value;
        }
        A = _temp7;
      } else {
        let _temp8 = ArrayCreate(0);
        Assert(!(_temp8 instanceof AbruptCompletion), "ArrayCreate(0)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp8 instanceof Completion) {
          _temp8 = _temp8.Value;
        }
        A = _temp8;
      }
      let _temp9 = GetIterator(items, 'sync', usingIterator);
      /* c8 ignore if */
      if (_temp9 instanceof AbruptCompletion) {
        return _temp9;
      }
      /* c8 ignore if */
      if (_temp9 instanceof Completion) {
        _temp9 = _temp9.Value;
      }
      const iteratorRecord = _temp9;
      let k = 0;
      while (true) {
        // eslint-disable-line no-constant-condition
        if (k >= 2 ** 53 - 1) {
          const error = ThrowCompletion(exports.surroundingAgent.Throw('TypeError', 'ArrayPastSafeLength').Value);
          return IteratorClose(iteratorRecord, error);
        }
        let _temp10 = ToString(F(k));
        Assert(!(_temp10 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp10 instanceof Completion) {
          _temp10 = _temp10.Value;
        }
        const Pk = _temp10;
        let _temp11 = IteratorStep(iteratorRecord);
        /* c8 ignore if */
        if (_temp11 instanceof AbruptCompletion) {
          return _temp11;
        }
        /* c8 ignore if */
        if (_temp11 instanceof Completion) {
          _temp11 = _temp11.Value;
        }
        const next = _temp11;
        if (next === Value.false) {
          let _temp12 = Set$1(A, Value('length'), F(k), Value.true);
          /* c8 ignore if */
          if (_temp12 instanceof AbruptCompletion) {
            return _temp12;
          }
          /* c8 ignore if */
          if (_temp12 instanceof Completion) {
            _temp12 = _temp12.Value;
          }
          return A;
        }
        let _temp13 = IteratorValue(next);
        /* c8 ignore if */
        if (_temp13 instanceof AbruptCompletion) {
          return _temp13;
        }
        /* c8 ignore if */
        if (_temp13 instanceof Completion) {
          _temp13 = _temp13.Value;
        }
        const nextValue = _temp13;
        let mappedValue;
        if (mapping) {
          mappedValue = Call(mapfn, thisArg, [nextValue, F(k)]);
          /* c8 ignore if */
          if (mappedValue instanceof AbruptCompletion) {
            return IteratorClose(iteratorRecord, mappedValue);
          }
          /* c8 ignore if */
          if (mappedValue instanceof Completion) {
            mappedValue = mappedValue.Value;
          }
        } else {
          mappedValue = nextValue;
        }
        let defineStatus = CreateDataPropertyOrThrow(A, Pk, mappedValue);
        /* c8 ignore if */
        if (defineStatus instanceof AbruptCompletion) {
          return IteratorClose(iteratorRecord, defineStatus);
        }
        /* c8 ignore if */
        if (defineStatus instanceof Completion) {
          defineStatus = defineStatus.Value;
        }
        k += 1;
      }
    }
    let _temp14 = ToObject(items);
    Assert(!(_temp14 instanceof AbruptCompletion), "ToObject(items)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    const arrayLike = _temp14;
    let _temp15 = LengthOfArrayLike(arrayLike);
    /* c8 ignore if */
    if (_temp15 instanceof AbruptCompletion) {
      return _temp15;
    }
    /* c8 ignore if */
    if (_temp15 instanceof Completion) {
      _temp15 = _temp15.Value;
    }
    const len = _temp15;
    if (IsConstructor(C) === Value.true) {
      let _temp16 = Construct(C, [F(len)]);
      /* c8 ignore if */
      if (_temp16 instanceof AbruptCompletion) {
        return _temp16;
      }
      /* c8 ignore if */
      if (_temp16 instanceof Completion) {
        _temp16 = _temp16.Value;
      }
      A = _temp16;
    } else {
      let _temp17 = ArrayCreate(len);
      /* c8 ignore if */
      if (_temp17 instanceof AbruptCompletion) {
        return _temp17;
      }
      /* c8 ignore if */
      if (_temp17 instanceof Completion) {
        _temp17 = _temp17.Value;
      }
      A = _temp17;
    }
    let k = 0;
    while (k < len) {
      let _temp18 = ToString(F(k));
      Assert(!(_temp18 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp18 instanceof Completion) {
        _temp18 = _temp18.Value;
      }
      const Pk = _temp18;
      let _temp19 = Get(arrayLike, Pk);
      /* c8 ignore if */
      if (_temp19 instanceof AbruptCompletion) {
        return _temp19;
      }
      /* c8 ignore if */
      if (_temp19 instanceof Completion) {
        _temp19 = _temp19.Value;
      }
      const kValue = _temp19;
      let mappedValue;
      if (mapping === true) {
        let _temp20 = Call(mapfn, thisArg, [kValue, F(k)]);
        /* c8 ignore if */
        if (_temp20 instanceof AbruptCompletion) {
          return _temp20;
        }
        /* c8 ignore if */
        if (_temp20 instanceof Completion) {
          _temp20 = _temp20.Value;
        }
        mappedValue = _temp20;
      } else {
        mappedValue = kValue;
      }
      let _temp21 = CreateDataPropertyOrThrow(A, Pk, mappedValue);
      /* c8 ignore if */
      if (_temp21 instanceof AbruptCompletion) {
        return _temp21;
      }
      /* c8 ignore if */
      if (_temp21 instanceof Completion) {
        _temp21 = _temp21.Value;
      }
      k += 1;
    }
    let _temp22 = Set$1(A, Value('length'), F(len), Value.true);
    /* c8 ignore if */
    if (_temp22 instanceof AbruptCompletion) {
      return _temp22;
    }
    /* c8 ignore if */
    if (_temp22 instanceof Completion) {
      _temp22 = _temp22.Value;
    }
    return A;
  }

  /** https://tc39.es/ecma262/#sec-array.isarray */
  Array_from.section = 'https://tc39.es/ecma262/#sec-array.from';
  function Array_isArray([arg = Value.undefined]) {
    return IsArray(arg);
  }

  /** https://tc39.es/ecma262/#sec-array.of */
  Array_isArray.section = 'https://tc39.es/ecma262/#sec-array.isarray';
  function Array_of(items, {
    thisValue
  }) {
    const len = items.length;
    // Let items be the List of arguments passed to this function.
    const C = thisValue;
    let A;
    if (IsConstructor(C) === Value.true) {
      let _temp23 = Construct(C, [F(len)]);
      /* c8 ignore if */
      if (_temp23 instanceof AbruptCompletion) {
        return _temp23;
      }
      /* c8 ignore if */
      if (_temp23 instanceof Completion) {
        _temp23 = _temp23.Value;
      }
      A = _temp23;
    } else {
      let _temp24 = ArrayCreate(len);
      /* c8 ignore if */
      if (_temp24 instanceof AbruptCompletion) {
        return _temp24;
      }
      /* c8 ignore if */
      if (_temp24 instanceof Completion) {
        _temp24 = _temp24.Value;
      }
      A = _temp24;
    }
    let k = 0;
    while (k < len) {
      const kValue = items[k];
      let _temp25 = ToString(F(k));
      Assert(!(_temp25 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp25 instanceof Completion) {
        _temp25 = _temp25.Value;
      }
      const Pk = _temp25;
      let _temp26 = CreateDataPropertyOrThrow(A, Pk, kValue);
      /* c8 ignore if */
      if (_temp26 instanceof AbruptCompletion) {
        return _temp26;
      }
      /* c8 ignore if */
      if (_temp26 instanceof Completion) {
        _temp26 = _temp26.Value;
      }
      k += 1;
    }
    let _temp27 = Set$1(A, Value('length'), F(len), Value.true);
    /* c8 ignore if */
    if (_temp27 instanceof AbruptCompletion) {
      return _temp27;
    }
    /* c8 ignore if */
    if (_temp27 instanceof Completion) {
      _temp27 = _temp27.Value;
    }
    return A;
  }

  /** https://tc39.es/ecma262/#sec-get-array-@@species */
  Array_of.section = 'https://tc39.es/ecma262/#sec-array.of';
  function Array_speciesGetter(args, {
    thisValue
  }) {
    return thisValue;
  }
  Array_speciesGetter.section = 'https://tc39.es/ecma262/#sec-get-array-@@species';
  function bootstrapArray(realmRec) {
    const proto = realmRec.Intrinsics['%Array.prototype%'];
    const cons = bootstrapConstructor(realmRec, ArrayConstructor, 'Array', 1, proto, [['from', Array_from, 1], ['isArray', Array_isArray, 1], ['of', Array_of, 0], [wellKnownSymbols.species, [Array_speciesGetter]]]);
    realmRec.Intrinsics['%Array%'] = cons;
  }

  /** https://tc39.es/ecma262/#sec-bigint-constructor */
  function BigIntConstructor([value], {
    NewTarget
  }) {
    // 1. If NewTarget is not undefined, throw a TypeError exception.
    if (NewTarget !== Value.undefined) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAConstructor', 'BigInt');
    }
    // 2. Let prim be ? ToPrimitive(value, number).
    let _temp = ToPrimitive(value, 'number');
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const prim = _temp;
    // 3. If Type(prim) is Number, return ? NumberToBigInt(prim).
    // 4. Otherwise, return ? ToBigInt(prim).
    if (prim instanceof NumberValue) {
      return NumberToBigInt(prim);
    } else {
      return ToBigInt(prim);
    }
  }

  /** https://tc39.es/ecma262/#sec-bigint.asintn */
  BigIntConstructor.section = 'https://tc39.es/ecma262/#sec-bigint-constructor';
  function BigInt_asIntN([bits = Value.undefined, bigint = Value.undefined]) {
    let _temp2 = ToIndex(bits);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 1. Set bits to ? ToIndex(bits).
    bits = _temp2;
    // 2. Set bigint to ? ToBigInt(bigint).
    let _temp3 = ToBigInt(bigint);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    bigint = _temp3;
    // 3. Let mod be the BigInt value that represents bigint modulo 2bits.
    // 4. If mod ≥ 2^bits - 1, return mod - 2^bits; otherwise, return mod.
    return Z(BigInt.asIntN(bits, R(bigint)));
  }

  /** https://tc39.es/ecma262/#sec-bigint.asuintn */
  BigInt_asIntN.section = 'https://tc39.es/ecma262/#sec-bigint.asintn';
  function BigInt_asUintN([bits = Value.undefined, bigint = Value.undefined]) {
    let _temp4 = ToIndex(bits);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 1. Set bits to ? ToIndex(bits).
    bits = _temp4;
    // 2. Set bigint to ? ToBigInt(bigint).
    let _temp5 = ToBigInt(bigint);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    bigint = _temp5;
    // 3. Let mod be ℝ(bigint) modulo 2 ** bits.
    // 4. If mod ≥ 2 ** (bits - 1), return Z(mod - 2 ** bits); otherwise, return Z(mod).
    return Z(BigInt.asUintN(bits, R(bigint)));
  }
  BigInt_asUintN.section = 'https://tc39.es/ecma262/#sec-bigint.asuintn';
  function bootstrapBigInt(realmRec) {
    const bigintConstructor = bootstrapConstructor(realmRec, BigIntConstructor, 'BigInt', 1, realmRec.Intrinsics['%BigInt.prototype%'], [['asIntN', BigInt_asIntN, 2], ['asUintN', BigInt_asUintN, 2]]);
    realmRec.Intrinsics['%BigInt%'] = bigintConstructor;
  }

  /** https://tc39.es/ecma262/#sec-thisbigintvalue */
  function thisBigIntValue(value) {
    // 1. If Type(value) is BigInt, return value.
    if (value instanceof BigIntValue) {
      return value;
    }
    // 2. If Type(value) is Object and value has a [[BigIntData]] internal slot, then
    if (value instanceof ObjectValue && 'BigIntData' in value) {
      // a. Assert: Type(value.[[BigIntData]]) is BigInt.
      Assert(value.BigIntData instanceof BigIntValue, "value.BigIntData instanceof BigIntValue");
      // b. Return value.[[BigIntData]].
      return value.BigIntData;
    }
    // 3. Throw a TypeError exception.
    return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'BigInt', value);
  }

  /** https://tc39.es/ecma262/#sec-bigint.prototype.tolocalestring */
  thisBigIntValue.section = 'https://tc39.es/ecma262/#sec-thisbigintvalue';
  function BigIntProto_toLocalString(args, {
    thisValue
  }) {
    return BigIntProto_toString(args, {
      thisValue
    });
  }

  /** https://tc39.es/ecma262/#sec-bigint.prototype.tostring */
  BigIntProto_toLocalString.section = 'https://tc39.es/ecma262/#sec-bigint.prototype.tolocalestring';
  function BigIntProto_toString([radix], {
    thisValue
  }) {
    let _temp = thisBigIntValue(thisValue);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 1. Let x be ? thisBigIntValue(this value).
    const x = _temp;
    // 2. If radix is not present, let radixNumber be 10.
    let radixNumber;
    if (radix === undefined) {
      radixNumber = 10;
    } else if (radix === Value.undefined) {
      // 3. Else if radix is undefined, let radixNumber be 10.
      radixNumber = 10;
    } else {
      let _temp2 = ToIntegerOrInfinity(radix);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      // 4. Else, let radixNumber be ? ToIntegerOrInfinity(radix).
      radixNumber = _temp2;
    }
    // 5. If radixNumber < 2 or radixNumber > 36, throw a RangeError exception.
    if (radixNumber < 2 || radixNumber > 36) {
      return exports.surroundingAgent.Throw('RangeError', 'InvalidRadix');
    }
    // 6. If radixNumber = 10, return ! ToString(x).
    if (radixNumber === 10) {
      let _temp3 = ToString(x);
      Assert(!(_temp3 instanceof AbruptCompletion), "ToString(x)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      return _temp3;
    }
    // 7. Return the String representation of this Number value using the radix specified by
    //    radixNumber. Letters a-z are used for digits with values 10 through 35. The precise
    //    algorithm is implementation-dependent, however the algorithm should be a
    //    generalization of that specified in 6.1.6.2.23.
    // TODO: Implementation stringification
    return Value(R(x).toString(radixNumber));
  }

  /** https://tc39.es/ecma262/#sec-bigint.prototype.tostring */
  BigIntProto_toString.section = 'https://tc39.es/ecma262/#sec-bigint.prototype.tostring';
  function BigIntProto_valueOf(args, {
    thisValue
  }) {
    // Return ? thisBigIntValue(this value).
    return thisBigIntValue(thisValue);
  }
  BigIntProto_valueOf.section = 'https://tc39.es/ecma262/#sec-bigint.prototype.tostring';
  function bootstrapBigIntPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['toLocaleString', BigIntProto_toLocalString, 0], ['toString', BigIntProto_toString, 0], ['valueOf', BigIntProto_valueOf, 0]], realmRec.Intrinsics['%Object.prototype%'], 'BigInt');
    realmRec.Intrinsics['%BigInt.prototype%'] = proto;
  }

  function thisBooleanValue(value) {
    if (value instanceof BooleanValue) {
      return value;
    }
    if (value instanceof ObjectValue && 'BooleanData' in value) {
      const b = value.BooleanData;
      Assert(b instanceof BooleanValue, "b instanceof BooleanValue");
      return b;
    }
    return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'Boolean', value);
  }

  /** https://tc39.es/ecma262/#sec-boolean.prototype.tostring */
  function BooleanProto_toString(argList, {
    thisValue
  }) {
    let _temp = thisBooleanValue(thisValue);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 1. Let b be ? thisBooleanValue(this value).
    const b = _temp;
    // 2. If b is true, return "true"; else return "false".
    if (b === Value.true) {
      return Value('true');
    }
    return Value('false');
  }

  /** https://tc39.es/ecma262/#sec-boolean.prototype.valueof */
  BooleanProto_toString.section = 'https://tc39.es/ecma262/#sec-boolean.prototype.tostring';
  function BooleanProto_valueOf(argList, {
    thisValue
  }) {
    // 1. Return ? thisBooleanValue(this value).
    return thisBooleanValue(thisValue);
  }
  BooleanProto_valueOf.section = 'https://tc39.es/ecma262/#sec-boolean.prototype.valueof';
  function bootstrapBooleanPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['toString', BooleanProto_toString, 0], ['valueOf', BooleanProto_valueOf, 0]], realmRec.Intrinsics['%Object.prototype%']);
    proto.BooleanData = Value.false;
    realmRec.Intrinsics['%Boolean.prototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-boolean-constructor-boolean-value */
  function BooleanConstructor([value = Value.undefined], {
    NewTarget
  }) {
    let _temp = ToBoolean(value);
    Assert(!(_temp instanceof AbruptCompletion), "ToBoolean(value)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 1. Let b be ! ToBoolean(value).
    const b = _temp;
    // 2. If NewTarget is undefined, return b.
    if (NewTarget === Value.undefined) {
      return b;
    }
    // 3. Let O be ? OrdinaryCreateFromConstructor(NewTarget, "%Boolean.prototype%", « [[BooleanData]] »).
    let _temp2 = OrdinaryCreateFromConstructor(NewTarget, '%Boolean.prototype%', ['BooleanData']);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const O = _temp2;
    // 4. Set O.[[BooleanData]] to b.
    O.BooleanData = b;
    // 5. Return O.
    return O;
  }
  BooleanConstructor.section = 'https://tc39.es/ecma262/#sec-boolean-constructor-boolean-value';
  function bootstrapBoolean(realmRec) {
    const cons = bootstrapConstructor(realmRec, BooleanConstructor, 'Boolean', 1, realmRec.Intrinsics['%Boolean.prototype%'], []);
    realmRec.Intrinsics['%Boolean%'] = cons;
  }

  function thisNumberValue(value) {
    if (value instanceof NumberValue) {
      return value;
    }
    if (value instanceof ObjectValue && 'NumberData' in value) {
      const n = value.NumberData;
      Assert(n instanceof NumberValue, "n instanceof NumberValue");
      return n;
    }
    return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'Number', value);
  }

  /** https://tc39.es/ecma262/#sec-number.prototype.toexponential */
  function NumberProto_toExponential([fractionDigits = Value.undefined], {
    thisValue
  }) {
    let _temp = thisNumberValue(thisValue);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const x = _temp;
    let _temp2 = ToIntegerOrInfinity(fractionDigits);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const f = _temp2;
    Assert(fractionDigits !== Value.undefined || f === 0, "fractionDigits !== Value.undefined || f === 0");
    if (!x.isFinite()) {
      return NumberValue.toString(x);
    }
    if (f < 0 || f > 100) {
      return exports.surroundingAgent.Throw('RangeError', 'NumberFormatRange', 'toExponential');
    }
    return Value(R(x).toExponential(fractionDigits === Value.undefined ? undefined : f));
  }

  /** https://tc39.es/ecma262/#sec-number.prototype.tofixed */
  NumberProto_toExponential.section = 'https://tc39.es/ecma262/#sec-number.prototype.toexponential';
  function NumberProto_toFixed([fractionDigits = Value.undefined], {
    thisValue
  }) {
    let _temp3 = thisNumberValue(thisValue);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const x = _temp3;
    let _temp4 = ToIntegerOrInfinity(fractionDigits);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const f = _temp4;
    Assert(fractionDigits !== Value.undefined || f === 0, "fractionDigits !== Value.undefined || f === 0");
    if (f < 0 || f > 100) {
      return exports.surroundingAgent.Throw('RangeError', 'NumberFormatRange', 'toFixed');
    }
    if (!x.isFinite()) {
      let _temp5 = NumberValue.toString(x);
      Assert(!(_temp5 instanceof AbruptCompletion), "NumberValue.toString(x)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      return _temp5;
    }
    return Value(R(x).toFixed(f));
  }

  /** https://tc39.es/ecma262/#sec-number.prototype.tolocalestring */
  NumberProto_toFixed.section = 'https://tc39.es/ecma262/#sec-number.prototype.tofixed';
  function NumberProto_toLocaleString(args, {
    thisValue
  }) {
    return NumberProto_toString([], {
      thisValue
    });
  }

  /** https://tc39.es/ecma262/#sec-number.prototype.toprecision */
  NumberProto_toLocaleString.section = 'https://tc39.es/ecma262/#sec-number.prototype.tolocalestring';
  function NumberProto_toPrecision([precision = Value.undefined], {
    thisValue
  }) {
    let _temp6 = thisNumberValue(thisValue);
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const x = _temp6;
    if (precision === Value.undefined) {
      let _temp7 = ToString(x);
      Assert(!(_temp7 instanceof AbruptCompletion), "ToString(x)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp7 instanceof Completion) {
        _temp7 = _temp7.Value;
      }
      return _temp7;
    }
    let _temp8 = ToIntegerOrInfinity(precision);
    /* c8 ignore if */
    if (_temp8 instanceof AbruptCompletion) {
      return _temp8;
    }
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    const p = _temp8;
    if (!x.isFinite()) {
      let _temp9 = NumberValue.toString(x);
      Assert(!(_temp9 instanceof AbruptCompletion), "NumberValue.toString(x)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp9 instanceof Completion) {
        _temp9 = _temp9.Value;
      }
      return _temp9;
    }
    if (p < 1 || p > 100) {
      return exports.surroundingAgent.Throw('RangeError', 'NumberFormatRange', 'toPrecision');
    }
    return Value(R(x).toPrecision(p));
  }

  /** https://tc39.es/ecma262/#sec-number.prototype.tostring */
  NumberProto_toPrecision.section = 'https://tc39.es/ecma262/#sec-number.prototype.toprecision';
  function NumberProto_toString([radix = Value.undefined], {
    thisValue
  }) {
    let _temp10 = thisNumberValue(thisValue);
    /* c8 ignore if */
    if (_temp10 instanceof AbruptCompletion) {
      return _temp10;
    }
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    const x = _temp10;
    let radixNumber;
    if (radix === Value.undefined) {
      radixNumber = 10;
    } else {
      let _temp11 = ToIntegerOrInfinity(radix);
      /* c8 ignore if */
      if (_temp11 instanceof AbruptCompletion) {
        return _temp11;
      }
      /* c8 ignore if */
      if (_temp11 instanceof Completion) {
        _temp11 = _temp11.Value;
      }
      radixNumber = _temp11;
    }
    if (radixNumber < 2 || radixNumber > 36) {
      return exports.surroundingAgent.Throw('RangeError', 'NumberFormatRange', 'toString');
    }
    if (radixNumber === 10) {
      let _temp12 = ToString(x);
      Assert(!(_temp12 instanceof AbruptCompletion), "ToString(x)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp12 instanceof Completion) {
        _temp12 = _temp12.Value;
      }
      return _temp12;
    }
    // FIXME(devsnek): Return the String representation of this Number
    // value using the radix specified by radixNumber. Letters a-z are
    // used for digits with values 10 through 35. The precise algorithm
    // is implementation-dependent, however the algorithm should be a
    // generalization of that specified in 7.1.12.1.
    return Value(R(x).toString(radixNumber));
  }

  /** https://tc39.es/ecma262/#sec-number.prototype.valueof */
  NumberProto_toString.section = 'https://tc39.es/ecma262/#sec-number.prototype.tostring';
  function NumberProto_valueOf(args, {
    thisValue
  }) {
    return thisNumberValue(thisValue);
  }
  NumberProto_valueOf.section = 'https://tc39.es/ecma262/#sec-number.prototype.valueof';
  function bootstrapNumberPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['toExponential', NumberProto_toExponential, 1], ['toFixed', NumberProto_toFixed, 1], ['toLocaleString', NumberProto_toLocaleString, 0], ['toPrecision', NumberProto_toPrecision, 1], ['toString', NumberProto_toString, 1], ['valueOf', NumberProto_valueOf, 0]], realmRec.Intrinsics['%Object.prototype%']);
    proto.NumberData = F(+0);
    realmRec.Intrinsics['%Number.prototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-number-constructor-number-value */
  function NumberConstructor([value], {
    NewTarget
  }) {
    let n;
    if (value !== undefined) {
      let _temp = ToNumeric(value);
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      const prim = _temp;
      if (prim instanceof BigIntValue) {
        n = F(Number(R(prim)));
      } else {
        n = prim;
      }
    } else {
      n = F(+0);
    }
    if (NewTarget === Value.undefined) {
      return n;
    }
    const O = OrdinaryCreateFromConstructor(NewTarget, '%Number.prototype%', ['NumberData']);
    O.NumberData = n;
    return O;
  }

  /** https://tc39.es/ecma262/#sec-number.isfinite */
  NumberConstructor.section = 'https://tc39.es/ecma262/#sec-number-constructor-number-value';
  function Number_isFinite([number = Value.undefined]) {
    if (!(number instanceof NumberValue)) {
      return Value.false;
    }
    if (number.isNaN() || number.isInfinity()) {
      return Value.false;
    }
    return Value.true;
  }

  /** https://tc39.es/ecma262/#sec-number.isinteger */
  Number_isFinite.section = 'https://tc39.es/ecma262/#sec-number.isfinite';
  function Number_isInteger([number = Value.undefined]) {
    let _temp2 = IsIntegralNumber(number);
    Assert(!(_temp2 instanceof AbruptCompletion), "IsIntegralNumber(number)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    return _temp2;
  }

  /** https://tc39.es/ecma262/#sec-number.isnan */
  Number_isInteger.section = 'https://tc39.es/ecma262/#sec-number.isinteger';
  function Number_isNaN([number = Value.undefined]) {
    if (!(number instanceof NumberValue)) {
      return Value.false;
    }
    if (number.isNaN()) {
      return Value.true;
    }
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-number.issafeinteger */
  Number_isNaN.section = 'https://tc39.es/ecma262/#sec-number.isnan';
  function Number_isSafeInteger([number = Value.undefined]) {
    if (!(number instanceof NumberValue)) {
      return Value.false;
    }
    let _temp3 = IsIntegralNumber(number);
    Assert(!(_temp3 instanceof AbruptCompletion), "IsIntegralNumber(number)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    if (_temp3 === Value.true) {
      if (Math.abs(R(number)) <= 2 ** 53 - 1) {
        return Value.true;
      }
    }
    return Value.false;
  }
  Number_isSafeInteger.section = 'https://tc39.es/ecma262/#sec-number.issafeinteger';
  function bootstrapNumber(realmRec) {
    const override = {
      Writable: Value.false,
      Enumerable: Value.false,
      Configurable: Value.false
    };
    const numberConstructor = bootstrapConstructor(realmRec, NumberConstructor, 'Number', 1, realmRec.Intrinsics['%Number.prototype%'], [['EPSILON', F(Number.EPSILON), undefined, override], ['MAX_SAFE_INTEGER', F(Number.MAX_SAFE_INTEGER), undefined, override], ['MAX_VALUE', F(Number.MAX_VALUE), undefined, override], ['MIN_SAFE_INTEGER', F(Number.MIN_SAFE_INTEGER), undefined, override], ['MIN_VALUE', F(Number.MIN_VALUE), undefined, override], ['NaN', F(NaN), undefined, override], ['NEGATIVE_INFINITY', F(-Infinity), undefined, override], ['POSITIVE_INFINITY', F(+Infinity), undefined, override], ['isFinite', Number_isFinite, 1], ['isInteger', Number_isInteger, 1], ['isNaN', Number_isNaN, 1], ['isSafeInteger', Number_isSafeInteger, 1]]);

    /** https://tc39.es/ecma262/#sec-number.parsefloat */
    // The value of the Number.parseFloat data property is the same built-in function object that is the value of the parseFloat property of the global object defined in 18.2.4.
    let _temp4 = numberConstructor.DefineOwnProperty(Value('parseFloat'), exports.Descriptor({
      Value: realmRec.Intrinsics['%parseFloat%'],
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.true
    }));
    Assert(!(_temp4 instanceof AbruptCompletion), "numberConstructor.DefineOwnProperty(Value('parseFloat'), Descriptor({\n    Value: realmRec.Intrinsics['%parseFloat%'],\n    Writable: Value.true,\n    Enumerable: Value.false,\n    Configurable: Value.true,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }

    /** https://tc39.es/ecma262/#sec-number.parseint */
    // The value of the Number.parseInt data property is the same built-in function object that is the value of the parseInt property of the global object defined in 18.2.5.
    let _temp5 = numberConstructor.DefineOwnProperty(Value('parseInt'), exports.Descriptor({
      Value: realmRec.Intrinsics['%parseInt%'],
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.true
    }));
    Assert(!(_temp5 instanceof AbruptCompletion), "numberConstructor.DefineOwnProperty(Value('parseInt'), Descriptor({\n    Value: realmRec.Intrinsics['%parseInt%'],\n    Writable: Value.true,\n    Enumerable: Value.false,\n    Configurable: Value.true,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    realmRec.Intrinsics['%Number%'] = numberConstructor;
  }

  /** https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object */
  function FunctionProto(_args, _meta) {
    // * accepts any arguments and returns undefined when invoked.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-function.prototype.apply */
  FunctionProto.section = 'https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object';
  function FunctionProto_apply([thisArg = Value.undefined, argArray = Value.undefined], {
    thisValue
  }) {
    // 1. Let func be the this value.
    const func = thisValue;
    // 2. If IsCallable(func) is false, throw a TypeError exception.
    if (IsCallable(func) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'ThisNotAFunction', func);
    }
    // 3. If argArray is undefined or null, then
    if (argArray === Value.undefined || argArray === Value.null) {
      // a. Perform PrepareForTailCall().
      PrepareForTailCall();
      // b. Return ? Call(func, thisArg).
      return Call(func, thisArg);
    }
    // 4. Let argList be ? CreateListFromArrayLike(argArray).
    let _temp = CreateListFromArrayLike(argArray);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const argList = _temp;
    // 5. Perform PrepareForTailCall().
    PrepareForTailCall();
    // 6. Return ? Call(func, thisArg, argList).
    return Call(func, thisArg, argList);
  }
  FunctionProto_apply.section = 'https://tc39.es/ecma262/#sec-function.prototype.apply';
  function BoundFunctionExoticObjectCall(thisArgument, argumentsList) {
    const F = this;
    const target = F.BoundTargetFunction;
    const boundThis = F.BoundThis;
    const boundArgs = F.BoundArguments;
    const args = [...boundArgs, ...argumentsList];
    return Call(target, boundThis, args);
  }
  function BoundFunctionExoticObjectConstruct(argumentsList, newTarget) {
    const F = this;
    const target = F.BoundTargetFunction;
    Assert(IsConstructor(target) === Value.true, "IsConstructor(target) === Value.true");
    const boundArgs = F.BoundArguments;
    const args = [...boundArgs, ...argumentsList];
    if (SameValue(F, newTarget) === Value.true) {
      newTarget = target;
    }
    return Construct(target, args, newTarget);
  }

  /** https://tc39.es/ecma262/#sec-boundfunctioncreate */
  function BoundFunctionCreate(targetFunction, boundThis, boundArgs) {
    // 1. Assert: Type(targetFunction) is Object.
    Assert(targetFunction instanceof ObjectValue, "targetFunction instanceof ObjectValue");
    // 2. Let proto be ? targetFunction.[[GetPrototypeOf]]().
    let _temp2 = targetFunction.GetPrototypeOf();
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const proto = _temp2;
    // 3. Let internalSlotsList be the internal slots listed in Table 30, plus [[Prototype]] and [[Extensible]].
    const internalSlotsList = ['BoundTargetFunction', 'BoundThis', 'BoundArguments', 'Prototype', 'Extensible'];
    // 4. Let obj be ! MakeBasicObject(internalSlotsList).
    let _temp3 = MakeBasicObject(internalSlotsList);
    Assert(!(_temp3 instanceof AbruptCompletion), "MakeBasicObject(internalSlotsList)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const obj = _temp3;
    // 5. Set obj.[[Prototype]] to proto.
    obj.Prototype = proto;
    // 6. Set obj.[[Call]] as described in 9.4.1.1.
    obj.Call = BoundFunctionExoticObjectCall;
    // 7. If IsConstructor(targetFunction) is true, then
    if (IsConstructor(targetFunction) === Value.true) {
      // a. Set obj.[[Construct]] as described in 9.4.1.2.
      obj.Construct = BoundFunctionExoticObjectConstruct;
    }
    // 8. Set obj.[[BoundTargetFunction]] to targetFunction.
    obj.BoundTargetFunction = targetFunction;
    // 9. Set obj.[[BoundThis]] to boundThis.
    obj.BoundThis = boundThis;
    // 10. Set obj.[[BoundArguments]] to boundArguments.
    obj.BoundArguments = boundArgs;
    // 11. Return obj.
    return obj;
  }

  /** https://tc39.es/ecma262/#sec-function.prototype.bind */
  BoundFunctionCreate.section = 'https://tc39.es/ecma262/#sec-boundfunctioncreate';
  function FunctionProto_bind([thisArg = Value.undefined, ...args], {
    thisValue
  }) {
    // 1. Let Target be the this value.
    const Target = thisValue;
    // 2. If IsCallable(Target) is false, throw a TypeError exception.
    if (IsCallable(Target) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'ThisNotAFunction', Target);
    }
    // 3. Let F be ? BoundFunctionCreate(Target, thisArg, args).
    let _temp4 = BoundFunctionCreate(Target, thisArg, args);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const F = _temp4;
    // 4. Let L be 0.
    let L = 0;
    // 5. Let targetHasLength be ? HasOwnProperty(Target, "length").
    let _temp5 = HasOwnProperty(Target, Value('length'));
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const targetHasLength = _temp5;
    // 6. If targetHasLength is true, then
    if (targetHasLength === Value.true) {
      let _temp6 = Get(Target, Value('length'));
      /* c8 ignore if */
      if (_temp6 instanceof AbruptCompletion) {
        return _temp6;
      }
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
      // a. Let targetLen be ? Get(Target, "length").
      const targetLen = _temp6;
      // b. If Type(targetLen) is Number, then
      if (targetLen instanceof NumberValue) {
        // i. If targetLen is +∞𝔽, set L to +∞.
        if (R(targetLen) === +Infinity) {
          L = +Infinity;
        } else if (R(targetLen) === -Infinity) {
          // ii. Else if targetLen is -∞𝔽, set L to 0.
          L = 0;
        } else {
          let _temp7 = ToIntegerOrInfinity(targetLen);
          /* c8 ignore if */
          if (_temp7 instanceof AbruptCompletion) {
            return _temp7;
          }
          /* c8 ignore if */
          if (_temp7 instanceof Completion) {
            _temp7 = _temp7.Value;
          }
          // iii. Else,
          // 1. Set targetLen to ! ToIntegerOrInfinity(targetLen).
          const targetLenAsInt = _temp7;
          // 2. Assert: targetLenAsInt is finite.
          Assert(Number.isFinite(targetLenAsInt), "Number.isFinite(targetLenAsInt)");
          // 3. Let argCount be the number of elements in args.
          const argCount = args.length;
          // 4. Set L to max(targetLenAsInt - argCount, 0).
          L = Math.max(targetLenAsInt - argCount, 0);
        }
      }
    }
    // 7. Perform ! SetFunctionLength(F, L).
    let _temp8 = SetFunctionLength(F, L);
    Assert(!(_temp8 instanceof AbruptCompletion), "SetFunctionLength(F, L)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    // 8. Let targetName be ? Get(Target, "name").
    let _temp9 = Get(Target, Value('name'));
    /* c8 ignore if */
    if (_temp9 instanceof AbruptCompletion) {
      return _temp9;
    }
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    let targetName = _temp9;
    // 9. If Type(targetName) is not String, set targetName to the empty String.
    if (!(targetName instanceof JSStringValue)) {
      targetName = Value('');
    }
    // 10. Perform SetFunctionName(F, targetName, "bound").
    SetFunctionName(F, targetName, Value('bound'));
    // 11. Return F.
    return F;
  }

  /** https://tc39.es/ecma262/#sec-function.prototype.call */
  FunctionProto_bind.section = 'https://tc39.es/ecma262/#sec-function.prototype.bind';
  function FunctionProto_call([thisArg = Value.undefined, ...args], {
    thisValue
  }) {
    // 1. Let func be the this value.
    const func = thisValue;
    // 2. If IsCallable(func) is false, throw a TypeError exception.
    if (IsCallable(func) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'ThisNotAFunction', func);
    }
    // 3. Let argList be a new empty List.
    const argList = [];
    // 4. If this method was called with more than one argument, then in left to right order, starting with the second argument, append each argument as the last element of argList.
    for (const arg of args) {
      argList.push(arg);
    }
    // 5. Perform PrepareForTailCall().
    PrepareForTailCall();
    // 6. Return ? Call(func, thisArg, argList).
    return Call(func, thisArg, argList);
  }

  /** https://tc39.es/ecma262/#sec-function.prototype.tostring */
  FunctionProto_call.section = 'https://tc39.es/ecma262/#sec-function.prototype.call';
  function FunctionProto_toString(args, {
    thisValue
  }) {
    // 1. Let func be the this value.
    const func = thisValue;
    // 2. If Type(func) is Object and func has a [[SourceText]] internal slot and func.[[SourceText]]
    //    is a sequence of Unicode code points and ! HostHasSourceTextAvailable(func) is true, then
    let _temp10 = HostHasSourceTextAvailable(func);
    Assert(!(_temp10 instanceof AbruptCompletion), "HostHasSourceTextAvailable(func)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    if (func instanceof ObjectValue && 'SourceText' in func && _temp10 === Value.true) {
      // Return ! UTF16Encode(func.[[SourceText]]).
      return Value(func.SourceText);
    }
    // 3. If func is a built-in function object, then return an implementation-defined
    //    String source code representation of func. The representation must have the
    //    syntax of a NativeFunction. Additionally, if func has an [[InitialName]] internal
    //    slot and func.[[InitialName]] is a String, the portion of the returned String
    //    that would be matched by `NativeFunctionAccessor? PropertyName` must be the
    //    value of func.[[InitialName]].
    if ('nativeFunction' in func) {
      if (func.InitialName !== Value.null) {
        return Value(`function ${func.InitialName.stringValue()}() { [native code] }`);
      }
      return Value('function() { [native code] }');
    }
    // 4. If Type(func) is Object and IsCallable(func) is true, then return an implementation
    //    dependent String source code representation of func. The representation must have
    //    the syntax of a NativeFunction.
    if (func instanceof ObjectValue && IsCallable(func) === Value.true) {
      return Value('function() { [native code] }');
    }
    // 5. Throw a TypeError exception.
    return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', func);
  }

  /** https://tc39.es/ecma262/#sec-function.prototype-@@hasinstance */
  FunctionProto_toString.section = 'https://tc39.es/ecma262/#sec-function.prototype.tostring';
  function FunctionProto_hasInstance([V = Value.undefined], {
    thisValue
  }) {
    // 1. Let F be this value.
    const F = thisValue;
    // 2. Return ? OrdinaryHasInstance(F, V).
    return OrdinaryHasInstance(F, V);
  }
  FunctionProto_hasInstance.section = 'https://tc39.es/ecma262/#sec-function.prototype-@@hasinstance';
  function bootstrapFunctionPrototype(realmRec) {
    const proto = CreateBuiltinFunction(FunctionProto, 0, Value(''), [], realmRec, realmRec.Intrinsics['%Object.prototype%']);
    realmRec.Intrinsics['%Function.prototype%'] = proto;
    const readonly = {
      Writable: Value.false,
      Configurable: Value.false
    };
    assignProps(realmRec, proto, [['apply', FunctionProto_apply, 2], ['bind', FunctionProto_bind, 1], ['call', FunctionProto_call, 1], ['toString', FunctionProto_toString, 0], [wellKnownSymbols.hasInstance, FunctionProto_hasInstance, 1, readonly]]);
  }

  // @ts-nocheck

  /** https://tc39.es/ecma262/#sec-function-p1-p2-pn-body */
  function FunctionConstructor(args, {
    NewTarget
  }) {
    // 1. Let C be the active function object.
    const C = exports.surroundingAgent.activeFunctionObject;
    // 2. Let args be the argumentsList that was passed to this function by [[Call]] or [[Construct]].
    // 3. Return ? CreateDynamicFunction(C, NewTarget, normal, args).
    return CreateDynamicFunction(C, NewTarget, 'normal', args);
  }
  FunctionConstructor.section = 'https://tc39.es/ecma262/#sec-function-p1-p2-pn-body';
  function bootstrapFunction(realmRec) {
    const cons = bootstrapConstructor(realmRec, FunctionConstructor, 'Function', 1, realmRec.Intrinsics['%Function.prototype%'], []);
    realmRec.Intrinsics['%Function%'] = cons;
  }

  /** https://tc39.es/ecma262/#sec-thissymbolvalue */
  function thisSymbolValue(value) {
    // 1. If Type(value) is Symbol, return value.
    if (value instanceof SymbolValue) {
      return value;
    }
    // 2. If Type(value) is Object and value has a [[SymbolData]] internal slot, then
    if (value instanceof ObjectValue && 'SymbolData' in value) {
      // a. Let s be value.[[SymbolData]].
      const s = value.SymbolData;
      // b. Assert: Type(s) is Symbol.
      Assert(s instanceof SymbolValue, "s instanceof SymbolValue");
      // c. Return s.
      return s;
    }
    // 3. Throw a TypeError exception.
    return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'Symbol', value);
  }

  /** https://tc39.es/ecma262/#sec-symbol.prototype.description */
  thisSymbolValue.section = 'https://tc39.es/ecma262/#sec-thissymbolvalue';
  function SymbolProto_descriptionGetter(argList, {
    thisValue
  }) {
    // 1. Let s be the this value.
    const s = thisValue;
    // 2. Let sym be ? thisSymbolValue(s).
    let _temp = thisSymbolValue(s);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const sym = _temp;
    // 3. Return sym.[[Description]].
    return sym.Description;
  }

  /** https://tc39.es/ecma262/#sec-symbol.prototype.tostring */
  SymbolProto_descriptionGetter.section = 'https://tc39.es/ecma262/#sec-symbol.prototype.description';
  function SymbolProto_toString(argList, {
    thisValue
  }) {
    let _temp2 = thisSymbolValue(thisValue);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 1. Let sym be ? thisSymbolValue(this value).
    const sym = _temp2;
    // 2. Return SymbolDescriptiveString(sym).
    return SymbolDescriptiveString(sym);
  }

  /** https://tc39.es/ecma262/#sec-symbol.prototype.valueof */
  SymbolProto_toString.section = 'https://tc39.es/ecma262/#sec-symbol.prototype.tostring';
  function SymbolProto_valueOf(argList, {
    thisValue
  }) {
    // 1. Return ? thisSymbolValue(this value).
    return thisSymbolValue(thisValue);
  }

  /** https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive */
  SymbolProto_valueOf.section = 'https://tc39.es/ecma262/#sec-symbol.prototype.valueof';
  function SymbolProto_toPrimitive(argList, {
    thisValue
  }) {
    // 1. Return ? thisSymbolValue(this value).
    return thisSymbolValue(thisValue);
  }
  SymbolProto_toPrimitive.section = 'https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive';
  function bootstrapSymbolPrototype(realmRec) {
    const override = {
      Writable: Value.false,
      Enumerable: Value.false,
      Configurable: Value.true
    };
    const proto = bootstrapPrototype(realmRec, [['toString', SymbolProto_toString, 0], ['description', [SymbolProto_descriptionGetter]], ['valueOf', SymbolProto_valueOf, 0], [wellKnownSymbols.toPrimitive, SymbolProto_toPrimitive, 1, override]], realmRec.Intrinsics['%Object.prototype%'], 'Symbol');
    realmRec.Intrinsics['%Symbol.prototype%'] = proto;
  }

  const GlobalSymbolRegistry = [];

  /** https://tc39.es/ecma262/#sec-symbol-description */
  function SymbolConstructor([description = Value.undefined], {
    NewTarget
  }) {
    // 1. If NewTarget is not undefined, throw a TypeError exception.
    if (NewTarget !== Value.undefined) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAConstructor', this);
    }
    // 2. If description is undefined, let descString be undefined.
    let descString;
    if (description === Value.undefined) {
      descString = Value.undefined;
    } else {
      let _temp = ToString(description);
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      // 3. Else, let descString be ? ToString(description).
      descString = _temp;
    }
    // 4. Return a new unique Symbol value whose [[Description]] value is descString.
    return new SymbolValue(descString);
  }

  /** https://tc39.es/ecma262/#sec-symbol.for */
  SymbolConstructor.section = 'https://tc39.es/ecma262/#sec-symbol-description';
  function Symbol_for([key = Value.undefined]) {
    let _temp2 = ToString(key);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 1. Let stringKey be ? ToString(key).
    const stringKey = _temp2;
    // 2. For each element e of the GlobalSymbolRegistry List, do
    for (const e of GlobalSymbolRegistry) {
      // a. If SameValue(e.[[Key]], stringKey) is true, return e.[[Symbol]].
      if (SameValue(e.Key, stringKey) === Value.true) {
        return e.Symbol;
      }
    }
    // 3. Assert: GlobalSymbolRegistry does not currently contain an entry for stringKey.
    // 4. Let newSymbol be a new unique Symbol value whose [[Description]] value is stringKey.
    const newSymbol = new SymbolValue(stringKey);
    // 5. Append the Record { [[Key]]: stringKey, [[Symbol]]: newSymbol } to the GlobalSymbolRegistry List.
    GlobalSymbolRegistry.push({
      Key: stringKey,
      Symbol: newSymbol
    });
    // 6. Return newSymbol.
    return newSymbol;
  }

  /** https://tc39.es/ecma262/#sec-symbol.keyfor */
  Symbol_for.section = 'https://tc39.es/ecma262/#sec-symbol.for';
  function Symbol_keyFor([sym = Value.undefined]) {
    // 1. If Type(sym) is not Symbol, throw a TypeError exception.
    if (!(sym instanceof SymbolValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotASymbol', sym);
    }
    // 2. For each element e of the GlobalSymbolRegistry List, do
    for (const e of GlobalSymbolRegistry) {
      // a. If SameValue(e.[[Symbol]], sym) is true, return e.[[Key]].
      if (SameValue(e.Symbol, sym) === Value.true) {
        return e.Key;
      }
    }
    // 3. Assert: GlobalSymbolRegistry does not currently contain an entry for sym.
    // 4. Return undefined.
    return Value.undefined;
  }
  Symbol_keyFor.section = 'https://tc39.es/ecma262/#sec-symbol.keyfor';
  function bootstrapSymbol(realmRec) {
    const symbolConstructor = bootstrapConstructor(realmRec, SymbolConstructor, 'Symbol', 0, realmRec.Intrinsics['%Symbol.prototype%'], [['for', Symbol_for, 1], ['keyFor', Symbol_keyFor, 1]]);
    for (const [name, sym] of Object.entries(wellKnownSymbols)) {
      symbolConstructor.DefineOwnProperty(Value(name), exports.Descriptor({
        Value: sym,
        Writable: Value.false,
        Enumerable: Value.false,
        Configurable: Value.false
      }));
    }
    symbolConstructor.DefineOwnProperty(Value('prototype'), exports.Descriptor({
      Value: realmRec.Intrinsics['%Symbol.prototype%'],
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.true
    }));
    realmRec.Intrinsics['%Symbol%'] = symbolConstructor;
  }

  /** https://tc39.es/ecma262/#sec-math.abs */
  function Math_abs([x = Value.undefined]) {
    let _temp = ToNumber(x);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const n = _temp;
    if (n.isNaN()) {
      return n;
    } else if (Object.is(R(n), -0)) {
      return F(+0);
    } else if (n.isInfinity()) {
      return F(Infinity);
    }
    if (R(n) < 0) {
      return F(-R(n));
    }
    return n;
  }

  /** https://tc39.es/ecma262/#sec-math.acos */
  Math_abs.section = 'https://tc39.es/ecma262/#sec-math.abs';
  function Math_acos([x = Value.undefined]) {
    let _temp2 = ToNumber(x);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const n = _temp2;
    if (n.isNaN()) {
      return n;
    } else if (R(n) > 1) {
      return F(NaN);
    } else if (R(n) < -1) {
      return F(NaN);
    } else if (R(n) === 1) {
      return F(+0);
    }
    return F(Math.acos(R(n)));
  }

  /** https://tc39.es/ecma262/#sec-math.pow */
  Math_acos.section = 'https://tc39.es/ecma262/#sec-math.acos';
  function Math_pow([base = Value.undefined, exponent = Value.undefined]) {
    let _temp3 = ToNumber(base);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    // 1. Set base to ? ToNumber(base).
    base = _temp3;
    // 2. Set exponent to ? ToNumber(exponent).
    let _temp4 = ToNumber(exponent);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    exponent = _temp4;
    // 3. Return ! Number::exponentiate(base, exponent).
    let _temp5 = NumberValue.exponentiate(base, exponent);
    Assert(!(_temp5 instanceof AbruptCompletion), "NumberValue.exponentiate(base, exponent)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    return _temp5;
  }

  /** @param {bigint} h */
  Math_pow.section = 'https://tc39.es/ecma262/#sec-math.pow';
  function fmix64(h) {
    h ^= h >> 33n;
    h *= 0xFF51AFD7ED558CCDn;
    h ^= h >> 33n;
    h *= 0xC4CEB9FE1A85EC53n;
    h ^= h >> 33n;
    return h;
  }
  const floatView = new Float64Array(1);
  const big64View = new BigUint64Array(floatView.buffer);
  /** https://tc39.es/ecma262/#sec-math.random */
  function Math_random() {
    const realm = exports.surroundingAgent.currentRealmRecord;
    if (realm.randomState === undefined) {
      let seed;
      if (realm.HostDefined.randomSeed) {
        let _temp6 = realm.HostDefined.randomSeed();
        Assert(!(_temp6 instanceof AbruptCompletion), "" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp6 instanceof Completion) {
          _temp6 = _temp6.Value;
        }
        seed = BigInt(_temp6);
      } else {
        seed = BigInt(Math.round(Math.random() * 2 ** 32));
      }
      realm.randomState = new BigUint64Array([fmix64(BigInt.asUintN(64, seed)), fmix64(BigInt.asUintN(64, ~seed))]);
    }
    const s = realm.randomState;

    // XorShift128+
    let s1 = s[0];
    const s0 = s[1];
    s[0] = s0;
    s1 ^= s1 << 23n;
    s1 ^= s1 >> 17n;
    s1 ^= s0;
    s1 ^= s0 >> 26n;
    s[1] = s1;

    // Convert to double in [0, 1) range
    big64View[0] = s0 >> 12n | 0x3FF0000000000000n;
    const result = floatView[0] - 1;
    return F(result);
  }

  /** https://tc39.es/ecma262/#sec-math-object */
  Math_random.section = 'https://tc39.es/ecma262/#sec-math.random';
  function bootstrapMath(realmRec) {
    /** https://tc39.es/ecma262/#sec-value-properties-of-the-math-object */
    const readonly = {
      Writable: Value.false,
      Configurable: Value.false
    };
    const valueProps = [['E', 2.718281828459045], ['LN10', 2.302585092994046], ['LN2', 0.6931471805599453], ['LOG10E', 0.4342944819032518], ['LOG2E', 1.4426950408889634], ['PI', 3.141592653589793], ['SQRT1_2', 0.7071067811865476], ['SQRT2', 1.4142135623730951]].map(([name, value]) => [name, F(value), undefined, readonly]);
    // @@toStringTag is handled in the bootstrapPrototype() call.

    const mathObj = bootstrapPrototype(realmRec, [...valueProps, ['abs', Math_abs, 1], ['acos', Math_acos, 1], ['pow', Math_pow, 2], ['random', Math_random, 0]], realmRec.Intrinsics['%Object.prototype%'], 'Math');

    /** https://tc39.es/ecma262/#sec-function-properties-of-the-math-object */

    [['acosh', 1], ['asin', 1], ['asinh', 1], ['atan', 1], ['atanh', 1], ['atan2', 2], ['cbrt', 1], ['ceil', 1], ['clz32', 1], ['cos', 1], ['cosh', 1], ['exp', 1], ['expm1', 1], ['floor', 1], ['fround', 1], ['hypot', 2], ['imul', 2], ['log', 1], ['log1p', 1], ['log10', 1], ['log2', 1], ['max', 2], ['min', 2], ['round', 1], ['sign', 1], ['sin', 1], ['sinh', 1], ['sqrt', 1], ['tan', 1], ['tanh', 1], ['trunc', 1]].forEach(([name, length]) => {
      // TODO(18): Math
      /** https://tc39.es/ecma262/#sec-function-properties-of-the-math-object */
      const method = args => {
        for (let i = 0; i < args.length; i += 1) {
          let _temp7 = ToNumber(args[i]);
          /* c8 ignore if */
          if (_temp7 instanceof AbruptCompletion) {
            return _temp7;
          }
          /* c8 ignore if */
          if (_temp7 instanceof Completion) {
            _temp7 = _temp7.Value;
          }
          args[i] = R(_temp7);
        }
        return F(Math[name](...args));
      };
      method.section = 'https://tc39.es/ecma262/#sec-function-properties-of-the-math-object';
      const func = CreateBuiltinFunction(method, length, Value(name), [], realmRec);
      mathObj.DefineOwnProperty(Value(name), exports.Descriptor({
        Value: func,
        Writable: Value.true,
        Enumerable: Value.false,
        Configurable: Value.true
      }));
    });
    realmRec.Intrinsics['%Math%'] = mathObj;
  }

  function thisTimeValue(value) {
    if (value instanceof ObjectValue && 'DateValue' in value) {
      return value.DateValue;
    }
    return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'Date', value);
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.getdate */
  function DateProto_getDate(args, {
    thisValue
  }) {
    let _temp = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const t = _temp;
    if (t.isNaN()) {
      return F(NaN);
    }
    return DateFromTime(LocalTime(t));
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.getday */
  DateProto_getDate.section = 'https://tc39.es/ecma262/#sec-date.prototype.getdate';
  function DateProto_getDay(args, {
    thisValue
  }) {
    let _temp2 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const t = _temp2;
    if (t.isNaN()) {
      return F(NaN);
    }
    return WeekDay(LocalTime(t));
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.getfullyear */
  DateProto_getDay.section = 'https://tc39.es/ecma262/#sec-date.prototype.getday';
  function DateProto_getFullYear(args, {
    thisValue
  }) {
    let _temp3 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const t = _temp3;
    if (t.isNaN()) {
      return F(NaN);
    }
    return YearFromTime(LocalTime(t));
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.gethours */
  DateProto_getFullYear.section = 'https://tc39.es/ecma262/#sec-date.prototype.getfullyear';
  function DateProto_getHours(args, {
    thisValue
  }) {
    let _temp4 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const t = _temp4;
    if (t.isNaN()) {
      return F(NaN);
    }
    return HourFromTime(LocalTime(t));
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.getmilliseconds */
  DateProto_getHours.section = 'https://tc39.es/ecma262/#sec-date.prototype.gethours';
  function DateProto_getMilliseconds(args, {
    thisValue
  }) {
    let _temp5 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const t = _temp5;
    if (t.isNaN()) {
      return F(NaN);
    }
    return msFromTime(LocalTime(t));
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.getminutes */
  DateProto_getMilliseconds.section = 'https://tc39.es/ecma262/#sec-date.prototype.getmilliseconds';
  function DateProto_getMinutes(args, {
    thisValue
  }) {
    let _temp6 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const t = _temp6;
    if (t.isNaN()) {
      return F(NaN);
    }
    return MinFromTime(LocalTime(t));
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.getmonth */
  DateProto_getMinutes.section = 'https://tc39.es/ecma262/#sec-date.prototype.getminutes';
  function DateProto_getMonth(args, {
    thisValue
  }) {
    let _temp7 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp7 instanceof AbruptCompletion) {
      return _temp7;
    }
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    const t = _temp7;
    if (t.isNaN()) {
      return F(NaN);
    }
    return MonthFromTime(LocalTime(t));
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.getseconds */
  DateProto_getMonth.section = 'https://tc39.es/ecma262/#sec-date.prototype.getmonth';
  function DateProto_getSeconds(args, {
    thisValue
  }) {
    let _temp8 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp8 instanceof AbruptCompletion) {
      return _temp8;
    }
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    const t = _temp8;
    if (t.isNaN()) {
      return F(NaN);
    }
    return SecFromTime(LocalTime(t));
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.gettime */
  DateProto_getSeconds.section = 'https://tc39.es/ecma262/#sec-date.prototype.getseconds';
  function DateProto_getTime(args, {
    thisValue
  }) {
    return thisTimeValue(thisValue);
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.gettimezoneoffset */
  DateProto_getTime.section = 'https://tc39.es/ecma262/#sec-date.prototype.gettime';
  function DateProto_getTimezoneOffset(args, {
    thisValue
  }) {
    let _temp9 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp9 instanceof AbruptCompletion) {
      return _temp9;
    }
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    const t = _temp9;
    if (t.isNaN()) {
      return F(NaN);
    }
    return F((R(t) - R(LocalTime(t))) / msPerMinute);
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.getutcdate */
  DateProto_getTimezoneOffset.section = 'https://tc39.es/ecma262/#sec-date.prototype.gettimezoneoffset';
  function DateProto_getUTCDate(args, {
    thisValue
  }) {
    let _temp10 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp10 instanceof AbruptCompletion) {
      return _temp10;
    }
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    const t = _temp10;
    if (t.isNaN()) {
      return F(NaN);
    }
    return DateFromTime(t);
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.getutcday */
  DateProto_getUTCDate.section = 'https://tc39.es/ecma262/#sec-date.prototype.getutcdate';
  function DateProto_getUTCDay(args, {
    thisValue
  }) {
    let _temp11 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp11 instanceof AbruptCompletion) {
      return _temp11;
    }
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    const t = _temp11;
    if (t.isNaN()) {
      return F(NaN);
    }
    return WeekDay(t);
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.getutcfullyear */
  DateProto_getUTCDay.section = 'https://tc39.es/ecma262/#sec-date.prototype.getutcday';
  function DateProto_getUTCFullYear(args, {
    thisValue
  }) {
    let _temp12 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp12 instanceof AbruptCompletion) {
      return _temp12;
    }
    /* c8 ignore if */
    if (_temp12 instanceof Completion) {
      _temp12 = _temp12.Value;
    }
    const t = _temp12;
    if (t.isNaN()) {
      return F(NaN);
    }
    return YearFromTime(t);
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.getutchours */
  DateProto_getUTCFullYear.section = 'https://tc39.es/ecma262/#sec-date.prototype.getutcfullyear';
  function DateProto_getUTCHours(args, {
    thisValue
  }) {
    let _temp13 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp13 instanceof AbruptCompletion) {
      return _temp13;
    }
    /* c8 ignore if */
    if (_temp13 instanceof Completion) {
      _temp13 = _temp13.Value;
    }
    const t = _temp13;
    if (t.isNaN()) {
      return F(NaN);
    }
    return HourFromTime(t);
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.getutcmilliseconds */
  DateProto_getUTCHours.section = 'https://tc39.es/ecma262/#sec-date.prototype.getutchours';
  function DateProto_getUTCMilliseconds(args, {
    thisValue
  }) {
    let _temp14 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp14 instanceof AbruptCompletion) {
      return _temp14;
    }
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    const t = _temp14;
    if (t.isNaN()) {
      return F(NaN);
    }
    return msFromTime(t);
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.getutcminutes */
  DateProto_getUTCMilliseconds.section = 'https://tc39.es/ecma262/#sec-date.prototype.getutcmilliseconds';
  function DateProto_getUTCMinutes(args, {
    thisValue
  }) {
    let _temp15 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp15 instanceof AbruptCompletion) {
      return _temp15;
    }
    /* c8 ignore if */
    if (_temp15 instanceof Completion) {
      _temp15 = _temp15.Value;
    }
    const t = _temp15;
    if (t.isNaN()) {
      return F(NaN);
    }
    return MinFromTime(t);
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.getutcmonth */
  DateProto_getUTCMinutes.section = 'https://tc39.es/ecma262/#sec-date.prototype.getutcminutes';
  function DateProto_getUTCMonth(args, {
    thisValue
  }) {
    let _temp16 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp16 instanceof AbruptCompletion) {
      return _temp16;
    }
    /* c8 ignore if */
    if (_temp16 instanceof Completion) {
      _temp16 = _temp16.Value;
    }
    const t = _temp16;
    if (t.isNaN()) {
      return F(NaN);
    }
    return MonthFromTime(t);
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.getutcseconds */
  DateProto_getUTCMonth.section = 'https://tc39.es/ecma262/#sec-date.prototype.getutcmonth';
  function DateProto_getUTCSeconds(args, {
    thisValue
  }) {
    let _temp17 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp17 instanceof AbruptCompletion) {
      return _temp17;
    }
    /* c8 ignore if */
    if (_temp17 instanceof Completion) {
      _temp17 = _temp17.Value;
    }
    const t = _temp17;
    if (t.isNaN()) {
      return F(NaN);
    }
    return SecFromTime(t);
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.setdate */
  DateProto_getUTCSeconds.section = 'https://tc39.es/ecma262/#sec-date.prototype.getutcseconds';
  function DateProto_setDate([date = Value.undefined], {
    thisValue
  }) {
    let _temp18 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp18 instanceof AbruptCompletion) {
      return _temp18;
    }
    /* c8 ignore if */
    if (_temp18 instanceof Completion) {
      _temp18 = _temp18.Value;
    }
    const t = LocalTime(_temp18);
    let _temp19 = ToNumber(date);
    /* c8 ignore if */
    if (_temp19 instanceof AbruptCompletion) {
      return _temp19;
    }
    /* c8 ignore if */
    if (_temp19 instanceof Completion) {
      _temp19 = _temp19.Value;
    }
    const dt = _temp19;
    const newDate = MakeDate(MakeDay(YearFromTime(t), MonthFromTime(t), dt), TimeWithinDay(t));
    const u = TimeClip(UTC(newDate));
    thisValue.DateValue = u;
    return u;
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.setfullyear */
  DateProto_setDate.section = 'https://tc39.es/ecma262/#sec-date.prototype.setdate';
  function DateProto_setFullYear([year = Value.undefined, month, date], {
    thisValue
  }) {
    let _temp20 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp20 instanceof AbruptCompletion) {
      return _temp20;
    }
    /* c8 ignore if */
    if (_temp20 instanceof Completion) {
      _temp20 = _temp20.Value;
    }
    let t = _temp20;
    t = t.isNaN() ? F(+0) : LocalTime(t);
    let _temp21 = ToNumber(year);
    /* c8 ignore if */
    if (_temp21 instanceof AbruptCompletion) {
      return _temp21;
    }
    /* c8 ignore if */
    if (_temp21 instanceof Completion) {
      _temp21 = _temp21.Value;
    }
    const y = _temp21;
    let m;
    if (month !== undefined) {
      let _temp22 = ToNumber(month);
      /* c8 ignore if */
      if (_temp22 instanceof AbruptCompletion) {
        return _temp22;
      }
      /* c8 ignore if */
      if (_temp22 instanceof Completion) {
        _temp22 = _temp22.Value;
      }
      m = _temp22;
    } else {
      m = MonthFromTime(t);
    }
    let dt;
    if (date !== undefined) {
      let _temp23 = ToNumber(date);
      /* c8 ignore if */
      if (_temp23 instanceof AbruptCompletion) {
        return _temp23;
      }
      /* c8 ignore if */
      if (_temp23 instanceof Completion) {
        _temp23 = _temp23.Value;
      }
      dt = _temp23;
    } else {
      dt = DateFromTime(t);
    }
    const newDate = MakeDate(MakeDay(y, m, dt), TimeWithinDay(t));
    const u = TimeClip(UTC(newDate));
    thisValue.DateValue = u;
    return u;
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.sethours */
  DateProto_setFullYear.section = 'https://tc39.es/ecma262/#sec-date.prototype.setfullyear';
  function DateProto_setHours([hour = Value.undefined, min, sec, ms], {
    thisValue
  }) {
    let _temp24 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp24 instanceof AbruptCompletion) {
      return _temp24;
    }
    /* c8 ignore if */
    if (_temp24 instanceof Completion) {
      _temp24 = _temp24.Value;
    }
    const t = LocalTime(_temp24);
    let _temp25 = ToNumber(hour);
    /* c8 ignore if */
    if (_temp25 instanceof AbruptCompletion) {
      return _temp25;
    }
    /* c8 ignore if */
    if (_temp25 instanceof Completion) {
      _temp25 = _temp25.Value;
    }
    const h = _temp25;
    let m;
    if (min !== undefined) {
      let _temp26 = ToNumber(min);
      /* c8 ignore if */
      if (_temp26 instanceof AbruptCompletion) {
        return _temp26;
      }
      /* c8 ignore if */
      if (_temp26 instanceof Completion) {
        _temp26 = _temp26.Value;
      }
      m = _temp26;
    } else {
      m = MinFromTime(t);
    }
    let s;
    if (sec !== undefined) {
      let _temp27 = ToNumber(sec);
      /* c8 ignore if */
      if (_temp27 instanceof AbruptCompletion) {
        return _temp27;
      }
      /* c8 ignore if */
      if (_temp27 instanceof Completion) {
        _temp27 = _temp27.Value;
      }
      s = _temp27;
    } else {
      s = SecFromTime(t);
    }
    let milli;
    if (ms !== undefined) {
      let _temp28 = ToNumber(ms);
      /* c8 ignore if */
      if (_temp28 instanceof AbruptCompletion) {
        return _temp28;
      }
      /* c8 ignore if */
      if (_temp28 instanceof Completion) {
        _temp28 = _temp28.Value;
      }
      milli = _temp28;
    } else {
      milli = msFromTime(t);
    }
    const date = MakeDate(Day(t), MakeTime(h, m, s, milli));
    const u = TimeClip(UTC(date));
    thisValue.DateValue = u;
    return u;
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.setmilliseconds */
  DateProto_setHours.section = 'https://tc39.es/ecma262/#sec-date.prototype.sethours';
  function DateProto_setMilliseconds([ms = Value.undefined], {
    thisValue
  }) {
    let _temp29 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp29 instanceof AbruptCompletion) {
      return _temp29;
    }
    /* c8 ignore if */
    if (_temp29 instanceof Completion) {
      _temp29 = _temp29.Value;
    }
    const t = LocalTime(_temp29);
    let _temp30 = ToNumber(ms);
    /* c8 ignore if */
    if (_temp30 instanceof AbruptCompletion) {
      return _temp30;
    }
    /* c8 ignore if */
    if (_temp30 instanceof Completion) {
      _temp30 = _temp30.Value;
    }
    ms = _temp30;
    const time = MakeTime(HourFromTime(t), MinFromTime(t), SecFromTime(t), ms);
    const u = TimeClip(UTC(MakeDate(Day(t), time)));
    thisValue.DateValue = u;
    return u;
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.setminutes */
  DateProto_setMilliseconds.section = 'https://tc39.es/ecma262/#sec-date.prototype.setmilliseconds';
  function DateProto_setMinutes([min = Value.undefined, sec, ms], {
    thisValue
  }) {
    let _temp31 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp31 instanceof AbruptCompletion) {
      return _temp31;
    }
    /* c8 ignore if */
    if (_temp31 instanceof Completion) {
      _temp31 = _temp31.Value;
    }
    // 1. Let t be LocalTime(? thisTimeValue(this value)).
    const t = LocalTime(_temp31);
    // 2. Let m be ? ToNumber(min).
    let _temp32 = ToNumber(min);
    /* c8 ignore if */
    if (_temp32 instanceof AbruptCompletion) {
      return _temp32;
    }
    /* c8 ignore if */
    if (_temp32 instanceof Completion) {
      _temp32 = _temp32.Value;
    }
    const m = _temp32;
    let s;
    // 3. If sec is not present, let s be SecFromTime(t); otherwise, let s be ? ToNumber(sec).
    if (sec !== undefined) {
      let _temp33 = ToNumber(sec);
      /* c8 ignore if */
      if (_temp33 instanceof AbruptCompletion) {
        return _temp33;
      }
      /* c8 ignore if */
      if (_temp33 instanceof Completion) {
        _temp33 = _temp33.Value;
      }
      s = _temp33;
    } else {
      s = SecFromTime(t);
    }
    let milli;
    // 4. If ms is not present, let milli be msFromTime(t); otherwise, let milli be ? ToNumber(ms).
    if (ms !== undefined) {
      let _temp34 = ToNumber(ms);
      /* c8 ignore if */
      if (_temp34 instanceof AbruptCompletion) {
        return _temp34;
      }
      /* c8 ignore if */
      if (_temp34 instanceof Completion) {
        _temp34 = _temp34.Value;
      }
      milli = _temp34;
    } else {
      milli = msFromTime(t);
    }
    // 5. Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), m, s, milli)).
    const date = MakeDate(Day(t), MakeTime(HourFromTime(t), m, s, milli));
    // 6. Let u be TimeClip(UTC(date)).
    const u = TimeClip(UTC(date));
    // 7. Set the [[DateValue]] internal slot of this Date object to u.
    thisValue.DateValue = u;
    // 8. Return u.
    return u;
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.setmonth */
  DateProto_setMinutes.section = 'https://tc39.es/ecma262/#sec-date.prototype.setminutes';
  function DateProto_setMonth([month = Value.undefined, date], {
    thisValue
  }) {
    let _temp35 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp35 instanceof AbruptCompletion) {
      return _temp35;
    }
    /* c8 ignore if */
    if (_temp35 instanceof Completion) {
      _temp35 = _temp35.Value;
    }
    const t = LocalTime(_temp35);
    let _temp36 = ToNumber(month);
    /* c8 ignore if */
    if (_temp36 instanceof AbruptCompletion) {
      return _temp36;
    }
    /* c8 ignore if */
    if (_temp36 instanceof Completion) {
      _temp36 = _temp36.Value;
    }
    const m = _temp36;
    let dt;
    if (date !== undefined) {
      let _temp37 = ToNumber(date);
      /* c8 ignore if */
      if (_temp37 instanceof AbruptCompletion) {
        return _temp37;
      }
      /* c8 ignore if */
      if (_temp37 instanceof Completion) {
        _temp37 = _temp37.Value;
      }
      dt = _temp37;
    } else {
      dt = DateFromTime(t);
    }
    const newDate = MakeDate(MakeDay(YearFromTime(t), m, dt), TimeWithinDay(t));
    const u = TimeClip(UTC(newDate));
    thisValue.DateValue = u;
    return u;
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.setseconds */
  DateProto_setMonth.section = 'https://tc39.es/ecma262/#sec-date.prototype.setmonth';
  function DateProto_setSeconds([sec = Value.undefined, ms], {
    thisValue
  }) {
    let _temp38 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp38 instanceof AbruptCompletion) {
      return _temp38;
    }
    /* c8 ignore if */
    if (_temp38 instanceof Completion) {
      _temp38 = _temp38.Value;
    }
    const t = LocalTime(_temp38);
    let _temp39 = ToNumber(sec);
    /* c8 ignore if */
    if (_temp39 instanceof AbruptCompletion) {
      return _temp39;
    }
    /* c8 ignore if */
    if (_temp39 instanceof Completion) {
      _temp39 = _temp39.Value;
    }
    const s = _temp39;
    let milli;
    if (ms !== undefined) {
      let _temp40 = ToNumber(ms);
      /* c8 ignore if */
      if (_temp40 instanceof AbruptCompletion) {
        return _temp40;
      }
      /* c8 ignore if */
      if (_temp40 instanceof Completion) {
        _temp40 = _temp40.Value;
      }
      milli = _temp40;
    } else {
      milli = msFromTime(t);
    }
    const date = MakeDate(Day(t), MakeTime(HourFromTime(t), MinFromTime(t), s, milli));
    const u = TimeClip(UTC(date));
    thisValue.DateValue = u;
    return u;
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.settime */
  DateProto_setSeconds.section = 'https://tc39.es/ecma262/#sec-date.prototype.setseconds';
  function DateProto_setTime([time = Value.undefined], {
    thisValue
  }) {
    let _temp41 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp41 instanceof AbruptCompletion) {
      return _temp41;
    }
    /* c8 ignore if */
    if (_temp41 instanceof Completion) {
      _temp41 = _temp41.Value;
    }
    let _temp42 = ToNumber(time);
    /* c8 ignore if */
    if (_temp42 instanceof AbruptCompletion) {
      return _temp42;
    }
    /* c8 ignore if */
    if (_temp42 instanceof Completion) {
      _temp42 = _temp42.Value;
    }
    const t = _temp42;
    const v = TimeClip(t);
    thisValue.DateValue = v;
    return v;
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.setutcdate */
  DateProto_setTime.section = 'https://tc39.es/ecma262/#sec-date.prototype.settime';
  function DateProto_setUTCDate([date = Value.undefined], {
    thisValue
  }) {
    let _temp43 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp43 instanceof AbruptCompletion) {
      return _temp43;
    }
    /* c8 ignore if */
    if (_temp43 instanceof Completion) {
      _temp43 = _temp43.Value;
    }
    const t = _temp43;
    let _temp44 = ToNumber(date);
    /* c8 ignore if */
    if (_temp44 instanceof AbruptCompletion) {
      return _temp44;
    }
    /* c8 ignore if */
    if (_temp44 instanceof Completion) {
      _temp44 = _temp44.Value;
    }
    const dt = _temp44;
    const newDate = MakeDate(MakeDay(YearFromTime(t), MonthFromTime(t), dt), TimeWithinDay(t));
    const v = TimeClip(newDate);
    thisValue.DateValue = v;
    return v;
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.setutcfullyear */
  DateProto_setUTCDate.section = 'https://tc39.es/ecma262/#sec-date.prototype.setutcdate';
  function DateProto_setUTCFullYear([year = Value.undefined, month, date], {
    thisValue
  }) {
    let _temp45 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp45 instanceof AbruptCompletion) {
      return _temp45;
    }
    /* c8 ignore if */
    if (_temp45 instanceof Completion) {
      _temp45 = _temp45.Value;
    }
    let t = _temp45;
    if (t.isNaN()) {
      t = F(+0);
    }
    let _temp46 = ToNumber(year);
    /* c8 ignore if */
    if (_temp46 instanceof AbruptCompletion) {
      return _temp46;
    }
    /* c8 ignore if */
    if (_temp46 instanceof Completion) {
      _temp46 = _temp46.Value;
    }
    const y = _temp46;
    let m;
    if (month !== undefined) {
      let _temp47 = ToNumber(month);
      /* c8 ignore if */
      if (_temp47 instanceof AbruptCompletion) {
        return _temp47;
      }
      /* c8 ignore if */
      if (_temp47 instanceof Completion) {
        _temp47 = _temp47.Value;
      }
      m = _temp47;
    } else {
      m = MonthFromTime(t);
    }
    let dt;
    if (date !== undefined) {
      let _temp48 = ToNumber(date);
      /* c8 ignore if */
      if (_temp48 instanceof AbruptCompletion) {
        return _temp48;
      }
      /* c8 ignore if */
      if (_temp48 instanceof Completion) {
        _temp48 = _temp48.Value;
      }
      dt = _temp48;
    } else {
      dt = DateFromTime(t);
    }
    const newDate = MakeDate(MakeDay(y, m, dt), TimeWithinDay(t));
    const v = TimeClip(newDate);
    thisValue.DateValue = v;
    return v;
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.setutchours */
  DateProto_setUTCFullYear.section = 'https://tc39.es/ecma262/#sec-date.prototype.setutcfullyear';
  function DateProto_setUTCHours([hour = Value.undefined, min, sec, ms], {
    thisValue
  }) {
    let _temp49 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp49 instanceof AbruptCompletion) {
      return _temp49;
    }
    /* c8 ignore if */
    if (_temp49 instanceof Completion) {
      _temp49 = _temp49.Value;
    }
    const t = _temp49;
    let _temp50 = ToNumber(hour);
    /* c8 ignore if */
    if (_temp50 instanceof AbruptCompletion) {
      return _temp50;
    }
    /* c8 ignore if */
    if (_temp50 instanceof Completion) {
      _temp50 = _temp50.Value;
    }
    const h = _temp50;
    let m;
    if (min !== undefined) {
      let _temp51 = ToNumber(min);
      /* c8 ignore if */
      if (_temp51 instanceof AbruptCompletion) {
        return _temp51;
      }
      /* c8 ignore if */
      if (_temp51 instanceof Completion) {
        _temp51 = _temp51.Value;
      }
      m = _temp51;
    } else {
      m = MinFromTime(t);
    }
    let s;
    if (sec !== undefined) {
      let _temp52 = ToNumber(sec);
      /* c8 ignore if */
      if (_temp52 instanceof AbruptCompletion) {
        return _temp52;
      }
      /* c8 ignore if */
      if (_temp52 instanceof Completion) {
        _temp52 = _temp52.Value;
      }
      s = _temp52;
    } else {
      s = SecFromTime(t);
    }
    let milli;
    if (ms !== undefined) {
      let _temp53 = ToNumber(ms);
      /* c8 ignore if */
      if (_temp53 instanceof AbruptCompletion) {
        return _temp53;
      }
      /* c8 ignore if */
      if (_temp53 instanceof Completion) {
        _temp53 = _temp53.Value;
      }
      milli = _temp53;
    } else {
      milli = msFromTime(t);
    }
    const newDate = MakeDate(Day(t), MakeTime(h, m, s, milli));
    const v = TimeClip(newDate);
    thisValue.DateValue = v;
    return v;
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.setutcmilliseconds */
  DateProto_setUTCHours.section = 'https://tc39.es/ecma262/#sec-date.prototype.setutchours';
  function DateProto_setUTCMilliseconds([ms = Value.undefined], {
    thisValue
  }) {
    let _temp54 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp54 instanceof AbruptCompletion) {
      return _temp54;
    }
    /* c8 ignore if */
    if (_temp54 instanceof Completion) {
      _temp54 = _temp54.Value;
    }
    const t = _temp54;
    let _temp55 = ToNumber(ms);
    /* c8 ignore if */
    if (_temp55 instanceof AbruptCompletion) {
      return _temp55;
    }
    /* c8 ignore if */
    if (_temp55 instanceof Completion) {
      _temp55 = _temp55.Value;
    }
    const milli = _temp55;
    const time = MakeTime(HourFromTime(t), MinFromTime(t), SecFromTime(t), milli);
    const v = TimeClip(MakeDate(Day(t), time));
    thisValue.DateValue = v;
    return v;
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.setutcminutes */
  DateProto_setUTCMilliseconds.section = 'https://tc39.es/ecma262/#sec-date.prototype.setutcmilliseconds';
  function DateProto_setUTCMinutes([min = Value.undefined, sec, ms], {
    thisValue
  }) {
    let _temp56 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp56 instanceof AbruptCompletion) {
      return _temp56;
    }
    /* c8 ignore if */
    if (_temp56 instanceof Completion) {
      _temp56 = _temp56.Value;
    }
    const t = _temp56;
    let _temp57 = ToNumber(min);
    /* c8 ignore if */
    if (_temp57 instanceof AbruptCompletion) {
      return _temp57;
    }
    /* c8 ignore if */
    if (_temp57 instanceof Completion) {
      _temp57 = _temp57.Value;
    }
    const m = _temp57;
    let s;
    if (sec !== undefined) {
      let _temp58 = ToNumber(sec);
      /* c8 ignore if */
      if (_temp58 instanceof AbruptCompletion) {
        return _temp58;
      }
      /* c8 ignore if */
      if (_temp58 instanceof Completion) {
        _temp58 = _temp58.Value;
      }
      s = _temp58;
    } else {
      s = SecFromTime(t);
    }
    let milli;
    if (ms !== undefined) {
      let _temp59 = ToNumber(ms);
      /* c8 ignore if */
      if (_temp59 instanceof AbruptCompletion) {
        return _temp59;
      }
      /* c8 ignore if */
      if (_temp59 instanceof Completion) {
        _temp59 = _temp59.Value;
      }
      milli = _temp59;
    } else {
      milli = msFromTime(t);
    }
    const date = MakeDate(Day(t), MakeTime(HourFromTime(t), m, s, milli));
    const v = TimeClip(date);
    thisValue.DateValue = v;
    return v;
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.setutcmonth */
  DateProto_setUTCMinutes.section = 'https://tc39.es/ecma262/#sec-date.prototype.setutcminutes';
  function DateProto_setUTCMonth([month = Value.undefined, date], {
    thisValue
  }) {
    let _temp60 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp60 instanceof AbruptCompletion) {
      return _temp60;
    }
    /* c8 ignore if */
    if (_temp60 instanceof Completion) {
      _temp60 = _temp60.Value;
    }
    const t = _temp60;
    let _temp61 = ToNumber(month);
    /* c8 ignore if */
    if (_temp61 instanceof AbruptCompletion) {
      return _temp61;
    }
    /* c8 ignore if */
    if (_temp61 instanceof Completion) {
      _temp61 = _temp61.Value;
    }
    const m = _temp61;
    let dt;
    if (date !== undefined) {
      let _temp62 = ToNumber(date);
      /* c8 ignore if */
      if (_temp62 instanceof AbruptCompletion) {
        return _temp62;
      }
      /* c8 ignore if */
      if (_temp62 instanceof Completion) {
        _temp62 = _temp62.Value;
      }
      dt = _temp62;
    } else {
      dt = DateFromTime(t);
    }
    const newDate = MakeDate(MakeDay(YearFromTime(t), m, dt), TimeWithinDay(t));
    const v = TimeClip(newDate);
    thisValue.DateValue = v;
    return v;
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.setutcseconds */
  DateProto_setUTCMonth.section = 'https://tc39.es/ecma262/#sec-date.prototype.setutcmonth';
  function DateProto_setUTCSeconds([sec = Value.undefined, ms], {
    thisValue
  }) {
    let _temp63 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp63 instanceof AbruptCompletion) {
      return _temp63;
    }
    /* c8 ignore if */
    if (_temp63 instanceof Completion) {
      _temp63 = _temp63.Value;
    }
    const t = _temp63;
    let _temp64 = ToNumber(sec);
    /* c8 ignore if */
    if (_temp64 instanceof AbruptCompletion) {
      return _temp64;
    }
    /* c8 ignore if */
    if (_temp64 instanceof Completion) {
      _temp64 = _temp64.Value;
    }
    const s = _temp64;
    let milli;
    if (ms !== undefined) {
      let _temp65 = ToNumber(ms);
      /* c8 ignore if */
      if (_temp65 instanceof AbruptCompletion) {
        return _temp65;
      }
      /* c8 ignore if */
      if (_temp65 instanceof Completion) {
        _temp65 = _temp65.Value;
      }
      milli = _temp65;
    } else {
      milli = msFromTime(t);
    }
    const date = MakeDate(Day(t), MakeTime(HourFromTime(t), MinFromTime(t), s, milli));
    const v = TimeClip(date);
    thisValue.DateValue = v;
    return v;
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.todatestring */
  DateProto_setUTCSeconds.section = 'https://tc39.es/ecma262/#sec-date.prototype.setutcseconds';
  function DateProto_toDateString(args, {
    thisValue
  }) {
    const O = thisValue;
    if (!(O instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'Date', O);
    }
    let _temp66 = thisTimeValue(O);
    /* c8 ignore if */
    if (_temp66 instanceof AbruptCompletion) {
      return _temp66;
    }
    /* c8 ignore if */
    if (_temp66 instanceof Completion) {
      _temp66 = _temp66.Value;
    }
    const tv = _temp66;
    if (tv.isNaN()) {
      return Value('Invalid Date');
    }
    const t = LocalTime(tv);
    return DateString(t);
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.toisostring */
  DateProto_toDateString.section = 'https://tc39.es/ecma262/#sec-date.prototype.todatestring';
  function DateProto_toISOString(args, {
    thisValue
  }) {
    let _temp67 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp67 instanceof AbruptCompletion) {
      return _temp67;
    }
    /* c8 ignore if */
    if (_temp67 instanceof Completion) {
      _temp67 = _temp67.Value;
    }
    const t = _temp67;
    if (!Number.isFinite(R(t))) {
      return exports.surroundingAgent.Throw('RangeError', 'DateInvalidTime');
    }
    const year = R(YearFromTime(t));
    const month = R(MonthFromTime(t)) + 1;
    const date = R(DateFromTime(t));
    const hour = R(HourFromTime(t));
    const min = R(MinFromTime(t));
    const sec = R(SecFromTime(t));
    const ms = R(msFromTime(t));

    // TODO: figure out if there can be invalid years.
    let YYYY = String(year);
    if (year < 0 || year > 9999) {
      YYYY = year < 0 ? `${String(year).padStart(6, '0')}` : `+${String(year).padStart(6, '0')}`;
    }
    const MM = String(month).padStart(2, '0');
    const DD = String(date).padStart(2, '0');
    const HH = String(hour).padStart(2, '0');
    const mm = String(min).padStart(2, '0');
    const ss = String(sec).padStart(2, '0');
    const sss = String(ms).padStart(3, '0');
    const format = `${YYYY}-${MM}-${DD}T${HH}:${mm}:${ss}.${sss}Z`;
    return Value(format);
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.tojson */
  DateProto_toISOString.section = 'https://tc39.es/ecma262/#sec-date.prototype.toisostring';
  function DateProto_toJSON(args, {
    thisValue
  }) {
    let _temp68 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp68 instanceof AbruptCompletion) {
      return _temp68;
    }
    /* c8 ignore if */
    if (_temp68 instanceof Completion) {
      _temp68 = _temp68.Value;
    }
    const O = _temp68;
    let _temp69 = ToPrimitive(O, 'number');
    /* c8 ignore if */
    if (_temp69 instanceof AbruptCompletion) {
      return _temp69;
    }
    /* c8 ignore if */
    if (_temp69 instanceof Completion) {
      _temp69 = _temp69.Value;
    }
    const tv = _temp69;
    if (tv instanceof NumberValue && !Number.isFinite(R(tv))) {
      return Value.null;
    }
    return Invoke(O, Value('toISOString'));
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.tolocaledatestring */
  DateProto_toJSON.section = 'https://tc39.es/ecma262/#sec-date.prototype.tojson';
  function DateProto_toLocaleDateString() {
    // TODO: implement this function.
    return exports.surroundingAgent.Throw('Error', 'Raw', 'Date.prototype.toLocaleDateString is not implemented');
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.tolocalestring */
  DateProto_toLocaleDateString.section = 'https://tc39.es/ecma262/#sec-date.prototype.tolocaledatestring';
  function DateProto_toLocaleString() {
    // TODO: implement this function.
    return exports.surroundingAgent.Throw('Error', 'Raw', 'Date.prototype.toLocaleString is not implemented');
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.tolocaletimestring */
  DateProto_toLocaleString.section = 'https://tc39.es/ecma262/#sec-date.prototype.tolocalestring';
  function DateProto_toLocaleTimeString() {
    // TODO: implement this function.
    return exports.surroundingAgent.Throw('Error', 'Raw', 'Date.prototype.toLocaleTimeString is not implemented');
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.tostring */
  DateProto_toLocaleTimeString.section = 'https://tc39.es/ecma262/#sec-date.prototype.tolocaletimestring';
  function DateProto_toString(args, {
    thisValue
  }) {
    let _temp70 = thisTimeValue(thisValue);
    /* c8 ignore if */
    if (_temp70 instanceof AbruptCompletion) {
      return _temp70;
    }
    /* c8 ignore if */
    if (_temp70 instanceof Completion) {
      _temp70 = _temp70.Value;
    }
    const tv = _temp70;
    return ToDateString(tv);
  }

  /** https://tc39.es/ecma262/#sec-timestring */
  DateProto_toString.section = 'https://tc39.es/ecma262/#sec-date.prototype.tostring';
  function TimeString(tv) {
    Assert(tv instanceof NumberValue, "tv instanceof NumberValue");
    Assert(!tv.isNaN(), "!tv.isNaN()");
    const hour = String(R(HourFromTime(tv))).padStart(2, '0');
    const minute = String(R(MinFromTime(tv))).padStart(2, '0');
    const second = String(R(SecFromTime(tv))).padStart(2, '0');
    return Value(`${hour}:${minute}:${second} GMT`);
  }

  /** https://tc39.es/ecma262/#sec-todatestring-day-names */
  TimeString.section = 'https://tc39.es/ecma262/#sec-timestring';
  const daysOfTheWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
  /** https://tc39.es/ecma262/#sec-todatestring-month-names */
  const monthsOfTheYear = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

  /** https://tc39.es/ecma262/#sec-datestring */
  function DateString(tv) {
    Assert(tv instanceof NumberValue, "tv instanceof NumberValue");
    Assert(!tv.isNaN(), "!tv.isNaN()");
    const weekday = daysOfTheWeek[R(WeekDay(tv))];
    const month = monthsOfTheYear[R(MonthFromTime(tv))];
    const day = String(R(DateFromTime(tv))).padStart(2, '0');
    const yv = R(YearFromTime(tv));
    const yearSign = yv >= 0 ? '' : '-';
    const year = Value(String(Math.abs(yv)));
    let _temp71 = StringPad(year, F(4), Value('0'), 'start');
    Assert(!(_temp71 instanceof AbruptCompletion), "StringPad(year, F(4), Value('0'), 'start')" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp71 instanceof Completion) {
      _temp71 = _temp71.Value;
    }
    const paddedYear = _temp71.stringValue();
    return Value(`${weekday} ${month} ${day} ${yearSign}${paddedYear}`);
  }

  /** https://tc39.es/ecma262/#sec-timezoneestring */
  DateString.section = 'https://tc39.es/ecma262/#sec-datestring';
  function TimeZoneString(tv) {
    Assert(tv instanceof NumberValue, "tv instanceof NumberValue");
    Assert(!tv.isNaN(), "!tv.isNaN()");
    const offset = LocalTZA();
    const offsetSign = '+' ;
    const offsetMin = String(R(MinFromTime(F(Math.abs(offset))))).padStart(2, '0');
    const offsetHour = String(R(HourFromTime(F(Math.abs(offset))))).padStart(2, '0');
    const tzName = '';
    return Value(`${offsetSign}${offsetHour}${offsetMin}${tzName}`);
  }

  /** https://tc39.es/ecma262/#sec-todatestring */
  function ToDateString(tv) {
    Assert(tv instanceof NumberValue, "tv instanceof NumberValue");
    if (tv.isNaN()) {
      return Value('Invalid Date');
    }
    const t = LocalTime(tv);
    return Value(`${DateString(t).stringValue()} ${TimeString(t).stringValue()}${TimeZoneString(t).stringValue()}`);
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.totimestring */
  function DateProto_toTimeString(args, {
    thisValue
  }) {
    const O = thisValue;
    if (!(O instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'Date', O);
    }
    let _temp72 = thisTimeValue(O);
    /* c8 ignore if */
    if (_temp72 instanceof AbruptCompletion) {
      return _temp72;
    }
    /* c8 ignore if */
    if (_temp72 instanceof Completion) {
      _temp72 = _temp72.Value;
    }
    const tv = _temp72;
    if (tv.isNaN()) {
      return Value('Invalid Date');
    }
    const t = LocalTime(tv);
    return Value(`${TimeString(t).stringValue()}${TimeZoneString(tv).stringValue()}`);
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.toutcstring */
  DateProto_toTimeString.section = 'https://tc39.es/ecma262/#sec-date.prototype.totimestring';
  function DateProto_toUTCString(args, {
    thisValue
  }) {
    const O = thisValue;
    if (!(O instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'Date', O);
    }
    let _temp73 = thisTimeValue(O);
    /* c8 ignore if */
    if (_temp73 instanceof AbruptCompletion) {
      return _temp73;
    }
    /* c8 ignore if */
    if (_temp73 instanceof Completion) {
      _temp73 = _temp73.Value;
    }
    const tv = _temp73;
    if (tv.isNaN()) {
      return Value('Invalid Date');
    }
    const weekday = daysOfTheWeek[R(WeekDay(tv))];
    const month = monthsOfTheYear[R(MonthFromTime(tv))];
    const day = String(R(DateFromTime(tv))).padStart(2, '0');
    const yv = R(YearFromTime(tv));
    const yearSign = yv >= 0 ? '' : '-';
    const year = Value(String(Math.abs(yv)));
    let _temp74 = StringPad(year, F(4), Value('0'), 'start');
    Assert(!(_temp74 instanceof AbruptCompletion), "StringPad(year, F(4), Value('0'), 'start')" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp74 instanceof Completion) {
      _temp74 = _temp74.Value;
    }
    const paddedYear = _temp74.stringValue();
    return Value(`${weekday}, ${day} ${month} ${yearSign}${paddedYear} ${TimeString(tv).stringValue()}`);
  }

  /** https://tc39.es/ecma262/#sec-date.prototype.valueof */
  DateProto_toUTCString.section = 'https://tc39.es/ecma262/#sec-date.prototype.toutcstring';
  function DateProto_valueOf(args, {
    thisValue
  }) {
    return thisTimeValue(thisValue);
  }

  /** https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive */
  DateProto_valueOf.section = 'https://tc39.es/ecma262/#sec-date.prototype.valueof';
  function DateProto_toPrimitive([hint = Value.undefined], {
    thisValue
  }) {
    const O = thisValue;
    if (!(O instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'Date', O);
    }
    let tryFirst;
    if (hint instanceof JSStringValue && (hint.stringValue() === 'string' || hint.stringValue() === 'default')) {
      tryFirst = 'string';
    } else if (hint instanceof JSStringValue && hint.stringValue() === 'number') {
      tryFirst = 'number';
    } else {
      return exports.surroundingAgent.Throw('TypeError', 'InvalidHint', hint);
    }
    return OrdinaryToPrimitive(O, tryFirst);
  }
  DateProto_toPrimitive.section = 'https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive';
  function bootstrapDatePrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['getDate', DateProto_getDate, 0], ['getDay', DateProto_getDay, 0], ['getFullYear', DateProto_getFullYear, 0], ['getHours', DateProto_getHours, 0], ['getMilliseconds', DateProto_getMilliseconds, 0], ['getMinutes', DateProto_getMinutes, 0], ['getMonth', DateProto_getMonth, 0], ['getSeconds', DateProto_getSeconds, 0], ['getTime', DateProto_getTime, 0], ['getTimezoneOffset', DateProto_getTimezoneOffset, 0], ['getUTCDate', DateProto_getUTCDate, 0], ['getUTCDay', DateProto_getUTCDay, 0], ['getUTCFullYear', DateProto_getUTCFullYear, 0], ['getUTCHours', DateProto_getUTCHours, 0], ['getUTCMilliseconds', DateProto_getUTCMilliseconds, 0], ['getUTCMinutes', DateProto_getUTCMinutes, 0], ['getUTCMonth', DateProto_getUTCMonth, 0], ['getUTCSeconds', DateProto_getUTCSeconds, 0], ['setDate', DateProto_setDate, 1], ['setFullYear', DateProto_setFullYear, 3], ['setHours', DateProto_setHours, 4], ['setMilliseconds', DateProto_setMilliseconds, 1], ['setMinutes', DateProto_setMinutes, 3], ['setMonth', DateProto_setMonth, 2], ['setSeconds', DateProto_setSeconds, 2], ['setTime', DateProto_setTime, 1], ['setUTCDate', DateProto_setUTCDate, 1], ['setUTCFullYear', DateProto_setUTCFullYear, 3], ['setUTCHours', DateProto_setUTCHours, 4], ['setUTCMilliseconds', DateProto_setUTCMilliseconds, 1], ['setUTCMinutes', DateProto_setUTCMinutes, 3], ['setUTCMonth', DateProto_setUTCMonth, 2], ['setUTCSeconds', DateProto_setUTCSeconds, 2], ['toDateString', DateProto_toDateString, 0], ['toISOString', DateProto_toISOString, 0], ['toJSON', DateProto_toJSON, 1], ['toLocaleDateString', DateProto_toLocaleDateString, 0], ['toLocaleString', DateProto_toLocaleString, 0], ['toLocaleTimeString', DateProto_toLocaleTimeString, 0], ['toString', DateProto_toString, 0], ['toTimeString', DateProto_toTimeString, 0], ['toUTCString', DateProto_toUTCString, 0], ['valueOf', DateProto_valueOf, 0], [wellKnownSymbols.toPrimitive, DateProto_toPrimitive, 1, {
      Writable: Value.false,
      Enumerable: Value.false,
      Configurable: Value.true
    }]], realmRec.Intrinsics['%Object.prototype%']);
    realmRec.Intrinsics['%Date.prototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-date-constructor */
  function DateConstructor(args, {
    NewTarget
  }) {
    const numberOfArgs = args.length;
    if (numberOfArgs >= 2) {
      /** https://tc39.es/ecma262/#sec-date-year-month-date-hours-minutes-seconds-ms */
      const [year, month, date, hours, minutes, seconds, ms] = args;
      Assert(numberOfArgs >= 2, "numberOfArgs >= 2");
      if (NewTarget === Value.undefined) {
        const now = Date.now();
        return ToDateString(F(now));
      } else {
        let _temp = ToNumber(year);
        /* c8 ignore if */
        if (_temp instanceof AbruptCompletion) {
          return _temp;
        }
        /* c8 ignore if */
        if (_temp instanceof Completion) {
          _temp = _temp.Value;
        }
        const y = _temp;
        let _temp2 = ToNumber(month);
        /* c8 ignore if */
        if (_temp2 instanceof AbruptCompletion) {
          return _temp2;
        }
        /* c8 ignore if */
        if (_temp2 instanceof Completion) {
          _temp2 = _temp2.Value;
        }
        const m = _temp2;
        let dt;
        if (date !== undefined) {
          let _temp3 = ToNumber(date);
          /* c8 ignore if */
          if (_temp3 instanceof AbruptCompletion) {
            return _temp3;
          }
          /* c8 ignore if */
          if (_temp3 instanceof Completion) {
            _temp3 = _temp3.Value;
          }
          dt = _temp3;
        } else {
          dt = F(1);
        }
        let h;
        if (hours !== undefined) {
          let _temp4 = ToNumber(hours);
          /* c8 ignore if */
          if (_temp4 instanceof AbruptCompletion) {
            return _temp4;
          }
          /* c8 ignore if */
          if (_temp4 instanceof Completion) {
            _temp4 = _temp4.Value;
          }
          h = _temp4;
        } else {
          h = F(+0);
        }
        let min;
        if (minutes !== undefined) {
          let _temp5 = ToNumber(minutes);
          /* c8 ignore if */
          if (_temp5 instanceof AbruptCompletion) {
            return _temp5;
          }
          /* c8 ignore if */
          if (_temp5 instanceof Completion) {
            _temp5 = _temp5.Value;
          }
          min = _temp5;
        } else {
          min = F(+0);
        }
        let s;
        if (seconds !== undefined) {
          let _temp6 = ToNumber(seconds);
          /* c8 ignore if */
          if (_temp6 instanceof AbruptCompletion) {
            return _temp6;
          }
          /* c8 ignore if */
          if (_temp6 instanceof Completion) {
            _temp6 = _temp6.Value;
          }
          s = _temp6;
        } else {
          s = F(+0);
        }
        let milli;
        if (ms !== undefined) {
          let _temp7 = ToNumber(ms);
          /* c8 ignore if */
          if (_temp7 instanceof AbruptCompletion) {
            return _temp7;
          }
          /* c8 ignore if */
          if (_temp7 instanceof Completion) {
            _temp7 = _temp7.Value;
          }
          milli = _temp7;
        } else {
          milli = F(+0);
        }
        let yr;
        if (y.isNaN()) {
          yr = F(NaN);
        } else {
          let _temp8 = ToIntegerOrInfinity(y);
          Assert(!(_temp8 instanceof AbruptCompletion), "ToIntegerOrInfinity(y)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp8 instanceof Completion) {
            _temp8 = _temp8.Value;
          }
          const yi = _temp8;
          if (yi >= 0 && yi <= 99) {
            yr = F(1900 + yi);
          } else {
            yr = y;
          }
        }
        const finalDate = MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli));
        let _temp9 = OrdinaryCreateFromConstructor(NewTarget, '%Date.prototype%', ['DateValue']);
        /* c8 ignore if */
        if (_temp9 instanceof AbruptCompletion) {
          return _temp9;
        }
        /* c8 ignore if */
        if (_temp9 instanceof Completion) {
          _temp9 = _temp9.Value;
        }
        const O = _temp9;
        O.DateValue = TimeClip(UTC(finalDate));
        return O;
      }
    } else if (numberOfArgs === 1) {
      const [value] = args;
      /** https://tc39.es/ecma262/#sec-date-value */
      Assert(numberOfArgs === 1, "numberOfArgs === 1");
      if (NewTarget === Value.undefined) {
        const now = Date.now();
        return ToDateString(F(now));
      } else {
        let tv;
        if (value instanceof ObjectValue && 'DateValue' in value) {
          tv = thisTimeValue(value);
        } else {
          let _temp10 = ToPrimitive(value);
          /* c8 ignore if */
          if (_temp10 instanceof AbruptCompletion) {
            return _temp10;
          }
          /* c8 ignore if */
          if (_temp10 instanceof Completion) {
            _temp10 = _temp10.Value;
          }
          const v = _temp10;
          if (v instanceof JSStringValue) {
            // Assert: The next step never returns an abrupt completion because Type(v) is String.
            tv = parseDate(v);
          } else {
            let _temp11 = ToNumber(v);
            /* c8 ignore if */
            if (_temp11 instanceof AbruptCompletion) {
              return _temp11;
            }
            /* c8 ignore if */
            if (_temp11 instanceof Completion) {
              _temp11 = _temp11.Value;
            }
            tv = _temp11;
          }
        }
        let _temp12 = OrdinaryCreateFromConstructor(NewTarget, '%Date.prototype%', ['DateValue']);
        /* c8 ignore if */
        if (_temp12 instanceof AbruptCompletion) {
          return _temp12;
        }
        /* c8 ignore if */
        if (_temp12 instanceof Completion) {
          _temp12 = _temp12.Value;
        }
        const O = _temp12;
        O.DateValue = TimeClip(tv);
        return O;
      }
    } else {
      /** https://tc39.es/ecma262/#sec-date-constructor-date */
      Assert(numberOfArgs === 0, "numberOfArgs === 0");
      if (NewTarget === Value.undefined) {
        const now = Date.now();
        return ToDateString(F(now));
      } else {
        let _temp13 = OrdinaryCreateFromConstructor(NewTarget, '%Date.prototype%', ['DateValue']);
        /* c8 ignore if */
        if (_temp13 instanceof AbruptCompletion) {
          return _temp13;
        }
        /* c8 ignore if */
        if (_temp13 instanceof Completion) {
          _temp13 = _temp13.Value;
        }
        const O = _temp13;
        O.DateValue = F(Date.now());
        return O;
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-date.now */
  DateConstructor.section = 'https://tc39.es/ecma262/#sec-date-constructor';
  function Date_now() {
    const now = Date.now();
    return F(now);
  }

  /** https://tc39.es/ecma262/#sec-date.parse */
  Date_now.section = 'https://tc39.es/ecma262/#sec-date.now';
  function Date_parse([string = Value.undefined]) {
    const str = ToString(string);
    if (str instanceof AbruptCompletion) {
      return str;
    }
    return parseDate(str);
  }

  /** https://tc39.es/ecma262/#sec-date.utc */
  Date_parse.section = 'https://tc39.es/ecma262/#sec-date.parse';
  function Date_UTC([year = Value.undefined, month, date, hours, minutes, seconds, ms]) {
    let _temp14 = ToNumber(year);
    /* c8 ignore if */
    if (_temp14 instanceof AbruptCompletion) {
      return _temp14;
    }
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    const y = _temp14;
    let m;
    if (month !== undefined) {
      let _temp15 = ToNumber(month);
      /* c8 ignore if */
      if (_temp15 instanceof AbruptCompletion) {
        return _temp15;
      }
      /* c8 ignore if */
      if (_temp15 instanceof Completion) {
        _temp15 = _temp15.Value;
      }
      m = _temp15;
    } else {
      m = F(+0);
    }
    let dt;
    if (date !== undefined) {
      let _temp16 = ToNumber(date);
      /* c8 ignore if */
      if (_temp16 instanceof AbruptCompletion) {
        return _temp16;
      }
      /* c8 ignore if */
      if (_temp16 instanceof Completion) {
        _temp16 = _temp16.Value;
      }
      dt = _temp16;
    } else {
      dt = F(1);
    }
    let h;
    if (hours !== undefined) {
      let _temp17 = ToNumber(hours);
      /* c8 ignore if */
      if (_temp17 instanceof AbruptCompletion) {
        return _temp17;
      }
      /* c8 ignore if */
      if (_temp17 instanceof Completion) {
        _temp17 = _temp17.Value;
      }
      h = _temp17;
    } else {
      h = F(+0);
    }
    let min;
    if (minutes !== undefined) {
      let _temp18 = ToNumber(minutes);
      /* c8 ignore if */
      if (_temp18 instanceof AbruptCompletion) {
        return _temp18;
      }
      /* c8 ignore if */
      if (_temp18 instanceof Completion) {
        _temp18 = _temp18.Value;
      }
      min = _temp18;
    } else {
      min = F(+0);
    }
    let s;
    if (seconds !== undefined) {
      let _temp19 = ToNumber(seconds);
      /* c8 ignore if */
      if (_temp19 instanceof AbruptCompletion) {
        return _temp19;
      }
      /* c8 ignore if */
      if (_temp19 instanceof Completion) {
        _temp19 = _temp19.Value;
      }
      s = _temp19;
    } else {
      s = F(+0);
    }
    let milli;
    if (ms !== undefined) {
      let _temp20 = ToNumber(ms);
      /* c8 ignore if */
      if (_temp20 instanceof AbruptCompletion) {
        return _temp20;
      }
      /* c8 ignore if */
      if (_temp20 instanceof Completion) {
        _temp20 = _temp20.Value;
      }
      milli = _temp20;
    } else {
      milli = F(+0);
    }
    let yr;
    if (y.isNaN()) {
      yr = F(NaN);
    } else {
      let _temp21 = ToIntegerOrInfinity(y);
      Assert(!(_temp21 instanceof AbruptCompletion), "ToIntegerOrInfinity(y)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp21 instanceof Completion) {
        _temp21 = _temp21.Value;
      }
      const yi = _temp21;
      if (yi >= 0 && yi <= 99) {
        yr = F(1900 + yi);
      } else {
        yr = y;
      }
    }
    return TimeClip(MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli)));
  }
  Date_UTC.section = 'https://tc39.es/ecma262/#sec-date.utc';
  function parseDate(dateTimeString) {
    /** https://tc39.es/ecma262/#sec-date-time-string-format */
    // TODO: implement parsing without the host.
    const parsed = Date.parse(dateTimeString.stringValue());
    return F(parsed);
  }
  function bootstrapDate(realmRec) {
    const cons = bootstrapConstructor(realmRec, DateConstructor, 'Date', 7, realmRec.Intrinsics['%Date.prototype%'], [['now', Date_now, 0], ['parse', Date_parse, 1], ['UTC', Date_UTC, 7]]);
    realmRec.Intrinsics['%Date%'] = cons;
  }

  const kRegExpStringIteratorPrototype = Value('%RegExpStringIteratorPrototype%');

  /** https://tc39.es/ecma262/#sec-createregexpstringiterator */
  function CreateRegExpStringIterator(R$1, S, global, fullUnicode) {
    // 1. Assert: Type(S) is String.
    Assert(S instanceof JSStringValue, "S instanceof JSStringValue");
    // 2. Assert: Type(global) is Boolean.
    Assert(global instanceof BooleanValue, "global instanceof BooleanValue");
    // 3. Assert: Type(fullUnicode) is Boolean.
    Assert(fullUnicode instanceof BooleanValue, "fullUnicode instanceof BooleanValue");
    // 4. Let closure be a new Abstract Closure with no parameters that captures R, S, global, and fullUnicode and performs the following steps when called:
    const closure = function* closure() {
      // a. Repeat,
      while (true) {
        let _temp = RegExpExec(R$1, S);
        /* c8 ignore if */
        if (_temp instanceof AbruptCompletion) {
          return _temp;
        }
        /* c8 ignore if */
        if (_temp instanceof Completion) {
          _temp = _temp.Value;
        }
        // i. Let match be ? RegExpExec(R, S).
        const match = _temp;
        // ii. If match is null, return undefined.
        if (match === Value.null) {
          return Value.undefined;
        }
        // iii. If global is false, then
        if (global === Value.false) {
          let _temp2 = yield* Yield(match);
          /* c8 ignore if */
          if (_temp2 instanceof AbruptCompletion) {
            return _temp2;
          }
          /* c8 ignore if */
          if (_temp2 instanceof Completion) {
            _temp2 = _temp2.Value;
          }
          // 2. Return undefined.
          return Value.undefined;
        }
        // iv. Let matchStr be ? ToString(? Get(match, "0")).
        let _temp9 = Get(match, Value('0'));
        /* c8 ignore if */
        if (_temp9 instanceof AbruptCompletion) {
          return _temp9;
        }
        /* c8 ignore if */
        if (_temp9 instanceof Completion) {
          _temp9 = _temp9.Value;
        }
        let _temp3 = ToString(_temp9);
        /* c8 ignore if */
        if (_temp3 instanceof AbruptCompletion) {
          return _temp3;
        }
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
        const matchStr = _temp3;
        // v. If matchStr is the empty String, then
        if (matchStr.stringValue() === '') {
          let _temp7 = Get(R$1, Value('lastIndex'));
          /* c8 ignore if */
          if (_temp7 instanceof AbruptCompletion) {
            return _temp7;
          }
          /* c8 ignore if */
          if (_temp7 instanceof Completion) {
            _temp7 = _temp7.Value;
          }
          let _temp4 = ToLength(_temp7);
          /* c8 ignore if */
          if (_temp4 instanceof AbruptCompletion) {
            return _temp4;
          }
          /* c8 ignore if */
          if (_temp4 instanceof Completion) {
            _temp4 = _temp4.Value;
          }
          // i. Let thisIndex be ℝ(? ToLength(? Get(R, "lastIndex"))).
          const thisIndex = R(_temp4);
          // ii. Let nextIndex be ! AdvanceStringIndex(S, thisIndex, fullUnicode).
          let _temp5 = AdvanceStringIndex(S, thisIndex, fullUnicode);
          Assert(!(_temp5 instanceof AbruptCompletion), "AdvanceStringIndex(S, thisIndex, fullUnicode)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp5 instanceof Completion) {
            _temp5 = _temp5.Value;
          }
          const nextIndex = _temp5;
          // iii. Perform ? Set(R, "lastIndex", 𝔽(nextIndex), true).
          let _temp6 = Set$1(R$1, Value('lastIndex'), F(nextIndex), Value.true);
          /* c8 ignore if */
          if (_temp6 instanceof AbruptCompletion) {
            return _temp6;
          }
          /* c8 ignore if */
          if (_temp6 instanceof Completion) {
            _temp6 = _temp6.Value;
          }
        }
        // vi. Perform ? Yield(match).
        let _temp8 = yield* Yield(match);
        /* c8 ignore if */
        if (_temp8 instanceof AbruptCompletion) {
          return _temp8;
        }
        /* c8 ignore if */
        if (_temp8 instanceof Completion) {
          _temp8 = _temp8.Value;
        }
      }
    };
    // 4. Return ! CreateIteratorFromClosure(closure, "%RegExpStringIteratorPrototype%", %RegExpStringIteratorPrototype%).
    let _temp10 = CreateIteratorFromClosure(closure, kRegExpStringIteratorPrototype, exports.surroundingAgent.intrinsic('%RegExpStringIteratorPrototype%'));
    Assert(!(_temp10 instanceof AbruptCompletion), "CreateIteratorFromClosure(closure, kRegExpStringIteratorPrototype, surroundingAgent.intrinsic('%RegExpStringIteratorPrototype%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    return _temp10;
  }

  /** https://tc39.es/ecma262/#sec-%regexpstringiteratorprototype%.next */
  function RegExpStringIteratorPrototype_next(args, {
    thisValue
  }) {
    // 1. Return ? GeneratorResume(this value, empty, "%RegExpStringIteratorPrototype%").
    return GeneratorResume(thisValue, undefined, kRegExpStringIteratorPrototype);
  }
  RegExpStringIteratorPrototype_next.section = 'https://tc39.es/ecma262/#sec-%regexpstringiteratorprototype%.next';
  function bootstrapRegExpStringIteratorPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['next', RegExpStringIteratorPrototype_next, 0]], realmRec.Intrinsics['%IteratorPrototype%'], 'RegExp String Iterator');
    realmRec.Intrinsics['%RegExpStringIteratorPrototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-regexp.prototype.exec */
  function RegExpProto_exec([string = Value.undefined], {
    thisValue
  }) {
    const R = thisValue;
    let _temp = RequireInternalSlot(R, 'RegExpMatcher');
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    let _temp2 = ToString(string);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const S = _temp2;
    return RegExpBuiltinExec(R, S);
  }

  /** https://tc39.es/ecma262/#sec-regexpexec */
  RegExpProto_exec.section = 'https://tc39.es/ecma262/#sec-regexp.prototype.exec';
  function RegExpExec(R, S) {
    Assert(R instanceof ObjectValue, "R instanceof ObjectValue");
    Assert(S instanceof JSStringValue, "S instanceof JSStringValue");
    let _temp3 = Get(R, Value('exec'));
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const exec = _temp3;
    if (IsCallable(exec) === Value.true) {
      let _temp4 = Call(exec, R, [S]);
      /* c8 ignore if */
      if (_temp4 instanceof AbruptCompletion) {
        return _temp4;
      }
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      const result = _temp4;
      if (!(result instanceof ObjectValue) && !(result instanceof NullValue)) {
        return exports.surroundingAgent.Throw('TypeError', 'RegExpExecNotObject', result);
      }
      return result;
    }
    let _temp5 = RequireInternalSlot(R, 'RegExpMatcher');
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    return RegExpBuiltinExec(R, S);
  }

  /** https://tc39.es/ecma262/#sec-regexpbuiltinexec */
  function RegExpBuiltinExec(R$1, S) {
    // 1. Assert: R is an initialized RegExp instance.
    Assert('RegExpMatcher' in R$1, "'RegExpMatcher' in R");
    // 2. Assert: Type(S) is String.
    Assert(S instanceof JSStringValue, "S instanceof JSStringValue");
    // 3. Let length be the number of code units in S.
    const length = S.stringValue().length;
    // 4. Let lastIndex be ? ℝ(ToLength(? Get(R, "lastIndex"))).
    let _temp25 = Get(R$1, Value('lastIndex'));
    /* c8 ignore if */
    if (_temp25 instanceof AbruptCompletion) {
      return _temp25;
    }
    /* c8 ignore if */
    if (_temp25 instanceof Completion) {
      _temp25 = _temp25.Value;
    }
    let _temp6 = ToLength(_temp25);
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    let lastIndex = R(_temp6);
    // 5. Let flags be R.[[OriginalFlags]].
    const flags = R$1.OriginalFlags.stringValue();
    // 6. If flags contains "g", let global be true; else let global be false.
    const global = flags.includes('g');
    // 7. If flags contains "y", let sticky be true; else let sticky be false.
    const sticky = flags.includes('y');
    // 8. If flags contains "d", let hasIndices be true; else let hasIndices be false.
    const hasIndices = flags.includes('d');
    // 9. If global is false and sticky is false, set lastIndex to 0.
    if (!global && !sticky) {
      lastIndex = 0;
    }
    // 10. Let matcher be R.[[RegExpMatcher]].
    const matcher = R$1.RegExpMatcher;
    // 11. If flags contains "u", let fullUnicode be true; else let fullUnicode be false.
    const fullUnicode = flags.includes('u');
    // 12. Let matchSucceeded be false.
    let matchSucceeded = false;
    let r;
    // 13. Repeat, while matchSucceeded is false
    while (matchSucceeded === false) {
      // a. If lastIndex > length, then
      if (lastIndex > length) {
        // i. If global is true or sticky is true, then
        if (global || sticky) {
          let _temp7 = Set$1(R$1, Value('lastIndex'), F(+0), Value.true);
          /* c8 ignore if */
          if (_temp7 instanceof AbruptCompletion) {
            return _temp7;
          }
          /* c8 ignore if */
          if (_temp7 instanceof Completion) {
            _temp7 = _temp7.Value;
          }
        }
        // ii. Return null.
        return Value.null;
      }
      // b. Let r be matcher(S, lastIndex).
      r = matcher(S, lastIndex);
      // c. If r is failure, then
      if (r === 'failure') {
        // i. If sticky is true, then
        if (sticky) {
          let _temp8 = Set$1(R$1, Value('lastIndex'), F(+0), Value.true);
          /* c8 ignore if */
          if (_temp8 instanceof AbruptCompletion) {
            return _temp8;
          }
          /* c8 ignore if */
          if (_temp8 instanceof Completion) {
            _temp8 = _temp8.Value;
          }
          // 2. Return null.
          return Value.null;
        }
        // ii. Set lastIndex to AdvanceStringIndex(S, lastIndex, fullUnicode).
        lastIndex = AdvanceStringIndex(S, lastIndex, fullUnicode ? Value.true : Value.false);
      } else {
        // d. Else,
        // i. Assert: r is a State.
        Assert(r instanceof State, "r instanceof State");
        // ii. Set matchSucceeded to true.
        matchSucceeded = true;
      }
    }
    // 14. Let e be r's endIndex value.
    let e = r.endIndex;
    const Input = fullUnicode ? Array.from(S.stringValue()) : S.stringValue().split('');
    // 15. If fullUnicode is true, then
    if (fullUnicode) {
      let _temp9 = GetStringIndex(S, Input, e);
      Assert(!(_temp9 instanceof AbruptCompletion), "GetStringIndex(S, Input, e)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp9 instanceof Completion) {
        _temp9 = _temp9.Value;
      }
      // If fullUnicode is true, set e to ! GetStringIndex(S, Input, e).
      e = _temp9;
    }
    // 16. If global is true or sticky is true, then
    if (global || sticky) {
      let _temp10 = Set$1(R$1, Value('lastIndex'), F(e), Value.true);
      /* c8 ignore if */
      if (_temp10 instanceof AbruptCompletion) {
        return _temp10;
      }
      /* c8 ignore if */
      if (_temp10 instanceof Completion) {
        _temp10 = _temp10.Value;
      }
    }
    // 17. Let n be the number of elements in r's captures List.
    const n = r.captures.length - 1;
    // 18. Assert: n = R.[[RegExpRecord]].[[CapturingGroupsCount]].
    Assert(n === R$1.parsedPattern.capturingGroups.length, "n === R.parsedPattern.capturingGroups.length");
    // 19. Assert: n < 2^32 - 1.
    Assert(n < 2 ** 32 - 1, "n < (2 ** 32) - 1");
    // 20. Let A be ! ArrayCreate(n + 1).
    let _temp11 = ArrayCreate(n + 1);
    Assert(!(_temp11 instanceof AbruptCompletion), "ArrayCreate(n + 1)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    const A = _temp11;
    // 21. Assert: The mathematical value of A's "length" property is n + 1.
    let _temp12 = Get(A, Value('length'));
    Assert(!(_temp12 instanceof AbruptCompletion), "Get(A, Value('length'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp12 instanceof Completion) {
      _temp12 = _temp12.Value;
    }
    Assert(R(_temp12) === n + 1, "MathematicalValue(X(Get(A, Value('length')))) === n + 1");
    // 22. Perform ! CreateDataPropertyOrThrow(A, "index", 𝔽(lastIndex)).
    let _temp13 = CreateDataPropertyOrThrow(A, Value('index'), F(lastIndex));
    Assert(!(_temp13 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(A, Value('index'), F(lastIndex))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp13 instanceof Completion) {
      _temp13 = _temp13.Value;
    }
    // 23. Perform ! CreateDataPropertyOrThrow(A, "input", S).
    let _temp14 = CreateDataPropertyOrThrow(A, Value('input'), S);
    Assert(!(_temp14 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(A, Value('input'), S)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    // 24. Let match be the Match Record { [[StartIndex]]: lastIndex, [[EndIndex]]: e }.
    const match = {
      StartIndex: lastIndex,
      EndIndex: e
    };
    // 25. Let indices be a new empty List.
    const indices = [];
    // 26. Let groupNames be a new empty List.
    const groupNames = [];
    // 27. Append match to indices.
    indices.push(match);
    // 28. Let matchedValue be ! GetMatchString(S, match).
    let _temp15 = GetMatchString(S, match);
    Assert(!(_temp15 instanceof AbruptCompletion), "GetMatchString(S, match)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp15 instanceof Completion) {
      _temp15 = _temp15.Value;
    }
    const matchedValue = _temp15;
    // 29. Perform ! CreateDataProperty(A, "0", matchedValue).
    let _temp16 = CreateDataPropertyOrThrow(A, Value('0'), matchedValue);
    Assert(!(_temp16 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(A, Value('0'), matchedValue)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp16 instanceof Completion) {
      _temp16 = _temp16.Value;
    }
    let groups;
    let hasGroups;
    // 30. If R contains any GroupName, then
    if (R$1.parsedPattern.groupSpecifiers.size > 0) {
      // a. Let groups be OrdinaryObjectCreate(null).
      groups = OrdinaryObjectCreate(Value.null);
      // b. Let hasGroups be true.
      hasGroups = Value.true;
    } else {
      // 31. Else,
      // a. Let groups be undefined.
      groups = Value.undefined;
      // b. Let hasGroups be false.
      hasGroups = Value.false;
    }
    // 32. Perform ! CreateDataPropertyOrThrow(A, "groups", groups).
    let _temp17 = CreateDataPropertyOrThrow(A, Value('groups'), groups);
    Assert(!(_temp17 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(A, Value('groups'), groups)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp17 instanceof Completion) {
      _temp17 = _temp17.Value;
    }
    // 33. For each integer i such that i > 0 and i ≤ n, do
    for (let i = 1; i <= n; i += 1) {
      // a. Let captureI be ith element of r's captures List.
      const captureI = r.captures[i];
      let capturedValue;
      // e. If captureI is undefined, then
      if (captureI === Value.undefined) {
        // i. Let capturedValue be undefined.
        capturedValue = Value.undefined;
        // ii. Append undefined to indices.
        indices.push(Value.undefined);
      } else {
        // f. Else,
        // i. Let captureStart be captureI's startIndex.
        let captureStart = captureI.startIndex;
        // ii. Let captureEnd be captureI's endIndex.
        let captureEnd = captureI.endIndex;
        // iii. If fullUnicode is true, then
        if (fullUnicode) {
          let _temp18 = GetStringIndex(S, Input, captureStart);
          Assert(!(_temp18 instanceof AbruptCompletion), "GetStringIndex(S, Input, captureStart)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp18 instanceof Completion) {
            _temp18 = _temp18.Value;
          }
          // 1. Set captureStart to ! GetStringIndex(S, Input, captureStart).
          captureStart = _temp18;
          // 2. Set captureEnd to ! GetStringIndex(S, Input, captureEnd).
          let _temp19 = GetStringIndex(S, Input, captureEnd);
          Assert(!(_temp19 instanceof AbruptCompletion), "GetStringIndex(S, Input, captureEnd)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp19 instanceof Completion) {
            _temp19 = _temp19.Value;
          }
          captureEnd = _temp19;
        }
        // iv. Let capture be the Match { [[StartIndex]]: captureStart, [[EndIndex]:: captureEnd }.
        const capture = {
          StartIndex: captureStart,
          EndIndex: captureEnd
        };
        // v. Let capturedValue be ! GetMatchString(S, capture).
        let _temp20 = GetMatchString(S, capture);
        Assert(!(_temp20 instanceof AbruptCompletion), "GetMatchString(S, capture)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp20 instanceof Completion) {
          _temp20 = _temp20.Value;
        }
        capturedValue = _temp20;
        // vi. Append capture to indices.
        indices.push(capture);
      }
      // e. Perform ! CreateDataPropertyOrThrow(A, ! ToString(𝔽(i)), capturedValue).
      let _temp23 = ToString(F(i));
      Assert(!(_temp23 instanceof AbruptCompletion), "ToString(F(i))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp23 instanceof Completion) {
        _temp23 = _temp23.Value;
      }
      let _temp21 = CreateDataPropertyOrThrow(A, _temp23, capturedValue);
      Assert(!(_temp21 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(A, X(ToString(F(i))), capturedValue)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp21 instanceof Completion) {
        _temp21 = _temp21.Value;
      }
      // f. If the ith capture of R was defined with a GroupName, then
      if (R$1.parsedPattern.capturingGroups[i - 1].GroupSpecifier) {
        // i. Let s be the StringValue of the corresponding RegExpIdentifierName.
        const s = Value(R$1.parsedPattern.capturingGroups[i - 1].GroupSpecifier);
        // ii. Perform ! CreateDataPropertyOrThrow(groups, s, capturedValue).
        let _temp22 = CreateDataPropertyOrThrow(groups, s, capturedValue);
        Assert(!(_temp22 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(groups, s, capturedValue)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp22 instanceof Completion) {
          _temp22 = _temp22.Value;
        }
        // iii. Append s to groupNames.
        groupNames.push(s);
      } else {
        // i. Append undefined to groupNames.
        groupNames.push(Value.undefined);
      }
    }
    // 34. If hasIndices is true, then
    if (hasIndices) {
      // a. Let indicesArray be MakeMatchIndicesIndexPairArray(S, indices, groupNames, hasGroups).
      const indicesArray = MakeMatchIndicesIndexPairArray(S, indices, groupNames, hasGroups);
      // b. Perform ! CreateDataProperty(A, "indices", indicesArray).
      let _temp24 = CreateDataPropertyOrThrow(A, Value('indices'), indicesArray);
      Assert(!(_temp24 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(A, Value('indices'), indicesArray)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp24 instanceof Completion) {
        _temp24 = _temp24.Value;
      }
    }
    // 35. Return A.
    return A;
  }

  /** https://tc39.es/ecma262/#sec-advancestringindex */
  function AdvanceStringIndex(S, index, unicode) {
    // 1. Assert: Type(S) is String.
    Assert(S instanceof JSStringValue, "S instanceof JSStringValue");
    // 2. Assert: index is a non-negative integer which is ≤ 2 ** (53 - 1).
    Assert(isNonNegativeInteger(index) && index <= 2 ** 53 - 1, "isNonNegativeInteger(index) && index <= (2 ** 53) - 1");
    // 3. Assert: Type(unicode) is Boolean.
    Assert(unicode instanceof BooleanValue, "unicode instanceof BooleanValue");
    // 4. If unicode is false, return index + 1.
    if (unicode === Value.false) {
      return index + 1;
    }
    // 5. Let length be the number of code units in S.
    const length = S.stringValue().length;
    // 6. If index + 1 ≥ length, return index + 1.
    if (index + 1 >= length) {
      return index + 1;
    }
    // 7. Let cp be ! CodePointAt(S, index).
    let _temp26 = CodePointAt(S.stringValue(), index);
    Assert(!(_temp26 instanceof AbruptCompletion), "CodePointAt(S.stringValue(), index)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp26 instanceof Completion) {
      _temp26 = _temp26.Value;
    }
    const cp = _temp26;
    // 8. Return index + cp.[[CodeUnitCount]].
    return index + cp.CodeUnitCount;
  }

  /** https://tc39.es/ecma262/#sec-get-regexp.prototype.dotAll */
  function RegExpProto_dotAllGetter(args, {
    thisValue
  }) {
    // 1. Let R be the this value.
    const R = thisValue;
    // 2. Let cu be the code unit 0x0073 (LATIN SMALL LETTER S).
    const cu = 's';
    // 3. Return ? RegExpHasFlag(R, cu).
    return RegExpHasFlag(R, cu);
  }

  /** https://tc39.es/ecma262/#sec-get-regexp.prototype.flags */
  RegExpProto_dotAllGetter.section = 'https://tc39.es/ecma262/#sec-get-regexp.prototype.dotAll';
  function RegExpProto_flagsGetter(args, {
    thisValue
  }) {
    const R = thisValue;
    if (!(R instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'RegExp', R);
    }
    let result = '';
    let _temp27 = Get(R, Value('hasIndices'));
    /* c8 ignore if */
    if (_temp27 instanceof AbruptCompletion) {
      return _temp27;
    }
    /* c8 ignore if */
    if (_temp27 instanceof Completion) {
      _temp27 = _temp27.Value;
    }
    const hasIndices = ToBoolean(_temp27);
    if (hasIndices === Value.true) {
      result += 'd';
    }
    let _temp28 = Get(R, Value('global'));
    /* c8 ignore if */
    if (_temp28 instanceof AbruptCompletion) {
      return _temp28;
    }
    /* c8 ignore if */
    if (_temp28 instanceof Completion) {
      _temp28 = _temp28.Value;
    }
    const global = ToBoolean(_temp28);
    if (global === Value.true) {
      result += 'g';
    }
    let _temp29 = Get(R, Value('ignoreCase'));
    /* c8 ignore if */
    if (_temp29 instanceof AbruptCompletion) {
      return _temp29;
    }
    /* c8 ignore if */
    if (_temp29 instanceof Completion) {
      _temp29 = _temp29.Value;
    }
    const ignoreCase = ToBoolean(_temp29);
    if (ignoreCase === Value.true) {
      result += 'i';
    }
    let _temp30 = Get(R, Value('multiline'));
    /* c8 ignore if */
    if (_temp30 instanceof AbruptCompletion) {
      return _temp30;
    }
    /* c8 ignore if */
    if (_temp30 instanceof Completion) {
      _temp30 = _temp30.Value;
    }
    const multiline = ToBoolean(_temp30);
    if (multiline === Value.true) {
      result += 'm';
    }
    let _temp31 = Get(R, Value('dotAll'));
    /* c8 ignore if */
    if (_temp31 instanceof AbruptCompletion) {
      return _temp31;
    }
    /* c8 ignore if */
    if (_temp31 instanceof Completion) {
      _temp31 = _temp31.Value;
    }
    const dotAll = ToBoolean(_temp31);
    if (dotAll === Value.true) {
      result += 's';
    }
    let _temp32 = Get(R, Value('unicode'));
    /* c8 ignore if */
    if (_temp32 instanceof AbruptCompletion) {
      return _temp32;
    }
    /* c8 ignore if */
    if (_temp32 instanceof Completion) {
      _temp32 = _temp32.Value;
    }
    const unicode = ToBoolean(_temp32);
    if (unicode === Value.true) {
      result += 'u';
    }
    let _temp33 = Get(R, Value('sticky'));
    /* c8 ignore if */
    if (_temp33 instanceof AbruptCompletion) {
      return _temp33;
    }
    /* c8 ignore if */
    if (_temp33 instanceof Completion) {
      _temp33 = _temp33.Value;
    }
    const sticky = ToBoolean(_temp33);
    if (sticky === Value.true) {
      result += 'y';
    }
    return Value(result);
  }

  /** https://tc39.es/ecma262/#sec-get-regexp.prototype.global */
  RegExpProto_flagsGetter.section = 'https://tc39.es/ecma262/#sec-get-regexp.prototype.flags';
  function RegExpProto_globalGetter(args, {
    thisValue
  }) {
    const R = thisValue;
    if (!(R instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'RegExp', R);
    }
    if (!('OriginalFlags' in R)) {
      if (SameValue(R, exports.surroundingAgent.intrinsic('%RegExp.prototype%')) === Value.true) {
        return Value.undefined;
      }
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'RegExp', R);
    }
    const flags = R.OriginalFlags;
    if (flags.stringValue().includes('g')) {
      return Value.true;
    }
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-get-regexp.prototype.hasIndices */
  RegExpProto_globalGetter.section = 'https://tc39.es/ecma262/#sec-get-regexp.prototype.global';
  function RegExpProto_hasIndicesGetter(args, {
    thisValue
  }) {
    // 1. Let R be the this value.
    const R = thisValue;
    // 2. Let cu be the code unit 0x0073 (LATIN SMALL LETTER D).
    const cu = 'd';
    // 3. Return ? RegExpHasFlag(R, cu).
    return RegExpHasFlag(R, cu);
  }

  /** https://tc39.es/ecma262/#sec-get-regexp.prototype.ignorecase */
  RegExpProto_hasIndicesGetter.section = 'https://tc39.es/ecma262/#sec-get-regexp.prototype.hasIndices';
  function RegExpProto_ignoreCaseGetter(args, {
    thisValue
  }) {
    // 1. Let R be the this value.
    const R = thisValue;
    // 2. Let cu be the code unit 0x0069 (LATIN SMALL LETTER I).
    const cu = 'i';
    // 3. Return ? RegExpHasFlag(R, cu).
    return RegExpHasFlag(R, cu);
  }

  /** https://tc39.es/ecma262/#sec-regexp.prototype-@@match */
  RegExpProto_ignoreCaseGetter.section = 'https://tc39.es/ecma262/#sec-get-regexp.prototype.ignorecase';
  function RegExpProto_match([string = Value.undefined], {
    thisValue
  }) {
    // 1. Let rx be the this value.
    const rx = thisValue;
    // 2. If Type(rx) is not Object, throw a TypeError exception.
    if (!(rx instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'RegExp', rx);
    }
    // 3. Let S be ? ToString(string).
    let _temp34 = ToString(string);
    /* c8 ignore if */
    if (_temp34 instanceof AbruptCompletion) {
      return _temp34;
    }
    /* c8 ignore if */
    if (_temp34 instanceof Completion) {
      _temp34 = _temp34.Value;
    }
    const S = _temp34;
    // 4. Let flags be ? ToString(? Get(rx, "flags")).
    let _temp46 = Get(rx, Value('flags'));
    /* c8 ignore if */
    if (_temp46 instanceof AbruptCompletion) {
      return _temp46;
    }
    /* c8 ignore if */
    if (_temp46 instanceof Completion) {
      _temp46 = _temp46.Value;
    }
    let _temp35 = ToString(_temp46);
    /* c8 ignore if */
    if (_temp35 instanceof AbruptCompletion) {
      return _temp35;
    }
    /* c8 ignore if */
    if (_temp35 instanceof Completion) {
      _temp35 = _temp35.Value;
    }
    const flags = _temp35;
    // 5. If flags does not contain "g", then
    if (!flags.stringValue().includes('g')) {
      // a. Return ? RegExpExec(rx, S).
      return RegExpExec(rx, S);
    } else {
      // 6. Else,
      // a. If flags contains "u", let fullUnicode be true. Otherwise, let fullUnicode be false.
      const fullUnicode = flags.stringValue().includes('u') ? Value.true : Value.false;
      // b. Perform ? Set(rx, "lastIndex", +0𝔽, true).
      let _temp36 = Set$1(rx, Value('lastIndex'), F(+0), Value.true);
      /* c8 ignore if */
      if (_temp36 instanceof AbruptCompletion) {
        return _temp36;
      }
      /* c8 ignore if */
      if (_temp36 instanceof Completion) {
        _temp36 = _temp36.Value;
      }
      // c. Let A be ! ArrayCreate(0).
      let _temp37 = ArrayCreate(0);
      Assert(!(_temp37 instanceof AbruptCompletion), "ArrayCreate(0)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp37 instanceof Completion) {
        _temp37 = _temp37.Value;
      }
      const A = _temp37;
      // d. Let n be 0.
      let n = 0;
      // e. Repeat,
      while (true) {
        let _temp38 = RegExpExec(rx, S);
        /* c8 ignore if */
        if (_temp38 instanceof AbruptCompletion) {
          return _temp38;
        }
        /* c8 ignore if */
        if (_temp38 instanceof Completion) {
          _temp38 = _temp38.Value;
        }
        // i. Let result be ? RegExpExec(rx, S).
        const result = _temp38;
        // ii. If result is null, then
        if (result === Value.null) {
          // 1. If n = 0, return null.
          if (n === 0) {
            return Value.null;
          }
          // 2. Return A.
          return A;
        } else {
          let _temp44 = Get(result, Value('0'));
          /* c8 ignore if */
          if (_temp44 instanceof AbruptCompletion) {
            return _temp44;
          }
          /* c8 ignore if */
          if (_temp44 instanceof Completion) {
            _temp44 = _temp44.Value;
          }
          let _temp39 = ToString(_temp44);
          /* c8 ignore if */
          if (_temp39 instanceof AbruptCompletion) {
            return _temp39;
          }
          /* c8 ignore if */
          if (_temp39 instanceof Completion) {
            _temp39 = _temp39.Value;
          }
          // iii. Else,
          // 1. Let matchStr be ? ToString(? Get(result, "0")).
          const matchStr = _temp39;
          // 2. Perform ! CreateDataPropertyOrThrow(A, ! ToString(𝔽(n)), matchStr).
          let _temp45 = ToString(F(n));
          Assert(!(_temp45 instanceof AbruptCompletion), "ToString(F(n))" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp45 instanceof Completion) {
            _temp45 = _temp45.Value;
          }
          let _temp40 = CreateDataPropertyOrThrow(A, _temp45, matchStr);
          Assert(!(_temp40 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(A, X(ToString(F(n))), matchStr)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp40 instanceof Completion) {
            _temp40 = _temp40.Value;
          }
          // 3. If matchStr is the empty String, then
          if (matchStr.stringValue() === '') {
            let _temp43 = Get(rx, Value('lastIndex'));
            /* c8 ignore if */
            if (_temp43 instanceof AbruptCompletion) {
              return _temp43;
            }
            /* c8 ignore if */
            if (_temp43 instanceof Completion) {
              _temp43 = _temp43.Value;
            }
            let _temp41 = ToLength(_temp43);
            /* c8 ignore if */
            if (_temp41 instanceof AbruptCompletion) {
              return _temp41;
            }
            /* c8 ignore if */
            if (_temp41 instanceof Completion) {
              _temp41 = _temp41.Value;
            }
            // a. Let thisIndex be ℝ(? ToLength(? Get(rx, "lastIndex"))).
            const thisIndex = R(_temp41);
            // b. Let nextIndex be AdvanceStringIndex(S, thisIndex, fullUnicode).
            const nextIndex = AdvanceStringIndex(S, thisIndex, fullUnicode);
            // c. Perform ? Set(rx, "lastIndex", 𝔽(nextIndex), true).
            let _temp42 = Set$1(rx, Value('lastIndex'), F(nextIndex), Value.true);
            /* c8 ignore if */
            if (_temp42 instanceof AbruptCompletion) {
              return _temp42;
            }
            /* c8 ignore if */
            if (_temp42 instanceof Completion) {
              _temp42 = _temp42.Value;
            }
          }
          // 4. Set n to n + 1.
          n += 1;
        }
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-regexp-prototype-matchall */
  RegExpProto_match.section = 'https://tc39.es/ecma262/#sec-regexp.prototype-@@match';
  function RegExpProto_matchAll([string = Value.undefined], {
    thisValue
  }) {
    const R = thisValue;
    if (!(R instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'RegExp', R);
    }
    let _temp47 = ToString(string);
    /* c8 ignore if */
    if (_temp47 instanceof AbruptCompletion) {
      return _temp47;
    }
    /* c8 ignore if */
    if (_temp47 instanceof Completion) {
      _temp47 = _temp47.Value;
    }
    const S = _temp47;
    let _temp48 = SpeciesConstructor(R, exports.surroundingAgent.intrinsic('%RegExp%'));
    /* c8 ignore if */
    if (_temp48 instanceof AbruptCompletion) {
      return _temp48;
    }
    /* c8 ignore if */
    if (_temp48 instanceof Completion) {
      _temp48 = _temp48.Value;
    }
    const C = _temp48;
    let _temp54 = Get(R, Value('flags'));
    /* c8 ignore if */
    if (_temp54 instanceof AbruptCompletion) {
      return _temp54;
    }
    /* c8 ignore if */
    if (_temp54 instanceof Completion) {
      _temp54 = _temp54.Value;
    }
    let _temp49 = ToString(_temp54);
    /* c8 ignore if */
    if (_temp49 instanceof AbruptCompletion) {
      return _temp49;
    }
    /* c8 ignore if */
    if (_temp49 instanceof Completion) {
      _temp49 = _temp49.Value;
    }
    const flags = _temp49;
    let _temp50 = Construct(C, [R, flags]);
    /* c8 ignore if */
    if (_temp50 instanceof AbruptCompletion) {
      return _temp50;
    }
    /* c8 ignore if */
    if (_temp50 instanceof Completion) {
      _temp50 = _temp50.Value;
    }
    const matcher = _temp50;
    let _temp55 = Get(R, Value('lastIndex'));
    /* c8 ignore if */
    if (_temp55 instanceof AbruptCompletion) {
      return _temp55;
    }
    /* c8 ignore if */
    if (_temp55 instanceof Completion) {
      _temp55 = _temp55.Value;
    }
    let _temp51 = ToLength(_temp55);
    /* c8 ignore if */
    if (_temp51 instanceof AbruptCompletion) {
      return _temp51;
    }
    /* c8 ignore if */
    if (_temp51 instanceof Completion) {
      _temp51 = _temp51.Value;
    }
    const lastIndex = _temp51;
    let _temp52 = Set$1(matcher, Value('lastIndex'), lastIndex, Value.true);
    /* c8 ignore if */
    if (_temp52 instanceof AbruptCompletion) {
      return _temp52;
    }
    /* c8 ignore if */
    if (_temp52 instanceof Completion) {
      _temp52 = _temp52.Value;
    }
    let global;
    if (flags.stringValue().includes('g')) {
      global = Value.true;
    } else {
      global = Value.false;
    }
    let fullUnicode;
    if (flags.stringValue().includes('u')) {
      fullUnicode = Value.true;
    } else {
      fullUnicode = Value.false;
    }
    let _temp53 = CreateRegExpStringIterator(matcher, S, global, fullUnicode);
    Assert(!(_temp53 instanceof AbruptCompletion), "CreateRegExpStringIterator(matcher, S, global, fullUnicode)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp53 instanceof Completion) {
      _temp53 = _temp53.Value;
    }
    return _temp53;
  }

  /** https://tc39.es/ecma262/#sec-get-regexp.prototype.multiline */
  RegExpProto_matchAll.section = 'https://tc39.es/ecma262/#sec-regexp-prototype-matchall';
  function RegExpProto_multilineGetter(args, {
    thisValue
  }) {
    // 1. Let R be the this value.
    const R = thisValue;
    // 2. Let cu be the code unit 0x006D (LATIN SMALL LETTER M).
    const cu = 'm';
    // 3. Return ? RegExpHasFlag(R, cu).
    return RegExpHasFlag(R, cu);
  }

  /** https://tc39.es/ecma262/#sec-regexp.prototype-@@replace */
  RegExpProto_multilineGetter.section = 'https://tc39.es/ecma262/#sec-get-regexp.prototype.multiline';
  function RegExpProto_replace([string = Value.undefined, replaceValue = Value.undefined], {
    thisValue
  }) {
    // 1. Let rx be the this value.
    const rx = thisValue;
    // 2. If rx is not an Object, throw a TypeError exception.
    if (!(rx instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'RegExp', rx);
    }
    // 3. Let S be ? ToString(string).
    let _temp56 = ToString(string);
    /* c8 ignore if */
    if (_temp56 instanceof AbruptCompletion) {
      return _temp56;
    }
    /* c8 ignore if */
    if (_temp56 instanceof Completion) {
      _temp56 = _temp56.Value;
    }
    const S = _temp56;
    // 4. Let lengthS be the length of S.
    const lengthS = S.stringValue().length;
    // 5. Let functionalReplace be IsCallable(replaceValue).
    const functionalReplace = IsCallable(replaceValue);
    // 6. If functionalReplace is false, then
    if (functionalReplace === Value.false) {
      let _temp57 = ToString(replaceValue);
      /* c8 ignore if */
      if (_temp57 instanceof AbruptCompletion) {
        return _temp57;
      }
      /* c8 ignore if */
      if (_temp57 instanceof Completion) {
        _temp57 = _temp57.Value;
      }
      // a. Set replaceValue to ? ToString(replaceValue).
      replaceValue = _temp57;
    }
    // 7. Let flags be ? ToString(? Get(rx, "flags")).
    let _temp79 = Get(rx, Value('flags'));
    /* c8 ignore if */
    if (_temp79 instanceof AbruptCompletion) {
      return _temp79;
    }
    /* c8 ignore if */
    if (_temp79 instanceof Completion) {
      _temp79 = _temp79.Value;
    }
    let _temp58 = ToString(_temp79);
    /* c8 ignore if */
    if (_temp58 instanceof AbruptCompletion) {
      return _temp58;
    }
    /* c8 ignore if */
    if (_temp58 instanceof Completion) {
      _temp58 = _temp58.Value;
    }
    const flags = _temp58;
    // 8. If flags contains "g", let global be true. Otherwise, let global be false.
    const global = flags.stringValue().includes('g') ? Value.true : Value.false;
    let fullUnicode;
    // 9. If global is true, then
    if (global === Value.true) {
      // a. If flags contains "u", let fullUnicode be true. Otherwise, let fullUnicode be false.
      fullUnicode = flags.stringValue().includes('u') ? Value.true : Value.false;
      // b. Perform ? Set(rx, "lastIndex", +0𝔽, true).
      let _temp59 = Set$1(rx, Value('lastIndex'), F(+0), Value.true);
      /* c8 ignore if */
      if (_temp59 instanceof AbruptCompletion) {
        return _temp59;
      }
      /* c8 ignore if */
      if (_temp59 instanceof Completion) {
        _temp59 = _temp59.Value;
      }
    }
    // 10. Let results be a new empty List.
    const results = [];
    // 11. Let done be false.
    let done = false;
    // 12. Repeat, while done is false,
    while (!done) {
      let _temp60 = RegExpExec(rx, S);
      /* c8 ignore if */
      if (_temp60 instanceof AbruptCompletion) {
        return _temp60;
      }
      /* c8 ignore if */
      if (_temp60 instanceof Completion) {
        _temp60 = _temp60.Value;
      }
      // a. Let result be ? RegExpExec(rx, S).
      const result = _temp60;
      // b. If result is null, set done to true.
      if (result === Value.null) {
        done = true;
      } else {
        // c. Else,
        // i. Append result to results.
        results.push(result);
        // ii. If global is false, set done to true.
        if (global === Value.false) {
          done = true;
        } else {
          let _temp65 = Get(result, Value('0'));
          /* c8 ignore if */
          if (_temp65 instanceof AbruptCompletion) {
            return _temp65;
          }
          /* c8 ignore if */
          if (_temp65 instanceof Completion) {
            _temp65 = _temp65.Value;
          }
          let _temp61 = ToString(_temp65);
          /* c8 ignore if */
          if (_temp61 instanceof AbruptCompletion) {
            return _temp61;
          }
          /* c8 ignore if */
          if (_temp61 instanceof Completion) {
            _temp61 = _temp61.Value;
          }
          // iii. Else,
          // 1. Let matchStr be ? ToString(? Get(result, "0")).
          const matchStr = _temp61;
          // 2. If matchStr is the empty String, then
          if (matchStr.stringValue() === '') {
            let _temp64 = Get(rx, Value('lastIndex'));
            /* c8 ignore if */
            if (_temp64 instanceof AbruptCompletion) {
              return _temp64;
            }
            /* c8 ignore if */
            if (_temp64 instanceof Completion) {
              _temp64 = _temp64.Value;
            }
            let _temp62 = ToLength(_temp64);
            /* c8 ignore if */
            if (_temp62 instanceof AbruptCompletion) {
              return _temp62;
            }
            /* c8 ignore if */
            if (_temp62 instanceof Completion) {
              _temp62 = _temp62.Value;
            }
            // a. Let thisIndex be ℝ(? ToLength(? Get(rx, "lastIndex"))).
            const thisIndex = R(_temp62);
            // b. Let nextIndex be AdvanceStringIndex(S, thisIndex, fullUnicode).
            const nextIndex = AdvanceStringIndex(S, thisIndex, fullUnicode);
            // c. Perform ? Set(rx, "lastIndex", 𝔽(nextIndex), true).
            let _temp63 = Set$1(rx, Value('lastIndex'), F(nextIndex), Value.true);
            /* c8 ignore if */
            if (_temp63 instanceof AbruptCompletion) {
              return _temp63;
            }
            /* c8 ignore if */
            if (_temp63 instanceof Completion) {
              _temp63 = _temp63.Value;
            }
          }
        }
      }
    }
    // 13. Let accumulatedResult be the empty String.
    let accumulatedResult = '';
    // 14. Let nextSourcePosition be 0.
    let nextSourcePosition = 0;
    // 15. For each element result of results, do
    for (const result of results) {
      let _temp66 = LengthOfArrayLike(result);
      /* c8 ignore if */
      if (_temp66 instanceof AbruptCompletion) {
        return _temp66;
      }
      /* c8 ignore if */
      if (_temp66 instanceof Completion) {
        _temp66 = _temp66.Value;
      }
      // a. Let resultLength be ? LengthOfArrayLike(result).
      let nCaptures = _temp66;
      // b. Let nCaptures be max(resultLength - 1, 0).
      nCaptures = Math.max(nCaptures - 1, 0);
      // c. Let matched be ? ToString(? Get(result, "0")).
      let _temp77 = Get(result, Value('0'));
      /* c8 ignore if */
      if (_temp77 instanceof AbruptCompletion) {
        return _temp77;
      }
      /* c8 ignore if */
      if (_temp77 instanceof Completion) {
        _temp77 = _temp77.Value;
      }
      let _temp67 = ToString(_temp77);
      /* c8 ignore if */
      if (_temp67 instanceof AbruptCompletion) {
        return _temp67;
      }
      /* c8 ignore if */
      if (_temp67 instanceof Completion) {
        _temp67 = _temp67.Value;
      }
      const matched = _temp67;
      // d. Let matchLength be the length of matched.
      const matchLength = matched.stringValue().length;
      // e. Let position be ? ToIntegerOrInfinity(? Get(result, "index")).
      let _temp78 = Get(result, Value('index'));
      /* c8 ignore if */
      if (_temp78 instanceof AbruptCompletion) {
        return _temp78;
      }
      /* c8 ignore if */
      if (_temp78 instanceof Completion) {
        _temp78 = _temp78.Value;
      }
      let _temp68 = ToIntegerOrInfinity(_temp78);
      /* c8 ignore if */
      if (_temp68 instanceof AbruptCompletion) {
        return _temp68;
      }
      /* c8 ignore if */
      if (_temp68 instanceof Completion) {
        _temp68 = _temp68.Value;
      }
      let position = _temp68;
      // f. Set position to the result of clamping position between 0 and lengthS.
      position = Math.max(Math.min(position, lengthS), 0);
      // g. Let captures be a new empty List.
      const captures = [];
      // h. Let n be 1.
      let n = 1;
      // i. Repeat, while n ≤ nCaptures,
      while (n <= nCaptures) {
        let _temp71 = ToString(F(n));
        Assert(!(_temp71 instanceof AbruptCompletion), "ToString(F(n))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp71 instanceof Completion) {
          _temp71 = _temp71.Value;
        }
        let _temp69 = Get(result, _temp71);
        /* c8 ignore if */
        if (_temp69 instanceof AbruptCompletion) {
          return _temp69;
        }
        /* c8 ignore if */
        if (_temp69 instanceof Completion) {
          _temp69 = _temp69.Value;
        }
        // i. Let capN be ? Get(result, ! ToString(𝔽(n))).
        let capN = _temp69;
        // ii. If capN is not undefined, then
        if (capN !== Value.undefined) {
          let _temp70 = ToString(capN);
          /* c8 ignore if */
          if (_temp70 instanceof AbruptCompletion) {
            return _temp70;
          }
          /* c8 ignore if */
          if (_temp70 instanceof Completion) {
            _temp70 = _temp70.Value;
          }
          // 1. Set capN to ? ToString(capN).
          capN = _temp70;
        }
        // iii. Append capN to captures.
        captures.push(capN);
        // iv. NOTE: When n = 1, the preceding step puts the first element into captures
        //     (at index 0). More generally, the nth capture (the characters captured by
        //     the nth set of capturing parentheses) is at captures[n - 1].
        // v. Set n to n + 1.
        n += 1;
      }
      // j. Let namedCaptures be ? Get(result, "groups").
      let _temp72 = Get(result, Value('groups'));
      /* c8 ignore if */
      if (_temp72 instanceof AbruptCompletion) {
        return _temp72;
      }
      /* c8 ignore if */
      if (_temp72 instanceof Completion) {
        _temp72 = _temp72.Value;
      }
      let namedCaptures = _temp72;
      let replacement;
      // k. If functionalReplace is true, then
      if (functionalReplace === Value.true) {
        // i. Let replacerArgs be the list-concatenation of « matched », captures, and « 𝔽(position), S ».
        const replacerArgs = [matched, ...captures, F(position), S];
        // ii. If namedCaptures is not undefined, then
        if (namedCaptures !== Value.undefined) {
          // 1. Append namedCaptures to replacerArgs.
          replacerArgs.push(namedCaptures);
        }
        // iii. Let replValue be ? Call(replaceValue, undefined, replacerArgs).
        let _temp73 = Call(replaceValue, Value.undefined, replacerArgs);
        /* c8 ignore if */
        if (_temp73 instanceof AbruptCompletion) {
          return _temp73;
        }
        /* c8 ignore if */
        if (_temp73 instanceof Completion) {
          _temp73 = _temp73.Value;
        }
        const replValue = _temp73;
        // iv. Let replacement be ? ToString(replValue).
        let _temp74 = ToString(replValue);
        /* c8 ignore if */
        if (_temp74 instanceof AbruptCompletion) {
          return _temp74;
        }
        /* c8 ignore if */
        if (_temp74 instanceof Completion) {
          _temp74 = _temp74.Value;
        }
        replacement = _temp74;
      } else {
        // l. Else,
        // i. If namedCaptures is not undefined, then
        if (namedCaptures !== Value.undefined) {
          let _temp75 = ToObject(namedCaptures);
          /* c8 ignore if */
          if (_temp75 instanceof AbruptCompletion) {
            return _temp75;
          }
          /* c8 ignore if */
          if (_temp75 instanceof Completion) {
            _temp75 = _temp75.Value;
          }
          // 1. Set namedCaptures to ? ToObject(namedCaptures).
          namedCaptures = _temp75;
        }
        // ii. Let replacement be ? GetSubstitution(matched, S, position, captures, namedCaptures, replaceValue).
        let _temp76 = GetSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        /* c8 ignore if */
        if (_temp76 instanceof AbruptCompletion) {
          return _temp76;
        }
        /* c8 ignore if */
        if (_temp76 instanceof Completion) {
          _temp76 = _temp76.Value;
        }
        replacement = _temp76;
      }
      // m. If position ≥ nextSourcePosition, then
      if (position >= nextSourcePosition) {
        // i. NOTE: position should not normally move backwards. If it does, it is an indication of an
        //          ill-behaving RegExp subclass or use of an access triggered side-effect to change the
        //          global flag or other characteristics of rx. In such cases, the corresponding substitution is ignored.
        // ii. Set accumulatedResult to the string-concatenation of accumulatedResult, the substring of S from nextSourcePosition to position, and replacement.
        accumulatedResult = accumulatedResult + S.stringValue().substring(nextSourcePosition, position) + replacement.stringValue();
        // iii. Set nextSourcePosition to position + matchLength.
        nextSourcePosition = position + matchLength;
      }
    }
    // 16. If nextSourcePosition ≥ lengthS, return accumulatedResult.
    if (nextSourcePosition >= lengthS) {
      return Value(accumulatedResult);
    }
    // 17. Return the string-concatenation of accumulatedResult and the substring of S from nextSourcePosition.
    return Value(accumulatedResult + S.stringValue().substring(nextSourcePosition));
  }

  /** https://tc39.es/ecma262/#sec-regexp.prototype-@@search */
  RegExpProto_replace.section = 'https://tc39.es/ecma262/#sec-regexp.prototype-@@replace';
  function RegExpProto_search([string = Value.undefined], {
    thisValue
  }) {
    const rx = thisValue;
    if (!(rx instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'RegExp', rx);
    }
    let _temp80 = ToString(string);
    /* c8 ignore if */
    if (_temp80 instanceof AbruptCompletion) {
      return _temp80;
    }
    /* c8 ignore if */
    if (_temp80 instanceof Completion) {
      _temp80 = _temp80.Value;
    }
    const S = _temp80;
    let _temp81 = Get(rx, Value('lastIndex'));
    /* c8 ignore if */
    if (_temp81 instanceof AbruptCompletion) {
      return _temp81;
    }
    /* c8 ignore if */
    if (_temp81 instanceof Completion) {
      _temp81 = _temp81.Value;
    }
    const previousLastIndex = _temp81;
    if (SameValue(previousLastIndex, F(+0)) === Value.false) {
      let _temp82 = Set$1(rx, Value('lastIndex'), F(+0), Value.true);
      /* c8 ignore if */
      if (_temp82 instanceof AbruptCompletion) {
        return _temp82;
      }
      /* c8 ignore if */
      if (_temp82 instanceof Completion) {
        _temp82 = _temp82.Value;
      }
    }
    let _temp83 = RegExpExec(rx, S);
    /* c8 ignore if */
    if (_temp83 instanceof AbruptCompletion) {
      return _temp83;
    }
    /* c8 ignore if */
    if (_temp83 instanceof Completion) {
      _temp83 = _temp83.Value;
    }
    const result = _temp83;
    let _temp84 = Get(rx, Value('lastIndex'));
    /* c8 ignore if */
    if (_temp84 instanceof AbruptCompletion) {
      return _temp84;
    }
    /* c8 ignore if */
    if (_temp84 instanceof Completion) {
      _temp84 = _temp84.Value;
    }
    const currentLastIndex = _temp84;
    if (SameValue(currentLastIndex, previousLastIndex) === Value.false) {
      let _temp85 = Set$1(rx, Value('lastIndex'), previousLastIndex, Value.true);
      /* c8 ignore if */
      if (_temp85 instanceof AbruptCompletion) {
        return _temp85;
      }
      /* c8 ignore if */
      if (_temp85 instanceof Completion) {
        _temp85 = _temp85.Value;
      }
    }
    if (result === Value.null) {
      return F(-1);
    }
    return Get(result, Value('index'));
  }

  /** https://tc39.es/ecma262/#sec-get-regexp.prototype.source */
  RegExpProto_search.section = 'https://tc39.es/ecma262/#sec-regexp.prototype-@@search';
  function RegExpProto_sourceGetter(args, {
    thisValue
  }) {
    const R = thisValue;
    if (!(R instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'RegExp', R);
    }
    if (!('OriginalSource' in R)) {
      if (SameValue(R, exports.surroundingAgent.intrinsic('%RegExp.prototype%')) === Value.true) {
        return Value('(?:)');
      }
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'RegExp', R);
    }
    Assert('OriginalFlags' in R, "'OriginalFlags' in R");
    const src = R.OriginalSource;
    R.OriginalFlags;
    return EscapeRegExpPattern(src);
  }

  /** https://tc39.es/ecma262/#sec-regexp.prototype-@@split */
  RegExpProto_sourceGetter.section = 'https://tc39.es/ecma262/#sec-get-regexp.prototype.source';
  function RegExpProto_split([string = Value.undefined, limit = Value.undefined], {
    thisValue
  }) {
    const rx = thisValue;
    if (!(rx instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'RegExp', rx);
    }
    let _temp86 = ToString(string);
    /* c8 ignore if */
    if (_temp86 instanceof AbruptCompletion) {
      return _temp86;
    }
    /* c8 ignore if */
    if (_temp86 instanceof Completion) {
      _temp86 = _temp86.Value;
    }
    const S = _temp86;
    let _temp87 = SpeciesConstructor(rx, exports.surroundingAgent.intrinsic('%RegExp%'));
    /* c8 ignore if */
    if (_temp87 instanceof AbruptCompletion) {
      return _temp87;
    }
    /* c8 ignore if */
    if (_temp87 instanceof Completion) {
      _temp87 = _temp87.Value;
    }
    const C = _temp87;
    let _temp88 = Get(rx, Value('flags'));
    /* c8 ignore if */
    if (_temp88 instanceof AbruptCompletion) {
      return _temp88;
    }
    /* c8 ignore if */
    if (_temp88 instanceof Completion) {
      _temp88 = _temp88.Value;
    }
    const flagsValue = _temp88;
    let _temp89 = ToString(flagsValue);
    /* c8 ignore if */
    if (_temp89 instanceof AbruptCompletion) {
      return _temp89;
    }
    /* c8 ignore if */
    if (_temp89 instanceof Completion) {
      _temp89 = _temp89.Value;
    }
    const flags = _temp89.stringValue();
    const unicodeMatching = flags.includes('u') ? Value.true : Value.false;
    const newFlags = flags.includes('y') ? Value(flags) : Value(`${flags}y`);
    let _temp90 = Construct(C, [rx, newFlags]);
    /* c8 ignore if */
    if (_temp90 instanceof AbruptCompletion) {
      return _temp90;
    }
    /* c8 ignore if */
    if (_temp90 instanceof Completion) {
      _temp90 = _temp90.Value;
    }
    const splitter = _temp90;
    let _temp91 = ArrayCreate(0);
    Assert(!(_temp91 instanceof AbruptCompletion), "ArrayCreate(0)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp91 instanceof Completion) {
      _temp91 = _temp91.Value;
    }
    const A = _temp91;
    let lengthA = 0;
    let lim;
    if (limit === Value.undefined) {
      lim = 2 ** 32 - 1;
    } else {
      let _temp92 = ToUint32(limit);
      /* c8 ignore if */
      if (_temp92 instanceof AbruptCompletion) {
        return _temp92;
      }
      /* c8 ignore if */
      if (_temp92 instanceof Completion) {
        _temp92 = _temp92.Value;
      }
      lim = R(_temp92);
    }
    const size = S.stringValue().length;
    let p = 0;
    if (lim === 0) {
      return A;
    }
    if (size === 0) {
      let _temp93 = RegExpExec(splitter, S);
      /* c8 ignore if */
      if (_temp93 instanceof AbruptCompletion) {
        return _temp93;
      }
      /* c8 ignore if */
      if (_temp93 instanceof Completion) {
        _temp93 = _temp93.Value;
      }
      const z = _temp93;
      if (z !== Value.null) {
        return A;
      }
      let _temp94 = CreateDataProperty(A, Value('0'), S);
      Assert(!(_temp94 instanceof AbruptCompletion), "CreateDataProperty(A, Value('0'), S)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp94 instanceof Completion) {
        _temp94 = _temp94.Value;
      }
      return A;
    }
    let q = p;
    while (q < size) {
      let _temp95 = Set$1(splitter, Value('lastIndex'), F(q), Value.true);
      /* c8 ignore if */
      if (_temp95 instanceof AbruptCompletion) {
        return _temp95;
      }
      /* c8 ignore if */
      if (_temp95 instanceof Completion) {
        _temp95 = _temp95.Value;
      }
      let _temp96 = RegExpExec(splitter, S);
      /* c8 ignore if */
      if (_temp96 instanceof AbruptCompletion) {
        return _temp96;
      }
      /* c8 ignore if */
      if (_temp96 instanceof Completion) {
        _temp96 = _temp96.Value;
      }
      const z = _temp96;
      if (z === Value.null) {
        q = AdvanceStringIndex(S, q, unicodeMatching);
      } else {
        let _temp97 = Get(splitter, Value('lastIndex'));
        /* c8 ignore if */
        if (_temp97 instanceof AbruptCompletion) {
          return _temp97;
        }
        /* c8 ignore if */
        if (_temp97 instanceof Completion) {
          _temp97 = _temp97.Value;
        }
        const lastIndex = _temp97;
        let _temp98 = ToLength(lastIndex);
        /* c8 ignore if */
        if (_temp98 instanceof AbruptCompletion) {
          return _temp98;
        }
        /* c8 ignore if */
        if (_temp98 instanceof Completion) {
          _temp98 = _temp98.Value;
        }
        let e = R(_temp98);
        e = Math.min(e, size);
        if (e === p) {
          q = AdvanceStringIndex(S, q, unicodeMatching);
        } else {
          const T = Value(S.stringValue().substring(p, q));
          let _temp105 = ToString(F(lengthA));
          Assert(!(_temp105 instanceof AbruptCompletion), "ToString(F(lengthA))" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp105 instanceof Completion) {
            _temp105 = _temp105.Value;
          }
          let _temp99 = CreateDataProperty(A, _temp105, T);
          Assert(!(_temp99 instanceof AbruptCompletion), "CreateDataProperty(A, X(ToString(F(lengthA))), T)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp99 instanceof Completion) {
            _temp99 = _temp99.Value;
          }
          lengthA += 1;
          if (lengthA === lim) {
            return A;
          }
          p = e;
          let _temp100 = LengthOfArrayLike(z);
          /* c8 ignore if */
          if (_temp100 instanceof AbruptCompletion) {
            return _temp100;
          }
          /* c8 ignore if */
          if (_temp100 instanceof Completion) {
            _temp100 = _temp100.Value;
          }
          let numberOfCaptures = _temp100;
          numberOfCaptures = Math.max(numberOfCaptures - 1, 0);
          let i = 1;
          while (i <= numberOfCaptures) {
            let _temp103 = ToString(F(i));
            Assert(!(_temp103 instanceof AbruptCompletion), "ToString(F(i))" + ' returned an abrupt completion');
            /* c8 ignore if */
            if (_temp103 instanceof Completion) {
              _temp103 = _temp103.Value;
            }
            let _temp101 = Get(z, _temp103);
            /* c8 ignore if */
            if (_temp101 instanceof AbruptCompletion) {
              return _temp101;
            }
            /* c8 ignore if */
            if (_temp101 instanceof Completion) {
              _temp101 = _temp101.Value;
            }
            const nextCapture = _temp101;
            let _temp104 = ToString(F(lengthA));
            Assert(!(_temp104 instanceof AbruptCompletion), "ToString(F(lengthA))" + ' returned an abrupt completion');
            /* c8 ignore if */
            if (_temp104 instanceof Completion) {
              _temp104 = _temp104.Value;
            }
            let _temp102 = CreateDataProperty(A, _temp104, nextCapture);
            Assert(!(_temp102 instanceof AbruptCompletion), "CreateDataProperty(A, X(ToString(F(lengthA))), nextCapture)" + ' returned an abrupt completion');
            /* c8 ignore if */
            if (_temp102 instanceof Completion) {
              _temp102 = _temp102.Value;
            }
            i += 1;
            lengthA += 1;
            if (lengthA === lim) {
              return A;
            }
          }
          q = p;
        }
      }
    }
    const T = Value(S.stringValue().substring(p, size));
    let _temp107 = ToString(F(lengthA));
    Assert(!(_temp107 instanceof AbruptCompletion), "ToString(F(lengthA))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp107 instanceof Completion) {
      _temp107 = _temp107.Value;
    }
    let _temp106 = CreateDataProperty(A, _temp107, T);
    Assert(!(_temp106 instanceof AbruptCompletion), "CreateDataProperty(A, X(ToString(F(lengthA))), T)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp106 instanceof Completion) {
      _temp106 = _temp106.Value;
    }
    return A;
  }

  /** https://tc39.es/ecma262/#sec-get-regexp.prototype.sticky */
  RegExpProto_split.section = 'https://tc39.es/ecma262/#sec-regexp.prototype-@@split';
  function RegExpProto_stickyGetter(args, {
    thisValue
  }) {
    // 1. Let R be the this value.
    const R = thisValue;
    // 2. Let cu be the code unit 0x0097 (LATIN SMALL LETTER Y).
    const cu = 'y';
    // 3. Return ? RegExpHasFlag(R, cu).
    return RegExpHasFlag(R, cu);
  }

  /** https://tc39.es/ecma262/#sec-regexp.prototype.test */
  RegExpProto_stickyGetter.section = 'https://tc39.es/ecma262/#sec-get-regexp.prototype.sticky';
  function RegExpProto_test([S = Value.undefined], {
    thisValue
  }) {
    const R = thisValue;
    if (!(R instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'RegExp', R);
    }
    let _temp108 = ToString(S);
    /* c8 ignore if */
    if (_temp108 instanceof AbruptCompletion) {
      return _temp108;
    }
    /* c8 ignore if */
    if (_temp108 instanceof Completion) {
      _temp108 = _temp108.Value;
    }
    const string = _temp108;
    let _temp109 = RegExpExec(R, string);
    /* c8 ignore if */
    if (_temp109 instanceof AbruptCompletion) {
      return _temp109;
    }
    /* c8 ignore if */
    if (_temp109 instanceof Completion) {
      _temp109 = _temp109.Value;
    }
    const match = _temp109;
    if (match !== Value.null) {
      return Value.true;
    }
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-regexp.prototype.tostring */
  RegExpProto_test.section = 'https://tc39.es/ecma262/#sec-regexp.prototype.test';
  function RegExpProto_toString(args, {
    thisValue
  }) {
    const R = thisValue;
    if (!(R instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'RegExp', R);
    }
    let _temp112 = Get(R, Value('source'));
    /* c8 ignore if */
    if (_temp112 instanceof AbruptCompletion) {
      return _temp112;
    }
    /* c8 ignore if */
    if (_temp112 instanceof Completion) {
      _temp112 = _temp112.Value;
    }
    let _temp110 = ToString(_temp112);
    /* c8 ignore if */
    if (_temp110 instanceof AbruptCompletion) {
      return _temp110;
    }
    /* c8 ignore if */
    if (_temp110 instanceof Completion) {
      _temp110 = _temp110.Value;
    }
    const pattern = _temp110;
    let _temp113 = Get(R, Value('flags'));
    /* c8 ignore if */
    if (_temp113 instanceof AbruptCompletion) {
      return _temp113;
    }
    /* c8 ignore if */
    if (_temp113 instanceof Completion) {
      _temp113 = _temp113.Value;
    }
    let _temp111 = ToString(_temp113);
    /* c8 ignore if */
    if (_temp111 instanceof AbruptCompletion) {
      return _temp111;
    }
    /* c8 ignore if */
    if (_temp111 instanceof Completion) {
      _temp111 = _temp111.Value;
    }
    const flags = _temp111;
    const result = `/${pattern.stringValue()}/${flags.stringValue()}`;
    return Value(result);
  }

  /** https://tc39.es/ecma262/#sec-get-regexp.prototype.unicode */
  RegExpProto_toString.section = 'https://tc39.es/ecma262/#sec-regexp.prototype.tostring';
  function RegExpProto_unicodeGetter(args, {
    thisValue
  }) {
    // 1. Let R be the this value.
    const R = thisValue;
    // 2. Let cu be the code unit 0x0075 (LATIN SMALL LETTER U).
    const cu = 'u';
    // 3. Return ? RegExpHasFlag(R, cu).
    return RegExpHasFlag(R, cu);
  }
  RegExpProto_unicodeGetter.section = 'https://tc39.es/ecma262/#sec-get-regexp.prototype.unicode';
  function bootstrapRegExpPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['exec', RegExpProto_exec, 1], ['dotAll', [RegExpProto_dotAllGetter]], ['flags', [RegExpProto_flagsGetter]], ['global', [RegExpProto_globalGetter]], ['hasIndices', [RegExpProto_hasIndicesGetter]], ['ignoreCase', [RegExpProto_ignoreCaseGetter]], [wellKnownSymbols.match, RegExpProto_match, 1], [wellKnownSymbols.matchAll, RegExpProto_matchAll, 1], ['multiline', [RegExpProto_multilineGetter]], [wellKnownSymbols.replace, RegExpProto_replace, 2], [wellKnownSymbols.search, RegExpProto_search, 1], ['source', [RegExpProto_sourceGetter]], [wellKnownSymbols.split, RegExpProto_split, 2], ['sticky', [RegExpProto_stickyGetter]], ['test', RegExpProto_test, 1], ['toString', RegExpProto_toString, 0], ['unicode', [RegExpProto_unicodeGetter]]], realmRec.Intrinsics['%Object.prototype%']);
    realmRec.Intrinsics['%RegExp.prototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-regexp-constructor */
  function RegExpConstructor([pattern = Value.undefined, flags = Value.undefined], {
    NewTarget
  }) {
    let _temp = IsRegExp(pattern);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 1. Let patternIsRegExp be ? IsRegExp(pattern).
    const patternIsRegExp = _temp;
    let newTarget;
    // 2. If NewTarget is undefined, then
    if (NewTarget === Value.undefined) {
      // a. Let newTarget be the active function object.
      newTarget = exports.surroundingAgent.activeFunctionObject;
      // b. If patternIsRegExp is true and flags is undefined, then
      if (patternIsRegExp === Value.true && flags === Value.undefined) {
        let _temp2 = Get(pattern, Value('constructor'));
        /* c8 ignore if */
        if (_temp2 instanceof AbruptCompletion) {
          return _temp2;
        }
        /* c8 ignore if */
        if (_temp2 instanceof Completion) {
          _temp2 = _temp2.Value;
        }
        // i. Let patternConstructor be ? Get(pattern, "constructor").
        const patternConstructor = _temp2;
        // ii. If SameValue(newTarget, patternConstructor) is true, return pattern.
        if (SameValue(newTarget, patternConstructor) === Value.true) {
          return pattern;
        }
      }
    } else {
      // 3. Else, let newTarget be NewTarget.
      newTarget = NewTarget;
    }
    let P;
    let F;
    // 4. If Type(pattern) is Object and pattern has a [[RegExpMatcher]] internal slot, then
    if (pattern instanceof ObjectValue && 'RegExpMatcher' in pattern) {
      // a. Let P be pattern.[[OriginalSource]].
      P = pattern.OriginalSource;
      // b. If flags is undefined, let F be pattern.[[OriginalFlags]].
      if (flags === Value.undefined) {
        F = pattern.OriginalFlags;
      } else {
        // c. Else, let F be flags.
        F = flags;
      }
    } else if (patternIsRegExp === Value.true) {
      let _temp3 = Get(pattern, Value('source'));
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      // 5. Else if patternIsRegExp is true, then
      // a. Else if patternIsRegExp is true, then
      P = _temp3;
      // b. If flags is undefined, then
      if (flags === Value.undefined) {
        let _temp4 = Get(pattern, Value('flags'));
        /* c8 ignore if */
        if (_temp4 instanceof AbruptCompletion) {
          return _temp4;
        }
        /* c8 ignore if */
        if (_temp4 instanceof Completion) {
          _temp4 = _temp4.Value;
        }
        // i. Let F be ? Get(pattern, "flags").
        F = _temp4;
      } else {
        // c. Else, let F be flags.
        F = flags;
      }
    } else {
      // 6. Else,
      // a. Let P be pattern.
      P = pattern;
      // b. Let F be flags.
      F = flags;
    }
    // 7. Let O be ? RegExpAlloc(newTarget).
    let _temp5 = RegExpAlloc(newTarget);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const O = _temp5;
    // 8. Return ? RegExpInitialize(O, P, F).
    return RegExpInitialize(O, P, F);
  }

  /** https://tc39.es/ecma262/#sec-get-regexp-@@species */
  RegExpConstructor.section = 'https://tc39.es/ecma262/#sec-regexp-constructor';
  function RegExp_speciesGetter(args, {
    thisValue
  }) {
    return thisValue;
  }
  RegExp_speciesGetter.section = 'https://tc39.es/ecma262/#sec-get-regexp-@@species';
  function bootstrapRegExp(realmRec) {
    const proto = realmRec.Intrinsics['%RegExp.prototype%'];
    const cons = bootstrapConstructor(realmRec, RegExpConstructor, 'RegExp', 2, proto, [[wellKnownSymbols.species, [RegExp_speciesGetter]]]);
    realmRec.Intrinsics['%RegExp%'] = cons;
  }

  /** https://tc39.es/ecma262/#sec-promise.prototype.catch */
  function PromiseProto_catch([onRejected = Value.undefined], {
    thisValue
  }) {
    // 1. Let promise be the this value.
    const promise = thisValue;
    // 2. Return ? Invoke(promise, "then", « undefined, onRejected »).
    return Invoke(promise, Value('then'), [Value.undefined, onRejected]);
  }

  /** https://tc39.es/ecma262/#sec-promise.prototype.finally */
  PromiseProto_catch.section = 'https://tc39.es/ecma262/#sec-promise.prototype.catch';
  function PromiseProto_finally([onFinally = Value.undefined], {
    thisValue
  }) {
    // 1. Let promise be the this value.
    const promise = thisValue;
    // 2. If Type(promise) is not Object, throw a TypeError exception.
    if (!(promise instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'Promise', promise);
    }
    // 3. Let C be ? SpeciesConstructor(promise, %Promise%).
    const C = SpeciesConstructor(promise, exports.surroundingAgent.intrinsic('%Promise%'));
    // 4. Assert: IsConstructor(C) is true.
    Assert(IsConstructor(C) === Value.true, "IsConstructor(C) === Value.true");
    let thenFinally;
    let catchFinally;
    // 5. If IsCallable(onFinally) is false, then
    if (IsCallable(onFinally) === Value.false) {
      // a. Let thenFinally be onFinally.
      thenFinally = onFinally;
      // b. Let catchFinally be onFinally.
      catchFinally = onFinally;
    } else {
      // 6. Else,
      // a. Let thenFinallyClosure be a new Abstract Closure with parameters (value) that captures onFinally and C and performs the following steps when called:
      const thenFinallyClosure = ([value = Value.undefined]) => {
        let _temp = Call(onFinally, Value.undefined);
        /* c8 ignore if */
        if (_temp instanceof AbruptCompletion) {
          return _temp;
        }
        /* c8 ignore if */
        if (_temp instanceof Completion) {
          _temp = _temp.Value;
        }
        // i. Let result be ? Call(onFinally, undefined).
        const result = _temp;
        // ii. Let promise be ? PromiseResolve(C, result).
        let _temp2 = PromiseResolve(C, result);
        /* c8 ignore if */
        if (_temp2 instanceof AbruptCompletion) {
          return _temp2;
        }
        /* c8 ignore if */
        if (_temp2 instanceof Completion) {
          _temp2 = _temp2.Value;
        }
        const promiseInner = _temp2;
        // iii. Let returnValue be a new Abstract Closure with no parameters that captures value and performs the following steps when called:
        //   1. Return value.
        const returnValue = () => value;
        // iv. Let valueThunk be ! CreateBuiltinFunction(returnValue, 0, "", « »).
        let _temp3 = CreateBuiltinFunction(returnValue, 0, Value(''), []);
        Assert(!(_temp3 instanceof AbruptCompletion), "CreateBuiltinFunction(returnValue, 0, Value(''), [])" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
        const valueThunk = _temp3;
        // v. Return ? Invoke(promise, "then", « valueThunk »).
        return Invoke(promiseInner, Value('then'), [valueThunk]);
      };
      // b. Let thenFinally be ! CreateBuiltinFunction(thenFinallyClosure, 1, "", « »).
      let _temp4 = CreateBuiltinFunction(thenFinallyClosure, 1, Value(''), []);
      Assert(!(_temp4 instanceof AbruptCompletion), "CreateBuiltinFunction(thenFinallyClosure, 1, Value(''), [])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      thenFinally = _temp4;
      // c. Let catchFinallyClosure be a new Abstract Closure with parameters (reason) that captures onFinally and C and performs the following steps when called:
      const catchFinallyClosure = ([reason = Value.undefined]) => {
        let _temp5 = Call(onFinally, Value.undefined);
        /* c8 ignore if */
        if (_temp5 instanceof AbruptCompletion) {
          return _temp5;
        }
        /* c8 ignore if */
        if (_temp5 instanceof Completion) {
          _temp5 = _temp5.Value;
        }
        // i. Let result be ? Call(onFinally, undefined).
        const result = _temp5;
        // ii. Let promise be ? PromiseResolve(C, result).
        let _temp6 = PromiseResolve(C, result);
        /* c8 ignore if */
        if (_temp6 instanceof AbruptCompletion) {
          return _temp6;
        }
        /* c8 ignore if */
        if (_temp6 instanceof Completion) {
          _temp6 = _temp6.Value;
        }
        const promiseInner = _temp6;
        // iii. Let throwReason be a new Abstract Closure with no parameters that captures reason and performs the following steps when called:
        //   1. Return ThrowCompletion(reason).
        const throwReason = () => ThrowCompletion(reason);
        // iv. Let thrower be ! CreateBuiltinFunction(throwReason, 0, "", « »).
        let _temp7 = CreateBuiltinFunction(throwReason, 0, Value(''), []);
        Assert(!(_temp7 instanceof AbruptCompletion), "CreateBuiltinFunction(throwReason, 0, Value(''), [])" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp7 instanceof Completion) {
          _temp7 = _temp7.Value;
        }
        const thrower = _temp7;
        // v. Return ? Invoke(promise, "then", « thrower »).
        return Invoke(promiseInner, Value('then'), [thrower]);
      };
      // d. Let catchFinally be ! CreateBuiltinFunction(catchFinallyClosure, 1, "", « »).
      let _temp8 = CreateBuiltinFunction(catchFinallyClosure, 1, Value(''), []);
      Assert(!(_temp8 instanceof AbruptCompletion), "CreateBuiltinFunction(catchFinallyClosure, 1, Value(''), [])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp8 instanceof Completion) {
        _temp8 = _temp8.Value;
      }
      catchFinally = _temp8;
    }
    // 7. Return ? Invoke(promise, "then", « thenFinally, catchFinally »).
    return Invoke(promise, Value('then'), [thenFinally, catchFinally]);
  }

  /** https://tc39.es/ecma262/#sec-promise.prototype.then */
  PromiseProto_finally.section = 'https://tc39.es/ecma262/#sec-promise.prototype.finally';
  function PromiseProto_then([onFulfilled = Value.undefined, onRejected = Value.undefined], {
    thisValue
  }) {
    // 1. Let promise be the this value.
    const promise = thisValue;
    // 2. If IsPromise(promise) is false, throw a TypeError exception.
    if (IsPromise(promise) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'Promise', promise);
    }
    // 3. Let C be ? SpeciesConstructor(promise, %Promise%).
    let _temp9 = SpeciesConstructor(promise, exports.surroundingAgent.intrinsic('%Promise%'));
    /* c8 ignore if */
    if (_temp9 instanceof AbruptCompletion) {
      return _temp9;
    }
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    const C = _temp9;
    // 4. Let resultCapability be ? NewPromiseCapability(C).
    let _temp10 = NewPromiseCapability(C);
    /* c8 ignore if */
    if (_temp10 instanceof AbruptCompletion) {
      return _temp10;
    }
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    const resultCapability = _temp10;
    // 5. Return PerformPromiseThen(promise, onFulfilled, onRejected, resultCapability).
    return PerformPromiseThen(promise, onFulfilled, onRejected, resultCapability);
  }
  PromiseProto_then.section = 'https://tc39.es/ecma262/#sec-promise.prototype.then';
  function bootstrapPromisePrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['catch', PromiseProto_catch, 1], ['finally', PromiseProto_finally, 1], ['then', PromiseProto_then, 2]], realmRec.Intrinsics['%Object.prototype%'], 'Promise');
    let _temp11 = Get(proto, Value('then'));
    Assert(!(_temp11 instanceof AbruptCompletion), "Get(proto, Value('then'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    realmRec.Intrinsics['%Promise.prototype.then%'] = _temp11;
    realmRec.Intrinsics['%Promise.prototype%'] = proto;
  }

  // @ts-nocheck

  /** https://tc39.es/ecma262/#sec-promise-executor */
  function PromiseConstructor([executor = Value.undefined], {
    NewTarget
  }) {
    // 1. If NewTarget is undefined, throw a TypeError exception.
    if (NewTarget === Value.undefined) {
      return exports.surroundingAgent.Throw('TypeError', 'ConstructorNonCallable', this);
    }
    // 2. If IsCallable(executor) is false, throw a TypeError exception.
    if (IsCallable(executor) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', executor);
    }
    // 3. Let promise be ? OrdinaryCreateFromConstructor(NewTarget, "%Promise.prototype%", « [[PromiseState]], [[PromiseResult]], [[PromiseFulfillReactions]], [[PromiseRejectReactions]], [[PromiseIsHandled]] »).
    let _temp = OrdinaryCreateFromConstructor(NewTarget, '%Promise.prototype%', ['PromiseState', 'PromiseResult', 'PromiseFulfillReactions', 'PromiseRejectReactions', 'PromiseIsHandled']);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const promise = _temp;
    // 4. Set promise.[[PromiseState]] to pending.
    promise.PromiseState = 'pending';
    // 5. Set promise.[[PromiseFulfillReactions]] to a new empty List.
    promise.PromiseFulfillReactions = [];
    // 6. Set promise.[[PromiseFulfillReactions]] to a new empty List.
    promise.PromiseRejectReactions = [];
    // 7. Set promise.[[PromiseIsHandled]] to false.
    promise.PromiseIsHandled = Value.false;
    // 8. Let resolvingFunctions be CreateResolvingFunctions(promise).
    const resolvingFunctions = CreateResolvingFunctions(promise);
    // 9. Let completion be Call(executor, undefined, « resolvingFunctions.[[Resolve]], resolvingFunctions.[[Reject]] »).
    const completion = Call(executor, Value.undefined, [resolvingFunctions.Resolve, resolvingFunctions.Reject]);
    // 10. If completion is an abrupt completion, then
    if (completion instanceof AbruptCompletion) {
      let _temp2 = Call(resolvingFunctions.Reject, Value.undefined, [completion.Value]);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
    }
    // 11. Return promise.
    return promise;
  }

  /** https://tc39.es/ecma262/#sec-promise.all-resolve-element-functions */
  PromiseConstructor.section = 'https://tc39.es/ecma262/#sec-promise-executor';
  function PromiseAllResolveElementFunctions([x = Value.undefined]) {
    const F = exports.surroundingAgent.activeFunctionObject;
    const alreadyCalled = F.AlreadyCalled;
    if (alreadyCalled.Value === true) {
      return Value.undefined;
    }
    alreadyCalled.Value = true;
    const index = F.Index;
    const values = F.Values;
    const promiseCapability = F.Capability;
    const remainingElementsCount = F.RemainingElements;
    values[index] = x;
    remainingElementsCount.Value -= 1;
    if (remainingElementsCount.Value === 0) {
      const valuesArray = CreateArrayFromList(values);
      return Call(promiseCapability.Resolve, Value.undefined, [valuesArray]);
    }
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-getpromiseresolve */
  PromiseAllResolveElementFunctions.section = 'https://tc39.es/ecma262/#sec-promise.all-resolve-element-functions';
  function GetPromiseResolve(promiseConstructor) {
    // 1. Assert: IsConstructor(promiseConstructor) is true.
    Assert(IsConstructor(promiseConstructor) === Value.true, "IsConstructor(promiseConstructor) === Value.true");
    // 2. Let promiseResolve be ? Get(promiseConstructor, "resolve").
    let _temp3 = Get(promiseConstructor, Value('resolve'));
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const promiseResolve = _temp3;
    // 3. If IsCallable(promiseResolve) is false, throw a TypeError exception.
    if (IsCallable(promiseResolve) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', promiseResolve);
    }
    // 4. Return promiseResolve.
    return promiseResolve;
  }

  /** https://tc39.es/ecma262/#sec-performpromiseall */
  GetPromiseResolve.section = 'https://tc39.es/ecma262/#sec-getpromiseresolve';
  function PerformPromiseAll(iteratorRecord, constructor, resultCapability, promiseResolve) {
    // 1. Assert: IsConstructor(constructor) is true.
    Assert(IsConstructor(constructor) === Value.true, "IsConstructor(constructor) === Value.true");
    // 2. Assert: resultCapability is a PromiseCapability Record.
    Assert(resultCapability instanceof PromiseCapabilityRecord, "resultCapability instanceof PromiseCapabilityRecord");
    // 3. Assert: IsCallable(promiseResolve) is true.
    Assert(IsCallable(promiseResolve) === Value.true, "IsCallable(promiseResolve) === Value.true");
    // 4. Let values be a new empty List.
    const values = [];
    // 5. Let remainingElementsCount be the Record { [[Value]]: 1 }.
    const remainingElementsCount = {
      Value: 1
    };
    // 6. Let index be 0.
    let index = 0;
    // 7. Repeat,
    while (true) {
      // a. Let next be IteratorStep(iteratorRecord).
      let next = IteratorStep(iteratorRecord);
      // b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.
      if (next instanceof AbruptCompletion) {
        iteratorRecord.Done = Value.true;
      }
      // c. ReturnIfAbrupt(next).
      /* c8 ignore if */
      if (next instanceof AbruptCompletion) {
        return next;
      }
      /* c8 ignore if */
      if (next instanceof Completion) {
        next = next.Value;
      }
      // d. If next is false, then
      if (next === Value.false) {
        // i. Set iteratorRecord.[[Done]] to true.
        iteratorRecord.Done = Value.true;
        // ii. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.
        remainingElementsCount.Value -= 1;
        // iii. If remainingElementsCount.[[Value]] is 0, then
        if (remainingElementsCount.Value === 0) {
          // 1. Let valuesArray be ! CreateArrayFromList(values).
          const valuesArray = CreateArrayFromList(values);
          // 2. Perform ? Call(resultCapability.[[Resolve]], undefined, « valuesArray »).
          let _temp4 = Call(resultCapability.Resolve, Value.undefined, [valuesArray]);
          /* c8 ignore if */
          if (_temp4 instanceof AbruptCompletion) {
            return _temp4;
          }
          /* c8 ignore if */
          if (_temp4 instanceof Completion) {
            _temp4 = _temp4.Value;
          }
        }
        // iv. Return resultCapability.[[Promise]].
        return resultCapability.Promise;
      }
      // e. Let nextValue be IteratorValue(next).
      let nextValue = IteratorValue(next);
      // f. If nextValue is an abrupt completion, set iteratorRecord.[[Done]] to true.
      if (nextValue instanceof AbruptCompletion) {
        iteratorRecord.Done = Value.true;
      }
      // g. ReturnIfAbrupt(nextValue).
      /* c8 ignore if */
      if (nextValue instanceof AbruptCompletion) {
        return nextValue;
      }
      /* c8 ignore if */
      if (nextValue instanceof Completion) {
        nextValue = nextValue.Value;
      }
      // h. Append undefined to values.
      values.push(Value.undefined);
      // i. Let nextPromise be ? Call(promiseResolve, constructor, « nextValue »).
      let _temp5 = Call(promiseResolve, constructor, [nextValue]);
      /* c8 ignore if */
      if (_temp5 instanceof AbruptCompletion) {
        return _temp5;
      }
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      const nextPromise = _temp5;
      // j. Let steps be the algorithm steps defined in Promise.all Resolve Element Functions.
      const steps = PromiseAllResolveElementFunctions;
      // k. Let length be the number of non-optional parameters of the function definition in Promise.all Resolve Element Functions.
      const length = 1;
      // l. Let onFulfilled be ! CreateBuiltinFunction(steps, length, "", « [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] »).
      let _temp6 = CreateBuiltinFunction(steps, length, Value(''), ['AlreadyCalled', 'Index', 'Values', 'Capability', 'RemainingElements']);
      Assert(!(_temp6 instanceof AbruptCompletion), "CreateBuiltinFunction(steps, length, Value(''), [\n      'AlreadyCalled', 'Index', 'Values', 'Capability', 'RemainingElements',\n    ])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
      const onFulfilled = _temp6;
      // m. Set onFulfilled.[[AlreadyCalled]] to the Record { [[Value]]: false }.
      onFulfilled.AlreadyCalled = {
        Value: false
      };
      // n. Set onFulfilled.[[Index]] to index.
      onFulfilled.Index = index;
      // o. Set onFulfilled.[[Values]] to values.
      onFulfilled.Values = values;
      // p. Set onFulfilled.[[Capability]] to resultCapability.
      onFulfilled.Capability = resultCapability;
      // q. Set onFulfilled.[[RemainingElements]] to remainingElementsCount.
      onFulfilled.RemainingElements = remainingElementsCount;
      // r. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] + 1.
      remainingElementsCount.Value += 1;
      // s. Perform ? Invoke(nextPromise, "then", « onFulfilled, resultCapability.[[Reject]] »).
      let _temp7 = Invoke(nextPromise, Value('then'), [onFulfilled, resultCapability.Reject]);
      /* c8 ignore if */
      if (_temp7 instanceof AbruptCompletion) {
        return _temp7;
      }
      /* c8 ignore if */
      if (_temp7 instanceof Completion) {
        _temp7 = _temp7.Value;
      }
      // t. Set index to index + 1.
      index += 1;
    }
  }

  /** https://tc39.es/ecma262/#sec-promise.all */
  PerformPromiseAll.section = 'https://tc39.es/ecma262/#sec-performpromiseall';
  function Promise_all([iterable = Value.undefined], {
    thisValue
  }) {
    // 1. Let C be the this value.
    const C = thisValue;
    // 2. Let promiseCapability be ? NewPromiseCapability(C).
    let _temp8 = NewPromiseCapability(C);
    /* c8 ignore if */
    if (_temp8 instanceof AbruptCompletion) {
      return _temp8;
    }
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    const promiseCapability = _temp8;
    // 3. Let promiseResolve be GetPromiseResolve(C).
    let promiseResolve = GetPromiseResolve(C);
    // 4. IfAbruptRejectPromise(promiseResolve, promiseCapability).
    /* c8 ignore if */
    if (promiseResolve instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [promiseResolve.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (promiseResolve instanceof Completion) {
      promiseResolve = promiseResolve.Value;
    }
    // 5. Let iteratorRecord be GetIterator(iterable).
    let iteratorRecord = GetIterator(iterable);
    // 6. IfAbruptRejectPromise(iteratorRecord, promiseCapability).
    /* c8 ignore if */
    if (iteratorRecord instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [iteratorRecord.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (iteratorRecord instanceof Completion) {
      iteratorRecord = iteratorRecord.Value;
    }
    // 7. Let result be PerformPromiseAll(iteratorRecord, C, promiseCapability, promiseResolve).
    let result = EnsureCompletion(PerformPromiseAll(iteratorRecord, C, promiseCapability, promiseResolve));
    // 8. If result is an abrupt completion, then
    if (result instanceof AbruptCompletion) {
      // a. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).
      if (iteratorRecord.Done === Value.false) {
        result = IteratorClose(iteratorRecord, result);
      }
      // b. IfAbruptRejectPromise(result, promiseCapability).
      /* c8 ignore if */
      if (result instanceof AbruptCompletion) {
        const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [result.Value]);
        if (hygenicTemp2 instanceof AbruptCompletion) {
          return hygenicTemp2;
        }
        return promiseCapability.Promise;
      }
      /* c8 ignore if */
      if (result instanceof Completion) {
        result = result.Value;
      }
    }
    // 9. Return Completion(result).
    return Completion(result);
  }
  Promise_all.section = 'https://tc39.es/ecma262/#sec-promise.all';
  function PromiseAllSettledResolveElementFunctions([x = Value.undefined]) {
    const F = exports.surroundingAgent.activeFunctionObject;
    const alreadyCalled = F.AlreadyCalled;
    if (alreadyCalled.Value === true) {
      return Value.undefined;
    }
    alreadyCalled.Value = true;
    const index = F.Index;
    const values = F.Values;
    const promiseCapability = F.Capability;
    const remainingElementsCount = F.RemainingElements;
    let _temp9 = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%Object.prototype%'));
    Assert(!(_temp9 instanceof AbruptCompletion), "OrdinaryObjectCreate(surroundingAgent.intrinsic('%Object.prototype%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    const obj = _temp9;
    let _temp10 = CreateDataProperty(obj, Value('status'), Value('fulfilled'));
    Assert(!(_temp10 instanceof AbruptCompletion), "CreateDataProperty(obj, Value('status'), Value('fulfilled'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    let _temp11 = CreateDataProperty(obj, Value('value'), x);
    Assert(!(_temp11 instanceof AbruptCompletion), "CreateDataProperty(obj, Value('value'), x)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    values[index] = obj;
    remainingElementsCount.Value -= 1;
    if (remainingElementsCount.Value === 0) {
      let _temp12 = CreateArrayFromList(values);
      Assert(!(_temp12 instanceof AbruptCompletion), "CreateArrayFromList(values)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp12 instanceof Completion) {
        _temp12 = _temp12.Value;
      }
      const valuesArray = _temp12;
      return Call(promiseCapability.Resolve, Value.undefined, [valuesArray]);
    }
    return Value.undefined;
  }
  function PromiseAllSettledRejectElementFunctions([x = Value.undefined]) {
    const F = exports.surroundingAgent.activeFunctionObject;
    const alreadyCalled = F.AlreadyCalled;
    if (alreadyCalled.Value === true) {
      return Value.undefined;
    }
    alreadyCalled.Value = true;
    const index = F.Index;
    const values = F.Values;
    const promiseCapability = F.Capability;
    const remainingElementsCount = F.RemainingElements;
    let _temp13 = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%Object.prototype%'));
    Assert(!(_temp13 instanceof AbruptCompletion), "OrdinaryObjectCreate(surroundingAgent.intrinsic('%Object.prototype%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp13 instanceof Completion) {
      _temp13 = _temp13.Value;
    }
    const obj = _temp13;
    let _temp14 = CreateDataProperty(obj, Value('status'), Value('rejected'));
    Assert(!(_temp14 instanceof AbruptCompletion), "CreateDataProperty(obj, Value('status'), Value('rejected'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    let _temp15 = CreateDataProperty(obj, Value('reason'), x);
    Assert(!(_temp15 instanceof AbruptCompletion), "CreateDataProperty(obj, Value('reason'), x)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp15 instanceof Completion) {
      _temp15 = _temp15.Value;
    }
    values[index] = obj;
    remainingElementsCount.Value -= 1;
    if (remainingElementsCount.Value === 0) {
      let _temp16 = CreateArrayFromList(values);
      Assert(!(_temp16 instanceof AbruptCompletion), "CreateArrayFromList(values)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp16 instanceof Completion) {
        _temp16 = _temp16.Value;
      }
      const valuesArray = _temp16;
      return Call(promiseCapability.Resolve, Value.undefined, [valuesArray]);
    }
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-performpromiseallsettled */
  function PerformPromiseAllSettled(iteratorRecord, constructor, resultCapability, promiseResolve) {
    let _temp17 = IsConstructor(constructor) === Value.true;
    Assert(!(_temp17 instanceof AbruptCompletion), "IsConstructor(constructor) === Value.true" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp17 instanceof Completion) {
      _temp17 = _temp17.Value;
    }
    // 1. Assert: ! IsConstructor(constructor) is true.
    Assert(_temp17, "X(IsConstructor(constructor) === Value.true)");
    // 2. Assert: resultCapability is a PromiseCapability Record.
    Assert(resultCapability instanceof PromiseCapabilityRecord, "resultCapability instanceof PromiseCapabilityRecord");
    // 3. Assert: IsCallable(promiseResolve) is true.
    Assert(IsCallable(promiseResolve) === Value.true, "IsCallable(promiseResolve) === Value.true");
    // 4. Let values be a new empty List.
    const values = [];
    // 5. Let remainingElementsCount be the Record { [[Value]]: 1 }.
    const remainingElementsCount = {
      Value: 1
    };
    // 6. Let index be 0.
    let index = 0;
    // 7. Repeat,
    while (true) {
      // a. Let next be IteratorStep(iteratorRecord).
      let next = IteratorStep(iteratorRecord);
      // b. Let next be IteratorStep(iteratorRecord).
      if (next instanceof AbruptCompletion) {
        iteratorRecord.Done = Value.true;
      }
      // c. ReturnIfAbrupt(next).
      /* c8 ignore if */
      if (next instanceof AbruptCompletion) {
        return next;
      }
      /* c8 ignore if */
      if (next instanceof Completion) {
        next = next.Value;
      }
      // d. If next is false,
      if (next === Value.false) {
        // i. Set iteratorRecord.[[Done]] to true.
        iteratorRecord.Done = Value.true;
        // ii. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.
        remainingElementsCount.Value -= 1;
        // iii. If remainingElementsCount.[[Value]] is 0, then
        if (remainingElementsCount.Value === 0) {
          let _temp18 = CreateArrayFromList(values);
          Assert(!(_temp18 instanceof AbruptCompletion), "CreateArrayFromList(values)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp18 instanceof Completion) {
            _temp18 = _temp18.Value;
          }
          // 1. Let valuesArray be ! CreateArrayFromList(values).
          const valuesArray = _temp18;
          // 2. Perform ? Call(resultCapability.[[Resolve]], undefined, « valuesArray »).
          let _temp19 = Call(resultCapability.Resolve, Value.undefined, [valuesArray]);
          /* c8 ignore if */
          if (_temp19 instanceof AbruptCompletion) {
            return _temp19;
          }
          /* c8 ignore if */
          if (_temp19 instanceof Completion) {
            _temp19 = _temp19.Value;
          }
        }
        // iv. Return resultCapability.[[Promise]].
        return resultCapability.Promise;
      }
      // e. Let nextValue be IteratorValue(next).
      let nextValue = IteratorValue(next);
      // f. If nextValue is an abrupt completion, set iteratorRecord.[[Done]] to true.
      if (nextValue instanceof AbruptCompletion) {
        iteratorRecord.Done = Value.true;
      }
      // g. ReturnIfAbrupt(nextValue).
      /* c8 ignore if */
      if (nextValue instanceof AbruptCompletion) {
        return nextValue;
      }
      /* c8 ignore if */
      if (nextValue instanceof Completion) {
        nextValue = nextValue.Value;
      }
      // h. Append undefined to values.
      values.push(Value.undefined);
      // i. Let nextPromise be ? Call(promiseResolve, constructor, « nextValue »).
      let _temp20 = Call(promiseResolve, constructor, [nextValue]);
      /* c8 ignore if */
      if (_temp20 instanceof AbruptCompletion) {
        return _temp20;
      }
      /* c8 ignore if */
      if (_temp20 instanceof Completion) {
        _temp20 = _temp20.Value;
      }
      const nextPromise = _temp20;
      // j. Let stepsFulfilled be the algorithm steps defined in Promise.allSettled Resolve Element Functions.
      const stepsFulfilled = PromiseAllSettledResolveElementFunctions;
      // k. Let lengthFulfilled be the number of non-optional parameters of the function definition in Promise.allSettled Resolve Element Functions.
      const lengthFulfilled = 1;
      // l. Let onFulfilled be ! CreateBuiltinFunction(stepsFulfilled, lengthFulfilled, "", « [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] »).
      let _temp21 = CreateBuiltinFunction(stepsFulfilled, lengthFulfilled, Value(''), ['AlreadyCalled', 'Index', 'Values', 'Capability', 'RemainingElements']);
      Assert(!(_temp21 instanceof AbruptCompletion), "CreateBuiltinFunction(stepsFulfilled, lengthFulfilled, Value(''), [\n      'AlreadyCalled',\n      'Index',\n      'Values',\n      'Capability',\n      'RemainingElements',\n    ])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp21 instanceof Completion) {
        _temp21 = _temp21.Value;
      }
      const onFulfilled = _temp21;
      // m. Let alreadyCalled be the Record { [[Value]]: false }.
      const alreadyCalled = {
        Value: false
      };
      // n. Set onFulfilled.[[AlreadyCalled]] to alreadyCalled.
      onFulfilled.AlreadyCalled = alreadyCalled;
      // o. Set onFulfilled.[[Index]] to index.
      onFulfilled.Index = index;
      // p. Set onFulfilled.[[Values]] to values.
      onFulfilled.Values = values;
      // q. Set onFulfilled.[[Capability]] to resultCapability.
      onFulfilled.Capability = resultCapability;
      // r. Set onFulfilled.[[RemainingElements]] to remainingElementsCount.
      onFulfilled.RemainingElements = remainingElementsCount;
      // s. Let rejectSteps be the algorithm steps defined in Promise.allSettled Reject Element Functions.
      const stepsRejected = PromiseAllSettledRejectElementFunctions;
      // t. Let lengthRejected be the number of non-optional parameters of the function definition in Promise.allSettled Reject Element Functions.
      const lengthRejected = 1;
      // u. Let onRejected be ! CreateBuiltinFunction(stepsRejected, lengthRejected, "", « [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] »).
      let _temp22 = CreateBuiltinFunction(stepsRejected, lengthRejected, Value(''), ['AlreadyCalled', 'Index', 'Values', 'Capability', 'RemainingElements']);
      Assert(!(_temp22 instanceof AbruptCompletion), "CreateBuiltinFunction(stepsRejected, lengthRejected, Value(''), [\n      'AlreadyCalled',\n      'Index',\n      'Values',\n      'Capability',\n      'RemainingElements',\n    ])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp22 instanceof Completion) {
        _temp22 = _temp22.Value;
      }
      const onRejected = _temp22;
      // v. Set onRejected.[[AlreadyCalled]] to alreadyCalled.
      onRejected.AlreadyCalled = alreadyCalled;
      // w. Set onRejected.[[Index]] to index.
      onRejected.Index = index;
      // x. Set onRejected.[[Values]] to values.
      onRejected.Values = values;
      // y. Set onRejected.[[Capability]] to resultCapability.
      onRejected.Capability = resultCapability;
      // z. Set onRejected.[[RemainingElements]] to remainingElementsCount.
      onRejected.RemainingElements = remainingElementsCount;
      // aa. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] + 1.
      remainingElementsCount.Value += 1;
      // ab. Perform ? Invoke(nextPromise, "then", « onFulfilled, onRejected »).
      let _temp23 = Invoke(nextPromise, Value('then'), [onFulfilled, onRejected]);
      /* c8 ignore if */
      if (_temp23 instanceof AbruptCompletion) {
        return _temp23;
      }
      /* c8 ignore if */
      if (_temp23 instanceof Completion) {
        _temp23 = _temp23.Value;
      }
      // ac. Set index to index + 1.
      index += 1;
    }
  }

  /** https://tc39.es/ecma262/#sec-promise.allsettled */
  PerformPromiseAllSettled.section = 'https://tc39.es/ecma262/#sec-performpromiseallsettled';
  function Promise_allSettled([iterable = Value.undefined], {
    thisValue
  }) {
    // 1. Let C be the this value.
    const C = thisValue;
    // 2. Let promiseCapability be ? NewPromiseCapability(C).
    let _temp24 = NewPromiseCapability(C);
    /* c8 ignore if */
    if (_temp24 instanceof AbruptCompletion) {
      return _temp24;
    }
    /* c8 ignore if */
    if (_temp24 instanceof Completion) {
      _temp24 = _temp24.Value;
    }
    const promiseCapability = _temp24;
    // 3. Let promiseResolve be GetPromiseResolve(C).
    let promiseResolve = GetPromiseResolve(C);
    // 4. IfAbruptRejectPromise(promiseResolve, promiseCapability).
    /* c8 ignore if */
    if (promiseResolve instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [promiseResolve.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (promiseResolve instanceof Completion) {
      promiseResolve = promiseResolve.Value;
    }
    // 5. Let iteratorRecord be GetIterator(iterable).
    let iteratorRecord = GetIterator(iterable);
    // 6. IfAbruptRejectPromise(iteratorRecord, promiseCapability).
    /* c8 ignore if */
    if (iteratorRecord instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [iteratorRecord.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (iteratorRecord instanceof Completion) {
      iteratorRecord = iteratorRecord.Value;
    }
    // 7. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability, promiseResolve).
    let result = EnsureCompletion(PerformPromiseAllSettled(iteratorRecord, C, promiseCapability, promiseResolve));
    // 8. If result is an abrupt completion, then
    if (result instanceof AbruptCompletion) {
      // a. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).
      if (iteratorRecord.Done === Value.false) {
        result = IteratorClose(iteratorRecord, result);
      }
      // b. IfAbruptRejectPromise(result, promiseCapability).
      /* c8 ignore if */
      if (result instanceof AbruptCompletion) {
        const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [result.Value]);
        if (hygenicTemp2 instanceof AbruptCompletion) {
          return hygenicTemp2;
        }
        return promiseCapability.Promise;
      }
      /* c8 ignore if */
      if (result instanceof Completion) {
        result = result.Value;
      }
    }
    // 9. Return Completion(result).
    return Completion(result);
  }

  /** https://tc39.es/ecma262/#sec-promise.any-reject-element-functions */
  Promise_allSettled.section = 'https://tc39.es/ecma262/#sec-promise.allsettled';
  function PromiseAnyRejectElementFunctions([x = Value.undefined]) {
    // 1. Let F be the active function object.
    const F = exports.surroundingAgent.activeFunctionObject;
    // 2. Let alreadyCalled be F.[[AlreadyCalled]].
    const alreadyCalled = F.AlreadyCalled;
    // 3. If alreadyCalled.[[Value]] is true, return undefined.
    if (alreadyCalled.Value) {
      return Value.undefined;
    }
    // 4. Set alreadyCalled.[[Value]] to true.
    alreadyCalled.Value = true;
    // 5. Let index be F.[[Index]].
    const index = F.Index;
    // 6. Let errors be F.[[Errors]].
    const errors = F.Errors;
    // 7. Let promiseCapability be F.[[Capability]].
    const promiseCapability = F.Capability;
    // 8. Let remainingElementsCount be F.[[RemainingElements]].
    const remainingElementsCount = F.RemainingElements;
    // 9. Set errors[index] to x.
    errors[index] = x;
    // 10. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.
    remainingElementsCount.Value -= 1;
    // 11. If remainingElementsCount.[[Value]] is 0, then
    if (remainingElementsCount.Value === 0) {
      // a. Let error be a newly created AggregateError object.
      const error = exports.surroundingAgent.Throw('AggregateError', 'PromiseAnyRejected').Value;
      // b. Perform ! DefinePropertyOrThrow(error, "errors", Property Descriptor { [[Configurable]]: true, [[Enumerable]]: false, [[Writable]]: true, [[Value]]: errors }).
      let _temp26 = CreateArrayFromList(errors);
      Assert(!(_temp26 instanceof AbruptCompletion), "CreateArrayFromList(errors)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp26 instanceof Completion) {
        _temp26 = _temp26.Value;
      }
      let _temp25 = DefinePropertyOrThrow(error, Value('errors'), exports.Descriptor({
        Configurable: Value.true,
        Enumerable: Value.false,
        Writable: Value.true,
        Value: _temp26
      }));
      Assert(!(_temp25 instanceof AbruptCompletion), "DefinePropertyOrThrow(error, Value('errors'), Descriptor({\n      Configurable: Value.true,\n      Enumerable: Value.false,\n      Writable: Value.true,\n      Value: X(CreateArrayFromList(errors)),\n    }))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp25 instanceof Completion) {
        _temp25 = _temp25.Value;
      }
      // c. Return ? Call(promiseCapability.[[Reject]], undefined, « error »).
      return Call(promiseCapability.Reject, Value.undefined, [error]);
    }
    // 12. Return undefined.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-performpromiseany */
  PromiseAnyRejectElementFunctions.section = 'https://tc39.es/ecma262/#sec-promise.any-reject-element-functions';
  function PerformPromiseAny(iteratorRecord, constructor, resultCapability, promiseResolve) {
    let _temp27 = IsConstructor(constructor);
    Assert(!(_temp27 instanceof AbruptCompletion), "IsConstructor(constructor)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp27 instanceof Completion) {
      _temp27 = _temp27.Value;
    }
    // 1. Assert: ! IsConstructor(constructor) is true.
    Assert(_temp27 === Value.true, "X(IsConstructor(constructor)) === Value.true");
    // 2. Assert: resultCapability is a PromiseCapability Record.
    Assert(resultCapability instanceof PromiseCapabilityRecord, "resultCapability instanceof PromiseCapabilityRecord");
    // 3. Assert: ! IsCallable(promiseResolve) is true.
    let _temp28 = IsCallable(promiseResolve);
    Assert(!(_temp28 instanceof AbruptCompletion), "IsCallable(promiseResolve)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp28 instanceof Completion) {
      _temp28 = _temp28.Value;
    }
    Assert(_temp28 === Value.true, "X(IsCallable(promiseResolve)) === Value.true");
    // 4. Let errors be a new empty List.
    const errors = [];
    // 5. Let remainingElementsCount be a new Record { [[Value]]: 1 }.
    const remainingElementsCount = {
      Value: 1
    };
    // 6. Let index be 0.
    let index = 0;
    // 7. Repeat,
    while (true) {
      // a. Let next be IteratorStep(iteratorRecord).
      let next = IteratorStep(iteratorRecord);
      // b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.
      if (next instanceof AbruptCompletion) {
        iteratorRecord.Done = Value.true;
      }
      // c. ReturnIfAbrupt(next).
      /* c8 ignore if */
      if (next instanceof AbruptCompletion) {
        return next;
      }
      /* c8 ignore if */
      if (next instanceof Completion) {
        next = next.Value;
      }
      // d. If next is false, then
      if (next === Value.false) {
        // i. Set iteratorRecord.[[Done]] to true.
        iteratorRecord.Done = Value.true;
        // ii. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.
        remainingElementsCount.Value -= 1;
        // iii. If remainingElementsCount.[[Value]] is 0, then
        if (remainingElementsCount.Value === 0) {
          // 1. Let error be a newly created AggregateError object.
          const error = exports.surroundingAgent.Throw('AggregateError', 'PromiseAnyRejected').Value;
          // 2. Perform ! DefinePropertyOrThrow(error, "errors", Property Descriptor { [[Configurable]]: true, [[Enumerable]]: false, [[Writable]]: true, [[Value]]: errors }).
          let _temp30 = CreateArrayFromList(errors);
          Assert(!(_temp30 instanceof AbruptCompletion), "CreateArrayFromList(errors)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp30 instanceof Completion) {
            _temp30 = _temp30.Value;
          }
          let _temp29 = DefinePropertyOrThrow(error, Value('errors'), exports.Descriptor({
            Configurable: Value.true,
            Enumerable: Value.false,
            Writable: Value.true,
            Value: _temp30
          }));
          Assert(!(_temp29 instanceof AbruptCompletion), "DefinePropertyOrThrow(error, Value('errors'), Descriptor({\n          Configurable: Value.true,\n          Enumerable: Value.false,\n          Writable: Value.true,\n          Value: X(CreateArrayFromList(errors)),\n        }))" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp29 instanceof Completion) {
            _temp29 = _temp29.Value;
          }
          // 3. Return ThrowCompletion(error).
          return ThrowCompletion(error);
        }
        // iv. Return resultCapability.[[Promise]].
        return resultCapability.Promise;
      }
      // e. Let nextValue be IteratorValue(next).
      let nextValue = IteratorValue(next);
      // f. If nextValue is an abrupt completion, set iteratorRecord.[[Done]] to true.
      if (nextValue instanceof AbruptCompletion) {
        iteratorRecord.Done = Value.true;
      }
      // g. ReturnIfAbrupt(nextValue).
      /* c8 ignore if */
      if (nextValue instanceof AbruptCompletion) {
        return nextValue;
      }
      /* c8 ignore if */
      if (nextValue instanceof Completion) {
        nextValue = nextValue.Value;
      }
      // h. Append undefined to errors.
      errors.push(Value.undefined);
      // i. Let nextPromise be ? Call(promiseResolve, constructor, « nextValue »).
      let _temp31 = Call(promiseResolve, constructor, [nextValue]);
      /* c8 ignore if */
      if (_temp31 instanceof AbruptCompletion) {
        return _temp31;
      }
      /* c8 ignore if */
      if (_temp31 instanceof Completion) {
        _temp31 = _temp31.Value;
      }
      const nextPromise = _temp31;
      // j. Let stepsRejected be the algorithm steps defined in Promise.any Reject Element Functions.
      const stepsRejected = PromiseAnyRejectElementFunctions;
      // k. Let lengthRejected be the number of non-optional parameters of the function definition in Promise.any Reject Element Functions.
      const lengthRejected = 1;
      // l. Let onRejected be ! CreateBuiltinFunction(stepsRejected, lengthRejected, "", « [[AlreadyCalled]], [[Index]], [[Errors]], [[Capability]], [[RemainingElements]] »).
      let _temp32 = CreateBuiltinFunction(stepsRejected, lengthRejected, Value(''), ['AlreadyCalled', 'Index', 'Errors', 'Capability', 'RemainingElements']);
      Assert(!(_temp32 instanceof AbruptCompletion), "CreateBuiltinFunction(stepsRejected, lengthRejected, Value(''), ['AlreadyCalled', 'Index', 'Errors', 'Capability', 'RemainingElements'])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp32 instanceof Completion) {
        _temp32 = _temp32.Value;
      }
      const onRejected = _temp32;
      // m. Set onRejected.[[AlreadyCalled]] to a new Record { [[Value]]: false }.
      onRejected.AlreadyCalled = {
        Value: false
      };
      // n. Set onRejected.[[Index]] to index.
      onRejected.Index = index;
      // o. Set onRejected.[[Errors]] to errors.
      onRejected.Errors = errors;
      // p. Set onRejected.[[Capability]] to resultCapability.
      onRejected.Capability = resultCapability;
      // q. Set onRejected.[[RemainingElements]] to remainingElementsCount.
      onRejected.RemainingElements = remainingElementsCount;
      // r. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] + 1.
      remainingElementsCount.Value += 1;
      // s. Perform ? Invoke(nextPromise, "then", « resultCapability.[[Resolve]], onRejected »).
      let _temp33 = Invoke(nextPromise, Value('then'), [resultCapability.Resolve, onRejected]);
      /* c8 ignore if */
      if (_temp33 instanceof AbruptCompletion) {
        return _temp33;
      }
      /* c8 ignore if */
      if (_temp33 instanceof Completion) {
        _temp33 = _temp33.Value;
      }
      // t. Increase index by 1.
      index += 1;
    }
  }

  /** https://tc39.es/ecma262/#sec-promise.any */
  PerformPromiseAny.section = 'https://tc39.es/ecma262/#sec-performpromiseany';
  function Promise_any([iterable = Value.undefined], {
    thisValue
  }) {
    // 1. Let C be the this value.
    const C = thisValue;
    // 2. Let promiseCapability be ? NewPromiseCapability(C).
    let _temp34 = NewPromiseCapability(C);
    /* c8 ignore if */
    if (_temp34 instanceof AbruptCompletion) {
      return _temp34;
    }
    /* c8 ignore if */
    if (_temp34 instanceof Completion) {
      _temp34 = _temp34.Value;
    }
    const promiseCapability = _temp34;
    // 3. Let promiseResolve be GetPromiseResolve(C).
    let promiseResolve = GetPromiseResolve(C);
    // 4. IfAbruptRejectPromise(promiseResolve, promiseCapability).
    /* c8 ignore if */
    if (promiseResolve instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [promiseResolve.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (promiseResolve instanceof Completion) {
      promiseResolve = promiseResolve.Value;
    }
    // 5. Let iteratorRecord be GetIterator(iterable).
    let iteratorRecord = GetIterator(iterable);
    // 6. IfAbruptRejectPromise(iteratorRecord, promiseCapability).
    /* c8 ignore if */
    if (iteratorRecord instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [iteratorRecord.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (iteratorRecord instanceof Completion) {
      iteratorRecord = iteratorRecord.Value;
    }
    // 7. Let result be PerformPromiseAny(iteratorRecord, C, promiseCapability).
    let result = EnsureCompletion(PerformPromiseAny(iteratorRecord, C, promiseCapability, promiseResolve));
    // 8. If result is an abrupt completion, then
    if (result instanceof AbruptCompletion) {
      // a. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).
      if (iteratorRecord.Done === Value.false) {
        result = IteratorClose(iteratorRecord, result);
      }
      // b. IfAbruptRejectPromise(result, promiseCapability).
      /* c8 ignore if */
      if (result instanceof AbruptCompletion) {
        const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [result.Value]);
        if (hygenicTemp2 instanceof AbruptCompletion) {
          return hygenicTemp2;
        }
        return promiseCapability.Promise;
      }
      /* c8 ignore if */
      if (result instanceof Completion) {
        result = result.Value;
      }
    }
    // 9. Return Completion(result).
    return Completion(result);
  }
  Promise_any.section = 'https://tc39.es/ecma262/#sec-promise.any';
  function PerformPromiseRace(iteratorRecord, constructor, resultCapability, promiseResolve) {
    // 1. Assert: IsConstructor(constructor) is true.
    Assert(IsConstructor(constructor) === Value.true, "IsConstructor(constructor) === Value.true");
    // 2. Assert: resultCapability is a PromiseCapability Record.
    Assert(resultCapability instanceof PromiseCapabilityRecord, "resultCapability instanceof PromiseCapabilityRecord");
    // 3. Assert: IsCallable(promiseResolve) is true.
    Assert(IsCallable(promiseResolve) === Value.true, "IsCallable(promiseResolve) === Value.true");
    // 4. Repeat,
    while (true) {
      // a. Let next be IteratorStep(iteratorRecord).
      let next = IteratorStep(iteratorRecord);
      // b. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.
      if (next instanceof AbruptCompletion) {
        iteratorRecord.Done = Value.true;
      }
      // c. ReturnIfAbrupt(next).
      /* c8 ignore if */
      if (next instanceof AbruptCompletion) {
        return next;
      }
      /* c8 ignore if */
      if (next instanceof Completion) {
        next = next.Value;
      }
      // d. If next is false, then
      if (next === Value.false) {
        // i. Set iteratorRecord.[[Done]] to true.
        iteratorRecord.Done = Value.true;
        // ii. Return resultCapability.[[Promise]].
        return resultCapability.Promise;
      }
      // e. Let nextValue be IteratorValue(next).
      let nextValue = IteratorValue(next);
      // f. If nextValue is an abrupt completion, set iteratorRecord.[[Done]] to true.
      if (nextValue instanceof AbruptCompletion) {
        iteratorRecord.Done = Value.true;
      }
      // g. ReturnIfAbrupt(nextValue).
      /* c8 ignore if */
      if (nextValue instanceof AbruptCompletion) {
        return nextValue;
      }
      /* c8 ignore if */
      if (nextValue instanceof Completion) {
        nextValue = nextValue.Value;
      }
      // h. Let nextPromise be ? Call(promiseResolve, constructor, « nextValue »).
      let _temp35 = Call(promiseResolve, constructor, [nextValue]);
      /* c8 ignore if */
      if (_temp35 instanceof AbruptCompletion) {
        return _temp35;
      }
      /* c8 ignore if */
      if (_temp35 instanceof Completion) {
        _temp35 = _temp35.Value;
      }
      const nextPromise = _temp35;
      // i. Perform ? Invoke(nextPromise, "then", « resultCapability.[[Resolve]], resultCapability.[[Reject]] »).
      let _temp36 = Invoke(nextPromise, Value('then'), [resultCapability.Resolve, resultCapability.Reject]);
      /* c8 ignore if */
      if (_temp36 instanceof AbruptCompletion) {
        return _temp36;
      }
      /* c8 ignore if */
      if (_temp36 instanceof Completion) {
        _temp36 = _temp36.Value;
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-promise.race */
  function Promise_race([iterable = Value.undefined], {
    thisValue
  }) {
    // 1. Let C be the this value.
    const C = thisValue;
    // 2. Let promiseCapability be ? NewPromiseCapability(C).
    let _temp37 = NewPromiseCapability(C);
    /* c8 ignore if */
    if (_temp37 instanceof AbruptCompletion) {
      return _temp37;
    }
    /* c8 ignore if */
    if (_temp37 instanceof Completion) {
      _temp37 = _temp37.Value;
    }
    const promiseCapability = _temp37;
    // 3. Let promiseResolve be GetPromiseResolve(C).
    let promiseResolve = GetPromiseResolve(C);
    // 4. IfAbruptRejectPromise(promiseResolve, promiseCapability).
    /* c8 ignore if */
    if (promiseResolve instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [promiseResolve.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (promiseResolve instanceof Completion) {
      promiseResolve = promiseResolve.Value;
    }
    // 5. Let iteratorRecord be GetIterator(iterable).
    let iteratorRecord = GetIterator(iterable);
    // 6. IfAbruptRejectPromise(iteratorRecord, promiseCapability).
    /* c8 ignore if */
    if (iteratorRecord instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [iteratorRecord.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (iteratorRecord instanceof Completion) {
      iteratorRecord = iteratorRecord.Value;
    }
    // 7. Let result be PerformPromiseRace(iteratorRecord, C, promiseCapability, promiseResolve).
    let result = EnsureCompletion(PerformPromiseRace(iteratorRecord, C, promiseCapability, promiseResolve));
    // 8. If result is an abrupt completion, then
    if (result instanceof AbruptCompletion) {
      // a. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).
      if (iteratorRecord.Done === Value.false) {
        result = IteratorClose(iteratorRecord, result);
      }
      // b. IfAbruptRejectPromise(result, promiseCapability).
      /* c8 ignore if */
      if (result instanceof AbruptCompletion) {
        const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [result.Value]);
        if (hygenicTemp2 instanceof AbruptCompletion) {
          return hygenicTemp2;
        }
        return promiseCapability.Promise;
      }
      /* c8 ignore if */
      if (result instanceof Completion) {
        result = result.Value;
      }
    }
    // 9. Return Completion(result).
    return Completion(result);
  }

  /** https://tc39.es/ecma262/#sec-promise.reject */
  Promise_race.section = 'https://tc39.es/ecma262/#sec-promise.race';
  function Promise_reject([r = Value.undefined], {
    thisValue
  }) {
    // 1. Let C be this value.
    const C = thisValue;
    // 2. Let promiseCapability be ? NewPromiseCapability(C).
    let _temp38 = NewPromiseCapability(C);
    /* c8 ignore if */
    if (_temp38 instanceof AbruptCompletion) {
      return _temp38;
    }
    /* c8 ignore if */
    if (_temp38 instanceof Completion) {
      _temp38 = _temp38.Value;
    }
    const promiseCapability = _temp38;
    // 3. Perform ? Call(promiseCapability.[[Reject]], undefined, « r »).
    let _temp39 = Call(promiseCapability.Reject, Value.undefined, [r]);
    /* c8 ignore if */
    if (_temp39 instanceof AbruptCompletion) {
      return _temp39;
    }
    /* c8 ignore if */
    if (_temp39 instanceof Completion) {
      _temp39 = _temp39.Value;
    }
    // 4. Return promiseCapability.[[Promise]].
    return promiseCapability.Promise;
  }

  /** https://tc39.es/ecma262/#sec-promise.resolve */
  Promise_reject.section = 'https://tc39.es/ecma262/#sec-promise.reject';
  function Promise_resolve([x = Value.undefined], {
    thisValue
  }) {
    // 1. Let C be the this value.
    const C = thisValue;
    // 2. If Type(C) is not Object, throw a TypeError exception.
    if (!(C instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'InvalidReceiver', 'Promise.resolve', C);
    }
    // 3. Return ? PromiseResolve(C, x).
    return PromiseResolve(C, x);
  }

  /** https://tc39.es/ecma262/#sec-get-promise-@@species */
  Promise_resolve.section = 'https://tc39.es/ecma262/#sec-promise.resolve';
  function Promise_symbolSpecies(args, {
    thisValue
  }) {
    // 1. Return the this value.
    return thisValue;
  }
  Promise_symbolSpecies.section = 'https://tc39.es/ecma262/#sec-get-promise-@@species';
  function bootstrapPromise(realmRec) {
    const promiseConstructor = bootstrapConstructor(realmRec, PromiseConstructor, 'Promise', 1, realmRec.Intrinsics['%Promise.prototype%'], [['all', Promise_all, 1], ['allSettled', Promise_allSettled, 1], ['any', Promise_any, 1], ['race', Promise_race, 1], ['reject', Promise_reject, 1], ['resolve', Promise_resolve, 1], [wellKnownSymbols.species, [Promise_symbolSpecies]]]);
    promiseConstructor.DefineOwnProperty(Value('prototype'), exports.Descriptor({
      Writable: Value.false,
      Enumerable: Value.false,
      Configurable: Value.false
    }));
    realmRec.Intrinsics['%Promise%'] = promiseConstructor;
  }

  /** https://tc39.es/ecma262/#sec-proxy-target-handler */
  function ProxyConstructor([target = Value.undefined, handler = Value.undefined], {
    NewTarget
  }) {
    // 1. f NewTarget is undefined, throw a TypeError exception.
    if (NewTarget === Value.undefined) {
      return exports.surroundingAgent.Throw('TypeError', 'ConstructorNonCallable', this);
    }
    // 2. Return ? ProxyCreate(target, handler).
    return ProxyCreate(target, handler);
  }

  /** https://tc39.es/ecma262/#sec-proxy-revocation-functions */
  ProxyConstructor.section = 'https://tc39.es/ecma262/#sec-proxy-target-handler';
  function ProxyRevocationFunctions() {
    // 1. Let F be the active function object.
    const F = exports.surroundingAgent.activeFunctionObject;
    // 2. Let p be F.[[RevocableProxy]].
    const p = F.RevocableProxy;
    // 3. If p is null, return undefined.
    if (p === Value.null) {
      return Value.undefined;
    }
    // 4. Set F.[[RevocableProxy]] to null.
    F.RevocableProxy = Value.null;
    // 5. Assert: p is a Proxy object.
    Assert(isProxyExoticObject(p), "isProxyExoticObject(p)");
    // 6. Set p.[[ProxyTarget]] to null.
    p.ProxyTarget = Value.null;
    // 7. Set p.[[ProxyHandler]] to null.
    p.ProxyHandler = Value.null;
    // 8. Return undefined.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-proxy.revocable */
  ProxyRevocationFunctions.section = 'https://tc39.es/ecma262/#sec-proxy-revocation-functions';
  function Proxy_revocable([target = Value.undefined, handler = Value.undefined]) {
    let _temp = ProxyCreate(target, handler);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 1. Let p be ? ProxyCreate(target, handler).
    const p = _temp;
    /** https://tc39.es/ecma262/#sec-proxy-revocation-functions. */
    const steps = ProxyRevocationFunctions;
    // 3. Let length be the number of non-optional parameters of the function definition in Proxy Revocation Functions.
    const length = 0;
    // 4. Let revoker be ! CreateBuiltinFunction(steps, length, "", « [[RevocableProxy]] »).
    let _temp2 = CreateBuiltinFunction(steps, length, Value(''), ['RevocableProxy']);
    Assert(!(_temp2 instanceof AbruptCompletion), "CreateBuiltinFunction(steps, length, Value(''), ['RevocableProxy'])" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const revoker = _temp2;
    // 5. Set revoker.[[RevocableProxy]] to p.
    revoker.RevocableProxy = p;
    // 6. Let result be OrdinaryObjectCreate(%Object.prototype%).
    const result = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%Object.prototype%'));
    // 7. Perform ! CreateDataPropertyOrThrow(result, "proxy", p).
    let _temp3 = CreateDataProperty(result, Value('proxy'), p);
    Assert(!(_temp3 instanceof AbruptCompletion), "CreateDataProperty(result, Value('proxy'), p)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    // 8. Perform ! CreateDataPropertyOrThrow(result, "revoke", revoker).
    let _temp4 = CreateDataProperty(result, Value('revoke'), revoker);
    Assert(!(_temp4 instanceof AbruptCompletion), "CreateDataProperty(result, Value('revoke'), revoker)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 9. Return result.
    return result;
  }
  Proxy_revocable.section = 'https://tc39.es/ecma262/#sec-proxy.revocable';
  function bootstrapProxy(realmRec) {
    const proxyConstructor = CreateBuiltinFunction(ProxyConstructor, 2, Value('Proxy'), [], realmRec, undefined, undefined, Value.true);
    assignProps(realmRec, proxyConstructor, [['revocable', Proxy_revocable, 2]]);
    realmRec.Intrinsics['%Proxy%'] = proxyConstructor;
  }

  /** https://tc39.es/ecma262/#sec-reflect.apply */
  function Reflect_apply([target = Value.undefined, thisArgument = Value.undefined, argumentsList = Value.undefined]) {
    // 1. If IsCallable(target) is false, throw a TypeError exception.
    if (IsCallable(target) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', target);
    }
    // 2. Let args be ? CreateListFromArrayLike(argumentsList).
    let _temp = CreateListFromArrayLike(argumentsList);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const args = _temp;
    // 3. Perform PrepareForTailCall().
    PrepareForTailCall();
    // 4. Return ? Call(target, thisArgument, args).
    return Call(target, thisArgument, args);
  }

  /** https://tc39.es/ecma262/#sec-reflect.construct */
  Reflect_apply.section = 'https://tc39.es/ecma262/#sec-reflect.apply';
  function Reflect_construct([target = Value.undefined, argumentsList = Value.undefined, newTarget]) {
    // 1. If IsConstructor(target) is false, throw a TypeError exception.
    if (IsConstructor(target) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAConstructor', target);
    }
    // 2. If newTarget is not present, set newTarget to target.
    if (newTarget === undefined) {
      newTarget = target;
    } else if (IsConstructor(newTarget) === Value.false) {
      // 3. Else if IsConstructor(newTarget) is false, throw a TypeError exception.
      return exports.surroundingAgent.Throw('TypeError', 'NotAConstructor', newTarget);
    }
    // 4. Let args be ? CreateListFromArrayLike(argumentsList).
    let _temp2 = CreateListFromArrayLike(argumentsList);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const args = _temp2;
    // 5. Return ? Construct(target, args, newTarget).
    return Construct(target, args, newTarget);
  }

  /** https://tc39.es/ecma262/#sec-reflect.defineproperty */
  Reflect_construct.section = 'https://tc39.es/ecma262/#sec-reflect.construct';
  function Reflect_defineProperty([target = Value.undefined, propertyKey = Value.undefined, attributes = Value.undefined]) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!(target instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', target);
    }
    // 2. Let key be ? ToPropertyKey(propertyKey).
    let _temp3 = ToPropertyKey(propertyKey);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const key = _temp3;
    // 3. Let desc be ? ToPropertyDescriptor(attributes).
    let _temp4 = ToPropertyDescriptor(attributes);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const desc = _temp4;
    // 4. Return ? target.[[DefineOwnProperty]](key, desc).
    return target.DefineOwnProperty(key, desc);
  }

  /** https://tc39.es/ecma262/#sec-reflect.deleteproperty */
  Reflect_defineProperty.section = 'https://tc39.es/ecma262/#sec-reflect.defineproperty';
  function Reflect_deleteProperty([target = Value.undefined, propertyKey = Value.undefined]) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!(target instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', target);
    }
    // 2. Let key be ? ToPropertyKey(propertyKey).
    let _temp5 = ToPropertyKey(propertyKey);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const key = _temp5;
    // 3. Return ? target.[[Delete]](key).
    return target.Delete(key);
  }

  /** https://tc39.es/ecma262/#sec-reflect.get */
  Reflect_deleteProperty.section = 'https://tc39.es/ecma262/#sec-reflect.deleteproperty';
  function Reflect_get([target = Value.undefined, propertyKey = Value.undefined, receiver]) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!(target instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', target);
    }
    // 2. Let key be ? ToPropertyKey(propertyKey).
    let _temp6 = ToPropertyKey(propertyKey);
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const key = _temp6;
    // 3. If receiver is not present, then
    if (receiver === undefined) {
      // a. Set receiver to target.
      receiver = target;
    }
    // 4. Return ? target.[[Get]](key, receiver).
    return target.Get(key, receiver);
  }

  /** https://tc39.es/ecma262/#sec-reflect.getownpropertydescriptor */
  Reflect_get.section = 'https://tc39.es/ecma262/#sec-reflect.get';
  function Reflect_getOwnPropertyDescriptor([target = Value.undefined, propertyKey = Value.undefined]) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!(target instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', target);
    }
    // 2. Let key be ? ToPropertyKey(propertyKey).
    let _temp7 = ToPropertyKey(propertyKey);
    /* c8 ignore if */
    if (_temp7 instanceof AbruptCompletion) {
      return _temp7;
    }
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    const key = _temp7;
    // 3. Let desc be ? target.[[GetOwnProperty]](key).
    let _temp8 = target.GetOwnProperty(key);
    /* c8 ignore if */
    if (_temp8 instanceof AbruptCompletion) {
      return _temp8;
    }
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    const desc = _temp8;
    // 4. Return FromPropertyDescriptor(desc).
    return FromPropertyDescriptor(desc);
  }

  /** https://tc39.es/ecma262/#sec-reflect.getprototypeof */
  Reflect_getOwnPropertyDescriptor.section = 'https://tc39.es/ecma262/#sec-reflect.getownpropertydescriptor';
  function Reflect_getPrototypeOf([target = Value.undefined]) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!(target instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', target);
    }
    // 2. Return ? target.[[GetPrototypeOf]]().
    return target.GetPrototypeOf();
  }

  /** https://tc39.es/ecma262/#sec-reflect.has */
  Reflect_getPrototypeOf.section = 'https://tc39.es/ecma262/#sec-reflect.getprototypeof';
  function Reflect_has([target = Value.undefined, propertyKey = Value.undefined]) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!(target instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', target);
    }
    // 2. Let key be ? ToPropertyKey(propertyKey).
    let _temp9 = ToPropertyKey(propertyKey);
    /* c8 ignore if */
    if (_temp9 instanceof AbruptCompletion) {
      return _temp9;
    }
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    const key = _temp9;
    // 3. Return ? target.[[HasProperty]](key).
    return target.HasProperty(key);
  }

  /** https://tc39.es/ecma262/#sec-reflect.isextensible */
  Reflect_has.section = 'https://tc39.es/ecma262/#sec-reflect.has';
  function Reflect_isExtensible([target = Value.undefined]) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!(target instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', target);
    }
    // 2. Return ? target.[[IsExtensible]]().
    return target.IsExtensible();
  }

  /** https://tc39.es/ecma262/#sec-reflect.ownkeys */
  Reflect_isExtensible.section = 'https://tc39.es/ecma262/#sec-reflect.isextensible';
  function Reflect_ownKeys([target = Value.undefined]) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!(target instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', target);
    }
    // 2. Let keys be ? target.[[OwnPropertyKeys]]().
    let _temp10 = target.OwnPropertyKeys();
    /* c8 ignore if */
    if (_temp10 instanceof AbruptCompletion) {
      return _temp10;
    }
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    const keys = _temp10;
    // 3. Return CreateArrayFromList(keys).
    return CreateArrayFromList(keys);
  }

  /** https://tc39.es/ecma262/#sec-reflect.preventextensions */
  Reflect_ownKeys.section = 'https://tc39.es/ecma262/#sec-reflect.ownkeys';
  function Reflect_preventExtensions([target = Value.undefined]) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!(target instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', target);
    }
    // 2. Return ? target.[[PreventExtensions]]().
    return target.PreventExtensions();
  }

  /** https://tc39.es/ecma262/#sec-reflect.set */
  Reflect_preventExtensions.section = 'https://tc39.es/ecma262/#sec-reflect.preventextensions';
  function Reflect_set([target = Value.undefined, propertyKey = Value.undefined, V = Value.undefined, receiver]) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!(target instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', target);
    }
    // 2. Let key be ? ToPropertyKey(propertyKey).
    let _temp11 = ToPropertyKey(propertyKey);
    /* c8 ignore if */
    if (_temp11 instanceof AbruptCompletion) {
      return _temp11;
    }
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    const key = _temp11;
    // 3. If receiver is not present, then
    if (receiver === undefined) {
      receiver = target;
    }
    // 4. Return ? target.[[Set]](key, V, receiver).
    return target.Set(key, V, receiver);
  }

  /** https://tc39.es/ecma262/#sec-reflect.setprototypeof */
  Reflect_set.section = 'https://tc39.es/ecma262/#sec-reflect.set';
  function Reflect_setPrototypeOf([target = Value.undefined, proto = Value.undefined]) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!(target instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', target);
    }
    // 2. If Type(proto) is not Object and proto is not null, throw a TypeError exception.
    if (!(proto instanceof ObjectValue) && proto !== Value.null) {
      return exports.surroundingAgent.Throw('TypeError', 'ObjectPrototypeType');
    }
    // 3. Return ? target.[[SetPrototypeOf]](proto).
    return target.SetPrototypeOf(proto);
  }
  Reflect_setPrototypeOf.section = 'https://tc39.es/ecma262/#sec-reflect.setprototypeof';
  function bootstrapReflect(realmRec) {
    const reflect = bootstrapPrototype(realmRec, [['apply', Reflect_apply, 3], ['construct', Reflect_construct, 2], ['defineProperty', Reflect_defineProperty, 3], ['deleteProperty', Reflect_deleteProperty, 2], ['get', Reflect_get, 2], ['getOwnPropertyDescriptor', Reflect_getOwnPropertyDescriptor, 2], ['getPrototypeOf', Reflect_getPrototypeOf, 1], ['has', Reflect_has, 2], ['isExtensible', Reflect_isExtensible, 1], ['ownKeys', Reflect_ownKeys, 1], ['preventExtensions', Reflect_preventExtensions, 1], ['set', Reflect_set, 3], ['setPrototypeOf', Reflect_setPrototypeOf, 2]], realmRec.Intrinsics['%Object.prototype%'], 'Reflect');
    realmRec.Intrinsics['%Reflect%'] = reflect;
  }

  function thisStringValue(value) {
    if (value instanceof JSStringValue) {
      return value;
    }
    if (value instanceof ObjectValue && 'StringData' in value) {
      const s = value.StringData;
      Assert(s instanceof JSStringValue, "s instanceof JSStringValue");
      return s;
    }
    return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'String', value);
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.charat */
  function StringProto_charAt([pos = Value.undefined], {
    thisValue
  }) {
    let _temp = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const O = _temp;
    let _temp2 = ToString(O);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const S = _temp2;
    let _temp3 = ToIntegerOrInfinity(pos);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const position = _temp3;
    const size = S.stringValue().length;
    if (position < 0 || position >= size) {
      return Value('');
    }
    return Value(S.stringValue()[position]);
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.charcodeat */
  StringProto_charAt.section = 'https://tc39.es/ecma262/#sec-string.prototype.charat';
  function StringProto_charCodeAt([pos = Value.undefined], {
    thisValue
  }) {
    let _temp4 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const O = _temp4;
    let _temp5 = ToString(O);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const S = _temp5;
    let _temp6 = ToIntegerOrInfinity(pos);
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const position = _temp6;
    const size = S.stringValue().length;
    if (position < 0 || position >= size) {
      return F(NaN);
    }
    return F(S.stringValue().charCodeAt(position));
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.codepointat */
  StringProto_charCodeAt.section = 'https://tc39.es/ecma262/#sec-string.prototype.charcodeat';
  function StringProto_codePointAt([pos = Value.undefined], {
    thisValue
  }) {
    let _temp7 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp7 instanceof AbruptCompletion) {
      return _temp7;
    }
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    const O = _temp7;
    let _temp8 = ToString(O);
    /* c8 ignore if */
    if (_temp8 instanceof AbruptCompletion) {
      return _temp8;
    }
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    const S = _temp8;
    let _temp9 = ToIntegerOrInfinity(pos);
    /* c8 ignore if */
    if (_temp9 instanceof AbruptCompletion) {
      return _temp9;
    }
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    const position = _temp9;
    const size = S.stringValue().length;
    if (position < 0 || position >= size) {
      return Value.undefined;
    }
    let _temp10 = CodePointAt(S.stringValue(), position);
    Assert(!(_temp10 instanceof AbruptCompletion), "CodePointAt(S.stringValue(), position)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    const cp = _temp10;
    return F(cp.CodePoint);
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.concat */
  StringProto_codePointAt.section = 'https://tc39.es/ecma262/#sec-string.prototype.codepointat';
  function StringProto_concat(args, {
    thisValue
  }) {
    let _temp11 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp11 instanceof AbruptCompletion) {
      return _temp11;
    }
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    const O = _temp11;
    let _temp12 = ToString(O);
    /* c8 ignore if */
    if (_temp12 instanceof AbruptCompletion) {
      return _temp12;
    }
    /* c8 ignore if */
    if (_temp12 instanceof Completion) {
      _temp12 = _temp12.Value;
    }
    const S = _temp12;
    let R = S.stringValue();
    while (args.length > 0) {
      const next = args.shift();
      let _temp13 = ToString(next);
      /* c8 ignore if */
      if (_temp13 instanceof AbruptCompletion) {
        return _temp13;
      }
      /* c8 ignore if */
      if (_temp13 instanceof Completion) {
        _temp13 = _temp13.Value;
      }
      const nextString = _temp13;
      R = `${R}${nextString.stringValue()}`;
    }
    return Value(R);
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.endswith */
  StringProto_concat.section = 'https://tc39.es/ecma262/#sec-string.prototype.concat';
  function StringProto_endsWith([searchString = Value.undefined, endPosition = Value.undefined], {
    thisValue
  }) {
    let _temp14 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp14 instanceof AbruptCompletion) {
      return _temp14;
    }
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    const O = _temp14;
    let _temp15 = ToString(O);
    /* c8 ignore if */
    if (_temp15 instanceof AbruptCompletion) {
      return _temp15;
    }
    /* c8 ignore if */
    if (_temp15 instanceof Completion) {
      _temp15 = _temp15.Value;
    }
    const S = _temp15.stringValue();
    let _temp16 = IsRegExp(searchString);
    /* c8 ignore if */
    if (_temp16 instanceof AbruptCompletion) {
      return _temp16;
    }
    /* c8 ignore if */
    if (_temp16 instanceof Completion) {
      _temp16 = _temp16.Value;
    }
    const isRegExp = _temp16;
    if (isRegExp === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'RegExpArgumentNotAllowed', 'String.prototype.endsWith');
    }
    let _temp17 = ToString(searchString);
    /* c8 ignore if */
    if (_temp17 instanceof AbruptCompletion) {
      return _temp17;
    }
    /* c8 ignore if */
    if (_temp17 instanceof Completion) {
      _temp17 = _temp17.Value;
    }
    const searchStr = _temp17.stringValue();
    const len = S.length;
    let pos;
    if (endPosition === Value.undefined) {
      pos = len;
    } else {
      let _temp18 = ToIntegerOrInfinity(endPosition);
      /* c8 ignore if */
      if (_temp18 instanceof AbruptCompletion) {
        return _temp18;
      }
      /* c8 ignore if */
      if (_temp18 instanceof Completion) {
        _temp18 = _temp18.Value;
      }
      pos = _temp18;
    }
    const end = Math.min(Math.max(pos, 0), len);
    const searchLength = searchStr.length;
    const start = end - searchLength;
    if (start < 0) {
      return Value.false;
    }
    for (let i = 0; i < searchLength; i += 1) {
      if (S.charCodeAt(start + i) !== searchStr.charCodeAt(i)) {
        return Value.false;
      }
    }
    return Value.true;
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.includes */
  StringProto_endsWith.section = 'https://tc39.es/ecma262/#sec-string.prototype.endswith';
  function StringProto_includes([searchString = Value.undefined, position = Value.undefined], {
    thisValue
  }) {
    let _temp19 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp19 instanceof AbruptCompletion) {
      return _temp19;
    }
    /* c8 ignore if */
    if (_temp19 instanceof Completion) {
      _temp19 = _temp19.Value;
    }
    const O = _temp19;
    let _temp20 = ToString(O);
    /* c8 ignore if */
    if (_temp20 instanceof AbruptCompletion) {
      return _temp20;
    }
    /* c8 ignore if */
    if (_temp20 instanceof Completion) {
      _temp20 = _temp20.Value;
    }
    const S = _temp20.stringValue();
    let _temp21 = IsRegExp(searchString);
    /* c8 ignore if */
    if (_temp21 instanceof AbruptCompletion) {
      return _temp21;
    }
    /* c8 ignore if */
    if (_temp21 instanceof Completion) {
      _temp21 = _temp21.Value;
    }
    const isRegExp = _temp21;
    if (isRegExp === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'RegExpArgumentNotAllowed', 'String.prototype.includes');
    }
    let _temp22 = ToString(searchString);
    /* c8 ignore if */
    if (_temp22 instanceof AbruptCompletion) {
      return _temp22;
    }
    /* c8 ignore if */
    if (_temp22 instanceof Completion) {
      _temp22 = _temp22.Value;
    }
    const searchStr = _temp22.stringValue();
    let _temp23 = ToIntegerOrInfinity(position);
    /* c8 ignore if */
    if (_temp23 instanceof AbruptCompletion) {
      return _temp23;
    }
    /* c8 ignore if */
    if (_temp23 instanceof Completion) {
      _temp23 = _temp23.Value;
    }
    const pos = _temp23;
    Assert(!(position === Value.undefined) || pos === 0, "!(position === Value.undefined) || pos === 0");
    const len = S.length;
    const start = Math.min(Math.max(pos, 0), len);
    const searchLen = searchStr.length;
    let k = start;
    while (k + searchLen <= len) {
      let match = true;
      for (let j = 0; j < searchLen; j += 1) {
        if (searchStr[j] !== S[k + j]) {
          match = false;
          break;
        }
      }
      if (match) {
        return Value.true;
      }
      k += 1;
    }
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.indexof */
  StringProto_includes.section = 'https://tc39.es/ecma262/#sec-string.prototype.includes';
  function StringProto_indexOf([searchString = Value.undefined, position = Value.undefined], {
    thisValue
  }) {
    let _temp24 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp24 instanceof AbruptCompletion) {
      return _temp24;
    }
    /* c8 ignore if */
    if (_temp24 instanceof Completion) {
      _temp24 = _temp24.Value;
    }
    // 1. Let O be ? RequireObjectCoercible(this value).
    const O = _temp24;
    // 2. Let S be ? ToString(O).
    let _temp25 = ToString(O);
    /* c8 ignore if */
    if (_temp25 instanceof AbruptCompletion) {
      return _temp25;
    }
    /* c8 ignore if */
    if (_temp25 instanceof Completion) {
      _temp25 = _temp25.Value;
    }
    const S = _temp25;
    // 3. Let searchStr be ? ToString(searchString).
    let _temp26 = ToString(searchString);
    /* c8 ignore if */
    if (_temp26 instanceof AbruptCompletion) {
      return _temp26;
    }
    /* c8 ignore if */
    if (_temp26 instanceof Completion) {
      _temp26 = _temp26.Value;
    }
    const searchStr = _temp26;
    // 4. Let pos be ? ToIntegerOrInfinity(position).
    let _temp27 = ToIntegerOrInfinity(position);
    /* c8 ignore if */
    if (_temp27 instanceof AbruptCompletion) {
      return _temp27;
    }
    /* c8 ignore if */
    if (_temp27 instanceof Completion) {
      _temp27 = _temp27.Value;
    }
    const pos = _temp27;
    // 5. Assert: If position is undefined, then pos is 0.
    Assert(!(position === Value.undefined) || pos === 0, "!(position === Value.undefined) || pos === 0");
    // 6. Let len be the length of S.
    const len = S.stringValue().length;
    // 7. Let start be min(max(pos, 0), len).
    const start = Math.min(Math.max(pos, 0), len);
    // 8. Return ! StringIndexOf(S, searchStr, start).
    let _temp28 = StringIndexOf(S, searchStr, start);
    Assert(!(_temp28 instanceof AbruptCompletion), "StringIndexOf(S, searchStr, start)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp28 instanceof Completion) {
      _temp28 = _temp28.Value;
    }
    return _temp28;
  }

  /** https://tc39.es/proposal-is-usv-string/#sec-string.prototype.iswellformed */
  StringProto_indexOf.section = 'https://tc39.es/ecma262/#sec-string.prototype.indexof';
  function StringProto_isWellFormed(args, {
    thisValue
  }) {
    let _temp29 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp29 instanceof AbruptCompletion) {
      return _temp29;
    }
    /* c8 ignore if */
    if (_temp29 instanceof Completion) {
      _temp29 = _temp29.Value;
    }
    // 1. Let O be ? RequireObjectCoercible(this value).
    const O = _temp29;
    // 2. Let S be ? ToString(O).
    let _temp30 = ToString(O);
    /* c8 ignore if */
    if (_temp30 instanceof AbruptCompletion) {
      return _temp30;
    }
    /* c8 ignore if */
    if (_temp30 instanceof Completion) {
      _temp30 = _temp30.Value;
    }
    const S = _temp30;
    // 3. Return IsStringWellFormedUnicode(S).
    return IsStringWellFormedUnicode(S) ? Value.true : Value.false;
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.lastindexof */
  StringProto_isWellFormed.section = 'https://tc39.es/proposal-is-usv-string/#sec-string.prototype.iswellformed';
  function StringProto_lastIndexOf([searchString = Value.undefined, position = Value.undefined], {
    thisValue
  }) {
    let _temp31 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp31 instanceof AbruptCompletion) {
      return _temp31;
    }
    /* c8 ignore if */
    if (_temp31 instanceof Completion) {
      _temp31 = _temp31.Value;
    }
    const O = _temp31;
    let _temp32 = ToString(O);
    /* c8 ignore if */
    if (_temp32 instanceof AbruptCompletion) {
      return _temp32;
    }
    /* c8 ignore if */
    if (_temp32 instanceof Completion) {
      _temp32 = _temp32.Value;
    }
    const S = _temp32.stringValue();
    let _temp33 = ToString(searchString);
    /* c8 ignore if */
    if (_temp33 instanceof AbruptCompletion) {
      return _temp33;
    }
    /* c8 ignore if */
    if (_temp33 instanceof Completion) {
      _temp33 = _temp33.Value;
    }
    const searchStr = _temp33.stringValue();
    let _temp34 = ToNumber(position);
    /* c8 ignore if */
    if (_temp34 instanceof AbruptCompletion) {
      return _temp34;
    }
    /* c8 ignore if */
    if (_temp34 instanceof Completion) {
      _temp34 = _temp34.Value;
    }
    const numPos = _temp34;
    Assert(!(position === Value.undefined) || numPos.isNaN(), "!(position === Value.undefined) || numPos.isNaN()");
    let pos;
    if (numPos.isNaN()) {
      pos = Infinity;
    } else {
      let _temp35 = ToIntegerOrInfinity(numPos);
      Assert(!(_temp35 instanceof AbruptCompletion), "ToIntegerOrInfinity(numPos)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp35 instanceof Completion) {
        _temp35 = _temp35.Value;
      }
      pos = _temp35;
    }
    const len = S.length;
    const start = Math.min(Math.max(pos, 0), len);
    const searchLen = searchStr.length;
    let k = start;
    while (k >= 0) {
      if (k + searchLen <= len) {
        let match = true;
        for (let j = 0; j < searchLen; j += 1) {
          if (searchStr[j] !== S[k + j]) {
            match = false;
            break;
          }
        }
        if (match) {
          return F(k);
        }
      }
      k -= 1;
    }
    return F(-1);
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.localecompare */
  StringProto_lastIndexOf.section = 'https://tc39.es/ecma262/#sec-string.prototype.lastindexof';
  function StringProto_localeCompare([that = Value.undefined], {
    thisValue
  }) {
    let _temp36 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp36 instanceof AbruptCompletion) {
      return _temp36;
    }
    /* c8 ignore if */
    if (_temp36 instanceof Completion) {
      _temp36 = _temp36.Value;
    }
    const O = _temp36;
    let _temp37 = ToString(O);
    /* c8 ignore if */
    if (_temp37 instanceof AbruptCompletion) {
      return _temp37;
    }
    /* c8 ignore if */
    if (_temp37 instanceof Completion) {
      _temp37 = _temp37.Value;
    }
    const S = _temp37.stringValue();
    let _temp38 = ToString(that);
    /* c8 ignore if */
    if (_temp38 instanceof AbruptCompletion) {
      return _temp38;
    }
    /* c8 ignore if */
    if (_temp38 instanceof Completion) {
      _temp38 = _temp38.Value;
    }
    const That = _temp38.stringValue();
    if (S === That) {
      return F(+0);
    } else if (S < That) {
      return F(-1);
    } else {
      return F(1);
    }
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.match */
  StringProto_localeCompare.section = 'https://tc39.es/ecma262/#sec-string.prototype.localecompare';
  function StringProto_match([regexp = Value.undefined], {
    thisValue
  }) {
    let _temp39 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp39 instanceof AbruptCompletion) {
      return _temp39;
    }
    /* c8 ignore if */
    if (_temp39 instanceof Completion) {
      _temp39 = _temp39.Value;
    }
    const O = _temp39;
    if (regexp !== Value.undefined && regexp !== Value.null) {
      let _temp40 = GetMethod(regexp, wellKnownSymbols.match);
      /* c8 ignore if */
      if (_temp40 instanceof AbruptCompletion) {
        return _temp40;
      }
      /* c8 ignore if */
      if (_temp40 instanceof Completion) {
        _temp40 = _temp40.Value;
      }
      const matcher = _temp40;
      if (matcher !== Value.undefined) {
        return Call(matcher, regexp, [O]);
      }
    }
    let _temp41 = ToString(O);
    /* c8 ignore if */
    if (_temp41 instanceof AbruptCompletion) {
      return _temp41;
    }
    /* c8 ignore if */
    if (_temp41 instanceof Completion) {
      _temp41 = _temp41.Value;
    }
    const S = _temp41;
    let _temp42 = RegExpCreate(regexp, Value.undefined);
    /* c8 ignore if */
    if (_temp42 instanceof AbruptCompletion) {
      return _temp42;
    }
    /* c8 ignore if */
    if (_temp42 instanceof Completion) {
      _temp42 = _temp42.Value;
    }
    const rx = _temp42;
    return Invoke(rx, wellKnownSymbols.match, [S]);
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.matchall */
  StringProto_match.section = 'https://tc39.es/ecma262/#sec-string.prototype.match';
  function StringProto_matchAll([regexp = Value.undefined], {
    thisValue
  }) {
    let _temp43 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp43 instanceof AbruptCompletion) {
      return _temp43;
    }
    /* c8 ignore if */
    if (_temp43 instanceof Completion) {
      _temp43 = _temp43.Value;
    }
    // 1. Let O be ? RequireObjectCoercible(this value).
    const O = _temp43;
    // 2. If regexp is neither undefined nor null, then
    if (regexp !== Value.undefined && regexp !== Value.null) {
      let _temp44 = IsRegExp(regexp);
      /* c8 ignore if */
      if (_temp44 instanceof AbruptCompletion) {
        return _temp44;
      }
      /* c8 ignore if */
      if (_temp44 instanceof Completion) {
        _temp44 = _temp44.Value;
      }
      // a. Let isRegExp be ? IsRegExp(regexp).
      const isRegExp = _temp44;
      // b. If isRegExp is true, then
      if (isRegExp === Value.true) {
        let _temp45 = Get(regexp, Value('flags'));
        /* c8 ignore if */
        if (_temp45 instanceof AbruptCompletion) {
          return _temp45;
        }
        /* c8 ignore if */
        if (_temp45 instanceof Completion) {
          _temp45 = _temp45.Value;
        }
        // i. Let flags be ? Get(regexp, "flags").
        const flags = _temp45;
        // ii. Perform ? RequireObjectCoercible(flags).
        let _temp46 = RequireObjectCoercible(flags);
        /* c8 ignore if */
        if (_temp46 instanceof AbruptCompletion) {
          return _temp46;
        }
        /* c8 ignore if */
        if (_temp46 instanceof Completion) {
          _temp46 = _temp46.Value;
        }
        // iii. If ? ToString(flags) does not contain "g", throw a TypeError exception.
        let _temp47 = ToString(flags);
        /* c8 ignore if */
        if (_temp47 instanceof AbruptCompletion) {
          return _temp47;
        }
        /* c8 ignore if */
        if (_temp47 instanceof Completion) {
          _temp47 = _temp47.Value;
        }
        if (!_temp47.stringValue().includes('g')) {
          return exports.surroundingAgent.Throw('TypeError', 'StringPrototypeMethodGlobalRegExp', 'matchAll');
        }
      }
      // c. Let matcher be ? GetMethod(regexp, @@matchAll).
      let _temp48 = GetMethod(regexp, wellKnownSymbols.matchAll);
      /* c8 ignore if */
      if (_temp48 instanceof AbruptCompletion) {
        return _temp48;
      }
      /* c8 ignore if */
      if (_temp48 instanceof Completion) {
        _temp48 = _temp48.Value;
      }
      const matcher = _temp48;
      // d. If matcher is not undefined, then
      if (matcher !== Value.undefined) {
        // i. Return ? Call(matcher, regexp, « O »).
        return Call(matcher, regexp, [O]);
      }
    }
    // 3. Let S be ? ToString(O).
    let _temp49 = ToString(O);
    /* c8 ignore if */
    if (_temp49 instanceof AbruptCompletion) {
      return _temp49;
    }
    /* c8 ignore if */
    if (_temp49 instanceof Completion) {
      _temp49 = _temp49.Value;
    }
    const S = _temp49;
    // 4. Let rx be ? RegExpCreate(regexp, "g").
    let _temp50 = RegExpCreate(regexp, Value('g'));
    /* c8 ignore if */
    if (_temp50 instanceof AbruptCompletion) {
      return _temp50;
    }
    /* c8 ignore if */
    if (_temp50 instanceof Completion) {
      _temp50 = _temp50.Value;
    }
    const rx = _temp50;
    // 5. Return ? Invoke(rx, @@matchAll, « S »).
    return Invoke(rx, wellKnownSymbols.matchAll, [S]);
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.normalize */
  StringProto_matchAll.section = 'https://tc39.es/ecma262/#sec-string.prototype.matchall';
  function StringProto_normalize([form = Value.undefined], {
    thisValue
  }) {
    let _temp51 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp51 instanceof AbruptCompletion) {
      return _temp51;
    }
    /* c8 ignore if */
    if (_temp51 instanceof Completion) {
      _temp51 = _temp51.Value;
    }
    const O = _temp51;
    let _temp52 = ToString(O);
    /* c8 ignore if */
    if (_temp52 instanceof AbruptCompletion) {
      return _temp52;
    }
    /* c8 ignore if */
    if (_temp52 instanceof Completion) {
      _temp52 = _temp52.Value;
    }
    const S = _temp52;
    if (form === Value.undefined) {
      form = Value('NFC');
    } else {
      let _temp53 = ToString(form);
      /* c8 ignore if */
      if (_temp53 instanceof AbruptCompletion) {
        return _temp53;
      }
      /* c8 ignore if */
      if (_temp53 instanceof Completion) {
        _temp53 = _temp53.Value;
      }
      form = _temp53;
    }
    const f = form.stringValue();
    if (!['NFC', 'NFD', 'NFKC', 'NFKD'].includes(f)) {
      return exports.surroundingAgent.Throw('RangeError', 'NormalizeInvalidForm');
    }
    const ns = S.stringValue().normalize(f);
    return Value(ns);
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.padend */
  StringProto_normalize.section = 'https://tc39.es/ecma262/#sec-string.prototype.normalize';
  function StringProto_padEnd([maxLength = Value.undefined, fillString = Value.undefined], {
    thisValue
  }) {
    let _temp54 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp54 instanceof AbruptCompletion) {
      return _temp54;
    }
    /* c8 ignore if */
    if (_temp54 instanceof Completion) {
      _temp54 = _temp54.Value;
    }
    const O = _temp54;
    return StringPad(O, maxLength, fillString, 'end');
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.padstart */
  StringProto_padEnd.section = 'https://tc39.es/ecma262/#sec-string.prototype.padend';
  function StringProto_padStart([maxLength = Value.undefined, fillString = Value.undefined], {
    thisValue
  }) {
    let _temp55 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp55 instanceof AbruptCompletion) {
      return _temp55;
    }
    /* c8 ignore if */
    if (_temp55 instanceof Completion) {
      _temp55 = _temp55.Value;
    }
    const O = _temp55;
    return StringPad(O, maxLength, fillString, 'start');
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.repeat */
  StringProto_padStart.section = 'https://tc39.es/ecma262/#sec-string.prototype.padstart';
  function StringProto_repeat([count = Value.undefined], {
    thisValue
  }) {
    let _temp56 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp56 instanceof AbruptCompletion) {
      return _temp56;
    }
    /* c8 ignore if */
    if (_temp56 instanceof Completion) {
      _temp56 = _temp56.Value;
    }
    const O = _temp56;
    let _temp57 = ToString(O);
    /* c8 ignore if */
    if (_temp57 instanceof AbruptCompletion) {
      return _temp57;
    }
    /* c8 ignore if */
    if (_temp57 instanceof Completion) {
      _temp57 = _temp57.Value;
    }
    const S = _temp57;
    let _temp58 = ToIntegerOrInfinity(count);
    /* c8 ignore if */
    if (_temp58 instanceof AbruptCompletion) {
      return _temp58;
    }
    /* c8 ignore if */
    if (_temp58 instanceof Completion) {
      _temp58 = _temp58.Value;
    }
    const n = _temp58;
    if (n < 0) {
      return exports.surroundingAgent.Throw('RangeError', 'StringRepeatCount', n);
    }
    if (n === Infinity || n === -Infinity) {
      return exports.surroundingAgent.Throw('RangeError', 'StringRepeatCount', n);
    }
    if (n === 0) {
      return Value('');
    }
    let T = '';
    for (let i = 0; i < n; i += 1) {
      T += S.stringValue();
    }
    return Value(T);
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.replace */
  StringProto_repeat.section = 'https://tc39.es/ecma262/#sec-string.prototype.repeat';
  function StringProto_replace([searchValue = Value.undefined, replaceValue = Value.undefined], {
    thisValue
  }) {
    let _temp59 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp59 instanceof AbruptCompletion) {
      return _temp59;
    }
    /* c8 ignore if */
    if (_temp59 instanceof Completion) {
      _temp59 = _temp59.Value;
    }
    const O = _temp59;
    if (searchValue !== Value.undefined && searchValue !== Value.null) {
      let _temp60 = GetMethod(searchValue, wellKnownSymbols.replace);
      /* c8 ignore if */
      if (_temp60 instanceof AbruptCompletion) {
        return _temp60;
      }
      /* c8 ignore if */
      if (_temp60 instanceof Completion) {
        _temp60 = _temp60.Value;
      }
      const replacer = _temp60;
      if (replacer !== Value.undefined) {
        return Call(replacer, searchValue, [O, replaceValue]);
      }
    }
    let _temp61 = ToString(O);
    /* c8 ignore if */
    if (_temp61 instanceof AbruptCompletion) {
      return _temp61;
    }
    /* c8 ignore if */
    if (_temp61 instanceof Completion) {
      _temp61 = _temp61.Value;
    }
    const string = _temp61;
    let _temp62 = ToString(searchValue);
    /* c8 ignore if */
    if (_temp62 instanceof AbruptCompletion) {
      return _temp62;
    }
    /* c8 ignore if */
    if (_temp62 instanceof Completion) {
      _temp62 = _temp62.Value;
    }
    const searchString = _temp62;
    const functionalReplace = IsCallable(replaceValue);
    if (functionalReplace === Value.false) {
      let _temp63 = ToString(replaceValue);
      /* c8 ignore if */
      if (_temp63 instanceof AbruptCompletion) {
        return _temp63;
      }
      /* c8 ignore if */
      if (_temp63 instanceof Completion) {
        _temp63 = _temp63.Value;
      }
      replaceValue = _temp63;
    }
    const pos = string.stringValue().indexOf(searchString.stringValue());
    const matched = searchString;
    if (pos === -1) {
      return string;
    }
    let replStr;
    if (functionalReplace === Value.true) {
      let _temp64 = Call(replaceValue, Value.undefined, [matched, F(pos), string]);
      /* c8 ignore if */
      if (_temp64 instanceof AbruptCompletion) {
        return _temp64;
      }
      /* c8 ignore if */
      if (_temp64 instanceof Completion) {
        _temp64 = _temp64.Value;
      }
      const replValue = _temp64;
      let _temp65 = ToString(replValue);
      /* c8 ignore if */
      if (_temp65 instanceof AbruptCompletion) {
        return _temp65;
      }
      /* c8 ignore if */
      if (_temp65 instanceof Completion) {
        _temp65 = _temp65.Value;
      }
      replStr = _temp65;
    } else {
      const captures = [];
      let _temp66 = GetSubstitution(matched, string, pos, captures, Value.undefined, replaceValue);
      Assert(!(_temp66 instanceof AbruptCompletion), "GetSubstitution(matched, string, pos, captures, Value.undefined, replaceValue)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp66 instanceof Completion) {
        _temp66 = _temp66.Value;
      }
      replStr = _temp66;
    }
    const tailPos = pos + matched.stringValue().length;
    const newString = string.stringValue().slice(0, pos) + replStr.stringValue() + string.stringValue().slice(tailPos);
    return Value(newString);
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.replaceall */
  StringProto_replace.section = 'https://tc39.es/ecma262/#sec-string.prototype.replace';
  function StringProto_replaceAll([searchValue = Value.undefined, replaceValue = Value.undefined], {
    thisValue
  }) {
    let _temp67 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp67 instanceof AbruptCompletion) {
      return _temp67;
    }
    /* c8 ignore if */
    if (_temp67 instanceof Completion) {
      _temp67 = _temp67.Value;
    }
    // 1. Let O be ? RequireObjectCoercible(this value).
    const O = _temp67;
    // 2.If searchValue is neither undefined nor null, then
    if (searchValue !== Value.undefined && searchValue !== Value.null) {
      let _temp68 = IsRegExp(searchValue);
      /* c8 ignore if */
      if (_temp68 instanceof AbruptCompletion) {
        return _temp68;
      }
      /* c8 ignore if */
      if (_temp68 instanceof Completion) {
        _temp68 = _temp68.Value;
      }
      // a. Let isRegExp be ? IsRegExp(searchValue).
      const isRegExp = _temp68;
      // b. If isRegExp is true, then
      if (isRegExp === Value.true) {
        let _temp69 = Get(searchValue, Value('flags'));
        /* c8 ignore if */
        if (_temp69 instanceof AbruptCompletion) {
          return _temp69;
        }
        /* c8 ignore if */
        if (_temp69 instanceof Completion) {
          _temp69 = _temp69.Value;
        }
        // i. Let flags be ? Get(searchValue, "flags").
        const flags = _temp69;
        // ii. Perform ? RequireObjectCoercible(flags).
        let _temp70 = RequireObjectCoercible(flags);
        /* c8 ignore if */
        if (_temp70 instanceof AbruptCompletion) {
          return _temp70;
        }
        /* c8 ignore if */
        if (_temp70 instanceof Completion) {
          _temp70 = _temp70.Value;
        }
        // iii. If ? ToString(flags) does not contain "g", throw a TypeError exception.
        let _temp71 = ToString(flags);
        /* c8 ignore if */
        if (_temp71 instanceof AbruptCompletion) {
          return _temp71;
        }
        /* c8 ignore if */
        if (_temp71 instanceof Completion) {
          _temp71 = _temp71.Value;
        }
        if (!_temp71.stringValue().includes('g')) {
          return exports.surroundingAgent.Throw('TypeError', 'StringPrototypeMethodGlobalRegExp', 'replaceAll');
        }
      }
      // c. Let replacer be ? GetMethod(searchValue, @@replace).
      let _temp72 = GetMethod(searchValue, wellKnownSymbols.replace);
      /* c8 ignore if */
      if (_temp72 instanceof AbruptCompletion) {
        return _temp72;
      }
      /* c8 ignore if */
      if (_temp72 instanceof Completion) {
        _temp72 = _temp72.Value;
      }
      const replacer = _temp72;
      // d. If replacer is not undefined, then
      if (replacer !== Value.undefined) {
        // i. Return ? Call(replacer, searchValue, « O, replaceValue »).
        return Call(replacer, searchValue, [O, replaceValue]);
      }
    }
    // 3. Let string be ? ToString(O).
    let _temp73 = ToString(O);
    /* c8 ignore if */
    if (_temp73 instanceof AbruptCompletion) {
      return _temp73;
    }
    /* c8 ignore if */
    if (_temp73 instanceof Completion) {
      _temp73 = _temp73.Value;
    }
    const string = _temp73;
    // 4. Let searchString be ? ToString(searchValue).
    let _temp74 = ToString(searchValue);
    /* c8 ignore if */
    if (_temp74 instanceof AbruptCompletion) {
      return _temp74;
    }
    /* c8 ignore if */
    if (_temp74 instanceof Completion) {
      _temp74 = _temp74.Value;
    }
    const searchString = _temp74;
    // 5. Let functionalReplace be IsCallable(replaceValue).
    const functionalReplace = IsCallable(replaceValue);
    // 6. If functionalReplace is false, then
    if (functionalReplace === Value.false) {
      let _temp75 = ToString(replaceValue);
      /* c8 ignore if */
      if (_temp75 instanceof AbruptCompletion) {
        return _temp75;
      }
      /* c8 ignore if */
      if (_temp75 instanceof Completion) {
        _temp75 = _temp75.Value;
      }
      // a. Let replaceValue be ? ToString(replaceValue).
      replaceValue = _temp75;
    }
    // 7. Let searchLength be the length of searchString.
    const searchLength = searchString.stringValue().length;
    // 8. Let advanceBy be max(1, searchLength).
    const advanceBy = Math.max(1, searchLength);
    // 9. Let matchPositions be a new empty List.
    const matchPositions = [];
    // 10. Let position be ! StringIndexOf(string, searchString, 0).
    let _temp76 = StringIndexOf(string, searchString, 0);
    Assert(!(_temp76 instanceof AbruptCompletion), "StringIndexOf(string, searchString, 0)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp76 instanceof Completion) {
      _temp76 = _temp76.Value;
    }
    let position = R(_temp76);
    // 11. Repeat, while position is not -1
    while (position !== -1) {
      // a. Append position to the end of matchPositions.
      matchPositions.push(position);
      // b. Let position be ! StringIndexOf(string, searchString, position + advanceBy).
      let _temp77 = StringIndexOf(string, searchString, position + advanceBy);
      Assert(!(_temp77 instanceof AbruptCompletion), "StringIndexOf(string, searchString, position + advanceBy)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp77 instanceof Completion) {
        _temp77 = _temp77.Value;
      }
      position = R(_temp77);
    }
    // 12. Let endOfLastMatch be 0.
    let endOfLastMatch = 0;
    // 13. Let result be the empty string value.
    let result = '';
    // 14. For each position in matchPositions, do
    for (position of matchPositions) {
      let replacement;
      // a. If functionalReplace is true, then
      if (functionalReplace === Value.true) {
        let _temp79 = Call(replaceValue, Value.undefined, [searchString, F(position), string]);
        /* c8 ignore if */
        if (_temp79 instanceof AbruptCompletion) {
          return _temp79;
        }
        /* c8 ignore if */
        if (_temp79 instanceof Completion) {
          _temp79 = _temp79.Value;
        }
        let _temp78 = ToString(_temp79);
        /* c8 ignore if */
        if (_temp78 instanceof AbruptCompletion) {
          return _temp78;
        }
        /* c8 ignore if */
        if (_temp78 instanceof Completion) {
          _temp78 = _temp78.Value;
        }
        // i. Let replacement be ? ToString(? Call(replaceValue, undefined, « searchString, 𝔽(position), string »).
        replacement = _temp78;
      } else {
        // b. Else,
        // i. Assert: Type(replaceValue) is String.
        Assert(replaceValue instanceof JSStringValue, "replaceValue instanceof JSStringValue");
        // ii. Let captures be a new empty List.
        const captures = [];
        // iii. Let replacement be GetSubstitution(searchString, string, position, captures, undefined, replaceValue).
        replacement = GetSubstitution(searchString, string, position, captures, Value.undefined, replaceValue);
      }
      // c. Let stringSlice be the substring of string consisting of the code units from endOfLastMatch (inclusive) up through position (exclusive).
      const stringSlice = string.stringValue().slice(endOfLastMatch, position);
      // d. Let result be the string-concatenation of result, stringSlice, and replacement.
      result = result + stringSlice + replacement.stringValue();
      // e. Let endOfLastMatch be position + searchLength.
      endOfLastMatch = position + searchLength;
    }
    // 15. If endOfLastMatch < the length of string, then
    if (endOfLastMatch < string.stringValue().length) {
      // a. Let result be the string-concatenation of result and the substring of string consisting of the code units from endOfLastMatch (inclusive) up through the final code unit of string (inclusive).
      result += string.stringValue().slice(endOfLastMatch);
    }
    // 16. Return result.
    return Value(result);
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.slice */
  StringProto_replaceAll.section = 'https://tc39.es/ecma262/#sec-string.prototype.replaceall';
  function StringProto_search([regexp = Value.undefined], {
    thisValue
  }) {
    let _temp80 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp80 instanceof AbruptCompletion) {
      return _temp80;
    }
    /* c8 ignore if */
    if (_temp80 instanceof Completion) {
      _temp80 = _temp80.Value;
    }
    const O = _temp80;
    if (regexp !== Value.undefined && regexp !== Value.null) {
      let _temp81 = GetMethod(regexp, wellKnownSymbols.search);
      /* c8 ignore if */
      if (_temp81 instanceof AbruptCompletion) {
        return _temp81;
      }
      /* c8 ignore if */
      if (_temp81 instanceof Completion) {
        _temp81 = _temp81.Value;
      }
      const searcher = _temp81;
      if (searcher !== Value.undefined) {
        return Call(searcher, regexp, [O]);
      }
    }
    let _temp82 = ToString(O);
    /* c8 ignore if */
    if (_temp82 instanceof AbruptCompletion) {
      return _temp82;
    }
    /* c8 ignore if */
    if (_temp82 instanceof Completion) {
      _temp82 = _temp82.Value;
    }
    const string = _temp82;
    let _temp83 = RegExpCreate(regexp, Value.undefined);
    /* c8 ignore if */
    if (_temp83 instanceof AbruptCompletion) {
      return _temp83;
    }
    /* c8 ignore if */
    if (_temp83 instanceof Completion) {
      _temp83 = _temp83.Value;
    }
    const rx = _temp83;
    return Invoke(rx, wellKnownSymbols.search, [string]);
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.slice */
  StringProto_search.section = 'https://tc39.es/ecma262/#sec-string.prototype.slice';
  function StringProto_slice([start = Value.undefined, end = Value.undefined], {
    thisValue
  }) {
    let _temp84 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp84 instanceof AbruptCompletion) {
      return _temp84;
    }
    /* c8 ignore if */
    if (_temp84 instanceof Completion) {
      _temp84 = _temp84.Value;
    }
    const O = _temp84;
    let _temp85 = ToString(O);
    /* c8 ignore if */
    if (_temp85 instanceof AbruptCompletion) {
      return _temp85;
    }
    /* c8 ignore if */
    if (_temp85 instanceof Completion) {
      _temp85 = _temp85.Value;
    }
    const S = _temp85.stringValue();
    const len = S.length;
    let _temp86 = ToIntegerOrInfinity(start);
    /* c8 ignore if */
    if (_temp86 instanceof AbruptCompletion) {
      return _temp86;
    }
    /* c8 ignore if */
    if (_temp86 instanceof Completion) {
      _temp86 = _temp86.Value;
    }
    const intStart = _temp86;
    let intEnd;
    if (end === Value.undefined) {
      intEnd = len;
    } else {
      let _temp87 = ToIntegerOrInfinity(end);
      /* c8 ignore if */
      if (_temp87 instanceof AbruptCompletion) {
        return _temp87;
      }
      /* c8 ignore if */
      if (_temp87 instanceof Completion) {
        _temp87 = _temp87.Value;
      }
      intEnd = _temp87;
    }
    let from;
    if (intStart < 0) {
      from = Math.max(len + intStart, 0);
    } else {
      from = Math.min(intStart, len);
    }
    let to;
    if (intEnd < 0) {
      to = Math.max(len + intEnd, 0);
    } else {
      to = Math.min(intEnd, len);
    }
    const span = Math.max(to - from, 0);
    return Value(S.slice(from, from + span));
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.split */
  StringProto_slice.section = 'https://tc39.es/ecma262/#sec-string.prototype.slice';
  function StringProto_split([separator = Value.undefined, limit = Value.undefined], {
    thisValue
  }) {
    let _temp88 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp88 instanceof AbruptCompletion) {
      return _temp88;
    }
    /* c8 ignore if */
    if (_temp88 instanceof Completion) {
      _temp88 = _temp88.Value;
    }
    const O = _temp88;
    if (separator !== Value.undefined && separator !== Value.null) {
      let _temp89 = GetMethod(separator, wellKnownSymbols.split);
      /* c8 ignore if */
      if (_temp89 instanceof AbruptCompletion) {
        return _temp89;
      }
      /* c8 ignore if */
      if (_temp89 instanceof Completion) {
        _temp89 = _temp89.Value;
      }
      const splitter = _temp89;
      if (splitter !== Value.undefined) {
        return Call(splitter, separator, [O, limit]);
      }
    }
    let _temp90 = ToString(O);
    /* c8 ignore if */
    if (_temp90 instanceof AbruptCompletion) {
      return _temp90;
    }
    /* c8 ignore if */
    if (_temp90 instanceof Completion) {
      _temp90 = _temp90.Value;
    }
    const S = _temp90;
    let _temp91 = ArrayCreate(0);
    Assert(!(_temp91 instanceof AbruptCompletion), "ArrayCreate(0)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp91 instanceof Completion) {
      _temp91 = _temp91.Value;
    }
    const A = _temp91;
    let lengthA = 0;
    let lim;
    if (limit === Value.undefined) {
      lim = F(2 ** 32 - 1);
    } else {
      let _temp92 = ToUint32(limit);
      /* c8 ignore if */
      if (_temp92 instanceof AbruptCompletion) {
        return _temp92;
      }
      /* c8 ignore if */
      if (_temp92 instanceof Completion) {
        _temp92 = _temp92.Value;
      }
      lim = _temp92;
    }
    const s = S.stringValue().length;
    let p = 0;
    let _temp93 = ToString(separator);
    /* c8 ignore if */
    if (_temp93 instanceof AbruptCompletion) {
      return _temp93;
    }
    /* c8 ignore if */
    if (_temp93 instanceof Completion) {
      _temp93 = _temp93.Value;
    }
    const R$1 = _temp93;
    if (R(lim) === 0) {
      return A;
    }
    if (separator === Value.undefined) {
      let _temp94 = CreateDataPropertyOrThrow(A, Value('0'), S);
      Assert(!(_temp94 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(A, Value('0'), S)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp94 instanceof Completion) {
        _temp94 = _temp94.Value;
      }
      return A;
    }
    if (s === 0) {
      if (R$1.stringValue() !== '') {
        let _temp95 = CreateDataPropertyOrThrow(A, Value('0'), S);
        Assert(!(_temp95 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(A, Value('0'), S)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp95 instanceof Completion) {
          _temp95 = _temp95.Value;
        }
      }
      return A;
    }
    let q = p;
    while (q !== s) {
      const e = SplitMatch(S, q, R$1);
      if (e === false) {
        q += 1;
      } else {
        if (e === p) {
          q += 1;
        } else {
          const T = Value(S.stringValue().substring(p, q));
          let _temp97 = ToString(F(lengthA));
          Assert(!(_temp97 instanceof AbruptCompletion), "ToString(F(lengthA))" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp97 instanceof Completion) {
            _temp97 = _temp97.Value;
          }
          let _temp96 = CreateDataPropertyOrThrow(A, _temp97, T);
          Assert(!(_temp96 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(A, X(ToString(F(lengthA))), T)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp96 instanceof Completion) {
            _temp96 = _temp96.Value;
          }
          lengthA += 1;
          if (lengthA === R(lim)) {
            return A;
          }
          p = e;
          q = p;
        }
      }
    }
    const T = Value(S.stringValue().substring(p, s));
    let _temp99 = ToString(F(lengthA));
    Assert(!(_temp99 instanceof AbruptCompletion), "ToString(F(lengthA))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp99 instanceof Completion) {
      _temp99 = _temp99.Value;
    }
    let _temp98 = CreateDataPropertyOrThrow(A, _temp99, T);
    Assert(!(_temp98 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(A, X(ToString(F(lengthA))), T)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp98 instanceof Completion) {
      _temp98 = _temp98.Value;
    }
    return A;
  }

  /** https://tc39.es/ecma262/#sec-splitmatch */
  StringProto_split.section = 'https://tc39.es/ecma262/#sec-string.prototype.split';
  function SplitMatch(S, q, R) {
    Assert(R instanceof JSStringValue, "R instanceof JSStringValue");
    const r = R.stringValue().length;
    const s = S.stringValue().length;
    if (q + r > s) {
      return false;
    }
    for (let i = 0; i < r; i += 1) {
      if (S.stringValue().charCodeAt(q + i) !== R.stringValue().charCodeAt(i)) {
        return false;
      }
    }
    return q + r;
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.startswith */
  SplitMatch.section = 'https://tc39.es/ecma262/#sec-splitmatch';
  function StringProto_startsWith([searchString = Value.undefined, position = Value.undefined], {
    thisValue
  }) {
    let _temp100 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp100 instanceof AbruptCompletion) {
      return _temp100;
    }
    /* c8 ignore if */
    if (_temp100 instanceof Completion) {
      _temp100 = _temp100.Value;
    }
    const O = _temp100;
    let _temp101 = ToString(O);
    /* c8 ignore if */
    if (_temp101 instanceof AbruptCompletion) {
      return _temp101;
    }
    /* c8 ignore if */
    if (_temp101 instanceof Completion) {
      _temp101 = _temp101.Value;
    }
    const S = _temp101.stringValue();
    let _temp102 = IsRegExp(searchString);
    /* c8 ignore if */
    if (_temp102 instanceof AbruptCompletion) {
      return _temp102;
    }
    /* c8 ignore if */
    if (_temp102 instanceof Completion) {
      _temp102 = _temp102.Value;
    }
    const isRegExp = _temp102;
    if (isRegExp === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'RegExpArgumentNotAllowed', 'String.prototype.startsWith');
    }
    let _temp103 = ToString(searchString);
    /* c8 ignore if */
    if (_temp103 instanceof AbruptCompletion) {
      return _temp103;
    }
    /* c8 ignore if */
    if (_temp103 instanceof Completion) {
      _temp103 = _temp103.Value;
    }
    const searchStr = _temp103.stringValue();
    let _temp104 = ToIntegerOrInfinity(position);
    /* c8 ignore if */
    if (_temp104 instanceof AbruptCompletion) {
      return _temp104;
    }
    /* c8 ignore if */
    if (_temp104 instanceof Completion) {
      _temp104 = _temp104.Value;
    }
    const pos = _temp104;
    Assert(!(position === Value.undefined) || pos === 0, "!(position === Value.undefined) || pos === 0");
    const len = S.length;
    const start = Math.min(Math.max(pos, 0), len);
    const searchLength = searchStr.length;
    if (searchLength + start > len) {
      return Value.false;
    }
    for (let i = 0; i < searchLength; i += 1) {
      if (S.charCodeAt(start + i) !== searchStr.charCodeAt(i)) {
        return Value.false;
      }
    }
    return Value.true;
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.substring */
  StringProto_startsWith.section = 'https://tc39.es/ecma262/#sec-string.prototype.startswith';
  function StringProto_substring([start = Value.undefined, end = Value.undefined], {
    thisValue
  }) {
    let _temp105 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp105 instanceof AbruptCompletion) {
      return _temp105;
    }
    /* c8 ignore if */
    if (_temp105 instanceof Completion) {
      _temp105 = _temp105.Value;
    }
    const O = _temp105;
    let _temp106 = ToString(O);
    /* c8 ignore if */
    if (_temp106 instanceof AbruptCompletion) {
      return _temp106;
    }
    /* c8 ignore if */
    if (_temp106 instanceof Completion) {
      _temp106 = _temp106.Value;
    }
    const S = _temp106.stringValue();
    const len = S.length;
    let _temp107 = ToIntegerOrInfinity(start);
    /* c8 ignore if */
    if (_temp107 instanceof AbruptCompletion) {
      return _temp107;
    }
    /* c8 ignore if */
    if (_temp107 instanceof Completion) {
      _temp107 = _temp107.Value;
    }
    const intStart = _temp107;
    let intEnd;
    if (end === Value.undefined) {
      intEnd = len;
    } else {
      let _temp108 = ToIntegerOrInfinity(end);
      /* c8 ignore if */
      if (_temp108 instanceof AbruptCompletion) {
        return _temp108;
      }
      /* c8 ignore if */
      if (_temp108 instanceof Completion) {
        _temp108 = _temp108.Value;
      }
      intEnd = _temp108;
    }
    const finalStart = Math.min(Math.max(intStart, 0), len);
    const finalEnd = Math.min(Math.max(intEnd, 0), len);
    const from = Math.min(finalStart, finalEnd);
    const to = Math.max(finalStart, finalEnd);
    return Value(S.slice(from, to));
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.tolocalelowercase */
  StringProto_substring.section = 'https://tc39.es/ecma262/#sec-string.prototype.substring';
  function StringProto_toLocaleLowerCase(args, {
    thisValue
  }) {
    let _temp109 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp109 instanceof AbruptCompletion) {
      return _temp109;
    }
    /* c8 ignore if */
    if (_temp109 instanceof Completion) {
      _temp109 = _temp109.Value;
    }
    const O = _temp109;
    let _temp110 = ToString(O);
    /* c8 ignore if */
    if (_temp110 instanceof AbruptCompletion) {
      return _temp110;
    }
    /* c8 ignore if */
    if (_temp110 instanceof Completion) {
      _temp110 = _temp110.Value;
    }
    const S = _temp110;
    const L = S.stringValue().toLocaleLowerCase();
    return Value(L);
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.tolocaleuppercase */
  StringProto_toLocaleLowerCase.section = 'https://tc39.es/ecma262/#sec-string.prototype.tolocalelowercase';
  function StringProto_toLocaleUpperCase(args, {
    thisValue
  }) {
    let _temp111 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp111 instanceof AbruptCompletion) {
      return _temp111;
    }
    /* c8 ignore if */
    if (_temp111 instanceof Completion) {
      _temp111 = _temp111.Value;
    }
    const O = _temp111;
    let _temp112 = ToString(O);
    /* c8 ignore if */
    if (_temp112 instanceof AbruptCompletion) {
      return _temp112;
    }
    /* c8 ignore if */
    if (_temp112 instanceof Completion) {
      _temp112 = _temp112.Value;
    }
    const S = _temp112;
    const L = S.stringValue().toLocaleUpperCase();
    return Value(L);
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.tolowercase */
  StringProto_toLocaleUpperCase.section = 'https://tc39.es/ecma262/#sec-string.prototype.tolocaleuppercase';
  function StringProto_toLowerCase(args, {
    thisValue
  }) {
    let _temp113 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp113 instanceof AbruptCompletion) {
      return _temp113;
    }
    /* c8 ignore if */
    if (_temp113 instanceof Completion) {
      _temp113 = _temp113.Value;
    }
    const O = _temp113;
    let _temp114 = ToString(O);
    /* c8 ignore if */
    if (_temp114 instanceof AbruptCompletion) {
      return _temp114;
    }
    /* c8 ignore if */
    if (_temp114 instanceof Completion) {
      _temp114 = _temp114.Value;
    }
    const S = _temp114;
    const L = S.stringValue().toLowerCase();
    return Value(L);
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.tostring */
  StringProto_toLowerCase.section = 'https://tc39.es/ecma262/#sec-string.prototype.tolowercase';
  function StringProto_toString(args, {
    thisValue
  }) {
    return thisStringValue(thisValue);
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.touppercase */
  StringProto_toString.section = 'https://tc39.es/ecma262/#sec-string.prototype.tostring';
  function StringProto_toUpperCase(args, {
    thisValue
  }) {
    let _temp115 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp115 instanceof AbruptCompletion) {
      return _temp115;
    }
    /* c8 ignore if */
    if (_temp115 instanceof Completion) {
      _temp115 = _temp115.Value;
    }
    const O = _temp115;
    let _temp116 = ToString(O);
    /* c8 ignore if */
    if (_temp116 instanceof AbruptCompletion) {
      return _temp116;
    }
    /* c8 ignore if */
    if (_temp116 instanceof Completion) {
      _temp116 = _temp116.Value;
    }
    const S = _temp116;
    const L = S.stringValue().toUpperCase();
    return Value(L);
  }

  /** https://tc39.es/proposal-is-usv-string/#sec-string.prototype.towellformed */
  StringProto_toUpperCase.section = 'https://tc39.es/ecma262/#sec-string.prototype.touppercase';
  function StringProto_toWellFormed(args, {
    thisValue
  }) {
    let _temp117 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp117 instanceof AbruptCompletion) {
      return _temp117;
    }
    /* c8 ignore if */
    if (_temp117 instanceof Completion) {
      _temp117 = _temp117.Value;
    }
    // 1. Let O be ? RequireObjectCoercible(this value).
    const O = _temp117;
    // 2. Let S be ? ToString(O).
    let _temp118 = ToString(O);
    /* c8 ignore if */
    if (_temp118 instanceof AbruptCompletion) {
      return _temp118;
    }
    /* c8 ignore if */
    if (_temp118 instanceof Completion) {
      _temp118 = _temp118.Value;
    }
    const S = _temp118;
    // 3. Let strLen be the length of S.
    const strLen = S.stringValue().length;
    // 4. Let k be 0.
    let k = 0;
    // 5. Let result be the empty String.
    let result = '';
    // 6. Repeat, while k < strLen,
    while (k < strLen) {
      // a. Let cp be CodePointAt(S, k).
      const cp = CodePointAt(S.stringValue(), k);
      // b. If cp.[[IsUnpairedSurrogate]] is true, then
      if (cp.IsUnpairedSurrogate) {
        // i. Set result to the string-concatenation of result and 0xFFFD (REPLACEMENT CHARACTER).
        result += '\uFFFD';
      } else {
        // c. Else,
        // i. Set result to the string-concatenation of result and UTF16EncodeCodePoint(cp.[[CodePoint]]).
        result += UTF16EncodeCodePoint(cp.CodePoint);
      }
      // d. Set k to k + cp.[[CodeUnitCount]].
      k += cp.CodeUnitCount;
    }
    // 7. Return result.
    return Value(result);
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.trim */
  StringProto_toWellFormed.section = 'https://tc39.es/proposal-is-usv-string/#sec-string.prototype.towellformed';
  function StringProto_trim(args, {
    thisValue
  }) {
    const S = thisValue;
    return TrimString(S, 'start+end');
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.trimend */
  StringProto_trim.section = 'https://tc39.es/ecma262/#sec-string.prototype.trim';
  function StringProto_trimEnd(args, {
    thisValue
  }) {
    const S = thisValue;
    return TrimString(S, 'end');
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.trimstart */
  StringProto_trimEnd.section = 'https://tc39.es/ecma262/#sec-string.prototype.trimend';
  function StringProto_trimStart(args, {
    thisValue
  }) {
    const S = thisValue;
    return TrimString(S, 'start');
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.valueof */
  StringProto_trimStart.section = 'https://tc39.es/ecma262/#sec-string.prototype.trimstart';
  function StringProto_valueOf(args, {
    thisValue
  }) {
    return thisStringValue(thisValue);
  }

  /** https://tc39.es/ecma262/#sec-string.prototype-@@iterator */
  StringProto_valueOf.section = 'https://tc39.es/ecma262/#sec-string.prototype.valueof';
  function StringProto_iterator(args, {
    thisValue
  }) {
    let _temp119 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp119 instanceof AbruptCompletion) {
      return _temp119;
    }
    /* c8 ignore if */
    if (_temp119 instanceof Completion) {
      _temp119 = _temp119.Value;
    }
    // 1. Let O be ? RequireObjectCoercible(this value).
    const O = _temp119;
    // 2. Let s be ? ToString(O).
    let _temp120 = ToString(O);
    /* c8 ignore if */
    if (_temp120 instanceof AbruptCompletion) {
      return _temp120;
    }
    /* c8 ignore if */
    if (_temp120 instanceof Completion) {
      _temp120 = _temp120.Value;
    }
    const s = _temp120.stringValue();
    // 3. Let closure be a new Abstract Closure with no parameters that captures s and performs the following steps when called:
    const closure = function* closure() {
      // a. Let position be 0.
      let position = 0;
      // b. Let len be the length of s.
      const len = s.length;
      // c. Repeat, while position < len,
      while (position < len) {
        let _temp121 = CodePointAt(s, position);
        Assert(!(_temp121 instanceof AbruptCompletion), "CodePointAt(s, position)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp121 instanceof Completion) {
          _temp121 = _temp121.Value;
        }
        // i. Let cp be ! CodePointAt(s, position).
        const cp = _temp121;
        // ii. Let nextIndex be position + cp.[[CodeUnitCount]].
        const nextIndex = position + cp.CodeUnitCount;
        // iii. Let resultString be the substring of s from position to nextIndex.
        const resultString = Value(s.slice(position, nextIndex));
        // iv. Set position to nextIndex.
        position = nextIndex;
        // v. Perform ? Yield(resultString).
        let _temp122 = yield* Yield(resultString);
        /* c8 ignore if */
        if (_temp122 instanceof AbruptCompletion) {
          return _temp122;
        }
        /* c8 ignore if */
        if (_temp122 instanceof Completion) {
          _temp122 = _temp122.Value;
        }
      }
      // d. Return undefined.
      return Value.undefined;
    };
    // 4. Return ! CreateIteratorFromClosure(closure, "%StringIteratorPrototype%", %StringIteratorPrototype%).
    let _temp123 = CreateIteratorFromClosure(closure, Value('%StringIteratorPrototype%'), exports.surroundingAgent.intrinsic('%StringIteratorPrototype%'));
    Assert(!(_temp123 instanceof AbruptCompletion), "CreateIteratorFromClosure(closure, Value('%StringIteratorPrototype%'), surroundingAgent.intrinsic('%StringIteratorPrototype%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp123 instanceof Completion) {
      _temp123 = _temp123.Value;
    }
    return _temp123;
  }

  /** https://tc39.es/ecma262/#sec-string.prototype.at */
  StringProto_iterator.section = 'https://tc39.es/ecma262/#sec-string.prototype-@@iterator';
  function StringProto_at([index = Value.undefined], {
    thisValue
  }) {
    let _temp124 = RequireObjectCoercible(thisValue);
    /* c8 ignore if */
    if (_temp124 instanceof AbruptCompletion) {
      return _temp124;
    }
    /* c8 ignore if */
    if (_temp124 instanceof Completion) {
      _temp124 = _temp124.Value;
    }
    // 1. Let O be ? RequireObjectCoercible(this value).
    const O = _temp124;
    // 2. Let S be ? ToString(O).
    let _temp125 = ToString(O);
    /* c8 ignore if */
    if (_temp125 instanceof AbruptCompletion) {
      return _temp125;
    }
    /* c8 ignore if */
    if (_temp125 instanceof Completion) {
      _temp125 = _temp125.Value;
    }
    const S = _temp125;
    // 3. Let len be the length of S.
    const len = S.stringValue().length;
    // 4. Let relativeIndex be ? ToIntegerOrInfinity(index).
    let _temp126 = ToIntegerOrInfinity(index);
    /* c8 ignore if */
    if (_temp126 instanceof AbruptCompletion) {
      return _temp126;
    }
    /* c8 ignore if */
    if (_temp126 instanceof Completion) {
      _temp126 = _temp126.Value;
    }
    const relativeIndex = _temp126;
    let k;
    // 5. If relativeIndex ≥ 0, then
    if (relativeIndex >= 0) {
      // a. Let k be relativeIndex.
      k = relativeIndex;
    } else {
      // 6. Else,
      // a. Let k be len + relativeIndex.
      k = len + relativeIndex;
    }
    // 7. If k < 0 or k ≥ len, then return undefined.
    if (k < 0 || k >= len) {
      return Value.undefined;
    }
    // 8. Return the String value consisting of only the code unit at position k in S.
    return Value(S.stringValue()[k]);
  }
  StringProto_at.section = 'https://tc39.es/ecma262/#sec-string.prototype.at';
  function bootstrapStringPrototype(realmRec) {
    const proto = StringCreate(Value(''), realmRec.Intrinsics['%Object.prototype%']);
    assignProps(realmRec, proto, [['charAt', StringProto_charAt, 1], ['charCodeAt', StringProto_charCodeAt, 1], ['codePointAt', StringProto_codePointAt, 1], ['concat', StringProto_concat, 1], ['endsWith', StringProto_endsWith, 1], ['includes', StringProto_includes, 1], ['indexOf', StringProto_indexOf, 1], exports.surroundingAgent.feature('is-usv-string') ? ['isWellFormed', StringProto_isWellFormed, 0] : undefined, ['at', StringProto_at, 1], ['lastIndexOf', StringProto_lastIndexOf, 1], ['localeCompare', StringProto_localeCompare, 1], ['match', StringProto_match, 1], ['matchAll', StringProto_matchAll, 1], ['normalize', StringProto_normalize, 0], ['padEnd', StringProto_padEnd, 1], ['padStart', StringProto_padStart, 1], ['repeat', StringProto_repeat, 1], ['replace', StringProto_replace, 2], ['replaceAll', StringProto_replaceAll, 2], ['search', StringProto_search, 1], ['slice', StringProto_slice, 2], ['split', StringProto_split, 2], ['startsWith', StringProto_startsWith, 1], ['substring', StringProto_substring, 2], ['toLocaleLowerCase', StringProto_toLocaleLowerCase, 0], ['toLocaleUpperCase', StringProto_toLocaleUpperCase, 0], ['toLowerCase', StringProto_toLowerCase, 0], ['toString', StringProto_toString, 0], ['toUpperCase', StringProto_toUpperCase, 0], exports.surroundingAgent.feature('is-usv-string') ? ['toWellFormed', StringProto_toWellFormed, 0] : undefined, ['trim', StringProto_trim, 0], ['trimEnd', StringProto_trimEnd, 0], ['trimStart', StringProto_trimStart, 0], ['valueOf', StringProto_valueOf, 0], [wellKnownSymbols.iterator, StringProto_iterator, 0]]);
    realmRec.Intrinsics['%String.prototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-string-constructor-string-value */
  function StringConstructor([value], {
    NewTarget
  }) {
    let s;
    if (value === undefined) {
      s = Value('');
    } else {
      if (NewTarget === Value.undefined && value instanceof SymbolValue) {
        let _temp = SymbolDescriptiveString(value);
        Assert(!(_temp instanceof AbruptCompletion), "SymbolDescriptiveString(value)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp instanceof Completion) {
          _temp = _temp.Value;
        }
        return _temp;
      }
      let _temp2 = ToString(value);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      s = _temp2;
    }
    if (NewTarget === Value.undefined) {
      return s;
    }
    let _temp4 = GetPrototypeFromConstructor(NewTarget, '%String.prototype%');
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    let _temp3 = StringCreate(s, _temp4);
    Assert(!(_temp3 instanceof AbruptCompletion), "StringCreate(s, Q(GetPrototypeFromConstructor(NewTarget, '%String.prototype%')))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    return _temp3;
  }

  /** https://tc39.es/ecma262/#sec-string.fromcharcode */
  StringConstructor.section = 'https://tc39.es/ecma262/#sec-string-constructor-string-value';
  function String_fromCharCode(codeUnits) {
    const length = codeUnits.length;
    const elements = [];
    let nextIndex = 0;
    while (nextIndex < length) {
      const next = codeUnits[nextIndex];
      let _temp5 = ToUint16(next);
      /* c8 ignore if */
      if (_temp5 instanceof AbruptCompletion) {
        return _temp5;
      }
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      const nextCU = _temp5;
      elements.push(nextCU);
      nextIndex += 1;
    }
    const result = elements.reduce((previous, current) => previous + String.fromCharCode(R(current)), '');
    return Value(result);
  }

  /** https://tc39.es/ecma262/#sec-string.fromcodepoint */
  String_fromCharCode.section = 'https://tc39.es/ecma262/#sec-string.fromcharcode';
  function String_fromCodePoint(codePoints) {
    // 1. Let result be the empty String.
    let result = '';
    // 2. For each element next of codePoints, do
    for (const next of codePoints) {
      let _temp6 = ToNumber(next);
      /* c8 ignore if */
      if (_temp6 instanceof AbruptCompletion) {
        return _temp6;
      }
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
      // a. Let nextCP be ? ToNumber(next).
      const nextCP = _temp6;
      // b. If IsIntegralNumber(nextCP) is false, throw a RangeError exception.
      let _temp7 = IsIntegralNumber(nextCP);
      Assert(!(_temp7 instanceof AbruptCompletion), "IsIntegralNumber(nextCP)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp7 instanceof Completion) {
        _temp7 = _temp7.Value;
      }
      if (_temp7 === Value.false) {
        return exports.surroundingAgent.Throw('RangeError', 'StringCodePointInvalid', next);
      }
      // c. If ℝ(nextCP) < 0 or ℝ(nextCP) > 0x10FFFF, throw a RangeError exception.
      if (R(nextCP) < 0 || R(nextCP) > 0x10FFFF) {
        return exports.surroundingAgent.Throw('RangeError', 'StringCodePointInvalid', nextCP);
      }
      // d. Set result to the string-concatenation of result and UTF16EncodeCodePoint(ℝ(nextCP)).
      result += UTF16EncodeCodePoint(R(nextCP));
    }
    // 3. Assert: If codePoints is empty, then result is the empty String.
    Assert(!(codePoints.length === 0) || result.length === 0, "!(codePoints.length === 0) || result.length === 0");
    // 4. Return result.
    return Value(result);
  }

  /** https://tc39.es/ecma262/#sec-string.raw */
  String_fromCodePoint.section = 'https://tc39.es/ecma262/#sec-string.fromcodepoint';
  function String_raw([template = Value.undefined, ...substitutions]) {
    const numberOfSubstitutions = substitutions.length;
    let _temp8 = ToObject(template);
    /* c8 ignore if */
    if (_temp8 instanceof AbruptCompletion) {
      return _temp8;
    }
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    const cooked = _temp8;
    let _temp15 = Get(cooked, Value('raw'));
    /* c8 ignore if */
    if (_temp15 instanceof AbruptCompletion) {
      return _temp15;
    }
    /* c8 ignore if */
    if (_temp15 instanceof Completion) {
      _temp15 = _temp15.Value;
    }
    let _temp9 = ToObject(_temp15);
    /* c8 ignore if */
    if (_temp9 instanceof AbruptCompletion) {
      return _temp9;
    }
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    const raw = _temp9;
    let _temp10 = LengthOfArrayLike(raw);
    /* c8 ignore if */
    if (_temp10 instanceof AbruptCompletion) {
      return _temp10;
    }
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    const literalSegments = _temp10;
    if (literalSegments <= 0) {
      return Value('');
    }
    // Not sure why the spec uses a List, but this is really just a String.
    const stringElements = [];
    let nextIndex = 0;
    while (true) {
      let _temp11 = ToString(F(nextIndex));
      Assert(!(_temp11 instanceof AbruptCompletion), "ToString(F(nextIndex))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp11 instanceof Completion) {
        _temp11 = _temp11.Value;
      }
      const nextKey = _temp11;
      let _temp14 = Get(raw, nextKey);
      /* c8 ignore if */
      if (_temp14 instanceof AbruptCompletion) {
        return _temp14;
      }
      /* c8 ignore if */
      if (_temp14 instanceof Completion) {
        _temp14 = _temp14.Value;
      }
      let _temp12 = ToString(_temp14);
      /* c8 ignore if */
      if (_temp12 instanceof AbruptCompletion) {
        return _temp12;
      }
      /* c8 ignore if */
      if (_temp12 instanceof Completion) {
        _temp12 = _temp12.Value;
      }
      const nextSeg = _temp12;
      stringElements.push(nextSeg.stringValue());
      if (nextIndex + 1 === literalSegments) {
        return Value(stringElements.join(''));
      }
      let next;
      if (nextIndex < numberOfSubstitutions) {
        next = substitutions[nextIndex];
      } else {
        next = Value('');
      }
      let _temp13 = ToString(next);
      /* c8 ignore if */
      if (_temp13 instanceof AbruptCompletion) {
        return _temp13;
      }
      /* c8 ignore if */
      if (_temp13 instanceof Completion) {
        _temp13 = _temp13.Value;
      }
      const nextSub = _temp13;
      stringElements.push(nextSub.stringValue());
      nextIndex += 1;
    }
  }
  String_raw.section = 'https://tc39.es/ecma262/#sec-string.raw';
  function bootstrapString(realmRec) {
    const stringConstructor = bootstrapConstructor(realmRec, StringConstructor, 'String', 1, realmRec.Intrinsics['%String.prototype%'], [['fromCharCode', String_fromCharCode, 1], ['fromCodePoint', String_fromCodePoint, 1], ['raw', String_raw, 1]]);
    realmRec.Intrinsics['%String%'] = stringConstructor;
  }

  /** https://tc39.es/ecma262/#sec-error.prototype.tostring */
  function ErrorProto_toString(args, {
    thisValue
  }) {
    // 1. Let O be this value.
    const O = thisValue;
    // 2. If Type(O) is not Object, throw a TypeError exception.
    if (!(O instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', O);
    }
    // 3. Let name be ? Get(O, "name").
    let _temp = Get(O, Value('name'));
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    let name = _temp;
    // 4. If name is undefined, set name to "Error"; otherwise set name to ? ToString(name).
    if (name === Value.undefined) {
      name = Value('Error');
    } else {
      let _temp2 = ToString(name);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      name = _temp2;
    }
    // 5. Let msg be ? Get(O, "message").
    let _temp3 = Get(O, Value('message'));
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    let msg = _temp3;
    // 6. If msg is undefined, set msg to the empty String; otherwise set msg to ? ToString(msg).
    if (msg === Value.undefined) {
      msg = Value('');
    } else {
      let _temp4 = ToString(msg);
      /* c8 ignore if */
      if (_temp4 instanceof AbruptCompletion) {
        return _temp4;
      }
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      msg = _temp4;
    }
    // 7. If name is the empty String, return msg.
    if (name.stringValue() === '') {
      return msg;
    }
    // 8. If msg is the empty String, return name.
    if (msg.stringValue() === '') {
      return name;
    }
    // 9. Return the string-concatenation of name, the code unit 0x003A (COLON), the code unit 0x0020 (SPACE), and msg.
    return Value(`${name.stringValue()}: ${msg.stringValue()}`);
  }
  ErrorProto_toString.section = 'https://tc39.es/ecma262/#sec-error.prototype.tostring';
  function bootstrapErrorPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['toString', ErrorProto_toString, 0], ['message', Value('')], ['name', Value('Error')]], realmRec.Intrinsics['%Object.prototype%']);
    realmRec.Intrinsics['%Error.prototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-error-constructor */
  function ErrorConstructor([message = Value.undefined, options = Value.undefined], {
    NewTarget
  }) {
    // 1. If NewTarget is undefined, let newTarget be the active function object; else let newTarget be NewTarget.
    let newTarget;
    if (NewTarget === Value.undefined) {
      newTarget = exports.surroundingAgent.activeFunctionObject;
    } else {
      newTarget = NewTarget;
    }
    // 2. Let O be ? OrdinaryCreateFromConstructor(newTarget, "%Error.prototype%", « [[ErrorData]] »).
    let _temp = OrdinaryCreateFromConstructor(newTarget, '%Error.prototype%', ['ErrorData']);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const O = _temp;
    // 3. If message is not undefined, then
    if (message !== Value.undefined) {
      let _temp2 = ToString(message);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      // a. Let msg be ? ToString(message).
      const msg = _temp2;
      // b. Let msgDesc be the PropertyDescriptor { [[Value]]: msg, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }.
      const msgDesc = exports.Descriptor({
        Value: msg,
        Writable: Value.true,
        Enumerable: Value.false,
        Configurable: Value.true
      });
      // c. Perform ! DefinePropertyOrThrow(O, "message", msgDesc).
      let _temp3 = DefinePropertyOrThrow(O, Value('message'), msgDesc);
      Assert(!(_temp3 instanceof AbruptCompletion), "DefinePropertyOrThrow(O, Value('message'), msgDesc)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
    }

    // 4. Perform ? InstallErrorCause(O, options).
    let _temp4 = InstallErrorCause(O, options);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    let _temp5 = captureStack(O);
    Assert(!(_temp5 instanceof AbruptCompletion), "captureStack(O)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }

    // 5. Return O.
    return O;
  }
  ErrorConstructor.section = 'https://tc39.es/ecma262/#sec-error-constructor';
  function bootstrapError(realmRec) {
    const error = bootstrapConstructor(realmRec, ErrorConstructor, 'Error', 1, realmRec.Intrinsics['%Error.prototype%'], []);
    realmRec.Intrinsics['%Error%'] = error;
  }

  function bootstrapNativeError(realmRec) {
    for (const name of ['EvalError', 'RangeError', 'ReferenceError', 'SyntaxError', 'TypeError', 'URIError']) {
      const proto = bootstrapPrototype(realmRec, [['name', Value(name)], ['message', Value('')]], realmRec.Intrinsics['%Error.prototype%']);

      /** https://tc39.es/ecma262/#sec-nativeerror */
      const Constructor = ([message = Value.undefined, options = Value.undefined], {
        NewTarget
      }) => {
        // 1. If NewTarget is undefined, let newTarget be the active function object; else let newTarget be NewTarget.
        let newTarget;
        if (NewTarget instanceof UndefinedValue) {
          newTarget = exports.surroundingAgent.activeFunctionObject;
        } else {
          newTarget = NewTarget;
        }
        // 2. Let O be ? OrdinaryCreateFromConstructor(newTarget, "%NativeError.prototype%", « [[ErrorData]] »).
        let _temp = OrdinaryCreateFromConstructor(newTarget, `%${name}.prototype%`, ['ErrorData']);
        /* c8 ignore if */
        if (_temp instanceof AbruptCompletion) {
          return _temp;
        }
        /* c8 ignore if */
        if (_temp instanceof Completion) {
          _temp = _temp.Value;
        }
        const O = _temp;
        // 3. If message is not undefined, then
        if (message !== Value.undefined) {
          let _temp2 = ToString(message);
          /* c8 ignore if */
          if (_temp2 instanceof AbruptCompletion) {
            return _temp2;
          }
          /* c8 ignore if */
          if (_temp2 instanceof Completion) {
            _temp2 = _temp2.Value;
          }
          // a. Let msg be ? ToString(message).
          const msg = _temp2;
          // b. Let msgDesc be the PropertyDescriptor { [[Value]]: msg, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }.
          const msgDesc = exports.Descriptor({
            Value: msg,
            Writable: Value.true,
            Enumerable: Value.false,
            Configurable: Value.true
          });
          // c. Perform ! DefinePropertyOrThrow(O, "message", msgDesc).
          let _temp3 = DefinePropertyOrThrow(O, Value('message'), msgDesc);
          Assert(!(_temp3 instanceof AbruptCompletion), "DefinePropertyOrThrow(O, Value('message'), msgDesc)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp3 instanceof Completion) {
            _temp3 = _temp3.Value;
          }
        }
        // 4. Perform ? InstallErrorCause(O, options).
        let _temp4 = InstallErrorCause(O, options);
        /* c8 ignore if */
        if (_temp4 instanceof AbruptCompletion) {
          return _temp4;
        }
        /* c8 ignore if */
        if (_temp4 instanceof Completion) {
          _temp4 = _temp4.Value;
        }
        // NON-SPEC
        let _temp5 = captureStack(O);
        Assert(!(_temp5 instanceof AbruptCompletion), "captureStack(O)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp5 instanceof Completion) {
          _temp5 = _temp5.Value;
        }
        // 5. Return O.
        return O;
      };
      Constructor.section = 'https://tc39.es/ecma262/#sec-nativeerror';
      Object.defineProperty(Constructor, 'name', {
        value: `${name}Constructor`,
        configurable: true
      });
      const cons = bootstrapConstructor(realmRec, Constructor, name, 1, proto, []);
      cons.Prototype = realmRec.Intrinsics['%Error%'];
      realmRec.Intrinsics[`%${name}.prototype%`] = proto;
      realmRec.Intrinsics[`%${name}%`] = cons;
    }
  }

  // @ts-nocheck

  /** https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator */
  function IteratorPrototype_iterator(args, {
    thisValue
  }) {
    // 1. Return this value.
    return thisValue;
  }
  IteratorPrototype_iterator.section = 'https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator';
  function bootstrapIteratorPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [[wellKnownSymbols.iterator, IteratorPrototype_iterator, 0]], realmRec.Intrinsics['%Object.prototype%']);
    realmRec.Intrinsics['%IteratorPrototype%'] = proto;
  }

  // @ts-nocheck

  /** https://tc39.es/ecma262/#sec-asynciteratorprototype-asynciterator */
  function AsyncIteratorPrototype_asyncIterator(args, {
    thisValue
  }) {
    // 1. Return the this value.
    return thisValue;
  }
  AsyncIteratorPrototype_asyncIterator.section = 'https://tc39.es/ecma262/#sec-asynciteratorprototype-asynciterator';
  function bootstrapAsyncIteratorPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [[wellKnownSymbols.asyncIterator, AsyncIteratorPrototype_asyncIterator, 0]], realmRec.Intrinsics['%Object.prototype%']);
    realmRec.Intrinsics['%AsyncIteratorPrototype%'] = proto;
  }

  // @ts-nocheck
  const kArrayIteratorPrototype = Value('%ArrayIteratorPrototype%');

  /** https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next */
  function ArrayIteratorPrototype_next(args, {
    thisValue
  }) {
    // 1. Return ? GeneratorResume(this value, empty, "%ArrayIteratorPrototype%").
    return GeneratorResume(thisValue, undefined, kArrayIteratorPrototype);
  }
  ArrayIteratorPrototype_next.section = 'https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next';
  function bootstrapArrayIteratorPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['next', ArrayIteratorPrototype_next, 0]], realmRec.Intrinsics['%IteratorPrototype%'], 'Array Iterator');
    realmRec.Intrinsics['%ArrayIteratorPrototype%'] = proto;
  }

  const kMapIteratorPrototype = Value('%MapIteratorPrototype%');

  /** https://tc39.es/ecma262/#sec-createmapiterator */
  function CreateMapIterator(map, kind) {
    Assert(kind === 'key+value' || kind === 'key' || kind === 'value', "kind === 'key+value' || kind === 'key' || kind === 'value'");
    // 1. Perform ? RequireInternalSlot(map, [[MapData]]).
    let _temp = RequireInternalSlot(map, 'MapData');
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 2. Let closure be a new Abstract Closure with no parameters that captures map and kind and performs the following steps when called:
    const closure = function* closure() {
      // a. Let entries be the List that is map.[[MapData]].
      const entries = map.MapData;
      // b. Let index be 0.
      let index = 0;
      // c. Let numEntries be the number of elements of entries.
      let numEntries = entries.length;
      // d. Repeat, while index < numEntries,
      while (index < numEntries) {
        // i. Let e be the Record { [[Key]], [[Value]] } that is the value of entries[index].
        const e = entries[index];
        // ii. Set index to index + 1.
        index += 1;
        // iii. If e.[[Key]] is not empty, then
        if (e.Key !== undefined) {
          let result;
          // 1. If kind is key, let result be e.[[Key]].
          if (kind === 'key') {
            result = e.Key;
          } else if (kind === 'value') {
            // 2. Else if kind is value, let result be e.[[Value]].
            result = e.Value;
          } else {
            // 3. Else,
            // a. Assert: kind is key+value.
            Assert(kind === 'key+value', "kind === 'key+value'");
            // b. Let result be ! CreateArrayFromList(« e.[[Key]], e.[[Value]] »).
            let _temp2 = CreateArrayFromList([e.Key, e.Value]);
            Assert(!(_temp2 instanceof AbruptCompletion), "CreateArrayFromList([e.Key, e.Value])" + ' returned an abrupt completion');
            /* c8 ignore if */
            if (_temp2 instanceof Completion) {
              _temp2 = _temp2.Value;
            }
            result = _temp2;
          }
          // 4. Perform ? Yield(result).
          let _temp3 = yield* Yield(result);
          /* c8 ignore if */
          if (_temp3 instanceof AbruptCompletion) {
            return _temp3;
          }
          /* c8 ignore if */
          if (_temp3 instanceof Completion) {
            _temp3 = _temp3.Value;
          }
        }
        // iv. Set numEntries to the number of elements of entries.
        numEntries = entries.length;
      }
      // e. Return undefined.
      return Value.undefined;
    };
    // 3. Return ! CreateIteratorFromClosure(closure, "%MapIteratorPrototype%", %MapIteratorPrototype%).
    let _temp4 = CreateIteratorFromClosure(closure, kMapIteratorPrototype, exports.surroundingAgent.intrinsic('%MapIteratorPrototype%'));
    Assert(!(_temp4 instanceof AbruptCompletion), "CreateIteratorFromClosure(closure, kMapIteratorPrototype, surroundingAgent.intrinsic('%MapIteratorPrototype%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    return _temp4;
  }

  /** https://tc39.es/ecma262/#sec-%mapiteratorprototype%.next */
  function MapIteratorPrototype_next(args, {
    thisValue
  }) {
    // 1. Return ? GeneratorResume(this value, empty, "%MapIteratorPrototype%")
    return GeneratorResume(thisValue, undefined, kMapIteratorPrototype);
  }
  MapIteratorPrototype_next.section = 'https://tc39.es/ecma262/#sec-%mapiteratorprototype%.next';
  function bootstrapMapIteratorPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['next', MapIteratorPrototype_next, 0]], realmRec.Intrinsics['%IteratorPrototype%'], 'Map Iterator');
    realmRec.Intrinsics['%MapIteratorPrototype%'] = proto;
  }

  const kSetIteratorPrototype = Value('%SetIteratorPrototype%');

  /** https://tc39.es/ecma262/#sec-createsetiterator */
  function CreateSetIterator(set, kind) {
    // 1. Assert: kind is key+value or value.
    Assert(kind === 'key+value' || kind === 'value', "kind === 'key+value' || kind === 'value'");
    // 2. Perform ? RequireInternalSlot(set, [[SetData]]).
    let _temp = RequireInternalSlot(set, 'SetData');
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 3. Let closure be a new Abstract Closure with no parameters that captures set and kind and performs the following steps when called:
    const closure = function* closure() {
      // a. Let index be 0.
      let index = 0;
      // b. Let entries be the List that is set.[[SetData]].
      const entries = set.SetData;
      // c. Let numEntries be the number of elements of entries.
      let numEntries = entries.length;
      // d. Repeat, while index < numEntries,
      while (index < numEntries) {
        // i. Let e be entries[index].
        const e = entries[index];
        // ii. Set index to index + 1.
        index += 1;
        // iii. If e is not empty, then
        if (e !== undefined) {
          // 1. If kind is key+value, then
          if (kind === 'key+value') {
            let _temp3 = CreateArrayFromList([e, e]);
            Assert(!(_temp3 instanceof AbruptCompletion), "CreateArrayFromList([e, e])" + ' returned an abrupt completion');
            /* c8 ignore if */
            if (_temp3 instanceof Completion) {
              _temp3 = _temp3.Value;
            }
            let _temp2 = yield* Yield(_temp3);
            /* c8 ignore if */
            if (_temp2 instanceof AbruptCompletion) {
              return _temp2;
            }
            /* c8 ignore if */
            if (_temp2 instanceof Completion) {
              _temp2 = _temp2.Value;
            }
          } else {
            // 2. Else,
            // a. Assert: kind is value.
            Assert(kind === 'value', "kind === 'value'");
            // b. Perform ? Yield(e).
            let _temp4 = yield* Yield(e);
            /* c8 ignore if */
            if (_temp4 instanceof AbruptCompletion) {
              return _temp4;
            }
            /* c8 ignore if */
            if (_temp4 instanceof Completion) {
              _temp4 = _temp4.Value;
            }
          }
        }
        // iv. Set numEntries to the number of elements of entries.
        numEntries = entries.length;
      }
      // e. Return undefined.
      return Value.undefined;
    };
    // 4. Return ! CreateIteratorFromClosure(closure, "%SetIteratorPrototype%", %SetIteratorPrototype%).
    let _temp5 = CreateIteratorFromClosure(closure, kSetIteratorPrototype, exports.surroundingAgent.intrinsic('%SetIteratorPrototype%'));
    Assert(!(_temp5 instanceof AbruptCompletion), "CreateIteratorFromClosure(closure, kSetIteratorPrototype, surroundingAgent.intrinsic('%SetIteratorPrototype%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    return _temp5;
  }

  /** https://tc39.es/ecma262/#sec-%setiteratorprototype%.next */
  function SetIteratorPrototype_next(args, {
    thisValue
  }) {
    // 1. Return ? GeneratorResume(this value, empty, "%SetIteratorPrototype%").
    return GeneratorResume(thisValue, undefined, kSetIteratorPrototype);
  }
  SetIteratorPrototype_next.section = 'https://tc39.es/ecma262/#sec-%setiteratorprototype%.next';
  function bootstrapSetIteratorPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['next', SetIteratorPrototype_next, 0]], realmRec.Intrinsics['%IteratorPrototype%'], 'Set Iterator');
    realmRec.Intrinsics['%SetIteratorPrototype%'] = proto;
  }

  // @ts-nocheck
  const kStringIteratorPrototype = Value('%StringIteratorPrototype%');

  /** https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next */
  function StringIteratorPrototype_next(args, {
    thisValue
  }) {
    // 1. Return ? GeneratorResume(this value, empty, "%StringIteratorPrototype%").
    return GeneratorResume(thisValue, undefined, kStringIteratorPrototype);
  }
  StringIteratorPrototype_next.section = 'https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next';
  function bootstrapStringIteratorPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['next', StringIteratorPrototype_next, 0]], realmRec.Intrinsics['%IteratorPrototype%'], 'String Iterator');
    realmRec.Intrinsics['%StringIteratorPrototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-map.prototype.clear */
  function MapProto_clear(args, {
    thisValue
  }) {
    // 1. Let M be the this value.
    const M = thisValue;
    // 2. Perform ? RequireInternalSlot(M, [[MapData]]).
    let _temp = RequireInternalSlot(M, 'MapData');
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 3. Let entries be the List that is M.[[MapData]].
    const entries = M.MapData;
    // 4. For each Record { [[Key]], [[Value]] } p that is an element of entries, do
    for (const p of entries) {
      // a. Set p.[[Key]] to empty.
      p.Key = undefined;
      // b. Set p.[[Value]] to empty.
      p.Value = undefined;
    }
    // 5. Return undefined.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-map.prototype.delete */
  MapProto_clear.section = 'https://tc39.es/ecma262/#sec-map.prototype.clear';
  function MapProto_delete([key = Value.undefined], {
    thisValue
  }) {
    // 1. Let M be the this value.
    const M = thisValue;
    // 2. Perform ? RequireInternalSlot(M, [[MapData]]).
    let _temp2 = RequireInternalSlot(M, 'MapData');
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 3. Let entires be M.[[MapData]].
    const entries = M.MapData;
    // 4. For each Record { [[Key]], [[Value]] } p that is an element of entries, do
    for (const p of entries) {
      // a. If p.[[Key]] is not empty and SameValueZero(p.[[Key]], key) is true, then
      if (p.Key !== undefined && SameValueZero(p.Key, key) === Value.true) {
        // i. Set p.[[Key]] to empty.
        p.Key = undefined;
        // ii. Set p.[[Value]] to empty.
        p.Value = undefined;
        // iii. Return true.
        return Value.true;
      }
    }
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-map.prototype.entries */
  MapProto_delete.section = 'https://tc39.es/ecma262/#sec-map.prototype.delete';
  function MapProto_entries(args, {
    thisValue
  }) {
    // 1. Let M be the this value.
    const M = thisValue;
    // 2. Return ? CreateMapIterator(M, key+value);
    return CreateMapIterator(M, 'key+value');
  }

  /** https://tc39.es/ecma262/#sec-map.prototype.foreach */
  MapProto_entries.section = 'https://tc39.es/ecma262/#sec-map.prototype.entries';
  function MapProto_forEach([callbackfn = Value.undefined, thisArg = Value.undefined], {
    thisValue
  }) {
    // 1. Let M be the this value.
    const M = thisValue;
    // 2. Perform ? RequireInternalSlot(M, [[MapData]]).
    let _temp3 = RequireInternalSlot(M, 'MapData');
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    // 3. If IsCallable(callbackfn) is false, throw a TypeError exception.
    if (IsCallable(callbackfn) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', callbackfn);
    }
    // 4. Let entries be the List that is M.[[MapData]].
    const entries = M.MapData;
    // 5. For each Record { [[Key]], [[Value]] } e that is an element of entries, in original key insertion order, do
    for (const e of entries) {
      // a. If e.[[Key]] is not empty, then
      if (e.Key !== undefined) {
        let _temp4 = Call(callbackfn, thisArg, [e.Value, e.Key, M]);
        /* c8 ignore if */
        if (_temp4 instanceof AbruptCompletion) {
          return _temp4;
        }
        /* c8 ignore if */
        if (_temp4 instanceof Completion) {
          _temp4 = _temp4.Value;
        }
      }
    }
    // 6. Return undefined.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-map.prototype.get */
  MapProto_forEach.section = 'https://tc39.es/ecma262/#sec-map.prototype.foreach';
  function MapProto_get([key = Value.undefined], {
    thisValue
  }) {
    // 1. Let M be the this value.
    const M = thisValue;
    // 2. Perform ? RequireInternalSlot(M, [[MapData]]).
    let _temp5 = RequireInternalSlot(M, 'MapData');
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    // 3. Let entries be the List that is M.[[MapData]].
    const entries = M.MapData;
    // 4. For each Record { [[Key]], [[Value]] } p that is an element of entries, do
    for (const p of entries) {
      // a. If p.[[Key]] is not empty and SameValueZero(p.[[Key]], key) is true, return p.[[Value]].
      if (p.Key !== undefined && SameValueZero(p.Key, key) === Value.true) {
        // i. Return p.[[Value]].
        return p.Value;
      }
    }
    // 5. Return undefined.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-map.prototype.has */
  MapProto_get.section = 'https://tc39.es/ecma262/#sec-map.prototype.get';
  function MapProto_has([key = Value.undefined], {
    thisValue
  }) {
    // 1. Let M be the this value.
    const M = thisValue;
    // 2. Perform ? RequireInternalSlot(M, [[MapData]]).
    let _temp6 = RequireInternalSlot(M, 'MapData');
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    // 3. Let entries be the List that is M.[[MapData]].
    const entries = M.MapData;
    // 4. For each Record { [[Key]], [[Value]] } p that is an element of entries, do
    for (const p of entries) {
      // a. If p.[[Key]] is not empty and SameValueZero(p.[[Key]], key) is true, return true.
      if (p.Key !== undefined && SameValueZero(p.Key, key) === Value.true) {
        return Value.true;
      }
    }
    // 5. Return false.
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-map.prototype.keys */
  MapProto_has.section = 'https://tc39.es/ecma262/#sec-map.prototype.has';
  function MapProto_keys(args, {
    thisValue
  }) {
    // 1. Let M be the this value.
    const M = thisValue;
    // 2. Return ? CreateMapIterator(M, key).
    return CreateMapIterator(M, 'key');
  }

  /** https://tc39.es/ecma262/#sec-map.prototype.set */
  MapProto_keys.section = 'https://tc39.es/ecma262/#sec-map.prototype.keys';
  function MapProto_set([key = Value.undefined, value = Value.undefined], {
    thisValue
  }) {
    // 1. Let M be the this value.
    const M = thisValue;
    // 2. Perform ? RequireInternalSlot(M, [[MapData]]).
    let _temp7 = RequireInternalSlot(M, 'MapData');
    /* c8 ignore if */
    if (_temp7 instanceof AbruptCompletion) {
      return _temp7;
    }
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    // 3. Let entries be the List that is M.[[MapData]].
    const entries = M.MapData;
    // 4. For each Record { [[Key]], [[Value]] } p that is an element of entries, do
    for (const p of entries) {
      // a. If p.[[Key]] is not empty and SameValueZero(p.[[Key]], key) is true, then
      if (p.Key !== undefined && SameValueZero(p.Key, key) === Value.true) {
        // i. Set p.[[Value]] to value.
        p.Value = value;
        // ii. Return M.
        return M;
      }
    }
    // 5. If key is -0𝔽, set key to +0𝔽.
    if (key instanceof NumberValue && Object.is(R(key), -0)) {
      key = F(+0);
    }
    // 6. Let p be the Record { [[Key]]: key, [[Value]]: value }.
    const p = {
      Key: key,
      Value: value
    };
    // 7. Append p as the last element of entries.
    entries.push(p);
    // 8. Return M.
    return M;
  }

  /** https://tc39.es/ecma262/#sec-get-map.prototype.size */
  MapProto_set.section = 'https://tc39.es/ecma262/#sec-map.prototype.set';
  function MapProto_sizeGetter(args, {
    thisValue
  }) {
    // 1. Let M be the this value.
    const M = thisValue;
    // 2. Perform ? RequireInternalSlot(M, [[MapData]]).
    let _temp8 = RequireInternalSlot(M, 'MapData');
    /* c8 ignore if */
    if (_temp8 instanceof AbruptCompletion) {
      return _temp8;
    }
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    // 3. Let entries be the List that is M.[[MapData]].
    const entries = M.MapData;
    // 4. Let count be 0.
    let count = 0;
    // 5. For each Record { [[Key]], [[Value]] } p that is an element of entries, do
    for (const p of entries) {
      // a. If p.[[Key]] is not empty, set count to count + 1.
      if (p.Key !== undefined) {
        count += 1;
      }
    }
    // 6. Return 𝔽(count).
    return F(count);
  }

  /** https://tc39.es/ecma262/#sec-map.prototype.values */
  MapProto_sizeGetter.section = 'https://tc39.es/ecma262/#sec-get-map.prototype.size';
  function MapProto_values(args, {
    thisValue
  }) {
    // 1. Let M be the this value.
    const M = thisValue;
    // 2. Return ? CreateMapIterator(M, value).
    return CreateMapIterator(M, 'value');
  }
  MapProto_values.section = 'https://tc39.es/ecma262/#sec-map.prototype.values';
  function bootstrapMapPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['clear', MapProto_clear, 0], ['delete', MapProto_delete, 1], ['entries', MapProto_entries, 0], ['forEach', MapProto_forEach, 1], ['get', MapProto_get, 1], ['has', MapProto_has, 1], ['keys', MapProto_keys, 0], ['set', MapProto_set, 2], ['size', [MapProto_sizeGetter]], ['values', MapProto_values, 0]], realmRec.Intrinsics['%Object.prototype%'], 'Map');
    let _temp9 = proto.GetOwnProperty(Value('entries'));
    Assert(!(_temp9 instanceof AbruptCompletion), "proto.GetOwnProperty(Value('entries'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    const entriesFunc = _temp9;
    let _temp10 = proto.DefineOwnProperty(wellKnownSymbols.iterator, entriesFunc);
    Assert(!(_temp10 instanceof AbruptCompletion), "proto.DefineOwnProperty(wellKnownSymbols.iterator, entriesFunc)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    realmRec.Intrinsics['%Map.prototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-set.prototype.add */
  function SetProto_add([value = Value.undefined], {
    thisValue
  }) {
    // 1. Let S be the this value.
    const S = thisValue;
    // 2. Perform ? RequireInternalSlot(S, [[SetData]]).
    let _temp = RequireInternalSlot(S, 'SetData');
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 3. Let entries be the List that is S.[[SetData]].
    const entries = S.SetData;
    // 4. For each e that is an element of entries, do
    for (const e of entries) {
      // a. For each e that is an element of entries, do
      if (e !== undefined && SameValueZero(e, value) === Value.true) {
        // i. Return S.
        return S;
      }
    }
    // 5. If value is -0𝔽, set value to +0𝔽.
    if (value instanceof NumberValue && Object.is(R(value), -0)) {
      value = F(+0);
    }
    // 6. Append value as the last element of entries.
    entries.push(value);
    // 7. Return S.
    return S;
  }

  /** https://tc39.es/ecma262/#sec-set.prototype.clear */
  SetProto_add.section = 'https://tc39.es/ecma262/#sec-set.prototype.add';
  function SetProto_clear(args, {
    thisValue
  }) {
    // 1. Let S be the this value.
    const S = thisValue;
    // 2. Perform ? RequireInternalSlot(S, [[SetData]]).
    let _temp2 = RequireInternalSlot(S, 'SetData');
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 3. Let entries be the List that is S.[[SetData]].
    const entries = S.SetData;
    // 4. For each e that is an element of entries, do
    for (let i = 0; i < entries.length; i += 1) {
      // a. Replace the element of entries whose value is e with an element whose value is empty.
      entries[i] = undefined;
    }
    // 5. Return undefined.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-set.prototype.delete */
  SetProto_clear.section = 'https://tc39.es/ecma262/#sec-set.prototype.clear';
  function SetProto_delete([value = Value.undefined], {
    thisValue
  }) {
    // 1. Let S be the this value.
    const S = thisValue;
    // 2. Perform ? RequireInternalSlot(S, [[SetData]]).
    let _temp3 = RequireInternalSlot(S, 'SetData');
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    // 3. Let entries be the List that is S.[[SetData]].
    const entries = S.SetData;
    // 4. For each e that is an element of entries, do
    for (let i = 0; i < entries.length; i += 1) {
      const e = entries[i];
      // a. If e is not empty and SameValueZero(e, value) is true, then
      if (e !== undefined && SameValueZero(e, value) === Value.true) {
        // i. Replace the element of entries whose value is e with an element whose value is empty.
        entries[i] = undefined;
        // ii. Return true.
        return Value.true;
      }
    }
    // 5. Return false.
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-set.prototype.entries */
  SetProto_delete.section = 'https://tc39.es/ecma262/#sec-set.prototype.delete';
  function SetProto_entries(args, {
    thisValue
  }) {
    // 1. Let S be the this value.
    const S = thisValue;
    // 2. Return ? CreateSetIterator(S, key+value).
    return CreateSetIterator(S, 'key+value');
  }

  /** https://tc39.es/ecma262/#sec-set.prototype.foreach */
  SetProto_entries.section = 'https://tc39.es/ecma262/#sec-set.prototype.entries';
  function SetProto_forEach([callbackfn = Value.undefined, thisArg = Value.undefined], {
    thisValue
  }) {
    // 1. Let S be the this value.
    const S = thisValue;
    // 2. Perform ? RequireInternalSlot(S, [[SetData]]).
    let _temp4 = RequireInternalSlot(S, 'SetData');
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 3. If IsCallable(callbackfn) is false, throw a TypeError exception
    if (IsCallable(callbackfn) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', callbackfn);
    }
    // 4. Let entries be the List that is S.[[SetData]].
    const entries = S.SetData;
    // 5. For each element _e_ of _entries_, do
    for (const e of entries) {
      // a. If e is not empty, then
      if (e !== undefined) {
        let _temp5 = Call(callbackfn, thisArg, [e, e, S]);
        /* c8 ignore if */
        if (_temp5 instanceof AbruptCompletion) {
          return _temp5;
        }
        /* c8 ignore if */
        if (_temp5 instanceof Completion) {
          _temp5 = _temp5.Value;
        }
      }
    }
    // 6. Return undefined.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-set.prototype.has */
  SetProto_forEach.section = 'https://tc39.es/ecma262/#sec-set.prototype.foreach';
  function SetProto_has([value = Value.undefined], {
    thisValue
  }) {
    // 1. Let S be the this value.
    const S = thisValue;
    // 2. Perform ? RequireInternalSlot(S, [[SetData]]).
    let _temp6 = RequireInternalSlot(S, 'SetData');
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    // 3. Let entries be the List that is S.[[SetData]].
    const entries = S.SetData;
    // 4. Let entries be the List that is S.[[SetData]].
    for (const e of entries) {
      // a. If e is not empty and SameValueZero(e, value) is true, return true.
      if (e !== undefined && SameValueZero(e, value) === Value.true) {
        return Value.true;
      }
    }
    // 5. Return false.
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-get-set.prototype.size */
  SetProto_has.section = 'https://tc39.es/ecma262/#sec-set.prototype.has';
  function SetProto_sizeGetter(args, {
    thisValue
  }) {
    // 1. Let S be the this value.
    const S = thisValue;
    // 2. Perform ? RequireInternalSlot(S, [[SetData]]).
    let _temp7 = RequireInternalSlot(S, 'SetData');
    /* c8 ignore if */
    if (_temp7 instanceof AbruptCompletion) {
      return _temp7;
    }
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    // 3. Let entries be the List that is S.[[SetData]].
    const entries = S.SetData;
    // 4. Let count be 0.
    let count = 0;
    // 5. For each e that is an element of entries, do
    for (const e of entries) {
      // a. If e is not empty, set count to count + 1
      if (e !== undefined) {
        count += 1;
      }
    }
    // 6. Return 𝔽(count).
    return F(count);
  }

  /** https://tc39.es/ecma262/#sec-set.prototype.values */
  SetProto_sizeGetter.section = 'https://tc39.es/ecma262/#sec-get-set.prototype.size';
  function SetProto_values(args, {
    thisValue
  }) {
    // 1. Let S be the this value.
    const S = thisValue;
    // 2. Return ? CreateSetIterator(S, value).
    return CreateSetIterator(S, 'value');
  }
  SetProto_values.section = 'https://tc39.es/ecma262/#sec-set.prototype.values';
  function bootstrapSetPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['add', SetProto_add, 1], ['clear', SetProto_clear, 0], ['delete', SetProto_delete, 1], ['entries', SetProto_entries, 0], ['forEach', SetProto_forEach, 1], ['has', SetProto_has, 1], ['size', [SetProto_sizeGetter]], ['values', SetProto_values, 0]], realmRec.Intrinsics['%Object.prototype%'], 'Set');
    let _temp8 = proto.GetOwnProperty(Value('values'));
    Assert(!(_temp8 instanceof AbruptCompletion), "proto.GetOwnProperty(Value('values'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    const valuesFunc = _temp8;
    let _temp9 = proto.DefineOwnProperty(Value('keys'), valuesFunc);
    Assert(!(_temp9 instanceof AbruptCompletion), "proto.DefineOwnProperty(Value('keys'), valuesFunc)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    let _temp10 = proto.DefineOwnProperty(wellKnownSymbols.iterator, valuesFunc);
    Assert(!(_temp10 instanceof AbruptCompletion), "proto.DefineOwnProperty(wellKnownSymbols.iterator, valuesFunc)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    realmRec.Intrinsics['%Set.prototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-set-iterable */
  function SetConstructor([iterable = Value.undefined], {
    NewTarget
  }) {
    // 1. If NewTarget is undefined, throw a TypeError exception.
    if (NewTarget === Value.undefined) {
      return exports.surroundingAgent.Throw('TypeError', 'ConstructorNonCallable', this);
    }
    // 2. Let set be ? OrdinaryCreateFromConstructor(NewTarget, "%Set.prototype%", « [[SetData]] »).
    let _temp = OrdinaryCreateFromConstructor(NewTarget, '%Set.prototype%', ['SetData']);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const set = _temp;
    // 3. Set set.[[SetData]] to a new empty List.
    set.SetData = [];
    // 4. If iterable is either undefined or null, return set.
    if (iterable === Value.undefined || iterable === Value.null) {
      return set;
    }
    // 5. Let adder be ? Get(set, "add").
    let _temp2 = Get(set, Value('add'));
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const adder = _temp2;
    // 6. If IsCallable(adder) is false, throw a TypeError exception.
    if (IsCallable(adder) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', adder);
    }
    // 7. Let iteratorRecord be ? GetIterator(iterable).
    let _temp3 = GetIterator(iterable);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const iteratorRecord = _temp3;
    // 8. Repeat,
    while (true) {
      let _temp4 = IteratorStep(iteratorRecord);
      /* c8 ignore if */
      if (_temp4 instanceof AbruptCompletion) {
        return _temp4;
      }
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      // a. Let next be ? IteratorStep(iteratorRecord).
      const next = _temp4;
      // b. If next is false, return set.
      if (next === Value.false) {
        return set;
      }
      // c. Let nextValue be ? IteratorValue(next).
      let _temp5 = IteratorValue(next);
      /* c8 ignore if */
      if (_temp5 instanceof AbruptCompletion) {
        return _temp5;
      }
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      const nextValue = _temp5;
      // d. Let status be Call(adder, set, « nextValue »).
      let status = Call(adder, set, [nextValue]);
      // e. IfAbruptCloseIterator(status, iteratorRecord).
      /* c8 ignore if */
      if (status instanceof AbruptCompletion) {
        return IteratorClose(iteratorRecord, status);
      }
      /* c8 ignore if */
      if (status instanceof Completion) {
        status = status.Value;
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-get-set-@@species */
  SetConstructor.section = 'https://tc39.es/ecma262/#sec-set-iterable';
  function Set_speciesGetter(args, {
    thisValue
  }) {
    // Return the this value.
    return thisValue;
  }
  Set_speciesGetter.section = 'https://tc39.es/ecma262/#sec-get-set-@@species';
  function bootstrapSet(realmRec) {
    const setConstructor = bootstrapConstructor(realmRec, SetConstructor, 'Set', 0, realmRec.Intrinsics['%Set.prototype%'], [[wellKnownSymbols.species, [Set_speciesGetter]]]);
    realmRec.Intrinsics['%Set%'] = setConstructor;
  }

  // @ts-nocheck

  /** https://tc39.es/ecma262/#sec-generator.prototype.next */
  function GeneratorProto_next([value = Value.undefined], {
    thisValue
  }) {
    // 1. Let g be the this value.
    const g = thisValue;
    // 2. Return ? GeneratorResume(g, value, empty).
    return GeneratorResume(g, value, undefined);
  }

  /** https://tc39.es/ecma262/#sec-generator.prototype.return */
  GeneratorProto_next.section = 'https://tc39.es/ecma262/#sec-generator.prototype.next';
  function GeneratorProto_return([value = Value.undefined], {
    thisValue
  }) {
    // 1. Let g be the this value.
    const g = thisValue;
    // 2. Let C be Completion { [[Type]]: return, [[Value]]: value, [[Target]]: empty }.
    const C = new Completion({
      Type: 'return',
      Value: value,
      Target: undefined
    });
    // 3. Return ? GeneratorResumeAbrupt(g, C, empty).
    return GeneratorResumeAbrupt(g, C, undefined);
  }

  /** https://tc39.es/ecma262/#sec-generator.prototype.throw */
  GeneratorProto_return.section = 'https://tc39.es/ecma262/#sec-generator.prototype.return';
  function GeneratorProto_throw([exception = Value.undefined], {
    thisValue
  }) {
    // 1. Let g be the this value.
    const g = thisValue;
    // 2. Let C be ThrowCompletion(exception).
    const C = ThrowCompletion(exception);
    // 3. Return ? GeneratorResumeAbrupt(g, C, empty).
    return GeneratorResumeAbrupt(g, C, undefined);
  }
  GeneratorProto_throw.section = 'https://tc39.es/ecma262/#sec-generator.prototype.throw';
  function bootstrapGeneratorFunctionPrototypePrototype(realmRec) {
    const generatorPrototype = bootstrapPrototype(realmRec, [['next', GeneratorProto_next, 1], ['return', GeneratorProto_return, 1], ['throw', GeneratorProto_throw, 1]], realmRec.Intrinsics['%IteratorPrototype%'], 'Generator');
    realmRec.Intrinsics['%GeneratorFunction.prototype.prototype%'] = generatorPrototype;

    // Used by `CreateListIteratorRecord`:
    realmRec.Intrinsics['%GeneratorFunction.prototype.prototype.next%'] = generatorPrototype.Get(Value('next'));
  }

  function bootstrapGeneratorFunctionPrototype(realmRec) {
    const generatorPrototype = realmRec.Intrinsics['%GeneratorFunction.prototype.prototype%'];
    const generator = bootstrapPrototype(realmRec, [['prototype', generatorPrototype, undefined, {
      Writable: Value.false
    }]], realmRec.Intrinsics['%Function.prototype%'], 'GeneratorFunction');
    let _temp = DefinePropertyOrThrow(generatorPrototype, Value('constructor'), exports.Descriptor({
      Value: generator,
      Writable: Value.false,
      Enumerable: Value.false,
      Configurable: Value.true
    }));
    Assert(!(_temp instanceof AbruptCompletion), "DefinePropertyOrThrow(generatorPrototype, Value('constructor'), Descriptor({\n    Value: generator,\n    Writable: Value.false,\n    Enumerable: Value.false,\n    Configurable: Value.true,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    realmRec.Intrinsics['%GeneratorFunction.prototype%'] = generator;
  }

  /** https://tc39.es/ecma262/#sec-generatorfunction */
  function GeneratorFunctionConstructor(args, {
    NewTarget
  }) {
    // 1. Let C be the active function object.
    const C = exports.surroundingAgent.activeFunctionObject;
    // 2. Let args be the argumentsList that was passed to this function by [[Call]] or [[Construct]].
    // 3. Return ? CreateDynamicFunction(C, NewTarget, generator, args).
    return CreateDynamicFunction(C, NewTarget, 'generator', args);
  }
  GeneratorFunctionConstructor.section = 'https://tc39.es/ecma262/#sec-generatorfunction';
  function bootstrapGeneratorFunction(realmRec) {
    const generator = realmRec.Intrinsics['%GeneratorFunction.prototype%'];
    const cons = bootstrapConstructor(realmRec, GeneratorFunctionConstructor, 'GeneratorFunction', 1, generator, []);
    let _temp = DefinePropertyOrThrow(cons, Value('prototype'), exports.Descriptor({
      Writable: Value.false,
      Configurable: Value.false
    }));
    Assert(!(_temp instanceof AbruptCompletion), "DefinePropertyOrThrow(cons, Value('prototype'), Descriptor({\n    Writable: Value.false,\n    Configurable: Value.false,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    let _temp2 = DefinePropertyOrThrow(generator, Value('constructor'), exports.Descriptor({
      Writable: Value.false
    }));
    Assert(!(_temp2 instanceof AbruptCompletion), "DefinePropertyOrThrow(generator, Value('constructor'), Descriptor({\n    Writable: Value.false,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    realmRec.Intrinsics['%GeneratorFunction%'] = cons;
  }

  // @ts-nocheck
  function bootstrapAsyncFunctionPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [], realmRec.Intrinsics['%Function.prototype%'], 'AsyncFunction');
    realmRec.Intrinsics['%AsyncFunction.prototype%'] = proto;
  }

  // @ts-nocheck

  /** https://tc39.es/ecma262/#sec-async-function-constructor-arguments */
  function AsyncFunctionConstructor(args, {
    NewTarget
  }) {
    // 1. Let C be the active function object.
    const C = exports.surroundingAgent.activeFunctionObject;
    // 2. Let args be the argumentsList that was passed to this function by [[Call]] or [[Construct]].
    // 3. Return CreateDynamicFunction(C, NewTarget, async, args).
    return CreateDynamicFunction(C, NewTarget, 'async', args);
  }
  AsyncFunctionConstructor.section = 'https://tc39.es/ecma262/#sec-async-function-constructor-arguments';
  function bootstrapAsyncFunction(realmRec) {
    const cons = bootstrapConstructor(realmRec, AsyncFunctionConstructor, 'AsyncFunction', 1, realmRec.Intrinsics['%AsyncFunction.prototype%'], []);
    cons.DefineOwnProperty(Value('prototype'), exports.Descriptor({
      Writable: Value.false,
      Enumerable: Value.false,
      Configurable: Value.false
    }));
    cons.Prototype = realmRec.Intrinsics['%Function%'];
    realmRec.Intrinsics['%AsyncFunction%'] = cons;
  }

  /** https://tc39.es/ecma262/#sec-asyncgenerator-prototype-next */
  function AsyncGeneratorPrototype_next([value = Value.undefined], {
    thisValue
  }) {
    // 1. Let generator be the this value.
    const generator = thisValue;
    // 2. Let promiseCapability be ! NewPromiseCapability(%Promise%).
    let _temp = NewPromiseCapability(exports.surroundingAgent.intrinsic('%Promise%'));
    Assert(!(_temp instanceof AbruptCompletion), "NewPromiseCapability(surroundingAgent.intrinsic('%Promise%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const promiseCapability = _temp;
    // 3. Let result be AsyncGeneratorValidate(generator, empty).
    let result = AsyncGeneratorValidate(generator, undefined);
    // 4. IfAbruptRejectPromise(result, promiseCapability).
    /* c8 ignore if */
    if (result instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [result.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (result instanceof Completion) {
      result = result.Value;
    }
    // 5. Let state be generator.[[AsyncGeneratorState]].
    const state = generator.AsyncGeneratorState;
    // 6. If state is completed, then
    if (state === 'completed') {
      let _temp2 = CreateIterResultObject(Value.undefined, Value.true);
      Assert(!(_temp2 instanceof AbruptCompletion), "CreateIterResultObject(Value.undefined, Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      // a. Let iteratorResult be ! CreateIterResultObject(undefined, true).
      const iteratorResult = _temp2;
      // b. Perform ! Call(promiseCapability.[[Resolve]], undefined, « iteratorResult »).
      let _temp3 = Call(promiseCapability.Resolve, Value.undefined, [iteratorResult]);
      Assert(!(_temp3 instanceof AbruptCompletion), "Call(promiseCapability.Resolve, Value.undefined, [iteratorResult])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      // c. Return promiseCapability.[[Promise]].
      return promiseCapability.Promise;
    }
    // 7. Let completion be NormalCompletion(value).
    const completion = NormalCompletion(value);
    // 8. Perform ! AsyncGeneratorEnqueue(generator, completion, promiseCapability).
    let _temp4 = AsyncGeneratorEnqueue(generator, completion, promiseCapability);
    Assert(!(_temp4 instanceof AbruptCompletion), "AsyncGeneratorEnqueue(generator, completion, promiseCapability)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 9. If state is either suspendedStart or suspendedYield, then
    if (state === 'suspendedStart' || state === 'suspendedYield') {
      let _temp5 = AsyncGeneratorResume(generator, completion);
      Assert(!(_temp5 instanceof AbruptCompletion), "AsyncGeneratorResume(generator, completion)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
    } else {
      // 10. Else,
      // a. Assert: state is either executing or awaiting-return.
      Assert(state === 'executing' || state === 'awaiting-return', "state === 'executing' || state === 'awaiting-return'");
    }
    // 11. Return promiseCapability.[[Promise]].
    return promiseCapability.Promise;
  }

  /** https://tc39.es/ecma262/#sec-asyncgenerator-prototype-return */
  AsyncGeneratorPrototype_next.section = 'https://tc39.es/ecma262/#sec-asyncgenerator-prototype-next';
  function AsyncGeneratorPrototype_return([value = Value.undefined], {
    thisValue
  }) {
    // 1. Let generator be the this value.
    const generator = thisValue;
    // 2. Let promiseCapability be ! NewPromiseCapability(%Promise%).
    let _temp6 = NewPromiseCapability(exports.surroundingAgent.intrinsic('%Promise%'));
    Assert(!(_temp6 instanceof AbruptCompletion), "NewPromiseCapability(surroundingAgent.intrinsic('%Promise%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const promiseCapability = _temp6;
    // 3. Let result be AsyncGeneratorValidate(generator, empty).
    let result = AsyncGeneratorValidate(generator, undefined);
    // 4. IfAbruptRejectPromise(result, promiseCapability).
    /* c8 ignore if */
    if (result instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [result.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (result instanceof Completion) {
      result = result.Value;
    }
    // 5. Let completion be Completion { [[Type]]: return, [[Value]]: value, [[Target]]: empty }.
    const completion = new Completion({
      Type: 'return',
      Value: value,
      Target: undefined
    });
    // 6. Perform ! AsyncGeneratorEnqueue(generator, completion, promiseCapability).
    let _temp7 = AsyncGeneratorEnqueue(generator, completion, promiseCapability);
    Assert(!(_temp7 instanceof AbruptCompletion), "AsyncGeneratorEnqueue(generator, completion, promiseCapability)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    // 7. Let state be generator.[[AsyncGeneratorState]].
    const state = generator.AsyncGeneratorState;
    // 8. If state is either suspendedStart or completed, then
    if (state === 'suspendedStart' || state === 'completed') {
      // a. Set generator.[[AsyncGeneratorState]] to awaiting-return.
      generator.AsyncGeneratorState = 'awaiting-return';
      // b. Perform ! AsyncGeneratorAwaitReturn(generator).
      let _temp8 = AsyncGeneratorAwaitReturn(generator);
      Assert(!(_temp8 instanceof AbruptCompletion), "AsyncGeneratorAwaitReturn(generator)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp8 instanceof Completion) {
        _temp8 = _temp8.Value;
      }
    } else if (state === 'suspendedYield') {
      let _temp9 = AsyncGeneratorResume(generator, completion);
      Assert(!(_temp9 instanceof AbruptCompletion), "AsyncGeneratorResume(generator, completion)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp9 instanceof Completion) {
        _temp9 = _temp9.Value;
      }
    } else {
      // 10. Else,
      // a. Assert: state is either executing or awaiting-return.
      Assert(state === 'executing' || state === 'awaiting-return', "state === 'executing' || state === 'awaiting-return'");
    }
    // 11. Return promiseCapability.[[Promise]].
    return promiseCapability.Promise;
  }

  /** https://tc39.es/ecma262/#sec-asyncgenerator-prototype-throw */
  AsyncGeneratorPrototype_return.section = 'https://tc39.es/ecma262/#sec-asyncgenerator-prototype-return';
  function AsyncGeneratorPrototype_throw([exception = Value.undefined], {
    thisValue
  }) {
    // 1. Let generator be the this value.
    const generator = thisValue;
    // 2. Let promiseCapability be ! NewPromiseCapability(%Promise%).
    let _temp10 = NewPromiseCapability(exports.surroundingAgent.intrinsic('%Promise%'));
    Assert(!(_temp10 instanceof AbruptCompletion), "NewPromiseCapability(surroundingAgent.intrinsic('%Promise%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    const promiseCapability = _temp10;
    // 3. Let result be AsyncGeneratorValidate(generator, empty).
    let result = AsyncGeneratorValidate(generator, undefined);
    // 4. IfAbruptRejectPromise(result, promiseCapability).
    /* c8 ignore if */
    if (result instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [result.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (result instanceof Completion) {
      result = result.Value;
    }
    // 5. Let state be generator.[[AsyncGeneratorState]].
    let state = generator.AsyncGeneratorState;
    // 6. If state is suspendedStart, then
    if (state === 'suspendedStart') {
      // a. Set generator.[[AsyncGeneratorState]] to completed.
      generator.AsyncGeneratorState = 'completed';
      // b. Set state to completed.
      state = 'completed';
    }
    // 7. If state is completed, then
    if (state === 'completed') {
      let _temp11 = Call(promiseCapability.Reject, Value.undefined, [exception]);
      Assert(!(_temp11 instanceof AbruptCompletion), "Call(promiseCapability.Reject, Value.undefined, [exception])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp11 instanceof Completion) {
        _temp11 = _temp11.Value;
      }
      // b. Return promiseCapability.[[Promise]].
      return promiseCapability.Promise;
    }
    // 8. Let completion be ThrowCompletion(exception).
    const completion = ThrowCompletion(exception);
    // 9. Perform ! AsyncGeneratorEnqueue(generator, completion, promiseCapability).
    let _temp12 = AsyncGeneratorEnqueue(generator, completion, promiseCapability);
    Assert(!(_temp12 instanceof AbruptCompletion), "AsyncGeneratorEnqueue(generator, completion, promiseCapability)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp12 instanceof Completion) {
      _temp12 = _temp12.Value;
    }
    // 10. If state is suspendedYield, then
    if (state === 'suspendedYield') {
      let _temp13 = AsyncGeneratorResume(generator, completion);
      Assert(!(_temp13 instanceof AbruptCompletion), "AsyncGeneratorResume(generator, completion)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp13 instanceof Completion) {
        _temp13 = _temp13.Value;
      }
    } else {
      // 11. Else,
      // a. Assert: state is either executing or awaiting-return.
      Assert(state === 'executing' || state === 'awaiting-return', "state === 'executing' || state === 'awaiting-return'");
    }
    // 12. Return promiseCapability.[[Promise]].
    return promiseCapability.Promise;
  }
  AsyncGeneratorPrototype_throw.section = 'https://tc39.es/ecma262/#sec-asyncgenerator-prototype-throw';
  function bootstrapAsyncGeneratorFunctionPrototypePrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['next', AsyncGeneratorPrototype_next, 1], ['return', AsyncGeneratorPrototype_return, 1], ['throw', AsyncGeneratorPrototype_throw, 1]], realmRec.Intrinsics['%AsyncIteratorPrototype%'], 'AsyncGenerator');
    realmRec.Intrinsics['%AsyncGeneratorFunction.prototype.prototype%'] = proto;
  }

  function bootstrapAsyncGeneratorFunctionPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['prototype', realmRec.Intrinsics['%AsyncGeneratorFunction.prototype.prototype%'], undefined, {
      Writable: Value.false
    }]], realmRec.Intrinsics['%Function.prototype%'], 'AsyncGeneratorFunction');
    let _temp = realmRec.Intrinsics['%AsyncGeneratorFunction.prototype.prototype%'].DefineOwnProperty(Value('constructor'), exports.Descriptor({
      Value: proto,
      Writable: Value.false,
      Enumerable: Value.false,
      Configurable: Value.true
    }));
    Assert(!(_temp instanceof AbruptCompletion), "realmRec.Intrinsics['%AsyncGeneratorFunction.prototype.prototype%'].DefineOwnProperty(Value('constructor'), Descriptor({\n    Value: proto,\n    Writable: Value.false,\n    Enumerable: Value.false,\n    Configurable: Value.true,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    realmRec.Intrinsics['%AsyncGeneratorFunction.prototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-asyncgeneratorfunction */
  function AsyncGeneratorFunctionConstructor(args, {
    NewTarget
  }) {
    // 1. Let C be the active function object.
    const C = exports.surroundingAgent.activeFunctionObject;
    // 2. Let args be the argumentsList that was passed to this function by [[Call]] or [[Construct]].
    // 3. Return ? CreateDynamicFunction(C, NewTarget, asyncGenerator, args).
    return CreateDynamicFunction(C, NewTarget, 'asyncGenerator', args);
  }
  AsyncGeneratorFunctionConstructor.section = 'https://tc39.es/ecma262/#sec-asyncgeneratorfunction';
  function bootstrapAsyncGeneratorFunction(realmRec) {
    const cons = bootstrapConstructor(realmRec, AsyncGeneratorFunctionConstructor, 'AsyncGeneratorFunction', 1, realmRec.Intrinsics['%AsyncGeneratorFunction.prototype%'], []);
    let _temp = cons.DefineOwnProperty(Value('prototype'), exports.Descriptor({
      Writable: Value.false,
      Enumerable: Value.false,
      Configurable: Value.false
    }));
    Assert(!(_temp instanceof AbruptCompletion), "cons.DefineOwnProperty(Value('prototype'), Descriptor({\n    Writable: Value.false,\n    Enumerable: Value.false,\n    Configurable: Value.false,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    let _temp2 = realmRec.Intrinsics['%AsyncGeneratorFunction.prototype%'].DefineOwnProperty(Value('constructor'), exports.Descriptor({
      Writable: Value.false,
      Enumerable: Value.false,
      Configurable: Value.true
    }));
    Assert(!(_temp2 instanceof AbruptCompletion), "realmRec.Intrinsics['%AsyncGeneratorFunction.prototype%'].DefineOwnProperty(Value('constructor'), Descriptor({\n    Writable: Value.false,\n    Enumerable: Value.false,\n    Configurable: Value.true,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    cons.Prototype = realmRec.Intrinsics['%Function%'];
    realmRec.Intrinsics['%AsyncGeneratorFunction%'] = cons;
  }

  /** https://tc39.es/ecma262/#sec-%asyncfromsynciteratorprototype%.next */
  function AsyncFromSyncIteratorPrototype_next([value], {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Assert: Type(O) is Object and O has a [[SyncIteratorRecord]] internal slot.
    Assert(O instanceof ObjectValue && 'SyncIteratorRecord' in O, "O instanceof ObjectValue && 'SyncIteratorRecord' in O");
    // 3. Let promiseCapability be ! NewPromiseCapability(%Promise%).
    let _temp = NewPromiseCapability(exports.surroundingAgent.intrinsic('%Promise%'));
    Assert(!(_temp instanceof AbruptCompletion), "NewPromiseCapability(surroundingAgent.intrinsic('%Promise%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const promiseCapability = _temp;
    // 4. Let syncIteratorRecord be O.[[SyncIteratorRecord]].
    const syncIteratorRecord = O.SyncIteratorRecord;
    // 5. If value is present, then
    let result;
    if (value !== undefined) {
      // a. Let result be IteratorNext(syncIteratorRecord, value).
      result = IteratorNext(syncIteratorRecord, value);
    } else {
      // 6. Else,
      // a. Let result be IteratorNext(syncIteratorRecord).
      result = IteratorNext(syncIteratorRecord);
    }
    // 7. IfAbruptRejectPromise(result, promiseCapability).
    /* c8 ignore if */
    if (result instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [result.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (result instanceof Completion) {
      result = result.Value;
    }
    let _temp2 = AsyncFromSyncIteratorContinuation(result, promiseCapability);
    Assert(!(_temp2 instanceof AbruptCompletion), "AsyncFromSyncIteratorContinuation(result, promiseCapability)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 8. Return ! AsyncFromSyncIteratorContinuation(result, promiseCapability).
    return _temp2;
  }

  /** https://tc39.es/ecma262/#sec-%asyncfromsynciteratorprototype%.return */
  AsyncFromSyncIteratorPrototype_next.section = 'https://tc39.es/ecma262/#sec-%asyncfromsynciteratorprototype%.next';
  function AsyncFromSyncIteratorPrototype_return([value], {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Assert: Type(O) is Object and O has a [[SyncIteratorRecord]] internal slot.
    Assert(O instanceof ObjectValue && 'SyncIteratorRecord' in O, "O instanceof ObjectValue && 'SyncIteratorRecord' in O");
    // 3. Let promiseCapability be ! NewPromiseCapability(%Promise%).
    let _temp3 = NewPromiseCapability(exports.surroundingAgent.intrinsic('%Promise%'));
    Assert(!(_temp3 instanceof AbruptCompletion), "NewPromiseCapability(surroundingAgent.intrinsic('%Promise%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const promiseCapability = _temp3;
    // 4. Let syncIterator be O.[[SyncIteratorRecord]].[[Iterator]].
    const syncIterator = O.SyncIteratorRecord.Iterator;
    // 5. Let return be GetMethod(syncIterator, "return").
    let ret = GetMethod(syncIterator, Value('return'));
    // 6. IfAbruptRejectPromise(return, promiseCapability).
    /* c8 ignore if */
    if (ret instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [ret.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (ret instanceof Completion) {
      ret = ret.Value;
    }
    // 7. If return is undefined, then
    if (ret === Value.undefined) {
      let _temp4 = CreateIterResultObject(value, Value.true);
      Assert(!(_temp4 instanceof AbruptCompletion), "CreateIterResultObject(value, Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      // a. Let iterResult be ! CreateIterResultObject(value, true).
      const iterResult = _temp4;
      // b. Perform ! Call(promiseCapability.[[Resolve]], undefined, « iterResult »).
      let _temp5 = Call(promiseCapability.Resolve, Value.undefined, [iterResult]);
      Assert(!(_temp5 instanceof AbruptCompletion), "Call(promiseCapability.Resolve, Value.undefined, [iterResult])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      // c. Return promiseCapability.[[Promise]].
      return promiseCapability.Promise;
    }
    // 8. If value is present, then
    let result;
    if (value !== undefined) {
      // a. Let result be Call(return, syncIterator, « value »).
      result = Call(ret, syncIterator, [value]);
    } else {
      // 9. Else,
      // a. Let result be Call(return, syncIterator).
      result = Call(ret, syncIterator);
    }
    // 10. IfAbruptRejectPromise(result, promiseCapability).
    /* c8 ignore if */
    if (result instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [result.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (result instanceof Completion) {
      result = result.Value;
    }
    // 11. If Type(result) is not Object, then
    if (!(result instanceof ObjectValue)) {
      let _temp6 = Call(promiseCapability.Reject, Value.undefined, [exports.surroundingAgent.Throw('TypeError', 'NotAnObject', result).Value]);
      Assert(!(_temp6 instanceof AbruptCompletion), "Call(promiseCapability.Reject, Value.undefined, [\n      surroundingAgent.Throw('TypeError', 'NotAnObject', result).Value,\n    ])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
      // b. Return promiseCapability.[[Promise]].
      return promiseCapability.Promise;
    }
    // 12. Return ! AsyncFromSyncIteratorContinuation(result, promiseCapability).
    let _temp7 = AsyncFromSyncIteratorContinuation(result, promiseCapability);
    Assert(!(_temp7 instanceof AbruptCompletion), "AsyncFromSyncIteratorContinuation(result, promiseCapability)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    return _temp7;
  }

  /** https://tc39.es/ecma262/#sec-%asyncfromsynciteratorprototype%.throw */
  AsyncFromSyncIteratorPrototype_return.section = 'https://tc39.es/ecma262/#sec-%asyncfromsynciteratorprototype%.return';
  function AsyncFromSyncIteratorPrototype_throw([value], {
    thisValue
  }) {
    // 1. Let O be this value.
    const O = thisValue;
    // 2. Assert: Type(O) is Object and O has a [[SyncIteratorRecord]] internal slot.
    Assert(O instanceof ObjectValue && 'SyncIteratorRecord' in O, "O instanceof ObjectValue && 'SyncIteratorRecord' in O");
    // 3. Let promiseCapability be ! NewPromiseCapability(%Promise%).
    let _temp8 = NewPromiseCapability(exports.surroundingAgent.intrinsic('%Promise%'));
    Assert(!(_temp8 instanceof AbruptCompletion), "NewPromiseCapability(surroundingAgent.intrinsic('%Promise%'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    const promiseCapability = _temp8;
    // 4. Let syncIterator be O.[[SyncIteratorRecord]].[[Iterator]].
    const syncIterator = O.SyncIteratorRecord.Iterator;
    // 5. Let throw be GetMethod(syncIterator, "throw").
    let thr = GetMethod(syncIterator, Value('throw'));
    // 6. IfAbruptRejectPromise(throw, promiseCapability).
    /* c8 ignore if */
    if (thr instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [thr.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (thr instanceof Completion) {
      thr = thr.Value;
    }
    // 7. If throw is undefined, then
    if (thr === Value.undefined) {
      let _temp9 = Call(promiseCapability.Reject, Value.undefined, [value]);
      Assert(!(_temp9 instanceof AbruptCompletion), "Call(promiseCapability.Reject, Value.undefined, [value])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp9 instanceof Completion) {
        _temp9 = _temp9.Value;
      }
      // b. Return promiseCapability.[[Promise]].
      return promiseCapability.Promise;
    }
    // 8. If value is present, then
    let result;
    if (value !== undefined) {
      // a. Let result be Call(throw, syncIterator, « value »).
      result = Call(thr, syncIterator, [value]);
    } else {
      // 9. Else,
      // a. Let result be Call(throw, syncIterator).
      result = Call(thr, syncIterator);
    }
    // 10. IfAbruptRejectPromise(result, promiseCapability).
    /* c8 ignore if */
    if (result instanceof AbruptCompletion) {
      const hygenicTemp2 = Call(promiseCapability.Reject, Value.undefined, [result.Value]);
      if (hygenicTemp2 instanceof AbruptCompletion) {
        return hygenicTemp2;
      }
      return promiseCapability.Promise;
    }
    /* c8 ignore if */
    if (result instanceof Completion) {
      result = result.Value;
    }
    // 11. If Type(result) is not Object, then
    if (!(result instanceof ObjectValue)) {
      let _temp10 = Call(promiseCapability.Reject, Value.undefined, [exports.surroundingAgent.Throw('TypeError', 'NotAnObject', result).Value]);
      Assert(!(_temp10 instanceof AbruptCompletion), "Call(promiseCapability.Reject, Value.undefined, [\n      surroundingAgent.Throw('TypeError', 'NotAnObject', result).Value,\n    ])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp10 instanceof Completion) {
        _temp10 = _temp10.Value;
      }
      // b. Return promiseCapability.[[Promise]].
      return promiseCapability.Promise;
    }
    // 12. Return ! AsyncFromSyncIteratorContinuation(result, promiseCapability).
    let _temp11 = AsyncFromSyncIteratorContinuation(result, promiseCapability);
    Assert(!(_temp11 instanceof AbruptCompletion), "AsyncFromSyncIteratorContinuation(result, promiseCapability)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    return _temp11;
  }
  AsyncFromSyncIteratorPrototype_throw.section = 'https://tc39.es/ecma262/#sec-%asyncfromsynciteratorprototype%.throw';
  function bootstrapAsyncFromSyncIteratorPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['next', AsyncFromSyncIteratorPrototype_next, 0], ['return', AsyncFromSyncIteratorPrototype_return, 0], ['throw', AsyncFromSyncIteratorPrototype_throw, 0]], realmRec.Intrinsics['%AsyncIteratorPrototype%']);
    realmRec.Intrinsics['%AsyncFromSyncIteratorPrototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-arraybuffer-length */
  function ArrayBufferConstructor([length = Value.undefined], {
    NewTarget
  }) {
    // 1. If NewTarget is undefined, throw a TypeError exception.
    if (NewTarget === Value.undefined) {
      return exports.surroundingAgent.Throw('TypeError', 'ConstructorNonCallable', this);
    }
    // 2. Let byteLength be ? ToIndex(length).
    let _temp = ToIndex(length);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const byteLength = _temp;
    // 3. Return ? AllocateArrayBuffer(NewTarget, byteLength).
    return AllocateArrayBuffer(NewTarget, byteLength);
  }

  /** https://tc39.es/ecma262/#sec-arraybuffer.isview */
  ArrayBufferConstructor.section = 'https://tc39.es/ecma262/#sec-arraybuffer-length';
  function ArrayBuffer_isView([arg = Value.undefined]) {
    // 1. If Type(arg) is not Object, return false.
    if (!(arg instanceof ObjectValue)) {
      return Value.false;
    }
    // 2. If arg has a [[ViewedArrayBuffer]] internal slot, return true.
    if ('ViewedArrayBuffer' in arg) {
      return Value.true;
    }
    // 3. Return false.
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-get-arraybuffer-@@species */
  ArrayBuffer_isView.section = 'https://tc39.es/ecma262/#sec-arraybuffer.isview';
  function ArrayBuffer_species(a, {
    thisValue
  }) {
    return thisValue;
  }
  ArrayBuffer_species.section = 'https://tc39.es/ecma262/#sec-get-arraybuffer-@@species';
  function bootstrapArrayBuffer(realmRec) {
    const c = bootstrapConstructor(realmRec, ArrayBufferConstructor, 'ArrayBuffer', 1, realmRec.Intrinsics['%ArrayBuffer.prototype%'], [['isView', ArrayBuffer_isView, 1], [wellKnownSymbols.species, [ArrayBuffer_species]]]);
    realmRec.Intrinsics['%ArrayBuffer%'] = c;
  }

  /** https://tc39.es/ecma262/#sec-get-arraybuffer.prototype.bytelength */
  function ArrayBufferProto_byteLength(args, {
    thisValue
  }) {
    // 1. Let O be this value.
    const O = thisValue;
    // 2. Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).
    let _temp = RequireInternalSlot(O, 'ArrayBufferData');
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 3. If IsSharedArrayBuffer(O) is true, throw a TypeError exception.
    if (IsSharedArrayBuffer() === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferShared');
    }
    // 4. If IsDetachedBuffer(O) is true, return +0𝔽.
    if (IsDetachedBuffer(O) === Value.true) {
      return F(+0);
    }
    // 5. Let length be O.[[ArrayBufferByteLength]].
    const length = O.ArrayBufferByteLength;
    // 6. Return length.
    return F(length);
  }

  /** https://tc39.es/ecma262/#sec-arraybuffer.prototype.slice */
  ArrayBufferProto_byteLength.section = 'https://tc39.es/ecma262/#sec-get-arraybuffer.prototype.bytelength';
  function ArrayBufferProto_slice([start = Value.undefined, end = Value.undefined], {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).
    let _temp2 = RequireInternalSlot(O, 'ArrayBufferData');
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 3. If IsSharedArrayBuffer(O) is true, throw a TypeError exception.
    if (IsSharedArrayBuffer() === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferShared');
    }
    // 4. If IsDetachedBuffer(O) is true, throw a TypeError exception.
    if (IsDetachedBuffer(O) === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
    }
    // 5. Let len be O.[[ArrayBufferByteLength]].
    const len = O.ArrayBufferByteLength;
    // 6. Let relativeStart be ? ToIntegerOrInfinity(start).
    let _temp3 = ToIntegerOrInfinity(start);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const relativeStart = _temp3;
    let first;
    // 7. If relativeStart < 0, let first be max((len + relativeStart), 0); else let first be min(relativeStart, len).
    if (relativeStart < 0) {
      first = Math.max(len + relativeStart, 0);
    } else {
      first = Math.min(relativeStart, len);
    }
    let relativeEnd;
    // 8. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToIntegerOrInfinity(end).
    if (end === Value.undefined) {
      relativeEnd = len;
    } else {
      let _temp4 = ToIntegerOrInfinity(end);
      /* c8 ignore if */
      if (_temp4 instanceof AbruptCompletion) {
        return _temp4;
      }
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      relativeEnd = _temp4;
    }
    let final;
    // 9. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let final be min(relativeEnd, len).
    if (relativeEnd < 0) {
      final = Math.max(len + relativeEnd, 0);
    } else {
      final = Math.min(relativeEnd, len);
    }
    // 10. Let newLen be max(final - first, 0).
    const newLen = Math.max(final - first, 0);
    // 11. Let ctor be ? SpeciesConstructor(O, %ArrayBuffer%).
    let _temp5 = SpeciesConstructor(O, exports.surroundingAgent.intrinsic('%ArrayBuffer%'));
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const ctor = _temp5;
    // 12. Let new be ? Construct(ctor, « newLen »).
    let _temp6 = Construct(ctor, [F(newLen)]);
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const newO = _temp6;
    // 13. Perform ? RequireInternalSlot(new, [[ArrayBufferData]]).
    let _temp7 = RequireInternalSlot(newO, 'ArrayBufferData');
    /* c8 ignore if */
    if (_temp7 instanceof AbruptCompletion) {
      return _temp7;
    }
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    // 14. If IsSharedArrayBuffer(new) is true, throw a TypeError exception.
    if (IsSharedArrayBuffer() === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferShared');
    }
    // 15. If IsDetachedBuffer(new) is true, throw a TypeError exception.
    if (IsDetachedBuffer(newO) === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
    }
    // 16. If SameValue(new, O) is true, throw a TypeError exception.
    if (SameValue(newO, O) === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'SubclassSameValue', newO);
    }
    // 17. If new.[[ArrayBufferByteLength]] < newLen, throw a TypeError exception.
    if (newO.ArrayBufferByteLength < newLen) {
      return exports.surroundingAgent.Throw('TypeError', 'SubclassLengthTooSmall', newO);
    }
    // 18. NOTE: Side-effects of the above steps may have detached O.
    // 19. If IsDetachedBuffer(O) is true, throw a TypeError exception.
    if (IsDetachedBuffer(O) === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
    }
    // 20. Let fromBuf be O.[[ArrayBufferData]].
    const fromBuf = O.ArrayBufferData;
    // 21. Let toBuf be new.[[ArrayBufferData]].
    const toBuf = newO.ArrayBufferData;
    // 22. Perform CopyDataBlockBytes(toBuf, 0, fromBuf, first, newLen).
    CopyDataBlockBytes(toBuf, 0, fromBuf, first, newLen);
    // 23. Return new.
    return newO;
  }
  ArrayBufferProto_slice.section = 'https://tc39.es/ecma262/#sec-arraybuffer.prototype.slice';
  function bootstrapArrayBufferPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['byteLength', [ArrayBufferProto_byteLength]], ['slice', ArrayBufferProto_slice, 2]], realmRec.Intrinsics['%Object.prototype%'], 'ArrayBuffer');
    realmRec.Intrinsics['%ArrayBuffer.prototype%'] = proto;
  }

  const WHITESPACE = [' ', '\t', '\r', '\n'];
  const NUMERIC = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
  const VALID_HEX = [...NUMERIC, 'A', 'B', 'C', 'D', 'E', 'F', 'a', 'b', 'c', 'd', 'e', 'f'];
  const ESCAPABLE = ['"', '\\', '/', 'b', 'f', 'n', 'r', 't'];
  class JSONValidator {
    input;
    pos = 0;
    char;
    constructor(input) {
      this.input = input;
      this.char = input.charAt(0);
    }
    validate() {
      let _temp = this.eatWhitespace();
      Assert(!(_temp instanceof AbruptCompletion), "this.eatWhitespace()" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      let _temp2 = this.parseValue();
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      if (this.pos < this.input.length) {
        return exports.surroundingAgent.Throw('SyntaxError', 'JSONUnexpectedToken');
      }
      return NormalCompletion(undefined);
    }
    advance() {
      this.pos += 1;
      if (this.pos === this.input.length) {
        this.char = null;
      } else if (this.pos > this.input.length) {
        return exports.surroundingAgent.Throw('SyntaxError', 'JSONUnexpectedToken');
      } else {
        this.char = this.input.charAt(this.pos);
      }
      return this.char;
    }
    eatWhitespace() {
      while (this.eat(WHITESPACE)) {
        // nothing
      }
    }
    eat(c) {
      if (Array.isArray(c) && c.includes(this.char)) {
        let _temp3 = this.advance();
        Assert(!(_temp3 instanceof AbruptCompletion), "this.advance()" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp3 instanceof Completion) {
          _temp3 = _temp3.Value;
        }
        return true;
      } else if (this.char === c) {
        let _temp4 = this.advance();
        Assert(!(_temp4 instanceof AbruptCompletion), "this.advance()" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp4 instanceof Completion) {
          _temp4 = _temp4.Value;
        }
        return true;
      }
      return false;
    }
    expect(c) {
      const {
        char
      } = this;
      if (!this.eat(c)) {
        return exports.surroundingAgent.Throw('SyntaxError', 'JSONExpected', c, this.char);
      }
      return char;
    }
    parseValue() {
      switch (this.char) {
        case '"':
          return this.parseString();
        case '{':
          return this.parseObject();
        case '[':
          return this.parseArray();
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case '-':
          return this.parseNumber();
        case 'f':
          let _temp5 = this.expect('f');
          Assert(!(_temp5 instanceof AbruptCompletion), "this.expect('f')" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp5 instanceof Completion) {
            _temp5 = _temp5.Value;
          }
          let _temp6 = this.expect('a');
          /* c8 ignore if */
          if (_temp6 instanceof AbruptCompletion) {
            return _temp6;
          }
          /* c8 ignore if */
          if (_temp6 instanceof Completion) {
            _temp6 = _temp6.Value;
          }
          let _temp7 = this.expect('l');
          /* c8 ignore if */
          if (_temp7 instanceof AbruptCompletion) {
            return _temp7;
          }
          /* c8 ignore if */
          if (_temp7 instanceof Completion) {
            _temp7 = _temp7.Value;
          }
          let _temp8 = this.expect('s');
          /* c8 ignore if */
          if (_temp8 instanceof AbruptCompletion) {
            return _temp8;
          }
          /* c8 ignore if */
          if (_temp8 instanceof Completion) {
            _temp8 = _temp8.Value;
          }
          let _temp9 = this.expect('e');
          /* c8 ignore if */
          if (_temp9 instanceof AbruptCompletion) {
            return _temp9;
          }
          /* c8 ignore if */
          if (_temp9 instanceof Completion) {
            _temp9 = _temp9.Value;
          }
          let _temp10 = this.eatWhitespace();
          Assert(!(_temp10 instanceof AbruptCompletion), "this.eatWhitespace()" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp10 instanceof Completion) {
            _temp10 = _temp10.Value;
          }
          return _temp10;
        case 't':
          let _temp11 = this.expect('t');
          Assert(!(_temp11 instanceof AbruptCompletion), "this.expect('t')" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp11 instanceof Completion) {
            _temp11 = _temp11.Value;
          }
          let _temp12 = this.expect('r');
          /* c8 ignore if */
          if (_temp12 instanceof AbruptCompletion) {
            return _temp12;
          }
          /* c8 ignore if */
          if (_temp12 instanceof Completion) {
            _temp12 = _temp12.Value;
          }
          let _temp13 = this.expect('u');
          /* c8 ignore if */
          if (_temp13 instanceof AbruptCompletion) {
            return _temp13;
          }
          /* c8 ignore if */
          if (_temp13 instanceof Completion) {
            _temp13 = _temp13.Value;
          }
          let _temp14 = this.expect('e');
          /* c8 ignore if */
          if (_temp14 instanceof AbruptCompletion) {
            return _temp14;
          }
          /* c8 ignore if */
          if (_temp14 instanceof Completion) {
            _temp14 = _temp14.Value;
          }
          let _temp15 = this.eatWhitespace();
          Assert(!(_temp15 instanceof AbruptCompletion), "this.eatWhitespace()" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp15 instanceof Completion) {
            _temp15 = _temp15.Value;
          }
          return _temp15;
        case 'n':
          let _temp16 = this.expect('n');
          Assert(!(_temp16 instanceof AbruptCompletion), "this.expect('n')" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp16 instanceof Completion) {
            _temp16 = _temp16.Value;
          }
          let _temp17 = this.expect('u');
          /* c8 ignore if */
          if (_temp17 instanceof AbruptCompletion) {
            return _temp17;
          }
          /* c8 ignore if */
          if (_temp17 instanceof Completion) {
            _temp17 = _temp17.Value;
          }
          let _temp18 = this.expect('l');
          /* c8 ignore if */
          if (_temp18 instanceof AbruptCompletion) {
            return _temp18;
          }
          /* c8 ignore if */
          if (_temp18 instanceof Completion) {
            _temp18 = _temp18.Value;
          }
          let _temp19 = this.expect('l');
          /* c8 ignore if */
          if (_temp19 instanceof AbruptCompletion) {
            return _temp19;
          }
          /* c8 ignore if */
          if (_temp19 instanceof Completion) {
            _temp19 = _temp19.Value;
          }
          let _temp20 = this.eatWhitespace();
          Assert(!(_temp20 instanceof AbruptCompletion), "this.eatWhitespace()" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp20 instanceof Completion) {
            _temp20 = _temp20.Value;
          }
          return _temp20;
        default:
          return exports.surroundingAgent.Throw('SyntaxError', 'JSONUnexpectedChar', this.char);
      }
    }
    parseString() {
      let _temp21 = this.expect('"');
      /* c8 ignore if */
      if (_temp21 instanceof AbruptCompletion) {
        return _temp21;
      }
      /* c8 ignore if */
      if (_temp21 instanceof Completion) {
        _temp21 = _temp21.Value;
      }
      while (!this.eat('"')) {
        if (this.eat('\\')) {
          if (!this.eat(ESCAPABLE)) {
            let _temp22 = this.expect('u');
            /* c8 ignore if */
            if (_temp22 instanceof AbruptCompletion) {
              return _temp22;
            }
            /* c8 ignore if */
            if (_temp22 instanceof Completion) {
              _temp22 = _temp22.Value;
            }
            let _temp23 = this.expect(VALID_HEX);
            /* c8 ignore if */
            if (_temp23 instanceof AbruptCompletion) {
              return _temp23;
            }
            /* c8 ignore if */
            if (_temp23 instanceof Completion) {
              _temp23 = _temp23.Value;
            }
            let _temp24 = this.expect(VALID_HEX);
            /* c8 ignore if */
            if (_temp24 instanceof AbruptCompletion) {
              return _temp24;
            }
            /* c8 ignore if */
            if (_temp24 instanceof Completion) {
              _temp24 = _temp24.Value;
            }
            let _temp25 = this.expect(VALID_HEX);
            /* c8 ignore if */
            if (_temp25 instanceof AbruptCompletion) {
              return _temp25;
            }
            /* c8 ignore if */
            if (_temp25 instanceof Completion) {
              _temp25 = _temp25.Value;
            }
            let _temp26 = this.expect(VALID_HEX);
            /* c8 ignore if */
            if (_temp26 instanceof AbruptCompletion) {
              return _temp26;
            }
            /* c8 ignore if */
            if (_temp26 instanceof Completion) {
              _temp26 = _temp26.Value;
            }
          }
        } else {
          if (this.char < ' ') {
            return exports.surroundingAgent.Throw('SyntaxError', 'JSONUnexpectedChar', this.char);
          }
          let _temp27 = this.advance();
          /* c8 ignore if */
          if (_temp27 instanceof AbruptCompletion) {
            return _temp27;
          }
          /* c8 ignore if */
          if (_temp27 instanceof Completion) {
            _temp27 = _temp27.Value;
          }
        }
      }
      let _temp28 = this.eatWhitespace();
      Assert(!(_temp28 instanceof AbruptCompletion), "this.eatWhitespace()" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp28 instanceof Completion) {
        _temp28 = _temp28.Value;
      }
      return _temp28;
    }
    parseNumber() {
      this.eat('-');
      if (!this.eat('0')) {
        let _temp29 = this.expect(NUMERIC);
        /* c8 ignore if */
        if (_temp29 instanceof AbruptCompletion) {
          return _temp29;
        }
        /* c8 ignore if */
        if (_temp29 instanceof Completion) {
          _temp29 = _temp29.Value;
        }
        while (this.eat(NUMERIC)) {
          // nothing
        }
      }
      if (this.eat('.')) {
        let _temp30 = this.expect(NUMERIC);
        /* c8 ignore if */
        if (_temp30 instanceof AbruptCompletion) {
          return _temp30;
        }
        /* c8 ignore if */
        if (_temp30 instanceof Completion) {
          _temp30 = _temp30.Value;
        }
        while (this.eat(NUMERIC)) {
          // nothing
        }
      }
      if (this.eat(['e', 'E'])) {
        this.eat(['-', '+']);
        let _temp31 = this.expect(NUMERIC);
        /* c8 ignore if */
        if (_temp31 instanceof AbruptCompletion) {
          return _temp31;
        }
        /* c8 ignore if */
        if (_temp31 instanceof Completion) {
          _temp31 = _temp31.Value;
        }
        while (this.eat(NUMERIC)) {
          // nothing
        }
      }
      let _temp32 = this.eatWhitespace();
      Assert(!(_temp32 instanceof AbruptCompletion), "this.eatWhitespace()" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp32 instanceof Completion) {
        _temp32 = _temp32.Value;
      }
    }
    parseObject() {
      let _temp33 = this.expect('{');
      /* c8 ignore if */
      if (_temp33 instanceof AbruptCompletion) {
        return _temp33;
      }
      /* c8 ignore if */
      if (_temp33 instanceof Completion) {
        _temp33 = _temp33.Value;
      }
      let _temp34 = this.eatWhitespace();
      Assert(!(_temp34 instanceof AbruptCompletion), "this.eatWhitespace()" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp34 instanceof Completion) {
        _temp34 = _temp34.Value;
      }
      let first = true;
      while (!this.eat('}')) {
        if (first) {
          first = false;
        } else {
          let _temp35 = this.expect(',');
          /* c8 ignore if */
          if (_temp35 instanceof AbruptCompletion) {
            return _temp35;
          }
          /* c8 ignore if */
          if (_temp35 instanceof Completion) {
            _temp35 = _temp35.Value;
          }
          let _temp36 = this.eatWhitespace();
          Assert(!(_temp36 instanceof AbruptCompletion), "this.eatWhitespace()" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp36 instanceof Completion) {
            _temp36 = _temp36.Value;
          }
        }
        let _temp37 = this.parseString();
        /* c8 ignore if */
        if (_temp37 instanceof AbruptCompletion) {
          return _temp37;
        }
        /* c8 ignore if */
        if (_temp37 instanceof Completion) {
          _temp37 = _temp37.Value;
        }
        let _temp38 = this.eatWhitespace();
        Assert(!(_temp38 instanceof AbruptCompletion), "this.eatWhitespace()" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp38 instanceof Completion) {
          _temp38 = _temp38.Value;
        }
        let _temp39 = this.expect(':');
        /* c8 ignore if */
        if (_temp39 instanceof AbruptCompletion) {
          return _temp39;
        }
        /* c8 ignore if */
        if (_temp39 instanceof Completion) {
          _temp39 = _temp39.Value;
        }
        let _temp40 = this.eatWhitespace();
        Assert(!(_temp40 instanceof AbruptCompletion), "this.eatWhitespace()" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp40 instanceof Completion) {
          _temp40 = _temp40.Value;
        }
        let _temp41 = this.parseValue();
        /* c8 ignore if */
        if (_temp41 instanceof AbruptCompletion) {
          return _temp41;
        }
        /* c8 ignore if */
        if (_temp41 instanceof Completion) {
          _temp41 = _temp41.Value;
        }
        let _temp42 = this.eatWhitespace();
        Assert(!(_temp42 instanceof AbruptCompletion), "this.eatWhitespace()" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp42 instanceof Completion) {
          _temp42 = _temp42.Value;
        }
      }
      let _temp43 = this.eatWhitespace();
      Assert(!(_temp43 instanceof AbruptCompletion), "this.eatWhitespace()" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp43 instanceof Completion) {
        _temp43 = _temp43.Value;
      }
    }
    parseArray() {
      let _temp44 = this.expect('[');
      /* c8 ignore if */
      if (_temp44 instanceof AbruptCompletion) {
        return _temp44;
      }
      /* c8 ignore if */
      if (_temp44 instanceof Completion) {
        _temp44 = _temp44.Value;
      }
      let _temp45 = this.eatWhitespace();
      Assert(!(_temp45 instanceof AbruptCompletion), "this.eatWhitespace()" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp45 instanceof Completion) {
        _temp45 = _temp45.Value;
      }
      let first = true;
      while (!this.eat(']')) {
        if (first) {
          first = false;
        } else {
          let _temp46 = this.expect(',');
          /* c8 ignore if */
          if (_temp46 instanceof AbruptCompletion) {
            return _temp46;
          }
          /* c8 ignore if */
          if (_temp46 instanceof Completion) {
            _temp46 = _temp46.Value;
          }
          let _temp47 = this.eatWhitespace();
          Assert(!(_temp47 instanceof AbruptCompletion), "this.eatWhitespace()" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp47 instanceof Completion) {
            _temp47 = _temp47.Value;
          }
        }
        let _temp48 = this.parseValue();
        /* c8 ignore if */
        if (_temp48 instanceof AbruptCompletion) {
          return _temp48;
        }
        /* c8 ignore if */
        if (_temp48 instanceof Completion) {
          _temp48 = _temp48.Value;
        }
        let _temp49 = this.eatWhitespace();
        Assert(!(_temp49 instanceof AbruptCompletion), "this.eatWhitespace()" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp49 instanceof Completion) {
          _temp49 = _temp49.Value;
        }
      }
      let _temp50 = this.eatWhitespace();
      Assert(!(_temp50 instanceof AbruptCompletion), "this.eatWhitespace()" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp50 instanceof Completion) {
        _temp50 = _temp50.Value;
      }
    }
    static validate(input) {
      const v = new JSONValidator(input);
      return v.validate();
    }
  }
  function InternalizeJSONProperty(holder, name, reviver) {
    let _temp51 = Get(holder, name);
    /* c8 ignore if */
    if (_temp51 instanceof AbruptCompletion) {
      return _temp51;
    }
    /* c8 ignore if */
    if (_temp51 instanceof Completion) {
      _temp51 = _temp51.Value;
    }
    const val = _temp51;
    if (val instanceof ObjectValue) {
      let _temp52 = IsArray(val);
      /* c8 ignore if */
      if (_temp52 instanceof AbruptCompletion) {
        return _temp52;
      }
      /* c8 ignore if */
      if (_temp52 instanceof Completion) {
        _temp52 = _temp52.Value;
      }
      const isArray = _temp52;
      if (isArray === Value.true) {
        let I = 0;
        let _temp53 = LengthOfArrayLike(val);
        /* c8 ignore if */
        if (_temp53 instanceof AbruptCompletion) {
          return _temp53;
        }
        /* c8 ignore if */
        if (_temp53 instanceof Completion) {
          _temp53 = _temp53.Value;
        }
        const len = _temp53;
        while (I < len) {
          let _temp54 = ToString(F(I));
          Assert(!(_temp54 instanceof AbruptCompletion), "ToString(F(I))" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp54 instanceof Completion) {
            _temp54 = _temp54.Value;
          }
          const Istr = _temp54;
          let _temp55 = InternalizeJSONProperty(val, Istr, reviver);
          /* c8 ignore if */
          if (_temp55 instanceof AbruptCompletion) {
            return _temp55;
          }
          /* c8 ignore if */
          if (_temp55 instanceof Completion) {
            _temp55 = _temp55.Value;
          }
          const newElement = _temp55;
          if (newElement instanceof UndefinedValue) {
            let _temp56 = val.Delete(Istr);
            /* c8 ignore if */
            if (_temp56 instanceof AbruptCompletion) {
              return _temp56;
            }
            /* c8 ignore if */
            if (_temp56 instanceof Completion) {
              _temp56 = _temp56.Value;
            }
          } else {
            let _temp57 = CreateDataProperty(val, Istr, newElement);
            /* c8 ignore if */
            if (_temp57 instanceof AbruptCompletion) {
              return _temp57;
            }
            /* c8 ignore if */
            if (_temp57 instanceof Completion) {
              _temp57 = _temp57.Value;
            }
          }
          I += 1;
        }
      } else {
        let _temp58 = EnumerableOwnPropertyNames(val, 'key');
        /* c8 ignore if */
        if (_temp58 instanceof AbruptCompletion) {
          return _temp58;
        }
        /* c8 ignore if */
        if (_temp58 instanceof Completion) {
          _temp58 = _temp58.Value;
        }
        const keys = _temp58;
        for (const P of keys) {
          let _temp59 = InternalizeJSONProperty(val, P, reviver);
          /* c8 ignore if */
          if (_temp59 instanceof AbruptCompletion) {
            return _temp59;
          }
          /* c8 ignore if */
          if (_temp59 instanceof Completion) {
            _temp59 = _temp59.Value;
          }
          const newElement = _temp59;
          if (newElement instanceof UndefinedValue) {
            let _temp60 = val.Delete(P);
            /* c8 ignore if */
            if (_temp60 instanceof AbruptCompletion) {
              return _temp60;
            }
            /* c8 ignore if */
            if (_temp60 instanceof Completion) {
              _temp60 = _temp60.Value;
            }
          } else {
            let _temp61 = CreateDataProperty(val, P, newElement);
            /* c8 ignore if */
            if (_temp61 instanceof AbruptCompletion) {
              return _temp61;
            }
            /* c8 ignore if */
            if (_temp61 instanceof Completion) {
              _temp61 = _temp61.Value;
            }
          }
        }
      }
    }
    return Call(reviver, holder, [name, val]);
  }

  /** https://tc39.es/ecma262/#sec-json.parse */
  function JSON_parse([text = Value.undefined, reviver = Value.undefined]) {
    let _temp62 = ToString(text);
    /* c8 ignore if */
    if (_temp62 instanceof AbruptCompletion) {
      return _temp62;
    }
    /* c8 ignore if */
    if (_temp62 instanceof Completion) {
      _temp62 = _temp62.Value;
    }
    // 1. Let jsonString be ? ToString(text).
    const jsonString = _temp62;
    // 2. Parse ! UTF16DecodeString(jsonString) as a JSON text as specified in ECMA-404.
    //    Throw a SyntaxError exception if it is not a valid JSON text as defined in that specification.
    let _temp63 = JSONValidator.validate(jsonString.stringValue());
    /* c8 ignore if */
    if (_temp63 instanceof AbruptCompletion) {
      return _temp63;
    }
    /* c8 ignore if */
    if (_temp63 instanceof Completion) {
      _temp63 = _temp63.Value;
    }
    // 3. Let scriptString be the string-concatenation of "(", jsonString, and ");".
    const scriptString = `(${jsonString.stringValue()});`;
    // 4. Let completion be the result of parsing and evaluating
    //    ! UTF16DecodeString(scriptString) as if it was the source text of an ECMAScript Script. The
    //    extended PropertyDefinitionEvaluation semantics defined in B.3.1 must not be used during the evaluation.
    const completion = evaluateScript(scriptString, exports.surroundingAgent.currentRealmRecord, {
      [kInternal]: {
        json: true
      }
    });
    // 5. Let unfiltered be completion.[[Value]].
    const unfiltered = completion.Value;
    // 6. Assert: unfiltered is either a String, Number, Boolean, Null, or an Object that is defined by either an ArrayLiteral or an ObjectLiteral.
    Assert(unfiltered instanceof JSStringValue || unfiltered instanceof NumberValue || unfiltered instanceof BooleanValue || unfiltered instanceof NullValue || unfiltered instanceof ObjectValue, "unfiltered instanceof JSStringValue\n         || unfiltered instanceof NumberValue\n         || unfiltered instanceof BooleanValue\n         || unfiltered instanceof NullValue\n         || unfiltered instanceof ObjectValue");
    // 7. If IsCallable(reviver) is true, then
    if (IsCallable(reviver) === Value.true) {
      // a. Let root be OrdinaryObjectCreate(%Object.prototype%).
      const root = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%Object.prototype%'));
      // b. Let rootName be the empty String.
      const rootName = Value('');
      // c. Perform ! CreateDataPropertyOrThrow(root, rootName, unfiltered).
      let _temp64 = CreateDataPropertyOrThrow(root, rootName, unfiltered);
      Assert(!(_temp64 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(root, rootName, unfiltered)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp64 instanceof Completion) {
        _temp64 = _temp64.Value;
      }
      // d. Return ? InternalizeJSONProperty(root, rootName, reviver).
      return InternalizeJSONProperty(root, rootName, reviver);
    } else {
      // a. Return unfiltered.
      return unfiltered;
    }
  }
  JSON_parse.section = 'https://tc39.es/ecma262/#sec-json.parse';
  const codeUnitTable = new Map([[0x0008, '\\b'], [0x0009, '\\t'], [0x000A, '\\n'], [0x000C, '\\f'], [0x000D, '\\r'], [0x0022, '\\"'], [0x005C, '\\\\']]);

  /** https://tc39.es/ecma262/#sec-serializejsonproperty */
  function SerializeJSONProperty(state, key, holder) {
    let _temp65 = Get(holder, key);
    /* c8 ignore if */
    if (_temp65 instanceof AbruptCompletion) {
      return _temp65;
    }
    /* c8 ignore if */
    if (_temp65 instanceof Completion) {
      _temp65 = _temp65.Value;
    }
    let value = _temp65; // eslint-disable-line no-shadow
    if (value instanceof ObjectValue || value instanceof BigIntValue) {
      let _temp66 = GetV(value, Value('toJSON'));
      /* c8 ignore if */
      if (_temp66 instanceof AbruptCompletion) {
        return _temp66;
      }
      /* c8 ignore if */
      if (_temp66 instanceof Completion) {
        _temp66 = _temp66.Value;
      }
      const toJSON = _temp66;
      if (IsCallable(toJSON) === Value.true) {
        let _temp67 = Call(toJSON, value, [key]);
        /* c8 ignore if */
        if (_temp67 instanceof AbruptCompletion) {
          return _temp67;
        }
        /* c8 ignore if */
        if (_temp67 instanceof Completion) {
          _temp67 = _temp67.Value;
        }
        value = _temp67;
      }
    }
    if (state.ReplacerFunction !== Value.undefined) {
      let _temp68 = Call(state.ReplacerFunction, holder, [key, value]);
      /* c8 ignore if */
      if (_temp68 instanceof AbruptCompletion) {
        return _temp68;
      }
      /* c8 ignore if */
      if (_temp68 instanceof Completion) {
        _temp68 = _temp68.Value;
      }
      value = _temp68;
    }
    if (value instanceof ObjectValue) {
      if ('NumberData' in value) {
        let _temp69 = ToNumber(value);
        /* c8 ignore if */
        if (_temp69 instanceof AbruptCompletion) {
          return _temp69;
        }
        /* c8 ignore if */
        if (_temp69 instanceof Completion) {
          _temp69 = _temp69.Value;
        }
        value = _temp69;
      } else if ('StringData' in value) {
        let _temp70 = ToString(value);
        /* c8 ignore if */
        if (_temp70 instanceof AbruptCompletion) {
          return _temp70;
        }
        /* c8 ignore if */
        if (_temp70 instanceof Completion) {
          _temp70 = _temp70.Value;
        }
        value = _temp70;
      } else if ('BooleanData' in value) {
        value = value.BooleanData;
      } else if ('BigIntData' in value) {
        value = value.BigIntData;
      }
    }
    if (value === Value.null) {
      return Value('null');
    }
    if (value === Value.true) {
      return Value('true');
    }
    if (value === Value.false) {
      return Value('false');
    }
    if (value instanceof JSStringValue) {
      return QuoteJSONString(value);
    }
    if (value instanceof NumberValue) {
      if (value.isFinite()) {
        let _temp71 = ToString(value);
        Assert(!(_temp71 instanceof AbruptCompletion), "ToString(value)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp71 instanceof Completion) {
          _temp71 = _temp71.Value;
        }
        return _temp71;
      }
      return Value('null');
    }
    if (value instanceof BigIntValue) {
      return exports.surroundingAgent.Throw('TypeError', 'CannotJSONSerializeBigInt');
    }
    if (value instanceof ObjectValue && IsCallable(value) === Value.false) {
      let _temp72 = IsArray(value);
      /* c8 ignore if */
      if (_temp72 instanceof AbruptCompletion) {
        return _temp72;
      }
      /* c8 ignore if */
      if (_temp72 instanceof Completion) {
        _temp72 = _temp72.Value;
      }
      const isArray = _temp72;
      if (isArray === Value.true) {
        return SerializeJSONArray(state, value);
      }
      return SerializeJSONObject(state, value);
    }
    return Value.undefined;
  }
  SerializeJSONProperty.section = 'https://tc39.es/ecma262/#sec-serializejsonproperty';
  function UnicodeEscape(C) {
    const n = C.charCodeAt(0);
    Assert(n < 0xFFFF, "n < 0xFFFF");
    return `\u005Cu${n.toString(16).padStart(4, '0')}`;
  }
  function QuoteJSONString(value) {
    // eslint-disable-line no-shadow
    let product = '\u0022';
    const cpList = [...value.stringValue()].map(c => c.codePointAt(0));
    for (const C of cpList) {
      if (codeUnitTable.has(C)) {
        product = `${product}${codeUnitTable.get(C)}`;
      } else if (C < 0x0020 || isLeadingSurrogate(C) || isTrailingSurrogate(C)) {
        const unit = String.fromCodePoint(C);
        product += UnicodeEscape(unit);
      } else {
        product += UTF16EncodeCodePoint(C);
      }
    }
    product = `${product}\u0022`;
    return Value(product);
  }

  /** https://tc39.es/ecma262/#sec-serializejsonobject */
  function SerializeJSONObject(state, value) {
    if (state.Stack.includes(value)) {
      return exports.surroundingAgent.Throw('TypeError', 'JSONCircular');
    }
    state.Stack.push(value);
    const stepback = state.Indent;
    state.Indent = `${state.Indent}${state.Gap}`;
    let K;
    if (state.PropertyList !== Value.undefined) {
      K = state.PropertyList;
    } else {
      let _temp73 = EnumerableOwnPropertyNames(value, 'key');
      /* c8 ignore if */
      if (_temp73 instanceof AbruptCompletion) {
        return _temp73;
      }
      /* c8 ignore if */
      if (_temp73 instanceof Completion) {
        _temp73 = _temp73.Value;
      }
      K = _temp73;
    }
    const partial = [];
    for (const P of K) {
      let _temp74 = SerializeJSONProperty(state, P, value);
      /* c8 ignore if */
      if (_temp74 instanceof AbruptCompletion) {
        return _temp74;
      }
      /* c8 ignore if */
      if (_temp74 instanceof Completion) {
        _temp74 = _temp74.Value;
      }
      const strP = _temp74;
      if (strP !== Value.undefined) {
        let member = QuoteJSONString(P).stringValue();
        member = `${member}:`;
        if (state.Gap !== '') {
          member = `${member} `;
        }
        member = `${member}${strP.stringValue()}`;
        partial.push(member);
      }
    }
    let final;
    if (partial.length === 0) {
      final = Value('{}');
    } else {
      if (state.Gap === '') {
        const properties = partial.join(',');
        final = Value(`{${properties}}`);
      } else {
        const separator = `,\u000A${state.Indent}`;
        const properties = partial.join(separator);
        final = Value(`{\u000A${state.Indent}${properties}\u000A${stepback}}`);
      }
    }
    state.Stack.pop();
    state.Indent = stepback;
    return final;
  }

  /** https://tc39.es/ecma262/#sec-serializejsonarray */
  SerializeJSONObject.section = 'https://tc39.es/ecma262/#sec-serializejsonobject';
  function SerializeJSONArray(state, value) {
    if (state.Stack.includes(value)) {
      return exports.surroundingAgent.Throw('TypeError', 'JSONCircular');
    }
    state.Stack.push(value);
    const stepback = state.Indent;
    state.Indent = `${state.Indent}${state.Gap}`;
    const partial = [];
    let _temp75 = LengthOfArrayLike(value);
    /* c8 ignore if */
    if (_temp75 instanceof AbruptCompletion) {
      return _temp75;
    }
    /* c8 ignore if */
    if (_temp75 instanceof Completion) {
      _temp75 = _temp75.Value;
    }
    const len = _temp75;
    let index = 0;
    while (index < len) {
      let _temp76 = ToString(F(index));
      Assert(!(_temp76 instanceof AbruptCompletion), "ToString(F(index))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp76 instanceof Completion) {
        _temp76 = _temp76.Value;
      }
      const indexStr = _temp76;
      let _temp77 = SerializeJSONProperty(state, indexStr, value);
      /* c8 ignore if */
      if (_temp77 instanceof AbruptCompletion) {
        return _temp77;
      }
      /* c8 ignore if */
      if (_temp77 instanceof Completion) {
        _temp77 = _temp77.Value;
      }
      const strP = _temp77;
      if (strP === Value.undefined) {
        partial.push('null');
      } else {
        partial.push(strP.stringValue());
      }
      index += 1;
    }
    let final;
    if (partial.length === 0) {
      final = Value('[]');
    } else {
      if (state.Gap === '') {
        const properties = partial.join(',');
        final = Value(`[${properties}]`);
      } else {
        const separator = `,\u000A${state.Indent}`;
        const properties = partial.join(separator);
        final = Value(`[\u000A${state.Indent}${properties}\u000A${stepback}]`);
      }
    }
    state.Stack.pop();
    state.Indent = stepback;
    return final;
  }

  /** https://tc39.es/ecma262/#sec-json.stringify */
  SerializeJSONArray.section = 'https://tc39.es/ecma262/#sec-serializejsonarray';
  function JSON_stringify([value = Value.undefined, replacer = Value.undefined, space = Value.undefined]) {
    const stack = [];
    const indent = '';
    let PropertyList = Value.undefined;
    let ReplacerFunction = Value.undefined;
    if (replacer instanceof ObjectValue) {
      if (IsCallable(replacer) === Value.true) {
        ReplacerFunction = replacer;
      } else {
        let _temp78 = IsArray(replacer);
        /* c8 ignore if */
        if (_temp78 instanceof AbruptCompletion) {
          return _temp78;
        }
        /* c8 ignore if */
        if (_temp78 instanceof Completion) {
          _temp78 = _temp78.Value;
        }
        const isArray = _temp78;
        if (isArray === Value.true) {
          PropertyList = new ValueSet();
          let _temp79 = LengthOfArrayLike(replacer);
          /* c8 ignore if */
          if (_temp79 instanceof AbruptCompletion) {
            return _temp79;
          }
          /* c8 ignore if */
          if (_temp79 instanceof Completion) {
            _temp79 = _temp79.Value;
          }
          const len = _temp79;
          let k = 0;
          while (k < len) {
            let _temp80 = ToString(F(k));
            Assert(!(_temp80 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
            /* c8 ignore if */
            if (_temp80 instanceof Completion) {
              _temp80 = _temp80.Value;
            }
            const vStr = _temp80;
            let _temp81 = Get(replacer, vStr);
            /* c8 ignore if */
            if (_temp81 instanceof AbruptCompletion) {
              return _temp81;
            }
            /* c8 ignore if */
            if (_temp81 instanceof Completion) {
              _temp81 = _temp81.Value;
            }
            const v = _temp81;
            let item = Value.undefined;
            if (v instanceof JSStringValue) {
              item = v;
            } else if (v instanceof NumberValue) {
              let _temp82 = ToString(v);
              Assert(!(_temp82 instanceof AbruptCompletion), "ToString(v)" + ' returned an abrupt completion');
              /* c8 ignore if */
              if (_temp82 instanceof Completion) {
                _temp82 = _temp82.Value;
              }
              item = _temp82;
            } else if (v instanceof ObjectValue) {
              if ('StringData' in v || 'NumberData' in v) {
                let _temp83 = ToString(v);
                /* c8 ignore if */
                if (_temp83 instanceof AbruptCompletion) {
                  return _temp83;
                }
                /* c8 ignore if */
                if (_temp83 instanceof Completion) {
                  _temp83 = _temp83.Value;
                }
                item = _temp83;
              }
            }
            if (item !== Value.undefined && !PropertyList.has(item)) {
              PropertyList.add(item);
            }
            k += 1;
          }
        }
      }
    }
    if (space instanceof ObjectValue) {
      if ('NumberData' in space) {
        let _temp84 = ToNumber(space);
        /* c8 ignore if */
        if (_temp84 instanceof AbruptCompletion) {
          return _temp84;
        }
        /* c8 ignore if */
        if (_temp84 instanceof Completion) {
          _temp84 = _temp84.Value;
        }
        space = _temp84;
      } else if ('StringData' in space) {
        let _temp85 = ToString(space);
        /* c8 ignore if */
        if (_temp85 instanceof AbruptCompletion) {
          return _temp85;
        }
        /* c8 ignore if */
        if (_temp85 instanceof Completion) {
          _temp85 = _temp85.Value;
        }
        space = _temp85;
      }
    }
    let gap;
    if (space instanceof NumberValue) {
      let _temp86 = ToIntegerOrInfinity(space);
      Assert(!(_temp86 instanceof AbruptCompletion), "ToIntegerOrInfinity(space)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp86 instanceof Completion) {
        _temp86 = _temp86.Value;
      }
      space = Math.min(10, _temp86);
      if (space < 1) {
        gap = '';
      } else {
        gap = ' '.repeat(space);
      }
    } else if (space instanceof JSStringValue) {
      if (space.stringValue().length <= 10) {
        gap = space.stringValue();
      } else {
        gap = space.stringValue().slice(0, 10);
      }
    } else {
      gap = '';
    }
    const wrapper = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%Object.prototype%'));
    let _temp87 = CreateDataPropertyOrThrow(wrapper, Value(''), value);
    Assert(!(_temp87 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(wrapper, Value(''), value)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp87 instanceof Completion) {
      _temp87 = _temp87.Value;
    }
    const state = {
      ReplacerFunction,
      Stack: stack,
      Indent: indent,
      Gap: gap,
      PropertyList
    };
    return SerializeJSONProperty(state, Value(''), wrapper);
  }
  JSON_stringify.section = 'https://tc39.es/ecma262/#sec-json.stringify';
  function bootstrapJSON(realmRec) {
    const json = bootstrapPrototype(realmRec, [['parse', JSON_parse, 2], ['stringify', JSON_stringify, 3]], realmRec.Intrinsics['%Object.prototype%'], 'JSON');
    realmRec.Intrinsics['%JSON%'] = json;
    let _temp88 = Get(json, Value('parse'));
    Assert(!(_temp88 instanceof AbruptCompletion), "Get(json, Value('parse'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp88 instanceof Completion) {
      _temp88 = _temp88.Value;
    }
    realmRec.Intrinsics['%JSON.parse%'] = _temp88;
  }

  // @ts-nocheck

  /** https://tc39.es/ecma262/#sec-eval-x */
  function Eval([x = Value.undefined]) {
    // 1. Assert: The execution context stack has at least two elements.
    Assert(exports.surroundingAgent.executionContextStack.length >= 2, "surroundingAgent.executionContextStack.length >= 2");
    // 2. Let callerContext be the second to top element of the execution context stack.
    const callerContext = exports.surroundingAgent.executionContextStack[exports.surroundingAgent.executionContextStack.length - 2];
    // 3. Let callerRealm be callerContext's Realm.
    const callerRealm = callerContext.Realm;
    // 4. Return ? PerformEval(x, callerRealm, false, false).
    return PerformEval(x, callerRealm, false, false);
  }
  Eval.section = 'https://tc39.es/ecma262/#sec-eval-x';
  function bootstrapEval(realmRec) {
    realmRec.Intrinsics['%eval%'] = CreateBuiltinFunction(Eval, 1, Value('eval'), [], realmRec);
  }

  /** https://tc39.es/ecma262/#sec-isfinite-number */
  function IsFinite([number = Value.undefined]) {
    let _temp = ToNumber(number);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 1. Let num be ? ToNumber(number).
    const num = _temp;
    // 2. If num is NaN, +∞, or -∞, return false.
    if (num.isNaN() || num.isInfinity()) {
      return Value.false;
    }
    // 3. Otherwise, return true.
    return Value.true;
  }
  IsFinite.section = 'https://tc39.es/ecma262/#sec-isfinite-number';
  function bootstrapIsFinite(realmRec) {
    realmRec.Intrinsics['%isFinite%'] = CreateBuiltinFunction(IsFinite, 1, Value('isFinite'), [], realmRec);
  }

  /** https://tc39.es/ecma262/#sec-isnan-number */
  function IsNaN([number = Value.undefined]) {
    let _temp = ToNumber(number);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 1. Let num be ? ToNumber(number).
    const num = _temp;
    // 2. If num is NaN, return true.
    if (num.isNaN()) {
      return Value.true;
    }
    // 3. Otherwise, return false.
    return Value.false;
  }
  IsNaN.section = 'https://tc39.es/ecma262/#sec-isnan-number';
  function bootstrapIsNaN(realmRec) {
    realmRec.Intrinsics['%isNaN%'] = CreateBuiltinFunction(IsNaN, 1, Value('isNaN'), [], realmRec);
  }

  /** https://tc39.es/ecma262/#sec-parsefloat-string */
  function ParseFloat([string = Value.undefined]) {
    let _temp = ToString(string);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 1. Let inputString be ? ToString(string).
    const inputString = _temp;
    // 2. Let trimmedString be ! TrimString(inputString, start).
    let _temp2 = TrimString(inputString, 'start');
    Assert(!(_temp2 instanceof AbruptCompletion), "TrimString(inputString, 'start')" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const trimmedString = _temp2.stringValue();
    // 3. If neither trimmedString nor any prefix of trimmedString satisfies the syntax of a StrDecimalLiteral (see 7.1.4.1), return NaN.
    // 4. Let numberString be the longest prefix of trimmedString, which might be trimmedString itself, that satisfies the syntax of a StrDecimalLiteral.
    // 5. Let mathFloat be MV of numberString.
    // 6. If mathFloat = 0ℝ, then
    //   a. If the first code unit of trimmedString is the code unit 0x002D (HYPHEN-MINUS), return -0.
    //   b. Return +0.
    // 7. Return the Number value for mathFloat.
    let numberString = trimmedString;
    if (/^[+-]/.test(numberString)) {
      numberString = numberString.slice(1);
    }
    const multiplier = trimmedString.startsWith('-') ? -1 : 1;
    if (numberString.startsWith('Infinity')) {
      return F(Infinity * multiplier);
    }
    let index = 0;
    done: {
      // eslint-disable-line no-labels
      // Eat leading zeros
      while (numberString[index] === '0') {
        index += 1;
        if (index === numberString.length) {
          return F(+0 * multiplier);
        }
      }
      // Eat integer part
      if (numberString[index] !== '.') {
        while (/[0-9]/.test(numberString[index])) {
          index += 1;
        }
      }
      // Eat fractional part
      if (numberString[index] === '.') {
        if (!/[0-9eE]/.test(numberString[index + 1])) {
          break done; // eslint-disable-line no-labels
        }
        index += 1;
        while (/[0-9]/.test(numberString[index])) {
          index += 1;
        }
      }
      // Eat exponent part
      if (numberString[index] === 'e' || numberString[index] === 'E') {
        if (!/[-+0-9]/.test(numberString[index + 1])) {
          break done; // eslint-disable-line no-labels
        }
        index += 1;
        if (numberString[index] === '-' || numberString[index] === '+') {
          index += 1;
        }
        while (/[0-9]/.test(numberString[index])) {
          index += 1;
        }
      }
    }
    return F(parseFloat(numberString.slice(0, index)) * multiplier);
  }
  ParseFloat.section = 'https://tc39.es/ecma262/#sec-parsefloat-string';
  function bootstrapParseFloat(realmRec) {
    realmRec.Intrinsics['%parseFloat%'] = CreateBuiltinFunction(ParseFloat, 1, Value('parseFloat'), [], realmRec);
  }

  function digitToNumber(digit) {
    digit = digit.charCodeAt(0);
    if (digit < 0x30 /* 0 */) {
      return NaN;
    }
    if (digit <= 0x39 /* 9 */) {
      return digit - 0x30;
    }
    // Convert to lower case.
    digit &= ~0x20; // eslint-disable-line no-bitwise
    if (digit < 0x41 /* A */) {
      return NaN;
    }
    if (digit <= 0x5a /* Z */) {
      return digit - 0x41 /* A */ + 10;
    }
    return NaN;
  }
  function stringToRadixNumber(str, R) {
    let num = 0;
    for (let i = 0; i < str.length; i += 1) {
      const power = str.length - i - 1;
      const multiplier = R ** power;
      const dig = digitToNumber(str[i]);
      Assert(!Number.isNaN(dig) && dig < R, "!Number.isNaN(dig) && dig < R");
      num += dig * multiplier;
    }
    return num;
  }
  function searchNotRadixDigit(str, R) {
    for (let i = 0; i < str.length; i += 1) {
      const num = digitToNumber(str[i]);
      if (Number.isNaN(num) || num >= R) {
        return i;
      }
    }
    return str.length;
  }

  /** https://tc39.es/ecma262/#sec-parseint-string-radix */
  function ParseInt([string = Value.undefined, radix = Value.undefined]) {
    let _temp = ToString(string);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const inputString = _temp;
    let _temp2 = TrimString(inputString, 'start');
    Assert(!(_temp2 instanceof AbruptCompletion), "TrimString(inputString, 'start')" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    let S = _temp2.stringValue();
    let sign = 1;
    if (S !== '' && S[0] === '\x2D') {
      sign = -1;
    }
    if (S !== '' && (S[0] === '\x2B' || S[0] === '\x2D')) {
      S = S.slice(1);
    }
    let _temp3 = ToInt32(radix);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    let R$1 = R(_temp3);
    let stripPrefix = true;
    if (R$1 !== 0) {
      if (R$1 < 2 || R$1 > 36) {
        return F(NaN);
      }
      if (R$1 !== 16) {
        stripPrefix = false;
      }
    } else {
      R$1 = 10;
    }
    if (stripPrefix === true) {
      if (S.length >= 2 && (S.startsWith('0x') || S.startsWith('0X'))) {
        S = S.slice(2);
        R$1 = 16;
      }
    }
    const Z = S.slice(0, searchNotRadixDigit(S, R$1));
    if (Z === '') {
      return F(NaN);
    }
    const mathInt = stringToRadixNumber(Z, R$1);
    if (mathInt === 0) {
      if (sign === -1) {
        return F(-0);
      }
      return F(+0);
    }
    const number = mathInt;
    return F(sign * number);
  }
  ParseInt.section = 'https://tc39.es/ecma262/#sec-parseint-string-radix';
  function bootstrapParseInt(realmRec) {
    realmRec.Intrinsics['%parseInt%'] = CreateBuiltinFunction(ParseInt, 2, Value('parseInt'), [], realmRec);
  }

  function utf8Encode(utf) {
    if (utf <= 0x7F) {
      return [utf];
    }
    if (utf <= 0x07FF) {
      return [utf >> 6 & 0x1F | 0xC0, utf >> 0 & 0x3F | 0x80];
    }
    if (utf <= 0xFFFF) {
      return [utf >> 12 & 0x0F | 0xE0, utf >> 6 & 0x3F | 0x80, utf >> 0 & 0x3F | 0x80];
    }
    if (utf <= 0x10FFFF) {
      return [utf >> 18 & 0x07 | 0xF0, utf >> 12 & 0x3F | 0x80, utf >> 6 & 0x3F | 0x80, utf >> 0 & 0x3F | 0x80];
    }
    return null;
  }
  function utf8Decode(octets) {
    const b0 = octets[0];
    if (b0 <= 0x7F) {
      return b0;
    }
    if (b0 < 0xC2 || b0 > 0xF4) {
      return null;
    }
    const b1 = octets[1];
    switch (b0) {
      case 0xE0:
        if (b1 < 0xA0 || b1 > 0xBF) {
          return null;
        }
        break;
      case 0xED:
        if (b1 < 0x80 || b1 > 0x9F) {
          return null;
        }
        break;
      case 0xF0:
        if (b1 < 0x90 || b1 > 0xBF) {
          return null;
        }
        break;
      case 0xF4:
        if (b1 < 0x80 || b1 > 0x8F) {
          return null;
        }
        break;
      default:
        if (b1 < 0x80 || b1 > 0xBF) {
          return null;
        }
        break;
    }
    if (b0 <= 0xDF) {
      return (b0 & 0x1F) << 6 | b0 & 0x3F;
    }
    const b2 = octets[2];
    if (b2 < 0x80 || b2 > 0xBF) {
      return null;
    }
    if (b0 <= 0xEF) {
      return (b0 & 0x0F) << 12 | (b1 & 0x3F) << 6 | b2 & 0x3F;
    }
    const b3 = octets[3];
    if (b3 < 0x80 || b3 > 0xBF) {
      return null;
    }
    return (b0 & 0x07) << 18 | (b1 & 0x3F) << 12 | (b2 & 0x3F) << 6 | b3 & 0x3F;
  }
  const uriReserved = ';/?:@&=+$,';
  const uriAlpha = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const uriMark = '-_.!~*\'()';
  const DecimalDigit = '0123456789';
  const uriUnescaped = uriAlpha + DecimalDigit + uriMark;

  /** https://tc39.es/ecma262/#sec-encode */
  function Encode(string, unescapedSet) {
    string = string.stringValue();
    // 1. Let strLen be the number of code units in string.
    const strLen = string.length;
    // 2. Let R be the empty String.
    let R = '';
    // 3. Let k be 0.
    let k = 0;
    // 4. Repeat,
    while (true) {
      // a. If k equals strLen, return R.
      if (k === strLen) {
        return Value(R);
      }
      // b. Let C be the code unit at index k within string.
      const C = string[k];
      // c. If C is in unescapedSet, then
      if (unescapedSet.includes(C)) {
        // i. Set k to k + 1.
        k += 1;
        // ii. Set R to the string-concatenation of the previous value of R and C.
        R = `${R}${C}`;
      } else {
        let _temp = CodePointAt(string, k);
        Assert(!(_temp instanceof AbruptCompletion), "CodePointAt(string, k)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp instanceof Completion) {
          _temp = _temp.Value;
        }
        // d. Else,
        // i. Let cp be ! CodePointAt(string, k).
        const cp = _temp;
        // ii. If cp.[[IsUnpairedSurrogate]] is true, throw a URIError exception.
        if (cp.IsUnpairedSurrogate) {
          return exports.surroundingAgent.Throw('URIError', 'URIMalformed');
        }
        // iii. Set k to k + cp.[[CodeUnitCount]].
        k += cp.CodeUnitCount;
        // iv. Let Octets be the List of octets resulting by applying the UTF-8 transformation to cp.[[CodePoint]].
        const Octets = utf8Encode(cp.CodePoint);
        // v. For each element octet of Octets in List order, do
        Octets.forEach(octet => {
          // 1. Set R to the string-concatenation of:
          //   * the previous value of R
          //   * "%"
          //   * the String representation of octet, formatted as a two-digit uppercase hexadecimal number, padded to the left with a zero if necessary
          R = `${R}%${octet.toString(16).toUpperCase().padStart(2, '0')}`;
        });
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-decode */
  Encode.section = 'https://tc39.es/ecma262/#sec-encode';
  function Decode(string, reservedSet) {
    string = string.stringValue();
    // 1. Let strLen be the number of code units in string.
    const strLen = string.length;
    // 2. Let R be the empty String.
    let R = '';
    // 3. Let k be 0.
    let k = 0;
    // 4. Repeat,
    while (true) {
      // a. If k equals strLen, return R.
      if (k === strLen) {
        return Value(R);
      }
      // b. Let C be the code unit at index k within string.
      const C = string[k];
      let S;
      // c. If C is not the code unit 0x0025 (PERCENT SIGN), then
      if (C !== '\u{0025}') {
        S = C;
      } else {
        // d. Else,
        // i. Let start be k.
        const start = k;
        // ii. If k + 2 is greater than or equal to strLen, throw a URIError exception.
        if (k + 2 >= strLen) {
          return exports.surroundingAgent.Throw('URIError', 'URIMalformed');
        }
        // iii. If the code units at index (k + 1) and (k + 2) within string do not represent hexadecimal digits, throw a URIError exception.
        if (!isHexDigit(string[k + 1]) || !isHexDigit(string[k + 2])) {
          return exports.surroundingAgent.Throw('URIError', 'URIMalformed');
        }
        // iv. Let B be the 8-bit value represented by the two hexadecimal digits at index (k + 1) and (k + 2).
        const B = Number.parseInt(string.slice(k + 1, k + 3), 16);
        // v. Set k to k + 2.
        k += 2;
        // vi. If the most significant bit in B is 0, then
        if ((B & 0b10000000) === 0) {
          // 1. Let C be the code unit whose value is B.
          const innerC = String.fromCharCode(B);
          // 2. If C is not in reservedSet, then
          if (!reservedSet.includes(C)) {
            // a. Let S be the String value containing only the code unit C.
            S = innerC;
          } else {
            // 3. Else,
            // a. Let S be the substring of string from index start to index k inclusive.
            S = string.slice(start, k + 1);
          }
        } else {
          // vii. Else,
          // 1. Assert: the most significant bit in B is 1.
          Assert(B & 0b10000000, "B & 0b10000000");
          // 2. Let n be the smallest nonnegative integer such that (B << n) & 0x80 is equal to 0.
          let n = 0;
          while ((B << n & 0x80) !== 0) {
            n += 1;
            if (n > 4) {
              break;
            }
          }
          // 3. If n equals 1 or n is greater than 4, throw a URIError exception.
          if (n === 1 || n > 4) {
            return exports.surroundingAgent.Throw('URIError', 'URIMalformed');
          }
          // 4. Let Octets be a List of 8-bit integers of size n.
          const Octets = [];
          // 5. Set Octets[0] to B.
          Octets[0] = B;
          // 6. If k + (3 × (n - 1)) is greater than or equal to strLen, throw a URIError exception.
          if (k + 3 * (n - 1) >= strLen) {
            return exports.surroundingAgent.Throw('URIError', 'URIMalformed');
          }
          // 7. Let j be 1.
          let j = 1;
          // 8. Repeat, while j < n,
          while (j < n) {
            // a. Set k to k + 1.
            k += 1;
            // b. If the code unit at index k within string is not the code unit 0x0025 (PERCENT SIGN), throw a URIError exception.
            if (string[k] !== '\u{0025}') {
              return exports.surroundingAgent.Throw('URIError', 'URIMalformed');
            }
            // c. If the code units at index (k + 1) and (k + 2) within string do not represent hexadecimal digits, throw a URIError exception.
            if (!isHexDigit(string[k + 1]) || !isHexDigit(string[k + 2])) {
              return exports.surroundingAgent.Throw('URIError', 'URIMalformed');
            }
            // d. Let B be the 8-bit value represented by the two hexadecimal digits at index (k + 1) and (k + 2).
            const innerB = Number.parseInt(string.slice(k + 1, k + 3), 16);
            // e. If the two most significant bits in B are not 10, throw a URIError exception.
            if (innerB >> 6 !== 0b10) {
              return exports.surroundingAgent.Throw('URIError', 'URIMalformed');
            }
            // f. Set k to k + 2.
            k += 2;
            // g. Set Octets[j] to B.
            Octets[j] = innerB;
            // h. Set j to j + 1.
            j += 1;
          }
          // 9. If Octets does not contain a valid UTF-8 encoding of a Unicode code point, throw a URIError exception.
          // 10. Let V be the value obtained by applying the UTF-8 transformation to Octets, that is, from a List of octets into a 21-bit value.
          const V = utf8Decode(Octets);
          if (V === null) {
            return exports.surroundingAgent.Throw('URIError', 'URIMalformed');
          }
          // 11. Let S be the String value whose code units are, in order, the elements in UTF16Encoding(V).
          S = String.fromCodePoint(V);
        }
      }
      // e. Set R to the string-concatenation of the previous value of R and S.
      R = `${R}${S}`;
      // f. Set k to k + 1.
      k += 1;
    }
  }

  /** https://tc39.es/ecma262/#sec-decodeuri-encodeduri */
  Decode.section = 'https://tc39.es/ecma262/#sec-decode';
  function decodeURI([encodedURI = Value.undefined]) {
    let _temp2 = ToString(encodedURI);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 1. Let uriString be ? ToString(encodedURI).
    const uriString = _temp2;
    // 2. Let reservedURISet be a String containing one instance of each code unit valid in uriReserved plus "#".
    const reservedURISet = `${uriReserved}#`;
    // 3. Return ? Decode(uriString, reservedURISet).
    return Decode(uriString, reservedURISet);
  }

  /** https://tc39.es/ecma262/#sec-decodeuricomponent-encodeduricomponent */
  decodeURI.section = 'https://tc39.es/ecma262/#sec-decodeuri-encodeduri';
  function decodeURIComponent([encodedURIComponent = Value.undefined]) {
    let _temp3 = ToString(encodedURIComponent);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    // 1. Let componentString be ? ToString(encodedURIComponent).
    const componentString = _temp3;
    // 2. Let reservedURIComponentSet be the empty String.
    const reservedURIComponentSet = '';
    // 3. Return ? Decode(componentString, reservedURIComponentSet).
    return Decode(componentString, reservedURIComponentSet);
  }

  /** https://tc39.es/ecma262/#sec-encodeuri-uri */
  decodeURIComponent.section = 'https://tc39.es/ecma262/#sec-decodeuricomponent-encodeduricomponent';
  function encodeURI([uri = Value.undefined]) {
    let _temp4 = ToString(uri);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 1. Let uriString be ? ToString(uri).
    const uriString = _temp4;
    // 2. Let unescapedURISet be a String containing one instance of each code unit valid in uriReserved and uriUnescaped plus "#".
    const unescapedURISet = `${uriReserved}${uriUnescaped}#`;
    // 3. Return ? Encode(uriString, unescapedURISet).
    return Encode(uriString, unescapedURISet);
  }

  /** https://tc39.es/ecma262/#sec-encodeuricomponent-uricomponent */
  encodeURI.section = 'https://tc39.es/ecma262/#sec-encodeuri-uri';
  function encodeURIComponent([uriComponent = Value.undefined]) {
    let _temp5 = ToString(uriComponent);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    // 1. Let componentString be ? ToString(uriComponent).
    const componentString = _temp5;
    // 2. Let unescapedURIComponentSet be a String containing one instance of each code unit valid in uriUnescaped.
    const unescapedURIComponentSet = uriUnescaped;
    // 3. Return ? Encode(componentString, unescapedURIComponentSet).
    return Encode(componentString, unescapedURIComponentSet);
  }
  encodeURIComponent.section = 'https://tc39.es/ecma262/#sec-encodeuricomponent-uricomponent';
  function bootstrapURIHandling(realmRec) {
    [['decodeURI', decodeURI, 1], ['decodeURIComponent', decodeURIComponent, 1], ['encodeURI', encodeURI, 1], ['encodeURIComponent', encodeURIComponent, 1]].forEach(([name, f, length]) => {
      realmRec.Intrinsics[`%${name}%`] = CreateBuiltinFunction(f, length, Value(name), [], realmRec);
    });
  }

  /** https://tc39.es/ecma262/#sec-%throwtypeerror% */
  function ThrowTypeError() {
    // 1. Throw a TypeError exception.
    return exports.surroundingAgent.Throw('TypeError', 'StrictPoisonPill');
  }
  ThrowTypeError.section = 'https://tc39.es/ecma262/#sec-%throwtypeerror%';
  function bootstrapThrowTypeError(realmRec) {
    let _temp = CreateBuiltinFunction(ThrowTypeError, 0, Value(''), [], realmRec);
    Assert(!(_temp instanceof AbruptCompletion), "CreateBuiltinFunction(ThrowTypeError, 0, Value(''), [], realmRec)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const f = _temp;
    let _temp2 = SetIntegrityLevel(f, 'frozen');
    Assert(!(_temp2 instanceof AbruptCompletion), "SetIntegrityLevel(f, 'frozen')" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    Assert(_temp2 === Value.true, "X(SetIntegrityLevel(f, 'frozen')) === Value.true");
    realmRec.Intrinsics['%ThrowTypeError%'] = f;
  }

  /** https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object */
  function TypedArrayConstructor() {
    // 1. Throw a TypeError exception.
    return exports.surroundingAgent.Throw('TypeError', 'NotAConstructor', this);
  }

  /** https://tc39.es/ecma262/#sec-%typedarray%.from */
  TypedArrayConstructor.section = 'https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object';
  function TypedArray_from([source = Value.undefined, mapfn = Value.undefined, thisArg = Value.undefined], {
    thisValue
  }) {
    // 1. Let C be the this value.
    const C = thisValue;
    // 2. If IsConstructor(C) is false, throw a TypeError exception.
    if (IsConstructor(C) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAConstructor', C);
    }
    // 3. If mapfn is undefined, let mapping be false.
    let mapping;
    if (mapfn === Value.undefined) {
      mapping = false;
    } else {
      // a. If IsCallable(mapfn) is false, throw a TypeError exception.
      if (IsCallable(mapfn) === Value.false) {
        return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', mapfn);
      }
      // b. Let mapping be true.
      mapping = true;
    }
    // 5. Let usingIterator be ? GetMethod(source, @@iterator).
    let _temp = GetMethod(source, wellKnownSymbols.iterator);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const usingIterator = _temp;
    // 6. If usingIterator is not undefined, then
    if (usingIterator !== Value.undefined) {
      let _temp2 = IterableToList(source, usingIterator);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      const values = _temp2;
      const len = values.length;
      let _temp3 = TypedArrayCreate(C, [F(len)]);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      const targetObj = _temp3;
      let k = 0;
      while (k < len) {
        let _temp4 = ToString(F(k));
        Assert(!(_temp4 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp4 instanceof Completion) {
          _temp4 = _temp4.Value;
        }
        const Pk = _temp4;
        const kValue = values.shift();
        let mappedValue;
        if (mapping) {
          let _temp5 = Call(mapfn, thisArg, [kValue, F(k)]);
          /* c8 ignore if */
          if (_temp5 instanceof AbruptCompletion) {
            return _temp5;
          }
          /* c8 ignore if */
          if (_temp5 instanceof Completion) {
            _temp5 = _temp5.Value;
          }
          mappedValue = _temp5;
        } else {
          mappedValue = kValue;
        }
        let _temp6 = Set$1(targetObj, Pk, mappedValue, Value.true);
        /* c8 ignore if */
        if (_temp6 instanceof AbruptCompletion) {
          return _temp6;
        }
        /* c8 ignore if */
        if (_temp6 instanceof Completion) {
          _temp6 = _temp6.Value;
        }
        k += 1;
      }
      Assert(values.length === 0, "values.length === 0");
      return targetObj;
    }
    // 7. NOTE: source is not an Iterable so assume it is already an array-like object.
    // 8. Let arrayLike be ! ToObject(source).
    let _temp7 = ToObject(source);
    Assert(!(_temp7 instanceof AbruptCompletion), "ToObject(source)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    const arrayLike = _temp7;
    // 9. Let len be ? LengthOfArrayLike(arrayLike).
    let _temp8 = LengthOfArrayLike(arrayLike);
    /* c8 ignore if */
    if (_temp8 instanceof AbruptCompletion) {
      return _temp8;
    }
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    const len = _temp8;
    // 10. Let targetObj be ? TypedArrayCreate(C, « 𝔽(len) »).
    let _temp9 = TypedArrayCreate(C, [F(len)]);
    /* c8 ignore if */
    if (_temp9 instanceof AbruptCompletion) {
      return _temp9;
    }
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    const targetObj = _temp9;
    // 11. Let k be 0.
    let k = 0;
    // 12. Repeat, while k < len
    while (k < len) {
      let _temp10 = ToString(F(k));
      Assert(!(_temp10 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp10 instanceof Completion) {
        _temp10 = _temp10.Value;
      }
      // a. Let Pk be ! ToString(𝔽(k)).
      const Pk = _temp10;
      // b. Let kValue be ? Get(arrayLike, Pk).
      let _temp11 = Get(arrayLike, Pk);
      /* c8 ignore if */
      if (_temp11 instanceof AbruptCompletion) {
        return _temp11;
      }
      /* c8 ignore if */
      if (_temp11 instanceof Completion) {
        _temp11 = _temp11.Value;
      }
      const kValue = _temp11;
      let mappedValue;
      // c. If mapping is true, then
      if (mapping) {
        let _temp12 = Call(mapfn, thisArg, [kValue, F(k)]);
        /* c8 ignore if */
        if (_temp12 instanceof AbruptCompletion) {
          return _temp12;
        }
        /* c8 ignore if */
        if (_temp12 instanceof Completion) {
          _temp12 = _temp12.Value;
        }
        // i. Let mappedValue be ? Call(mapfn, thisArg, « kValue, 𝔽(k) »).
        mappedValue = _temp12;
      } else {
        // d. Else, let mappedValue be kValue.
        mappedValue = kValue;
      }
      // e. Perform ? Set(targetObj, Pk, mappedValue, true).
      let _temp13 = Set$1(targetObj, Pk, mappedValue, Value.true);
      /* c8 ignore if */
      if (_temp13 instanceof AbruptCompletion) {
        return _temp13;
      }
      /* c8 ignore if */
      if (_temp13 instanceof Completion) {
        _temp13 = _temp13.Value;
      }
      // f. Set k to k + 1.
      k += 1;
    }
    // 13. Return targetObj.
    return targetObj;
  }

  /** https://tc39.es/ecma262/#sec-%typedarray%.of */
  TypedArray_from.section = 'https://tc39.es/ecma262/#sec-%typedarray%.from';
  function TypedArray_of(items, {
    thisValue
  }) {
    // 1. Let len be the actual number of arguments passed to this function.
    // 2. Let items be the List of arguments passed to this function.
    const len = items.length;
    // 3. Let C be the this value.
    const C = thisValue;
    // 4. If IsConstructor(C) is false, throw a TypeError exception.
    if (IsConstructor(C) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAConstructor', C);
    }
    // 5. Let newObj be ? TypedArrayCreate(C, « 𝔽(len) »).
    let _temp14 = TypedArrayCreate(C, [F(len)]);
    /* c8 ignore if */
    if (_temp14 instanceof AbruptCompletion) {
      return _temp14;
    }
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    const newObj = _temp14;
    // 6. Let k be 0.
    let k = 0;
    // 7. Repeat, while k < len
    while (k < len) {
      // a. Let kValue be items[k].
      const kValue = items[k];
      // b. Let Pk be ! ToString(𝔽(k)).
      let _temp15 = ToString(F(k));
      Assert(!(_temp15 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp15 instanceof Completion) {
        _temp15 = _temp15.Value;
      }
      const Pk = _temp15;
      // c. Perform ? Set(newObj, Pk, kValue, true).
      let _temp16 = Set$1(newObj, Pk, kValue, Value.true);
      /* c8 ignore if */
      if (_temp16 instanceof AbruptCompletion) {
        return _temp16;
      }
      /* c8 ignore if */
      if (_temp16 instanceof Completion) {
        _temp16 = _temp16.Value;
      }
      // d. Set k to k + 1.
      k += 1;
    }
    // 8. Return newObj.
    return newObj;
  }

  /** https://tc39.es/ecma262/#sec-get-%typedarray%-@@species */
  TypedArray_of.section = 'https://tc39.es/ecma262/#sec-%typedarray%.of';
  function TypedArray_speciesGetter(args, {
    thisValue
  }) {
    return thisValue;
  }
  TypedArray_speciesGetter.section = 'https://tc39.es/ecma262/#sec-get-%typedarray%-@@species';
  function bootstrapTypedArray(realmRec) {
    const typedArrayConstructor = bootstrapConstructor(realmRec, TypedArrayConstructor, 'TypedArray', 0, realmRec.Intrinsics['%TypedArray.prototype%'], [['from', TypedArray_from, 1], ['of', TypedArray_of, 0], [wellKnownSymbols.species, [TypedArray_speciesGetter]]]);
    realmRec.Intrinsics['%TypedArray%'] = typedArrayConstructor;
  }

  /** https://tc39.es/ecma262/#sec-get-%typedarray%.prototype.buffer */
  function TypedArrayProto_buffer(args, {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Perform ? RequireInternalSlot(O, [[TypedArrayName]]).
    let _temp = RequireInternalSlot(O, 'TypedArrayName');
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 3. Assert: O has a [[ViewedArrayBuffer]] internal slot.
    Assert('ViewedArrayBuffer' in O, "'ViewedArrayBuffer' in O");
    // 4. Let buffer be O.[[ViewedArrayBuffer]].
    const buffer = O.ViewedArrayBuffer;
    // 5. Return buffer.
    return buffer;
  }

  /** https://tc39.es/ecma262/#sec-get-%typedarray%.prototype.bytelength */
  TypedArrayProto_buffer.section = 'https://tc39.es/ecma262/#sec-get-%typedarray%.prototype.buffer';
  function TypedArrayProto_byteLength(args, {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Perform ? RequireInternalSlot(O, [[TypedArrayName]]).
    let _temp2 = RequireInternalSlot(O, 'TypedArrayName');
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 3. Assert: O has a [[ViewedArrayBuffer]] internal slot.
    Assert('ViewedArrayBuffer' in O, "'ViewedArrayBuffer' in O");
    // 4. Let buffer be O.[[ViewedArrayBuffer]].
    const buffer = O.ViewedArrayBuffer;
    // 5. If IsDetachedBuffer(buffer) is true, return +0𝔽.
    if (IsDetachedBuffer(buffer) === Value.true) {
      return F(+0);
    }
    // 6. Let size be O.[[ByteLength]].
    const size = O.ByteLength;
    // 7. Return size.
    return F(size);
  }

  /** https://tc39.es/ecma262/#sec-get-%typedarray%.prototype.byteoffset */
  TypedArrayProto_byteLength.section = 'https://tc39.es/ecma262/#sec-get-%typedarray%.prototype.bytelength';
  function TypedArrayProto_byteOffset(args, {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Perform ? RequireInternalSlot(O, [[TypedArrayName]]).
    let _temp3 = RequireInternalSlot(O, 'TypedArrayName');
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    // 3. Assert: O has a [[ViewedArrayBuffer]] internal slot.
    Assert('ViewedArrayBuffer' in O, "'ViewedArrayBuffer' in O");
    // 4. Let buffer be O.[[ViewedArrayBuffer]].
    const buffer = O.ViewedArrayBuffer;
    // 5. If IsDetachedBuffer(buffer) is true, return +0𝔽.
    if (IsDetachedBuffer(buffer) === Value.true) {
      return F(+0);
    }
    // 6. Let offset be O.[[ByteOffset]].
    const offset = O.ByteOffset;
    // 7. Return offset.
    return F(offset);
  }

  /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin */
  TypedArrayProto_byteOffset.section = 'https://tc39.es/ecma262/#sec-get-%typedarray%.prototype.byteoffset';
  function TypedArrayProto_copyWithin([target = Value.undefined, start = Value.undefined, end = Value.undefined], {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Perform ? ValidateTypedArray(O).
    let _temp4 = ValidateTypedArray(O);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 3. Let len be O.[[ArrayLength]].
    const len = O.ArrayLength;
    // 4. Let relativeTarget be ? ToIntegerOrInfinity(target).
    let _temp5 = ToIntegerOrInfinity(target);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const relativeTarget = _temp5;
    // 5. If relativeTarget < 0, let to be max((len + relativeTarget), 0); else let to be min(relativeTarget, len).
    let to;
    if (relativeTarget < 0) {
      to = Math.max(len + relativeTarget, 0);
    } else {
      to = Math.min(relativeTarget, len);
    }
    // 6. Let relativeStart be ? ToIntegerOrInfinity(start).
    let _temp6 = ToIntegerOrInfinity(start);
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const relativeStart = _temp6;
    // 7. If relativeStart < 0, let from be max((len + relativeStart), 0); else let from be min(relativeStart, len).
    let from;
    if (relativeStart < 0) {
      from = Math.max(len + relativeStart, 0);
    } else {
      from = Math.min(relativeStart, len);
    }
    // 8. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToIntegerOrInfinity(end).
    let relativeEnd;
    if (end === Value.undefined) {
      relativeEnd = len;
    } else {
      let _temp7 = ToIntegerOrInfinity(end);
      /* c8 ignore if */
      if (_temp7 instanceof AbruptCompletion) {
        return _temp7;
      }
      /* c8 ignore if */
      if (_temp7 instanceof Completion) {
        _temp7 = _temp7.Value;
      }
      relativeEnd = _temp7;
    }
    // 9. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let final be min(relativeEnd, len).
    let final;
    if (relativeEnd < 0) {
      final = Math.max(len + relativeEnd, 0);
    } else {
      final = Math.min(relativeEnd, len);
    }
    // 10. Let count be min(final - from, len - to).
    const count = Math.min(final - from, len - to);
    // 11. If count > 0, then
    if (count > 0) {
      // a. NOTE: The copying must be performed in a manner that preserves the bit-level encoding of the source data.
      // b. Let buffer be O.[[ViewedArrayBuffer]].
      const buffer = O.ViewedArrayBuffer;
      // c. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.
      if (IsDetachedBuffer(buffer) === Value.true) {
        return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
      }
      // d. Let typedArrayName be the String value of O.[[TypedArrayName]].
      const typedArrayName = O.TypedArrayName.stringValue();
      // e. Let elementSize be the Element Size value specified in Table 61 for typedArrayName.
      const elementSize = typedArrayInfoByName[typedArrayName].ElementSize;
      // f. Let byteOffset be O.[[ByteOffset].
      const byteOffset = O.ByteOffset;
      // g. Let toByteIndex be to × elementSize + byteOffset.
      let toByteIndex = to * elementSize + byteOffset;
      // h. Let fromByteIndex be from × elementSize + byteOffset.
      let fromByteIndex = from * elementSize + byteOffset;
      // i. Let countBytes be count × elementSize.
      let countBytes = count * elementSize;
      // j. If fromByteIndex < toByteIndex and toByteIndex < fromByteIndex + countBytes, then
      let direction;
      if (fromByteIndex < toByteIndex && toByteIndex < fromByteIndex + countBytes) {
        // i. Let direction be -1.
        direction = -1;
        // ii. Set fromByteIndex to fromByteIndex + countBytes - 1.
        fromByteIndex = fromByteIndex + countBytes - 1;
        // iii. Set toByteIndex to toByteIndex + countBytes - 1.
        toByteIndex = toByteIndex + countBytes - 1;
      } else {
        // i. Let direction be 1.
        direction = 1;
      }
      // l. Repeat, while countBytes > 0
      while (countBytes > 0) {
        // i. Let value be GetValueFromBuffer(buffer, fromByteIndex, Uint8, true, Unordered).
        const value = GetValueFromBuffer(buffer, fromByteIndex, 'Uint8', Value.true);
        // ii. Perform SetValueInBuffer(buffer, toByteIndex, Uint8, value, true, Unordered).
        SetValueInBuffer(buffer, toByteIndex, 'Uint8', value, Value.true);
        // iii. Set fromByteIndex to fromByteIndex + direction.
        fromByteIndex += direction;
        // iv. Set toByteIndex to toByteIndex + direction.
        toByteIndex += direction;
        // v. Set countBytes to countBytes - 1.
        countBytes -= 1;
      }
    }
    // 12. Return O.
    return O;
  }

  /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries */
  TypedArrayProto_copyWithin.section = 'https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin';
  function TypedArrayProto_entries(args, {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Perform ? ValidateTypedArray(O).
    let _temp8 = ValidateTypedArray(O);
    /* c8 ignore if */
    if (_temp8 instanceof AbruptCompletion) {
      return _temp8;
    }
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    // 3. Return CreateArrayIterator(O, key+value).
    return CreateArrayIterator(O, 'key+value');
  }

  /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill */
  TypedArrayProto_entries.section = 'https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries';
  function TypedArrayProto_fill([value = Value.undefined, start = Value.undefined, end = Value.undefined], {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Perform ? ValidateTypedArray(O).
    let _temp9 = ValidateTypedArray(O);
    /* c8 ignore if */
    if (_temp9 instanceof AbruptCompletion) {
      return _temp9;
    }
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    // 3. Let len be O.[[ArrayLength]]
    const len = O.ArrayLength;
    // 4. If O.[[ContentType]] is BigInt, set value to ? ToBigInt(value).
    // 5. Else, set value to ? ToNumber(value).
    if (O.ContentType === 'BigInt') {
      let _temp10 = ToBigInt(value);
      /* c8 ignore if */
      if (_temp10 instanceof AbruptCompletion) {
        return _temp10;
      }
      /* c8 ignore if */
      if (_temp10 instanceof Completion) {
        _temp10 = _temp10.Value;
      }
      value = _temp10;
    } else {
      let _temp11 = ToNumber(value);
      /* c8 ignore if */
      if (_temp11 instanceof AbruptCompletion) {
        return _temp11;
      }
      /* c8 ignore if */
      if (_temp11 instanceof Completion) {
        _temp11 = _temp11.Value;
      }
      value = _temp11;
    }
    // 6. Let relativeStart be ? ToIntegerOrInfinity(start).
    let _temp12 = ToIntegerOrInfinity(start);
    /* c8 ignore if */
    if (_temp12 instanceof AbruptCompletion) {
      return _temp12;
    }
    /* c8 ignore if */
    if (_temp12 instanceof Completion) {
      _temp12 = _temp12.Value;
    }
    const relativeStart = _temp12;
    // 7. If relativeStart < 0, let k be max((len + relativeStart), 0); else let k be min(relativeStart, len).
    let k;
    if (relativeStart < 0) {
      k = Math.max(len + relativeStart, 0);
    } else {
      k = Math.min(relativeStart, len);
    }
    // 8. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToIntegerOrInfinity(end).
    let relativeEnd;
    if (end === Value.undefined) {
      relativeEnd = len;
    } else {
      let _temp13 = ToIntegerOrInfinity(end);
      /* c8 ignore if */
      if (_temp13 instanceof AbruptCompletion) {
        return _temp13;
      }
      /* c8 ignore if */
      if (_temp13 instanceof Completion) {
        _temp13 = _temp13.Value;
      }
      relativeEnd = _temp13;
    }
    // 9. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let final be min(relativeEnd, len).
    let final;
    if (relativeEnd < 0) {
      final = Math.max(len + relativeEnd, 0);
    } else {
      final = Math.min(relativeEnd, len);
    }
    // 10. If IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, throw a TypeError exception.
    if (IsDetachedBuffer(O.ViewedArrayBuffer) === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
    }
    // 11. Repeat, while k < final
    while (k < final) {
      let _temp14 = ToString(F(k));
      Assert(!(_temp14 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp14 instanceof Completion) {
        _temp14 = _temp14.Value;
      }
      // a. Let Pk be ! ToString(𝔽(k)).
      const Pk = _temp14;
      // b. Perform ! Set(O, Pk, value, true).
      let _temp15 = Set$1(O, Pk, value, Value.true);
      Assert(!(_temp15 instanceof AbruptCompletion), "Set(O, Pk, value, Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp15 instanceof Completion) {
        _temp15 = _temp15.Value;
      }
      // c. Set k to k + 1.
      k += 1;
    }
    // 12. Return O.
    return O;
  }

  /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter */
  TypedArrayProto_fill.section = 'https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill';
  function TypedArrayProto_filter([callbackfn = Value.undefined, thisArg = Value.undefined], {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Perform ? ValidateTypedArray(O).
    let _temp16 = ValidateTypedArray(O);
    /* c8 ignore if */
    if (_temp16 instanceof AbruptCompletion) {
      return _temp16;
    }
    /* c8 ignore if */
    if (_temp16 instanceof Completion) {
      _temp16 = _temp16.Value;
    }
    // 3. Let len be O.[[ArrayLength]].
    const len = O.ArrayLength;
    // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.
    if (IsCallable(callbackfn) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', callbackfn);
    }
    // 5. Let kept be a new empty List.
    const kept = [];
    // 6. Let k be 0.
    let k = 0;
    // 7. Let captured be 0.
    let captured = 0;
    // 8. Repeat, while k < len
    while (k < len) {
      let _temp17 = ToString(F(k));
      Assert(!(_temp17 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp17 instanceof Completion) {
        _temp17 = _temp17.Value;
      }
      // a. Let Pk be ! ToString(𝔽(k)).
      const Pk = _temp17;
      // b. Let kValue be ? Get(O, Pk).
      let _temp18 = Get(O, Pk);
      /* c8 ignore if */
      if (_temp18 instanceof AbruptCompletion) {
        return _temp18;
      }
      /* c8 ignore if */
      if (_temp18 instanceof Completion) {
        _temp18 = _temp18.Value;
      }
      const kValue = _temp18;
      // c. Let selected be ! ToBoolean(? Call(callbackfn, thisArg, « kValue, 𝔽(k), O »)).
      let _temp19 = Call(callbackfn, thisArg, [kValue, F(k), O]);
      /* c8 ignore if */
      if (_temp19 instanceof AbruptCompletion) {
        return _temp19;
      }
      /* c8 ignore if */
      if (_temp19 instanceof Completion) {
        _temp19 = _temp19.Value;
      }
      const selected = ToBoolean(_temp19);
      // d. If selected is true, then
      if (selected === Value.true) {
        // i. Append kValue to the end of kept.
        kept.push(kValue);
        // ii. Setp captured to captured + 1.
        captured += 1;
      }
      // e. Set k to k + 1.
      k += 1;
    }
    // 9. Let A be ? TypedArraySpeciesCreate(O, « 𝔽(captured) »).
    let _temp20 = TypedArraySpeciesCreate(O, [F(captured)]);
    /* c8 ignore if */
    if (_temp20 instanceof AbruptCompletion) {
      return _temp20;
    }
    /* c8 ignore if */
    if (_temp20 instanceof Completion) {
      _temp20 = _temp20.Value;
    }
    const A = _temp20;
    // 10. Let n be 0.
    let n = 0;
    // 11. For each element e of kept, do
    for (const e of kept) {
      let _temp22 = ToString(F(n));
      Assert(!(_temp22 instanceof AbruptCompletion), "ToString(F(n))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp22 instanceof Completion) {
        _temp22 = _temp22.Value;
      }
      let _temp21 = Set$1(A, _temp22, e, Value.true);
      Assert(!(_temp21 instanceof AbruptCompletion), "Set(A, X(ToString(F(n))), e, Value.true)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp21 instanceof Completion) {
        _temp21 = _temp21.Value;
      }
      // b. Set n to n + 1.
      n += 1;
    }
    // 12. Return A.
    return A;
  }

  /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys */
  TypedArrayProto_filter.section = 'https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter';
  function TypedArrayProto_keys(args, {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Perform ? ValidateTypedArray(O).
    let _temp23 = ValidateTypedArray(O);
    /* c8 ignore if */
    if (_temp23 instanceof AbruptCompletion) {
      return _temp23;
    }
    /* c8 ignore if */
    if (_temp23 instanceof Completion) {
      _temp23 = _temp23.Value;
    }
    // 3. Return CreateArrayIterator(O, key).
    return CreateArrayIterator(O, 'key');
  }

  /** https://tc39.es/ecma262/#sec-get-%typedarray%.prototype.length */
  TypedArrayProto_keys.section = 'https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys';
  function TypedArrayProto_length(args, {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Perform ? RequireInternalSlot(O, [[TypedArrayName]]).
    let _temp24 = RequireInternalSlot(O, 'TypedArrayName');
    /* c8 ignore if */
    if (_temp24 instanceof AbruptCompletion) {
      return _temp24;
    }
    /* c8 ignore if */
    if (_temp24 instanceof Completion) {
      _temp24 = _temp24.Value;
    }
    // 3. Assert: O has [[ViewedArrayBuffer]] and [[ArrayLength]] internal slots.
    Assert('ViewedArrayBuffer' in O && 'ArrayLength' in O, "'ViewedArrayBuffer' in O && 'ArrayLength' in O");
    // 4. Let buffer be O.[[ViewedArrayBuffer]].
    const buffer = O.ViewedArrayBuffer;
    // 5. If IsDetachedBuffer(buffer) is true, return +0𝔽.
    if (IsDetachedBuffer(buffer) === Value.true) {
      return F(+0);
    }
    // 6. Let length be O.[[ArrayLength]].
    const length = O.ArrayLength;
    // 8. Return 𝔽(length).
    return F(length);
  }

  /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.map */
  TypedArrayProto_length.section = 'https://tc39.es/ecma262/#sec-get-%typedarray%.prototype.length';
  function TypedArrayProto_map([callbackfn = Value.undefined, thisArg = Value.undefined], {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Perform ? ValidateTypedArray(O).
    let _temp25 = ValidateTypedArray(O);
    /* c8 ignore if */
    if (_temp25 instanceof AbruptCompletion) {
      return _temp25;
    }
    /* c8 ignore if */
    if (_temp25 instanceof Completion) {
      _temp25 = _temp25.Value;
    }
    // 3. Let len be O.[[ArrayLength]].
    const len = O.ArrayLength;
    // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.
    if (IsCallable(callbackfn) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', callbackfn);
    }
    // 5. Let A be ? TypedArraySpeciesCreate(O, « 𝔽(len) »).
    let _temp26 = TypedArraySpeciesCreate(O, [F(len)]);
    /* c8 ignore if */
    if (_temp26 instanceof AbruptCompletion) {
      return _temp26;
    }
    /* c8 ignore if */
    if (_temp26 instanceof Completion) {
      _temp26 = _temp26.Value;
    }
    const A = _temp26;
    // 6. Let k be 0.
    let k = 0;
    // 7. Repeat, while k < len
    while (k < len) {
      let _temp27 = ToString(F(k));
      Assert(!(_temp27 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp27 instanceof Completion) {
        _temp27 = _temp27.Value;
      }
      // a. Let Pk be ! ToString(𝔽(k)).
      const Pk = _temp27;
      // b. Let kValue be ? Get(O, Pk).
      let _temp28 = Get(O, Pk);
      /* c8 ignore if */
      if (_temp28 instanceof AbruptCompletion) {
        return _temp28;
      }
      /* c8 ignore if */
      if (_temp28 instanceof Completion) {
        _temp28 = _temp28.Value;
      }
      const kValue = _temp28;
      // c. Let mappedValue be ? Call(callbackfn, thisArg, « kValue, 𝔽(k), O »).
      let _temp29 = Call(callbackfn, thisArg, [kValue, F(k), O]);
      /* c8 ignore if */
      if (_temp29 instanceof AbruptCompletion) {
        return _temp29;
      }
      /* c8 ignore if */
      if (_temp29 instanceof Completion) {
        _temp29 = _temp29.Value;
      }
      const mappedValue = _temp29;
      // d. Perform ? Set(A, Pk, mappedValue, true).
      let _temp30 = Set$1(A, Pk, mappedValue, Value.true);
      /* c8 ignore if */
      if (_temp30 instanceof AbruptCompletion) {
        return _temp30;
      }
      /* c8 ignore if */
      if (_temp30 instanceof Completion) {
        _temp30 = _temp30.Value;
      }
      // e. Set k to k + 1.
      k += 1;
    }
    // 8. Return A.
    return A;
  }

  /** https://tc39.es/ecma262/#sec-settypedarrayfromtypedarray */
  TypedArrayProto_map.section = 'https://tc39.es/ecma262/#sec-%typedarray%.prototype.map';
  function SetTypedArrayFromTypedArray(target, targetOffset, source) {
    // 1. Let targetBuffer be target.[[ViewedArrayBuffer]].
    const targetBuffer = target.ViewedArrayBuffer;
    // 2. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.
    if (IsDetachedBuffer(targetBuffer) === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
    }
    // 3. Let targetLength be target.[[ArrayLength]].
    const targetLength = target.ArrayLength;
    // 4. Let srcBuffer be source.[[ViewedArrayBuffer]].
    let srcBuffer = source.ViewedArrayBuffer;
    // 5. If IsDetachedBuffer(srcBuffer) is true, throw a TypeError exception.
    if (IsDetachedBuffer(srcBuffer) === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
    }
    const targetName = target.TypedArrayName.stringValue();
    // 6. Let targetType be the Element Type value in Table 61 for targetName.
    const targetType = typedArrayInfoByName[targetName].ElementType;
    // 7. Let targetElementSize be the Element Size value specified in Table 61 for targetName.
    const targetElementSize = typedArrayInfoByName[targetName].ElementSize;
    // 8. Let targetByteOffset be target.[[ByteOffset]].
    const targetByteOffset = target.ByteOffset;
    const srcName = source.TypedArrayName.stringValue();
    // 9. Let srcType be the Element Type value in Table 61 for srcName.
    const srcType = typedArrayInfoByName[srcName].ElementType;
    // 10. Let srcElementSize be the Element Size value specified in Table 61 for srcName.
    const srcElementSize = typedArrayInfoByName[srcName].ElementSize;
    // 11. Let srcLength be source.[[ArrayLength]].
    const srcLength = source.ArrayLength;
    // 12. Let srcByteOffset be source.[[ByteOffset]].
    const srcByteOffset = source.ByteOffset;
    // 13. If targetOffset is +∞, throw a RangeError exception.
    if (targetOffset === +Infinity) {
      return exports.surroundingAgent.Throw('RangeError', 'TypedArrayOOB');
    }
    // 14. If srcLength + targetOffset > targetLength, throw a RangeError exception.
    if (srcLength + targetOffset > targetLength) {
      return exports.surroundingAgent.Throw('RangeError', 'TypedArrayOOB');
    }
    // 15. If target.[[ContentType]] is not equal to source.[[ContentType]], throw a TypeError exception.
    if (target.ContentType !== source.ContentType) {
      return exports.surroundingAgent.Throw('TypeError', 'BufferContentTypeMismatch');
    }
    // 16. If both IsSharedArrayBuffer(srcBuffer) and IsSharedArrayBuffer(targetBuffer) are true, then
    let same;
    if (IsSharedArrayBuffer() === Value.true && IsSharedArrayBuffer() === Value.true) {
      Assert(false, "false");
    } else {
      // 17, Else, let same be SameValue(srcBuffer, targetBuffer).
      same = SameValue(srcBuffer, targetBuffer);
    }
    // 18. If same is true, then
    let srcByteIndex;
    if (same === Value.true) {
      // a. Let srcByteLength be source.[[ByteLength]].
      const srcByteLength = source.ByteLength;
      // b. Set srcBuffer to ? CloneArrayBuffer(srcBuffer, srcByteOffset, srcByteLength, %ArrayBuffer%).
      let _temp31 = CloneArrayBuffer(srcBuffer, srcByteOffset, srcByteLength, exports.surroundingAgent.intrinsic('%ArrayBuffer%'));
      /* c8 ignore if */
      if (_temp31 instanceof AbruptCompletion) {
        return _temp31;
      }
      /* c8 ignore if */
      if (_temp31 instanceof Completion) {
        _temp31 = _temp31.Value;
      }
      srcBuffer = _temp31;
      // c. Let srcByteIndex be 0.
      srcByteIndex = 0;
    } else {
      // 19. Else, let srcByteIndex be srcByteOffset.
      srcByteIndex = srcByteOffset;
    }
    // 20. Let targetByteIndex be targetOffset × targetElementSize + targetByteOffset.
    let targetByteIndex = targetOffset * targetElementSize + targetByteOffset;
    // 21. Let limit be targetByteIndex + targetElementSize × srcLength.
    const limit = targetByteIndex + targetElementSize * srcLength;
    // 22. If srcType is the same as targetType, then
    if (srcType === targetType) {
      // a. NOTE: If srcType and targetType are the same, the transfer must be performed in a manner that preserves the bit-level encoding of the source data.
      // b. Repeat, while targetByteIndex < limit
      while (targetByteIndex < limit) {
        // i. Let value be GetValueFromBuffer(srcBuffer, srcByteIndex, Uint8, true, Unordered).
        const value = GetValueFromBuffer(srcBuffer, srcByteIndex, 'Uint8', Value.true);
        // ii. Perform SetValueInBuffer(targetBuffer, targetByteIndex, Uint8, value, true, Unordered).
        SetValueInBuffer(targetBuffer, targetByteIndex, 'Uint8', value, Value.true);
        // iii. Set srcByteIndex to srcByteIndex + 1.
        srcByteIndex += 1;
        // iv. Set targetByteIndex to targetByteIndex + 1.
        targetByteIndex += 1;
      }
    } else {
      // 23. Else,
      // a. Repeat, while targetByteIndex < limit
      while (targetByteIndex < limit) {
        // i. Let value be GetValueFromBuffer(srcBuffer, srcByteIndex, srcType, true, Unordered).
        const value = GetValueFromBuffer(srcBuffer, srcByteIndex, srcType, Value.true);
        // ii. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType, value, true, Unordered).
        SetValueInBuffer(targetBuffer, targetByteIndex, targetType, value, Value.true);
        // iii. Set srcByteIndex to srcByteIndex + srcElementSize.
        srcByteIndex += srcElementSize;
        // iv. Set targetByteIndex to targetByteIndex + targetElementSize.
        targetByteIndex += targetElementSize;
      }
    }
    // 24. Return unused.
  }

  /** https://tc39.es/ecma262/#sec-settypedarrayfromarraylike */
  SetTypedArrayFromTypedArray.section = 'https://tc39.es/ecma262/#sec-settypedarrayfromtypedarray';
  function SetTypedArrayFromArrayLike(target, targetOffset, source) {
    // 1. Let targetBuffer be target.[[ViewedArrayBuffer]].
    const targetBuffer = target.ViewedArrayBuffer;
    // 2. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.
    if (IsDetachedBuffer(targetBuffer) === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
    }
    // 3. Let targetLength be target.[[ArrayLength]].
    const targetLength = target.ArrayLength;
    // 4. Let src be ? ToObject(source).
    let _temp32 = ToObject(source);
    /* c8 ignore if */
    if (_temp32 instanceof AbruptCompletion) {
      return _temp32;
    }
    /* c8 ignore if */
    if (_temp32 instanceof Completion) {
      _temp32 = _temp32.Value;
    }
    const src = _temp32;
    // 5. Let srcLength be ? LengthOfArrayLike(src).
    let _temp33 = LengthOfArrayLike(src);
    /* c8 ignore if */
    if (_temp33 instanceof AbruptCompletion) {
      return _temp33;
    }
    /* c8 ignore if */
    if (_temp33 instanceof Completion) {
      _temp33 = _temp33.Value;
    }
    const srcLength = _temp33;
    // 6. If targetOffset is +∞, throw a RangeError exception.
    if (targetOffset === +Infinity) {
      return exports.surroundingAgent.Throw('RangeError', 'TypedArrayOOB');
    }
    // 7. If srcLength + targetOffset > targetLength, throw a RangeError exception.
    if (srcLength + targetOffset > targetLength) {
      return exports.surroundingAgent.Throw('RangeError', 'TypedArrayOOB');
    }
    // 8. Let k be 0.
    let k = 0;
    // 9. Repeat, while k < srcLength,
    while (k < srcLength) {
      let _temp34 = ToString(F(k));
      Assert(!(_temp34 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp34 instanceof Completion) {
        _temp34 = _temp34.Value;
      }
      // a. Let Pk be ! ToString(𝔽(k)).
      const Pk = _temp34;
      // b. Let value be ? Get(src, Pk).
      let _temp35 = Get(src, Pk);
      /* c8 ignore if */
      if (_temp35 instanceof AbruptCompletion) {
        return _temp35;
      }
      /* c8 ignore if */
      if (_temp35 instanceof Completion) {
        _temp35 = _temp35.Value;
      }
      const value = _temp35;
      // c. Let targetIndex be 𝔽(targetOffset + k).
      const targetIndex = F(targetOffset + k);
      // d. Perform ? IntegerIndexedElementSet(target, targetIndex, value).
      let _temp36 = IntegerIndexedElementSet(target, targetIndex, value);
      /* c8 ignore if */
      if (_temp36 instanceof AbruptCompletion) {
        return _temp36;
      }
      /* c8 ignore if */
      if (_temp36 instanceof Completion) {
        _temp36 = _temp36.Value;
      }
      // e. Set k to k + 1.
      k += 1;
    }
    // 10. Return unused.
  }

  /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.set-overloaded-offset */
  SetTypedArrayFromArrayLike.section = 'https://tc39.es/ecma262/#sec-settypedarrayfromarraylike';
  function TypedArrayProto_set([source = Value.undefined, offset = Value.undefined], {
    thisValue
  }) {
    // 1. Let target be the this value.
    const target = thisValue;
    // 2. Perform ? RequireInternalSlot(target, [[TypedArrayName]]).
    let _temp37 = RequireInternalSlot(target, 'TypedArrayName');
    /* c8 ignore if */
    if (_temp37 instanceof AbruptCompletion) {
      return _temp37;
    }
    /* c8 ignore if */
    if (_temp37 instanceof Completion) {
      _temp37 = _temp37.Value;
    }
    // 3. Assert: target has a [[ViewedArrayBuffer]] internal slot.
    Assert('ViewedArrayBuffer' in target, "'ViewedArrayBuffer' in target");
    // 4. Let targetOffset be ? ToIntegerOrInfinity(offset).
    let _temp38 = ToIntegerOrInfinity(offset);
    /* c8 ignore if */
    if (_temp38 instanceof AbruptCompletion) {
      return _temp38;
    }
    /* c8 ignore if */
    if (_temp38 instanceof Completion) {
      _temp38 = _temp38.Value;
    }
    const targetOffset = _temp38;
    // 5. If targetOffset < 0, throw a RangeError exception.
    if (targetOffset < 0) {
      return exports.surroundingAgent.Throw('RangeError', 'NegativeIndex', 'Offset');
    }
    // 6. If source is an Object that has a [[TypedArrayName]] internal slot, then
    if (source instanceof ObjectValue && 'TypedArrayName' in source) {
      let _temp39 = SetTypedArrayFromTypedArray(target, targetOffset, source);
      /* c8 ignore if */
      if (_temp39 instanceof AbruptCompletion) {
        return _temp39;
      }
      /* c8 ignore if */
      if (_temp39 instanceof Completion) {
        _temp39 = _temp39.Value;
      }
    } else {
      let _temp40 = SetTypedArrayFromArrayLike(target, targetOffset, source);
      /* c8 ignore if */
      if (_temp40 instanceof AbruptCompletion) {
        return _temp40;
      }
      /* c8 ignore if */
      if (_temp40 instanceof Completion) {
        _temp40 = _temp40.Value;
      }
    }
    // 8. Return undefined.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice */
  TypedArrayProto_set.section = 'https://tc39.es/ecma262/#sec-%typedarray%.prototype.set-overloaded-offset';
  function TypedArrayProto_slice([start = Value.undefined, end = Value.undefined], {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Perform ? ValidateTypedArray(O).
    let _temp41 = ValidateTypedArray(O);
    /* c8 ignore if */
    if (_temp41 instanceof AbruptCompletion) {
      return _temp41;
    }
    /* c8 ignore if */
    if (_temp41 instanceof Completion) {
      _temp41 = _temp41.Value;
    }
    // 3. Let len be O.[[ArrayLength]].
    const len = O.ArrayLength;
    // 4. Let relativeStart be ? ToIntegerOrInfinity(start).
    let _temp42 = ToIntegerOrInfinity(start);
    /* c8 ignore if */
    if (_temp42 instanceof AbruptCompletion) {
      return _temp42;
    }
    /* c8 ignore if */
    if (_temp42 instanceof Completion) {
      _temp42 = _temp42.Value;
    }
    const relativeStart = _temp42;
    // 5. If relativeStart < 0, let k be max((len + relativeStart), 0); else let k be min(relativeStart, len).
    let k;
    if (relativeStart < 0) {
      k = Math.max(len + relativeStart, 0);
    } else {
      k = Math.min(relativeStart, len);
    }
    // 6. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToIntegerOrInfinity(end).
    let relativeEnd;
    if (end === Value.undefined) {
      relativeEnd = len;
    } else {
      let _temp43 = ToIntegerOrInfinity(end);
      /* c8 ignore if */
      if (_temp43 instanceof AbruptCompletion) {
        return _temp43;
      }
      /* c8 ignore if */
      if (_temp43 instanceof Completion) {
        _temp43 = _temp43.Value;
      }
      relativeEnd = _temp43;
    }
    // 7. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let final be min(relativeEnd, len).
    let final;
    if (relativeEnd < 0) {
      final = Math.max(len + relativeEnd, 0);
    } else {
      final = Math.min(relativeEnd, len);
    }
    // 8. Let count be max(final - k, 0).
    const count = Math.max(final - k, 0);
    // 9. Let A be ? TypedArraySpeciesCreate(O, « 𝔽(count) »).
    let _temp44 = TypedArraySpeciesCreate(O, [F(count)]);
    /* c8 ignore if */
    if (_temp44 instanceof AbruptCompletion) {
      return _temp44;
    }
    /* c8 ignore if */
    if (_temp44 instanceof Completion) {
      _temp44 = _temp44.Value;
    }
    const A = _temp44;
    // 10. If count > 0, then
    if (count > 0) {
      // a. If IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, throw a TypeError exception.
      if (IsDetachedBuffer(O.ViewedArrayBuffer) === Value.true) {
        return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
      }
      // b. Let srcName be the String value of O.[[TypedArrayName]].
      const srcName = O.TypedArrayName.stringValue();
      // c. Let srcType be the Element Type value in Table 61 for srcName.
      const srcType = typedArrayInfoByName[srcName].ElementType;
      // d. Let targetName be the String value of A.[[TypedArrayName]].
      const targetName = A.TypedArrayName.stringValue();
      // e. Let targetType be the Element Type value in Table 61 for targetName.
      const targetType = typedArrayInfoByName[targetName].ElementType;
      // f. If srcType is different from targetType, then
      if (srcType !== targetType) {
        // i. Let n be 0.
        let n = 0;
        // ii. Repeat, while k < final
        while (k < final) {
          let _temp45 = ToString(F(k));
          Assert(!(_temp45 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp45 instanceof Completion) {
            _temp45 = _temp45.Value;
          }
          // 1. Let Pk be ! ToString(𝔽(k)).
          const Pk = _temp45;
          // 2. Let kValue be ! Get(O, Pk).
          let _temp46 = Get(O, Pk);
          Assert(!(_temp46 instanceof AbruptCompletion), "Get(O, Pk)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp46 instanceof Completion) {
            _temp46 = _temp46.Value;
          }
          const kValue = _temp46;
          // 3. Perform ! Set(A, ! ToString(𝔽(n)), kValue, true).
          let _temp48 = ToString(F(n));
          Assert(!(_temp48 instanceof AbruptCompletion), "ToString(F(n))" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp48 instanceof Completion) {
            _temp48 = _temp48.Value;
          }
          let _temp47 = Set$1(A, _temp48, kValue, Value.true);
          Assert(!(_temp47 instanceof AbruptCompletion), "Set(A, X(ToString(F(n))), kValue, Value.true)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp47 instanceof Completion) {
            _temp47 = _temp47.Value;
          }
          // 4. Set k to k + 1.
          k += 1;
          // 5. Set n to n + 1.
          n += 1;
        }
      } else {
        // g. Else,
        // i. Let srcBuffer be O.[[ViewedArrayBuffer]].
        const srcBuffer = O.ViewedArrayBuffer;
        // ii. Let targetBuffer be A.[[ViewedArrayBuffer]].
        const targetBuffer = A.ViewedArrayBuffer;
        // iii. Let elementSize be the Element Size value specified in Table 61 for Element Type srcType.
        const elementSize = typedArrayInfoByType[srcType].ElementSize;
        // iv. NOTE: If srcType and targetType are the same, the transfer must be performed in a manner that preserves the bit-level encoding of the source data.
        // v. Let srcByteOffet be O.[[ByteOffset]].
        const srcByteOffset = O.ByteOffset;
        // vi. Let targetByteIndex be A.[[ByteOffset]].
        let targetByteIndex = A.ByteOffset;
        // vii. Let srcByteIndex be (k × elementSize) + srcByteOffet.
        let srcByteIndex = k * elementSize + srcByteOffset;
        // viii. Let limit be targetByteIndex + count × elementSize.
        const limit = targetByteIndex + count * elementSize;
        // ix. Repeat, while targetByteIndex < limit
        while (targetByteIndex < limit) {
          // 1. Let value be GetValueFromBuffer(srcBuffer, srcByteIndex, Uint8, true, Unordered).
          const value = GetValueFromBuffer(srcBuffer, srcByteIndex, 'Uint8', Value.true);
          // 2. Perform SetValueInBuffer(targetBuffer, targetByteIndex, Uint8, value, true, Unordered).
          SetValueInBuffer(targetBuffer, targetByteIndex, 'Uint8', value, Value.true);
          // 3. Set srcByteIndex to srcByteIndex + 1.
          srcByteIndex += 1;
          // 4. Set targetByteIndex to targetByteIndex + 1.
          targetByteIndex += 1;
        }
      }
    }
    // 16. Return A.
    return A;
  }

  /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort */
  TypedArrayProto_slice.section = 'https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice';
  function TypedArrayProto_sort([comparefn = Value.undefined], {
    thisValue
  }) {
    // 1. If comparefn is not undefined and IsCallable(comparefn) is false, throw a TypeError exception.
    if (comparefn !== Value.undefined && IsCallable(comparefn) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', comparefn);
    }
    // 2. Let obj be the this value.
    let _temp49 = ToObject(thisValue);
    /* c8 ignore if */
    if (_temp49 instanceof AbruptCompletion) {
      return _temp49;
    }
    /* c8 ignore if */
    if (_temp49 instanceof Completion) {
      _temp49 = _temp49.Value;
    }
    const obj = _temp49;
    // 3. Perform ? ValidateTypedArray(obj).
    let _temp50 = ValidateTypedArray(obj);
    /* c8 ignore if */
    if (_temp50 instanceof AbruptCompletion) {
      return _temp50;
    }
    /* c8 ignore if */
    if (_temp50 instanceof Completion) {
      _temp50 = _temp50.Value;
    }
    // 4. Let len be obj.[[ArrayLength]].
    const len = obj.ArrayLength;
    return ArrayProto_sortBody(obj, len, (x, y) => TypedArraySortCompare(x, y, comparefn), true);
  }
  TypedArrayProto_sort.section = 'https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort';
  function TypedArraySortCompare(x, y, comparefn) {
    // 1. Assert: Both Type(x) and Type(y) are Number or both are BigInt.
    Assert(x instanceof NumberValue && y instanceof NumberValue || x instanceof BigIntValue && y instanceof BigIntValue, "(x instanceof NumberValue && y instanceof NumberValue)\n         || (x instanceof BigIntValue && y instanceof BigIntValue)");
    // 2. If comparefn is not undefined, then
    if (comparefn !== Value.undefined) {
      let _temp52 = Call(comparefn, Value.undefined, [x, y]);
      /* c8 ignore if */
      if (_temp52 instanceof AbruptCompletion) {
        return _temp52;
      }
      /* c8 ignore if */
      if (_temp52 instanceof Completion) {
        _temp52 = _temp52.Value;
      }
      let _temp51 = ToNumber(_temp52);
      /* c8 ignore if */
      if (_temp51 instanceof AbruptCompletion) {
        return _temp51;
      }
      /* c8 ignore if */
      if (_temp51 instanceof Completion) {
        _temp51 = _temp51.Value;
      }
      // a. Let v be ? ToNumber(? Call(comparefn, undefined, « x, y »)).
      const v = _temp51;
      // b. If v is NaN, return +0𝔽.
      if (v.isNaN()) {
        return F(+0);
      }
      // c. Return v.
      return v;
    }
    // 3. If x and y are both NaN, return +0𝔽.
    if (x.isNaN() && y.isNaN()) {
      return F(+0);
    }
    // 4. If x is NaN, return 1𝔽.
    if (x.isNaN()) {
      return F(1);
    }
    // 5. If y is NaN, return -1𝔽.
    if (y.isNaN()) {
      return F(-1);
    }
    x = x.numberValue ? R(x) : R(x);
    y = y.numberValue ? R(y) : R(y);
    // 6. If x < y, return -1𝔽.
    if (x < y) {
      return F(-1);
    }
    // 7. If x > y, return 1𝔽.
    if (x > y) {
      return F(1);
    }
    // 8. If x is -0𝔽 and y is +0𝔽, return -1𝔽.
    if (Object.is(x, -0) && Object.is(y, +0)) {
      return F(-1);
    }
    // 9. If x is +0𝔽 and y is -0𝔽, return 1𝔽.
    if (Object.is(x, +0) && Object.is(y, -0)) {
      return F(1);
    }
    // 10. Return +0𝔽.
    return F(+0);
  }

  /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray */
  function TypedArrayProto_subarray([begin = Value.undefined, end = Value.undefined], {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Perform ? RequireInternalSlot(O, [[TypedArrayName]]).
    let _temp53 = RequireInternalSlot(O, 'TypedArrayName');
    /* c8 ignore if */
    if (_temp53 instanceof AbruptCompletion) {
      return _temp53;
    }
    /* c8 ignore if */
    if (_temp53 instanceof Completion) {
      _temp53 = _temp53.Value;
    }
    // 3. Assert: O has a [[ViewedArrayBuffer]] internal slot.
    Assert('ViewedArrayBuffer' in O, "'ViewedArrayBuffer' in O");
    // 4. Let buffer be O.[[ViewedArrayBuffer]].
    const buffer = O.ViewedArrayBuffer;
    // 5. Let srcLength be O.[[ArrayLength]].
    const srcLength = O.ArrayLength;
    // 6. Let relativeBegin be ? ToIntegerOrInfinity(begin).
    let _temp54 = ToIntegerOrInfinity(begin);
    /* c8 ignore if */
    if (_temp54 instanceof AbruptCompletion) {
      return _temp54;
    }
    /* c8 ignore if */
    if (_temp54 instanceof Completion) {
      _temp54 = _temp54.Value;
    }
    const relativeBegin = _temp54;
    // 7. If relativeBegin < 0, let beginIndex be max((srcLength + relativeBegin), 0); else let beginIndex be min(relativeBegin, srcLength).
    let beginIndex;
    if (relativeBegin < 0) {
      beginIndex = Math.max(srcLength + relativeBegin, 0);
    } else {
      beginIndex = Math.min(relativeBegin, srcLength);
    }
    // 8. If end is undefined, let relativeEnd be srcLength; else let relativeEnd be ? ToIntegerOrInfinity(end).
    let relativeEnd;
    if (end === Value.undefined) {
      relativeEnd = srcLength;
    } else {
      let _temp55 = ToIntegerOrInfinity(end);
      /* c8 ignore if */
      if (_temp55 instanceof AbruptCompletion) {
        return _temp55;
      }
      /* c8 ignore if */
      if (_temp55 instanceof Completion) {
        _temp55 = _temp55.Value;
      }
      relativeEnd = _temp55;
    }
    // 9. If relativeEnd < 0, let endIndex be max((srcLength + relativeEnd), 0); else let endIndex be min(relativeEnd, srcLength).
    let endIndex;
    if (relativeEnd < 0) {
      endIndex = Math.max(srcLength + relativeEnd, 0);
    } else {
      endIndex = Math.min(relativeEnd, srcLength);
    }
    // 10. Let newLength be max(endIndex - beginIndex, 0).
    const newLength = Math.max(endIndex - beginIndex, 0);
    // 11. Let constructorName be the String value of O.[[TypedArrayName]].
    const constructorName = O.TypedArrayName.stringValue();
    // 12. Let elementSize be the Element Size value specified in Table 61 for constructorName.
    const elementSize = typedArrayInfoByName[constructorName].ElementSize;
    // 13. Let srcByteOffset be O.[[ByteOffset]].
    const srcByteOffset = O.ByteOffset;
    // 14. Let beginByteOffset be srcByteOffset + beginIndex × elementSize.
    const beginByteOffset = srcByteOffset + beginIndex * elementSize;
    // 15. Let argumentsList be « buffer, 𝔽(beginByteOffset), 𝔽(newLength) ».
    const argumentsList = [buffer, F(beginByteOffset), F(newLength)];
    // 16. Return ? TypedArraySpeciesCreate(O, argumentsList).
    return TypedArraySpeciesCreate(O, argumentsList);
  }

  /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.values */
  TypedArrayProto_subarray.section = 'https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray';
  function TypedArrayProto_values(args, {
    thisValue
  }) {
    // 1. Let o be the this value.
    const O = thisValue;
    // 2. Perform ? ValidateTypedArray(O).
    let _temp56 = ValidateTypedArray(O);
    /* c8 ignore if */
    if (_temp56 instanceof AbruptCompletion) {
      return _temp56;
    }
    /* c8 ignore if */
    if (_temp56 instanceof Completion) {
      _temp56 = _temp56.Value;
    }
    // Return CreateArrayIterator(O, value).
    return CreateArrayIterator(O, 'value');
  }

  /** https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag */
  TypedArrayProto_values.section = 'https://tc39.es/ecma262/#sec-%typedarray%.prototype.values';
  function TypedArrayProto_toStringTag(args, {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. If Type(O) is not Object, return undefined.
    if (!(O instanceof ObjectValue)) {
      return Value.undefined;
    }
    // 3. If O does not have a [[TypedArrayName]] internal slot, return undefined.
    if (!('TypedArrayName' in O)) {
      return Value.undefined;
    }
    // 4. Let name be O.[[TypedArrayName]].
    const name = O.TypedArrayName;
    // 5. Assert: Type(name) is String.
    Assert(name instanceof JSStringValue, "name instanceof JSStringValue");
    // 6. Return name.
    return name;
  }

  /** https://tc39.es/ecma262/#sec-%typedarray%.prototype.at */
  TypedArrayProto_toStringTag.section = 'https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag';
  function TypedArrayProto_at([index = Value.undefined], {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Perform ? ValidateTypedArray(O).
    let _temp57 = ValidateTypedArray(O);
    /* c8 ignore if */
    if (_temp57 instanceof AbruptCompletion) {
      return _temp57;
    }
    /* c8 ignore if */
    if (_temp57 instanceof Completion) {
      _temp57 = _temp57.Value;
    }
    // 3. Let len be O.[[ArrayLength]].
    const len = O.ArrayLength;
    // 4. Let relativeIndex be ? ToIntegerOrInfinity(index).
    let _temp58 = ToIntegerOrInfinity(index);
    /* c8 ignore if */
    if (_temp58 instanceof AbruptCompletion) {
      return _temp58;
    }
    /* c8 ignore if */
    if (_temp58 instanceof Completion) {
      _temp58 = _temp58.Value;
    }
    const relativeIndex = _temp58;
    let k;
    // 5. If relativeIndex ≥ 0, then
    if (relativeIndex >= 0) {
      // a. Let k be relativeIndex.
      k = relativeIndex;
    } else {
      // 6. Else,
      // a. Let k be len + relativeIndex.
      k = len + relativeIndex;
    }
    // 7. If k < 0 or k ≥ len, then return undefined.
    if (k < 0 || k >= len) {
      return Value.undefined;
    }
    // 8. Return ? Get(O, ! ToString(𝔽(k))).
    let _temp59 = ToString(F(k));
    Assert(!(_temp59 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp59 instanceof Completion) {
      _temp59 = _temp59.Value;
    }
    return Get(O, _temp59);
  }
  TypedArrayProto_at.section = 'https://tc39.es/ecma262/#sec-%typedarray%.prototype.at';
  function bootstrapTypedArrayPrototype(realmRec) {
    let _temp60 = Get(realmRec.Intrinsics['%Array.prototype%'], Value('toString'));
    Assert(!(_temp60 instanceof AbruptCompletion), "Get(realmRec.Intrinsics['%Array.prototype%'], Value('toString'))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp60 instanceof Completion) {
      _temp60 = _temp60.Value;
    }
    const ArrayProto_toString = _temp60;
    Assert(ArrayProto_toString instanceof ObjectValue, "ArrayProto_toString instanceof ObjectValue");
    const proto = bootstrapPrototype(realmRec, [['buffer', [TypedArrayProto_buffer]], ['byteLength', [TypedArrayProto_byteLength]], ['byteOffset', [TypedArrayProto_byteOffset]], ['copyWithin', TypedArrayProto_copyWithin, 2], ['entries', TypedArrayProto_entries, 0], ['fill', TypedArrayProto_fill, 1], ['filter', TypedArrayProto_filter, 1], ['at', TypedArrayProto_at, 1], ['keys', TypedArrayProto_keys, 0], ['length', [TypedArrayProto_length]], ['map', TypedArrayProto_map, 1], ['set', TypedArrayProto_set, 1], ['slice', TypedArrayProto_slice, 2], ['sort', TypedArrayProto_sort, 1], ['subarray', TypedArrayProto_subarray, 2], ['values', TypedArrayProto_values, 0], ['toString', ArrayProto_toString], [wellKnownSymbols.toStringTag, [TypedArrayProto_toStringTag]]], realmRec.Intrinsics['%Object.prototype%']);
    bootstrapArrayPrototypeShared(realmRec, proto, thisValue => {
      let _temp61 = ValidateTypedArray(thisValue);
      /* c8 ignore if */
      if (_temp61 instanceof AbruptCompletion) {
        return _temp61;
      }
      /* c8 ignore if */
      if (_temp61 instanceof Completion) {
        _temp61 = _temp61.Value;
      }
    }, O => O.ArrayLength);

    /** https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator */
    {
      let _temp62 = Get(proto, Value('values'));
      Assert(!(_temp62 instanceof AbruptCompletion), "Get(proto, Value('values'))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp62 instanceof Completion) {
        _temp62 = _temp62.Value;
      }
      const fn = _temp62;
      let _temp63 = proto.DefineOwnProperty(wellKnownSymbols.iterator, exports.Descriptor({
        Value: fn,
        Writable: Value.true,
        Enumerable: Value.false,
        Configurable: Value.true
      }));
      Assert(!(_temp63 instanceof AbruptCompletion), "proto.DefineOwnProperty(wellKnownSymbols.iterator, Descriptor({\n      Value: fn,\n      Writable: Value.true,\n      Enumerable: Value.false,\n      Configurable: Value.true,\n    }))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp63 instanceof Completion) {
        _temp63 = _temp63.Value;
      }
    }
    realmRec.Intrinsics['%TypedArray.prototype%'] = proto;
  }

  function bootstrapTypedArrayConstructors(realmRec) {
    Object.entries(typedArrayInfoByName).forEach(([TypedArray, info]) => {
      /** https://tc39.es/ecma262/#sec-typedarray-constructors */
      function TypedArrayConstructor(args, {
        NewTarget
      }) {
        if (args.length === 0) {
          /** https://tc39.es/ecma262/#sec-typedarray */
          // 1. If NewTarget is undefined, throw a TypeError exception.
          if (NewTarget === Value.undefined) {
            return exports.surroundingAgent.Throw('TypeError', 'ConstructorNonCallable', this);
          }
          // 2. Let constructorName be the String value of the Constructor Name value specified in Table 61 for this TypedArray constructor.
          const constructorName = Value(TypedArray);
          // 3. Return ? AllocateTypedArray(constructorName, NewTarget, "%TypedArray.prototype%", 0).
          return AllocateTypedArray(constructorName, NewTarget, `%${TypedArray}.prototype%`, 0);
        } else if (!(args[0] instanceof ObjectValue)) {
          /** https://tc39.es/ecma262/#sec-typedarray-length */
          const [length] = args;
          // 1. Assert: Type(length) is not Object.
          Assert(!(length instanceof ObjectValue), "!(length instanceof ObjectValue)");
          // 2. If NewTarget is undefined, throw a TypeError exception.
          if (NewTarget === Value.undefined) {
            return exports.surroundingAgent.Throw('TypeError', 'ConstructorNonCallable', this);
          }
          // 3. Let elementLength be ? ToIndex(length).
          let _temp = ToIndex(length);
          /* c8 ignore if */
          if (_temp instanceof AbruptCompletion) {
            return _temp;
          }
          /* c8 ignore if */
          if (_temp instanceof Completion) {
            _temp = _temp.Value;
          }
          const elementLength = _temp;
          // 4. Let constructorName be the String value of the Constructor Name value specified in Table 61 for this TypedArray constructor.
          const constructorName = Value(TypedArray);
          // 5. Return ? AllocateTypedArray(constructorName, NewTarget, "%TypedArray.prototype%", elementLength).
          return AllocateTypedArray(constructorName, NewTarget, `%${TypedArray}.prototype%`, elementLength);
        } else if ('TypedArrayName' in args[0]) {
          /** https://tc39.es/ecma262/#sec-typedarray-typedarray */
          const [typedArray] = args;
          // 1. Assert: Type(typedArray) is Object and typedArray has a [[TypedArrayName]] internal slot.
          Assert(typedArray instanceof ObjectValue && 'TypedArrayName' in typedArray, "typedArray instanceof ObjectValue && 'TypedArrayName' in typedArray");
          // 2. If NewTarget is undefined, throw a TypeError exception.
          if (NewTarget === Value.undefined) {
            return exports.surroundingAgent.Throw('TypeError', 'ConstructorNonCallable', this);
          }
          // 3. Let constructorName be the String value of the Constructor Name value specified in Table 61 for this TypedArray constructor.
          const constructorName = Value(TypedArray);
          // 4. Let O be ? AllocateTypedArray(constructorName, NewTarget, "%TypedArray.prototype%").
          let _temp2 = AllocateTypedArray(constructorName, NewTarget, `%${TypedArray}.prototype%`);
          /* c8 ignore if */
          if (_temp2 instanceof AbruptCompletion) {
            return _temp2;
          }
          /* c8 ignore if */
          if (_temp2 instanceof Completion) {
            _temp2 = _temp2.Value;
          }
          const O = _temp2;
          // 5. Let srcArray be typedArray.
          const srcArray = typedArray;
          // 6. Let srcData be srcArray.[[ViewedArrayBuffer]].
          const srcData = srcArray.ViewedArrayBuffer;
          // 7. If IsDetachedBuffer(srcData) is true, throw a TypeError exception.
          if (IsDetachedBuffer(srcData) === Value.true) {
            return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
          }
          // 8. Let elementType be the Element Type value in Table 61 for constructorName.
          const elementType = Value(info.ElementType);
          // 9. Let elementLength be srcArray.[[ArrayLength]].
          const elementLength = srcArray.ArrayLength;
          // 10. Let srcName be the String value of srcArray.[[TypedArrayName]].
          const srcName = srcArray.TypedArrayName.stringValue();
          // 11. Let srcType be the Element Type value in Table 61 for srcName.
          const srcType = Value(typedArrayInfoByName[srcName].ElementType);
          // 12. Let srcElementSize be the Element Size value specified in Table 61 for srcName.
          const srcElementSize = typedArrayInfoByName[srcName].ElementSize;
          // 13. Let srcByteOffset be srcArray.[[ByteOffset]].
          const srcByteOffset = srcArray.ByteOffset;
          // 14. Let elementSize be the Element Size value specified in Table 61 for constructorName.
          const elementSize = info.ElementSize;
          // 15. Let byteLength be elementSize × elementLength.
          const byteLength = elementSize * elementLength;
          // 16. If IsSharedArrayBuffer(srcData) is false, then
          let bufferConstructor;
          if (IsSharedArrayBuffer() === Value.false) {
            let _temp3 = SpeciesConstructor(srcData, exports.surroundingAgent.intrinsic('%ArrayBuffer%'));
            /* c8 ignore if */
            if (_temp3 instanceof AbruptCompletion) {
              return _temp3;
            }
            /* c8 ignore if */
            if (_temp3 instanceof Completion) {
              _temp3 = _temp3.Value;
            }
            bufferConstructor = _temp3;
          } else {
            // 17. Else, Let bufferConstructor be %ArrayBuffer%.
            bufferConstructor = exports.surroundingAgent.intrinsic('%ArrayBuffer%');
          }
          // 18. If elementType is the same as srcType, then
          let data;
          if (SameValue(elementType, srcType) === Value.true) {
            let _temp4 = CloneArrayBuffer(srcData, srcByteOffset, byteLength, bufferConstructor);
            /* c8 ignore if */
            if (_temp4 instanceof AbruptCompletion) {
              return _temp4;
            }
            /* c8 ignore if */
            if (_temp4 instanceof Completion) {
              _temp4 = _temp4.Value;
            }
            // a. Let data be ? CloneArrayBuffer(srcData, srcByteOffset, byteLength, bufferConstructor).
            data = _temp4;
          } else {
            let _temp5 = AllocateArrayBuffer(bufferConstructor, byteLength);
            /* c8 ignore if */
            if (_temp5 instanceof AbruptCompletion) {
              return _temp5;
            }
            /* c8 ignore if */
            if (_temp5 instanceof Completion) {
              _temp5 = _temp5.Value;
            }
            // a. Let data be ? AllocateArrayBuffer(bufferConstructor, byteLength).
            data = _temp5;
            // b. If IsDetachedBuffer(srcData) is true, throw a TypeError exception.
            if (IsDetachedBuffer(srcData) === Value.true) {
              return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
            }
            // c. If srcArray.[[ContentType]] is not equal to O.[[ContentType]], throw a TypeError exception.
            if (srcArray.ContentType !== O.ContentType) {
              return exports.surroundingAgent.Throw('TypeError', 'BufferContentTypeMismatch');
            }
            // d. Let srcByteIndex be srcByteOffset.
            let srcByteIndex = srcByteOffset;
            // e. Let targetByteIndex be 0.
            let targetByteIndex = 0;
            // f. Let count be elementLength.
            let count = elementLength;
            // g. Repeat, while count > 0
            while (count > 0) {
              // i. Let value be GetValueFromBuffer(srcData, srcByteIndex, srcType, true, Unordered).
              const value = GetValueFromBuffer(srcData, srcByteIndex, srcType.stringValue());
              // ii. Perform SetValueInBuffer(data, targetByteIndex, elementType, value, true, Unordered).
              SetValueInBuffer(data, targetByteIndex, elementType.stringValue(), value);
              // iii. Set srcByteIndex to srcByteIndex + srcElementSize.
              srcByteIndex += srcElementSize;
              // iv. Set targetByteIndex to targetByteIndex + elementSize.
              targetByteIndex += elementSize;
              // v. Set count to count - 1.
              count -= 1;
            }
          }
          // 20. Set O.[[ViewedArrayBuffer]] to data.
          O.ViewedArrayBuffer = data;
          // 21. Set O.[[ByteLength]] to byteLength.
          O.ByteLength = byteLength;
          // 22. Set O.[[ByteOffset]] to 0.
          O.ByteOffset = 0;
          // 23. Set O.[[ArrayLength]] to elementLength.
          O.ArrayLength = elementLength;
          // 24. Return O.
          return O;
        } else if (!('TypedArrayName' in args[0]) && !('ArrayBufferData' in args[0])) {
          /** https://tc39.es/ecma262/#sec-typedarray-object */
          const [object] = args;
          // 1. Assert: Type(object) is Object and object does not have either a [[TypedArrayName]] or an [[ArrayBufferData]] internal slot.
          Assert(object instanceof ObjectValue && !('TypedArrayName' in object) && !('ArrayBufferData' in object), "object instanceof ObjectValue && !('TypedArrayName' in object) && !('ArrayBufferData' in object)");
          // 2. If NewTarget is undefined, throw a TypeError exception.
          if (NewTarget === Value.undefined) {
            return exports.surroundingAgent.Throw('TypeError', 'ConstructorNonCallable', this);
          }
          // 3. Let constructorName be the String value of the Constructor Name value specified in Table 61 for this TypedArray constructor.
          const constructorName = Value(TypedArray);
          // 4. Let O be ? AllocateTypedArray(constructorName, NewTarget, "%TypedArray.prototype%").
          let _temp6 = AllocateTypedArray(constructorName, NewTarget, `%${TypedArray}.prototype%`);
          /* c8 ignore if */
          if (_temp6 instanceof AbruptCompletion) {
            return _temp6;
          }
          /* c8 ignore if */
          if (_temp6 instanceof Completion) {
            _temp6 = _temp6.Value;
          }
          const O = _temp6;
          // 5. Let usingIterator be ? GetMethod(object, @@iterator).
          let _temp7 = GetMethod(object, wellKnownSymbols.iterator);
          /* c8 ignore if */
          if (_temp7 instanceof AbruptCompletion) {
            return _temp7;
          }
          /* c8 ignore if */
          if (_temp7 instanceof Completion) {
            _temp7 = _temp7.Value;
          }
          const usingIterator = _temp7;
          // 6. If usingIterator is not undefined, then
          if (usingIterator !== Value.undefined) {
            let _temp8 = IterableToList(object, usingIterator);
            /* c8 ignore if */
            if (_temp8 instanceof AbruptCompletion) {
              return _temp8;
            }
            /* c8 ignore if */
            if (_temp8 instanceof Completion) {
              _temp8 = _temp8.Value;
            }
            // a. Let values be ? IterableToList(object, usingIterator).
            const values = _temp8;
            // b. Let len be the number of elements in values.
            const len = values.length;
            // c. Perform ? AllocateTypedArrayBuffer(O, len).
            let _temp9 = AllocateTypedArrayBuffer(O, len);
            /* c8 ignore if */
            if (_temp9 instanceof AbruptCompletion) {
              return _temp9;
            }
            /* c8 ignore if */
            if (_temp9 instanceof Completion) {
              _temp9 = _temp9.Value;
            }
            // d. Let k be 0.
            let k = 0;
            // e. Repeat, while k < len
            while (k < len) {
              let _temp10 = ToString(F(k));
              Assert(!(_temp10 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
              /* c8 ignore if */
              if (_temp10 instanceof Completion) {
                _temp10 = _temp10.Value;
              }
              // i. Let Pk be ! ToString(𝔽(k)).
              const Pk = _temp10;
              // ii. Let kValue be the first element of values and remove that element from values.
              const kValue = values.shift();
              // iii. Perform ? Set(O, Pk, kValue, true).
              let _temp11 = Set$1(O, Pk, kValue, Value.true);
              /* c8 ignore if */
              if (_temp11 instanceof AbruptCompletion) {
                return _temp11;
              }
              /* c8 ignore if */
              if (_temp11 instanceof Completion) {
                _temp11 = _temp11.Value;
              }
              // iv. Set k to k + 1.
              k += 1;
            }
            // f. Assert: values is now an empty List.
            Assert(values.length === 0, "values.length === 0");
            // g. Return O.
            return O;
          }
          // 7. NOTE: object is not an Iterable so assume it is already an array-like object.
          // 8. Let arrayLike be object.
          const arrayLike = object;
          // 9. Let len be ? LengthOfArrayLike(arrayLike).
          let _temp12 = LengthOfArrayLike(arrayLike);
          /* c8 ignore if */
          if (_temp12 instanceof AbruptCompletion) {
            return _temp12;
          }
          /* c8 ignore if */
          if (_temp12 instanceof Completion) {
            _temp12 = _temp12.Value;
          }
          const len = _temp12;
          // 10. Perform ? AllocateTypedArrayBuffer(O, len).
          let _temp13 = AllocateTypedArrayBuffer(O, len);
          /* c8 ignore if */
          if (_temp13 instanceof AbruptCompletion) {
            return _temp13;
          }
          /* c8 ignore if */
          if (_temp13 instanceof Completion) {
            _temp13 = _temp13.Value;
          }
          // 11. Let k be 0.
          let k = 0;
          // 12. Repeat, while k < len.
          while (k < len) {
            let _temp14 = ToString(F(k));
            Assert(!(_temp14 instanceof AbruptCompletion), "ToString(F(k))" + ' returned an abrupt completion');
            /* c8 ignore if */
            if (_temp14 instanceof Completion) {
              _temp14 = _temp14.Value;
            }
            // a. Let Pk be ! ToString(𝔽(k)).
            const Pk = _temp14;
            // b. Let kValue be ? Get(arrayLike, Pk).
            let _temp15 = Get(arrayLike, Pk);
            /* c8 ignore if */
            if (_temp15 instanceof AbruptCompletion) {
              return _temp15;
            }
            /* c8 ignore if */
            if (_temp15 instanceof Completion) {
              _temp15 = _temp15.Value;
            }
            const kValue = _temp15;
            // c. Perform ? Set(O, Pk, kValue, true).
            let _temp16 = Set$1(O, Pk, kValue, Value.true);
            /* c8 ignore if */
            if (_temp16 instanceof AbruptCompletion) {
              return _temp16;
            }
            /* c8 ignore if */
            if (_temp16 instanceof Completion) {
              _temp16 = _temp16.Value;
            }
            // d. Set k to k + 1.
            k += 1;
          }
          // 13. Return O.
          return O;
        } else {
          /** https://tc39.es/ecma262/#sec-typedarray-buffer-byteoffset-length */
          const [buffer = Value.undefined, byteOffset = Value.undefined, length = Value.undefined] = args;
          // 1. Assert: Type(buffer) is Object and buffer has an [[ArrayBufferData]] internal slot.
          Assert(buffer instanceof ObjectValue && 'ArrayBufferData' in buffer, "buffer instanceof ObjectValue && 'ArrayBufferData' in buffer");
          // 2. If NewTarget is undefined, throw a TypeError exception.
          if (NewTarget === Value.undefined) {
            return exports.surroundingAgent.Throw('TypeError', 'ConstructorNonCallable', this);
          }
          // 3. Let constructorName be the String value of the Constructor Name value specified in Table 61 for this TypedArray constructor.
          const constructorName = Value(TypedArray);
          // 4. Let O be ? AllocateTypedArray(constructorName, NewTarget, "%TypedArray.prototype%").
          let _temp17 = AllocateTypedArray(constructorName, NewTarget, `%${TypedArray}.prototype%`);
          /* c8 ignore if */
          if (_temp17 instanceof AbruptCompletion) {
            return _temp17;
          }
          /* c8 ignore if */
          if (_temp17 instanceof Completion) {
            _temp17 = _temp17.Value;
          }
          const O = _temp17;
          // 5. Let elementSize be the Element Size value specified in Table 61 for constructorName.
          const elementSize = info.ElementSize;
          // 6. Let offset be ? ToIndex(byteOffset).
          let _temp18 = ToIndex(byteOffset);
          /* c8 ignore if */
          if (_temp18 instanceof AbruptCompletion) {
            return _temp18;
          }
          /* c8 ignore if */
          if (_temp18 instanceof Completion) {
            _temp18 = _temp18.Value;
          }
          const offset = _temp18;
          // 7. If offset modulo elementSize ≠ 0, throw a RangeError exception.
          if (offset % elementSize !== 0) {
            return exports.surroundingAgent.Throw('RangeError', 'TypedArrayOffsetAlignment', TypedArray, elementSize);
          }
          // 8. If length is not undefined, then
          let newLength;
          if (length !== Value.undefined) {
            let _temp19 = ToIndex(length);
            /* c8 ignore if */
            if (_temp19 instanceof AbruptCompletion) {
              return _temp19;
            }
            /* c8 ignore if */
            if (_temp19 instanceof Completion) {
              _temp19 = _temp19.Value;
            }
            // Let newLength be ? ToIndex(length).
            newLength = _temp19;
          }
          // 9. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.
          if (IsDetachedBuffer(buffer) === Value.true) {
            return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
          }
          // 10. Let bufferByteLength be buffer.[[ArrayBufferByteLength]].
          const bufferByteLength = buffer.ArrayBufferByteLength;
          // 11. If length is undefined, then
          let newByteLength;
          if (length === Value.undefined) {
            // a. If bufferByteLength modulo elementSize ≠ 0, throw a RangeError exception.
            if (bufferByteLength % elementSize !== 0) {
              return exports.surroundingAgent.Throw('RangeError', 'TypedArrayLengthAlignment', TypedArray, elementSize);
            }
            // b. Let newByteLength be bufferByteLength - offset.
            newByteLength = bufferByteLength - offset;
            // c. If newByteLength < 0, throw a RangeError exception.
            if (newByteLength < 0) {
              return exports.surroundingAgent.Throw('RangeError', 'TypedArrayCreationOOB');
            }
          } else {
            // a. Let newByteLength be newLength × elementSize.
            newByteLength = newLength * elementSize;
            // b. If offset + newByteLength > bufferByteLength, throw a RangeError exception.
            if (offset + newByteLength > bufferByteLength) {
              return exports.surroundingAgent.Throw('RangeError', 'TypedArrayCreationOOB');
            }
          }
          // 13. Set O.[[ViewedArrayBuffer]] to buffer.
          O.ViewedArrayBuffer = buffer;
          // 14. Set O.[[ByteLength]] to newByteLength.
          O.ByteLength = newByteLength;
          // 15. Set O.[[ByteOffset]] to offset.
          O.ByteOffset = offset;
          // 16. Set O.[[ArrayLength]] to newByteLength / elementSize.
          O.ArrayLength = newByteLength / elementSize;
          // 17. Return O.
          return O;
        }
      }
      TypedArrayConstructor.section = 'https://tc39.es/ecma262/#sec-typedarray-constructors';
      const taConstructor = bootstrapConstructor(realmRec, TypedArrayConstructor, TypedArray, 3, realmRec.Intrinsics[`%${TypedArray}.prototype%`], [['BYTES_PER_ELEMENT', F(info.ElementSize), undefined, {
        Writable: Value.false,
        Configurable: Value.false
      }]]);
      let _temp20 = taConstructor.SetPrototypeOf(realmRec.Intrinsics['%TypedArray%']);
      Assert(!(_temp20 instanceof AbruptCompletion), "taConstructor.SetPrototypeOf(realmRec.Intrinsics['%TypedArray%'])" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp20 instanceof Completion) {
        _temp20 = _temp20.Value;
      }
      realmRec.Intrinsics[`%${TypedArray}%`] = taConstructor;
    });
  }

  // @ts-nocheck

  /** https://tc39.es/ecma262/#sec-properties-of-typedarray-prototype-objects */
  function bootstrapTypedArrayPrototypes(realmRec) {
    Object.entries(typedArrayInfoByName).forEach(([TypedArray, info]) => {
      const proto = bootstrapPrototype(realmRec, [['BYTES_PER_ELEMENT', F(info.ElementSize), undefined, {
        Writable: Value.false,
        Configurable: Value.false
      }]], realmRec.Intrinsics['%TypedArray.prototype%']);
      realmRec.Intrinsics[`%${TypedArray}.prototype%`] = proto;
    });
  }

  /** https://tc39.es/ecma262/#sec-dataview-constructor */
  function DataViewConstructor([buffer = Value.undefined, byteOffset = Value.undefined, byteLength = Value.undefined], {
    NewTarget
  }) {
    // 1. If NewTarget is undefined, throw a TypeError exception.
    if (NewTarget === Value.undefined) {
      return exports.surroundingAgent.Throw('TypeError', 'ConstructorNonCallable', this);
    }
    // 2. Perform ? RequireInternalSlot(buffer, [[ArrayBufferData]]).
    let _temp = RequireInternalSlot(buffer, 'ArrayBufferData');
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 3. Let offset be ? ToIndex(byteOffset).
    let _temp2 = ToIndex(byteOffset);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const offset = _temp2;
    // 4. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.
    if (IsDetachedBuffer(buffer) === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
    }
    // 5. Let bufferByteLength be buffer.[[ArrayBufferByteLength]].
    const bufferByteLength = buffer.ArrayBufferByteLength;
    // 6. If offset > bufferByteLength, throw a RangeError exception.
    if (offset > bufferByteLength) {
      return exports.surroundingAgent.Throw('RangeError', 'DataViewOOB');
    }
    let viewByteLength;
    // 7. If byteLength is undefined, then
    if (byteLength === Value.undefined) {
      // a. Let viewByteLength be bufferByteLength - offset.
      viewByteLength = bufferByteLength - offset;
    } else {
      let _temp3 = ToIndex(byteLength);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      // a. Let viewByteLength be ? ToIndex(byteLength).
      viewByteLength = _temp3;
      // b. If offset + viewByteLength > bufferByteLength, throw a RangeError exception.
      if (offset + viewByteLength > bufferByteLength) {
        return exports.surroundingAgent.Throw('RangeError', 'DataViewOOB');
      }
    }
    // 9. Let O be ? OrdinaryCreateFromConstructor(NewTarget, "%DataView.prototype%", « [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] »).
    let _temp4 = OrdinaryCreateFromConstructor(NewTarget, '%DataView.prototype%', ['DataView', 'ViewedArrayBuffer', 'ByteLength', 'ByteOffset']);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const O = _temp4;
    // 10. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.
    if (IsDetachedBuffer(buffer) === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
    }
    // 11. Set O.[[ViewedArrayBuffer]] to buffer.
    O.ViewedArrayBuffer = buffer;
    // 12. Set O.[[ByteLength]] to viewByteLength.
    O.ByteLength = viewByteLength;
    // 13. Set O.[[ByteOffset]] to offset.
    O.ByteOffset = offset;
    // 14. Return O.
    return O;
  }
  DataViewConstructor.section = 'https://tc39.es/ecma262/#sec-dataview-constructor';
  function bootstrapDataView(realmRec) {
    const dvConstructor = bootstrapConstructor(realmRec, DataViewConstructor, 'DataView', 1, realmRec.Intrinsics['%DataView.prototype%'], []);
    realmRec.Intrinsics['%DataView%'] = dvConstructor;
  }

  /** https://tc39.es/ecma262/#sec-get-dataview.prototype.buffer */
  function DataViewProto_buffer(args, {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Perform ? RequireInternalSlot(O, [[DataView]]).
    let _temp = RequireInternalSlot(O, 'DataView');
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 3. Assert: O has a [[ViewedArrayBuffer]] internal slot.
    Assert('ViewedArrayBuffer' in O, "'ViewedArrayBuffer' in O");
    // 4. Let buffer be O.[[ViewedArrayBuffer]].
    const buffer = O.ViewedArrayBuffer;
    // 5. Return buffer.
    return buffer;
  }

  /** https://tc39.es/ecma262/#sec-get-dataview.prototype.bytelength */
  DataViewProto_buffer.section = 'https://tc39.es/ecma262/#sec-get-dataview.prototype.buffer';
  function DataViewProto_byteLength(args, {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Perform ? RequireInternalSlot(O, [[DataView]]).
    let _temp2 = RequireInternalSlot(O, 'DataView');
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 3. Assert: O has a [[ViewedArrayBuffer]] internal slot.
    Assert('ViewedArrayBuffer' in O, "'ViewedArrayBuffer' in O");
    // 4. Let buffer be O.[[ViewedArrayBuffer]].
    const buffer = O.ViewedArrayBuffer;
    // 5. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.
    if (IsDetachedBuffer(buffer) === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
    }
    // 6. Let size be O.[[ByteLength]].
    const size = O.ByteLength;
    // 7. Return 𝔽(size).
    return F(size);
  }

  /** https://tc39.es/ecma262/#sec-get-dataview.prototype.byteoffset */
  DataViewProto_byteLength.section = 'https://tc39.es/ecma262/#sec-get-dataview.prototype.bytelength';
  function DataViewProto_byteOffset(args, {
    thisValue
  }) {
    // 1. Let O be the this value.
    const O = thisValue;
    // 2. Perform ? RequireInternalSlot(O, [[DataView]]).
    let _temp3 = RequireInternalSlot(O, 'DataView');
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    // 3. Assert: O has a [[ViewedArrayBuffer]] internal slot.
    Assert('ViewedArrayBuffer' in O, "'ViewedArrayBuffer' in O");
    // 4. Let buffer be O.[[ViewedArrayBuffer]].
    const buffer = O.ViewedArrayBuffer;
    // 5. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.
    if (IsDetachedBuffer(buffer) === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
    }
    // 6. Let offset be O.[[ByteOffset]].
    const offset = O.ByteOffset;
    // 7. Return 𝔽(offset).
    return F(offset);
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.getbigint64 */
  DataViewProto_byteOffset.section = 'https://tc39.es/ecma262/#sec-get-dataview.prototype.byteoffset';
  function DataViewProto_getBigInt64([byteOffset = Value.undefined, littleEndian = Value.undefined], {
    thisValue
  }) {
    // 1. Let v be the this value.
    const v = thisValue;
    // 2. Return ? GetViewValue(v, byteOffset, littleEndian, BigInt64).
    return GetViewValue(v, byteOffset, littleEndian, 'BigInt64');
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.getbiguint64 */
  DataViewProto_getBigInt64.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.getbigint64';
  function DataViewProto_getBigUint64([byteOffset = Value.undefined, littleEndian = Value.undefined], {
    thisValue
  }) {
    // 1. Let v be the this value.
    const v = thisValue;
    // 2. Return ? GetViewValue(v, byteOffset, littleEndian, BigUint64).
    return GetViewValue(v, byteOffset, littleEndian, 'BigUint64');
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.getfloat32 */
  DataViewProto_getBigUint64.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.getbiguint64';
  function DataViewProto_getFloat32([byteOffset = Value.undefined, littleEndian], {
    thisValue
  }) {
    const v = thisValue;
    if (littleEndian === undefined) {
      littleEndian = Value.false;
    }
    return GetViewValue(v, byteOffset, littleEndian, 'Float32');
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.getfloat64 */
  DataViewProto_getFloat32.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.getfloat32';
  function DataViewProto_getFloat64([byteOffset = Value.undefined, littleEndian], {
    thisValue
  }) {
    const v = thisValue;
    if (littleEndian === undefined) {
      littleEndian = Value.false;
    }
    return GetViewValue(v, byteOffset, littleEndian, 'Float64');
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.getint8 */
  DataViewProto_getFloat64.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.getfloat64';
  function DataViewProto_getInt8([byteOffset = Value.undefined], {
    thisValue
  }) {
    const v = thisValue;
    return GetViewValue(v, byteOffset, Value.true, 'Int8');
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.getint16 */
  DataViewProto_getInt8.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.getint8';
  function DataViewProto_getInt16([byteOffset = Value.undefined, littleEndian], {
    thisValue
  }) {
    const v = thisValue;
    if (littleEndian === undefined) {
      littleEndian = Value.false;
    }
    return GetViewValue(v, byteOffset, littleEndian, 'Int16');
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.getint32 */
  DataViewProto_getInt16.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.getint16';
  function DataViewProto_getInt32([byteOffset = Value.undefined, littleEndian], {
    thisValue
  }) {
    const v = thisValue;
    if (littleEndian === undefined) {
      littleEndian = Value.false;
    }
    return GetViewValue(v, byteOffset, littleEndian, 'Int32');
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.getuint8 */
  DataViewProto_getInt32.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.getint32';
  function DataViewProto_getUint8([byteOffset = Value.undefined], {
    thisValue
  }) {
    const v = thisValue;
    return GetViewValue(v, byteOffset, Value.true, 'Uint8');
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.getuint16 */
  DataViewProto_getUint8.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.getuint8';
  function DataViewProto_getUint16([byteOffset = Value.undefined, littleEndian], {
    thisValue
  }) {
    const v = thisValue;
    if (littleEndian === undefined) {
      littleEndian = Value.false;
    }
    return GetViewValue(v, byteOffset, littleEndian, 'Uint16');
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.getuint32 */
  DataViewProto_getUint16.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.getuint16';
  function DataViewProto_getUint32([byteOffset = Value.undefined, littleEndian], {
    thisValue
  }) {
    const v = thisValue;
    if (littleEndian === undefined) {
      littleEndian = Value.false;
    }
    return GetViewValue(v, byteOffset, littleEndian, 'Uint32');
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.setbigint64 */
  DataViewProto_getUint32.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.getuint32';
  function DataViewProto_setBigInt64([byteOffset = Value.undefined, value = Value.undefined, littleEndian], {
    thisValue
  }) {
    // 1. Let v be the this value.
    const v = thisValue;
    // 2. If littleEndian is not present, set littleEndian to undefined.
    if (littleEndian === undefined) {
      littleEndian = Value.undefined;
    }
    // 3. Return ? SetViewValue(v, byteOffset, littleEndian, BigInt64, value).
    return SetViewValue(v, byteOffset, littleEndian, 'BigInt64', value);
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.setbiguint64 */
  DataViewProto_setBigInt64.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.setbigint64';
  function DataViewProto_setBigUint64([byteOffset = Value.undefined, value = Value.undefined, littleEndian], {
    thisValue
  }) {
    // 1. Let v be the this value.
    const v = thisValue;
    // 2. If littleEndian is not present, set littleEndian to undefined.
    if (littleEndian === undefined) {
      littleEndian = Value.undefined;
    }
    // 3. Return ? SetViewValue(v, byteOffset, littleEndian, BigUint64, value).
    return SetViewValue(v, byteOffset, littleEndian, 'BigUint64', value);
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.setfloat32 */
  DataViewProto_setBigUint64.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.setbiguint64';
  function DataViewProto_setFloat32([byteOffset = Value.undefined, value = Value.undefined, littleEndian], {
    thisValue
  }) {
    const v = thisValue;
    if (littleEndian === undefined) {
      littleEndian = Value.false;
    }
    return SetViewValue(v, byteOffset, littleEndian, 'Float32', value);
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.setfloat64 */
  DataViewProto_setFloat32.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.setfloat32';
  function DataViewProto_setFloat64([byteOffset = Value.undefined, value = Value.undefined, littleEndian], {
    thisValue
  }) {
    const v = thisValue;
    if (littleEndian === undefined) {
      littleEndian = Value.false;
    }
    return SetViewValue(v, byteOffset, littleEndian, 'Float64', value);
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.setint8 */
  DataViewProto_setFloat64.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.setfloat64';
  function DataViewProto_setInt8([byteOffset = Value.undefined, value = Value.undefined], {
    thisValue
  }) {
    const v = thisValue;
    return SetViewValue(v, byteOffset, Value.true, 'Int8', value);
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.setint16 */
  DataViewProto_setInt8.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.setint8';
  function DataViewProto_setInt16([byteOffset = Value.undefined, value = Value.undefined, littleEndian], {
    thisValue
  }) {
    const v = thisValue;
    if (littleEndian === undefined) {
      littleEndian = Value.false;
    }
    return SetViewValue(v, byteOffset, littleEndian, 'Int16', value);
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.setint32 */
  DataViewProto_setInt16.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.setint16';
  function DataViewProto_setInt32([byteOffset = Value.undefined, value = Value.undefined, littleEndian], {
    thisValue
  }) {
    const v = thisValue;
    if (littleEndian === undefined) {
      littleEndian = Value.false;
    }
    return SetViewValue(v, byteOffset, littleEndian, 'Int32', value);
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.setuint8 */
  DataViewProto_setInt32.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.setint32';
  function DataViewProto_setUint8([byteOffset = Value.undefined, value = Value.undefined], {
    thisValue
  }) {
    const v = thisValue;
    return SetViewValue(v, byteOffset, Value.true, 'Uint8', value);
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.setuint16 */
  DataViewProto_setUint8.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.setuint8';
  function DataViewProto_setUint16([byteOffset = Value.undefined, value = Value.undefined, littleEndian], {
    thisValue
  }) {
    const v = thisValue;
    if (littleEndian === undefined) {
      littleEndian = Value.false;
    }
    return SetViewValue(v, byteOffset, littleEndian, 'Uint16', value);
  }

  /** https://tc39.es/ecma262/#sec-dataview.prototype.setuint32 */
  DataViewProto_setUint16.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.setuint16';
  function DataViewProto_setUint32([byteOffset = Value.undefined, value = Value.undefined, littleEndian], {
    thisValue
  }) {
    const v = thisValue;
    if (littleEndian === undefined) {
      littleEndian = Value.false;
    }
    return SetViewValue(v, byteOffset, littleEndian, 'Uint32', value);
  }
  DataViewProto_setUint32.section = 'https://tc39.es/ecma262/#sec-dataview.prototype.setuint32';
  function bootstrapDataViewPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['buffer', [DataViewProto_buffer]], ['byteLength', [DataViewProto_byteLength]], ['byteOffset', [DataViewProto_byteOffset]], ['getBigInt64', DataViewProto_getBigInt64, 1], ['getBigUint64', DataViewProto_getBigUint64, 1], ['getFloat32', DataViewProto_getFloat32, 1], ['getFloat64', DataViewProto_getFloat64, 1], ['getInt8', DataViewProto_getInt8, 1], ['getInt16', DataViewProto_getInt16, 1], ['getInt32', DataViewProto_getInt32, 1], ['getUint8', DataViewProto_getUint8, 1], ['getUint16', DataViewProto_getUint16, 1], ['getUint32', DataViewProto_getUint32, 1], ['setBigInt64', DataViewProto_setBigInt64, 2], ['setBigUint64', DataViewProto_setBigUint64, 2], ['setFloat32', DataViewProto_setFloat32, 2], ['setFloat64', DataViewProto_setFloat64, 2], ['setInt8', DataViewProto_setInt8, 2], ['setInt16', DataViewProto_setInt16, 2], ['setInt32', DataViewProto_setInt32, 2], ['setUint8', DataViewProto_setUint8, 2], ['setUint16', DataViewProto_setUint16, 2], ['setUint32', DataViewProto_setUint32, 2]], realmRec.Intrinsics['%Object.prototype%'], 'DataView');
    realmRec.Intrinsics['%DataView.prototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-weakmap.prototype.delete */
  function WeakMapProto_delete([key = Value.undefined], {
    thisValue
  }) {
    // 1. Let M be the this value.
    const M = thisValue;
    // 2. Perform ? RequireInternalSlot(M, [[WeakMapData]]).
    let _temp = RequireInternalSlot(M, 'WeakMapData');
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 3. Let entries be the List that is M.[[WeakMapData]].
    const entries = M.WeakMapData;
    // 4. If Type(key) is not Object, return false.
    if (!(key instanceof ObjectValue)) {
      return Value.false;
    }
    // 5. For each Record { [[Key]], [[Value]] } p that is an element of entries, do
    for (let i = 0; i < entries.length; i += 1) {
      const p = entries[i];
      // a. If p.[[Key]] is not empty and SameValue(p.[[Key]], key) is true, then
      if (p.Key !== undefined && SameValue(p.Key, key) === Value.true) {
        // i. Set p.[[Key]] to empty.
        p.Key = undefined;
        // ii. Set p.[[Value]] to empty.
        p.Value = undefined;
        // iii. return true.
        return Value.true;
      }
    }
    // 6. Return false.
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-weakmap.prototype.get */
  WeakMapProto_delete.section = 'https://tc39.es/ecma262/#sec-weakmap.prototype.delete';
  function WeakMapProto_get([key = Value.undefined], {
    thisValue
  }) {
    // 1. Let m be the this value.
    const M = thisValue;
    // 2. Perform ? RequireInternalSlot(M, [[WeakMapData]]).
    let _temp2 = RequireInternalSlot(M, 'WeakMapData');
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 3. Let entries be the List that is M.[[WeakMapData]].
    const entries = M.WeakMapData;
    // 4. If Type(key) is not Object, return undefined.
    if (!(key instanceof ObjectValue)) {
      return Value.undefined;
    }
    // 5. For each Record { [[Key]], [[Value]] } p that is an element of entries, do
    for (const p of entries) {
      // a. If p.[[Key]] is not empty and SameValue(p.[[Key]], key) is true, return p.[[Value]].
      if (p.Key !== undefined && SameValue(p.Key, key) === Value.true) {
        return p.Value;
      }
    }
    // 6. Return undefined.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-weakmap.prototype.has */
  WeakMapProto_get.section = 'https://tc39.es/ecma262/#sec-weakmap.prototype.get';
  function WeakMapProto_has([key = Value.undefined], {
    thisValue
  }) {
    // 1. Let M be the this value.
    const M = thisValue;
    // 2. Perform ? RequireInternalSlot(M, [[WeakMapData]]).
    let _temp3 = RequireInternalSlot(M, 'WeakMapData');
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    // 3. Let entries be the List that is M.[[WeakMapData]].
    const entries = M.WeakMapData;
    // 4. If Type(key) is not Object, return false.
    if (!(key instanceof ObjectValue)) {
      return Value.false;
    }
    // 5. For each Record { [[Key]], [[Value]] } p that is an element of entries, do
    for (const p of entries) {
      // a. If p.[[Key]] is not empty and SameValue(p.[[Key]], key) is true, return true.
      if (p.Key !== undefined && SameValue(p.Key, key) === Value.true) {
        return Value.true;
      }
    }
    // 6. Return false.
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-weakmap.prototype.set */
  WeakMapProto_has.section = 'https://tc39.es/ecma262/#sec-weakmap.prototype.has';
  function WeakMapProto_set([key = Value.undefined, value = Value.undefined], {
    thisValue
  }) {
    // 1. Let M be the this value.
    const M = thisValue;
    // 2. Perform ? RequireInternalSlot(M, [[WeakMapData]]).
    let _temp4 = RequireInternalSlot(M, 'WeakMapData');
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 3. Let entries be the List that is M.[[WeakMapData]].
    const entries = M.WeakMapData;
    // 4. If Type(key) is not Object, throw a TypeError exception.
    if (!(key instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'WeakCollectionNotObject', key);
    }
    // 5. For each Record { [[Key]], [[Value]] } p that is an element of entries, do
    for (const p of entries) {
      // a. If p.[[Key]] is not empty and SameValue(p.[[Key]], key) is true, then
      if (p.Key !== undefined && SameValue(p.Key, key) === Value.true) {
        // i. Set p.[[Value]] to value.
        p.Value = value;
        // ii. Return M.
        return M;
      }
    }
    // 6. Let p be the Record { [[Key]]: key, [[Value]]: value }.
    const p = {
      Key: key,
      Value: value
    };
    // 7. Append p as the last element of entries.
    entries.push(p);
    // 8. Return M.
    return M;
  }
  WeakMapProto_set.section = 'https://tc39.es/ecma262/#sec-weakmap.prototype.set';
  function bootstrapWeakMapPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['delete', WeakMapProto_delete, 1], ['get', WeakMapProto_get, 1], ['has', WeakMapProto_has, 1], ['set', WeakMapProto_set, 2]], realmRec.Intrinsics['%Object.prototype%'], 'WeakMap');
    realmRec.Intrinsics['%WeakMap.prototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-weakmap-constructor */
  function WeakMapConstructor([iterable = Value.undefined], {
    NewTarget
  }) {
    // 1. If NewTarget is undefined, throw a TypeError exception.
    if (NewTarget === Value.undefined) {
      return exports.surroundingAgent.Throw('TypeError', 'ConstructorNonCallable', this);
    }
    // 2. Let map be ? OrdinaryCreateFromConstructor(NewTarget, "%WeakMap.prototype%", « [[WeakMapData]] »).
    let _temp = OrdinaryCreateFromConstructor(NewTarget, '%WeakMap.prototype%', ['WeakMapData']);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const map = _temp;
    // 3. Set map.[[WeakMapData]] to a new empty List.
    map.WeakMapData = [];
    // 4. If iterable is either undefined or null, return map.
    if (iterable === Value.undefined || iterable === Value.null) {
      return map;
    }
    // 5. Let adder be ? Get(map, "set").
    let _temp2 = Get(map, Value('set'));
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const adder = _temp2;
    // 6. Return ? AddEntriesFromIterable(map, iterable, adder).
    return AddEntriesFromIterable(map, iterable, adder);
  }
  WeakMapConstructor.section = 'https://tc39.es/ecma262/#sec-weakmap-constructor';
  function bootstrapWeakMap(realmRec) {
    const c = bootstrapConstructor(realmRec, WeakMapConstructor, 'WeakMap', 0, realmRec.Intrinsics['%WeakMap.prototype%'], []);
    realmRec.Intrinsics['%WeakMap%'] = c;
  }

  /** https://tc39.es/ecma262/#sec-weakset.prototype.add */
  function WeakSetProto_add([value = Value.undefined], {
    thisValue
  }) {
    // 1. Let S be this value.
    const S = thisValue;
    // 2. Perform ? RequireInternalSlot(S, [[WeakSetData]]).
    let _temp = RequireInternalSlot(S, 'WeakSetData');
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 3. If Type(value) is not Object, throw a TypeError exception.
    if (!(value instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'WeakCollectionNotObject', value);
    }
    // 4. Let entries be the List that is S.[[WeakSetData]].
    const entries = S.WeakSetData;
    // 5. For each e that is an element of entries, do
    for (const e of entries) {
      // a. If e is not empty and SameValue(e, value) is true, then
      if (e !== undefined && SameValue(e, value) === Value.true) {
        // i. Return S.
        return S;
      }
    }
    // 6. Append value as the last element of entries.
    entries.push(value);
    // 7. Return S.
    return S;
  }

  /** https://tc39.es/ecma262/#sec-weakset.prototype.delete */
  WeakSetProto_add.section = 'https://tc39.es/ecma262/#sec-weakset.prototype.add';
  function WeakSetProto_delete([value = Value.undefined], {
    thisValue
  }) {
    // 1. Let S be the this value.`
    const S = thisValue;
    // 2. Perform ? RequireInternalSlot(S, [[WeakSetData]]).
    let _temp2 = RequireInternalSlot(S, 'WeakSetData');
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 3. If Type(value) is not Object, return false.
    if (!(value instanceof ObjectValue)) {
      return Value.false;
    }
    // 4. Let entries be the List that is S.[[WeakSetData]].
    const entries = S.WeakSetData;
    // 5. For each e that is an element of entries, do
    for (let i = 0; i < entries.length; i += 1) {
      const e = entries[i];
      // i. If e is not empty and SameValue(e, value) is true, then
      if (e !== undefined && SameValue(e, value) === Value.true) {
        // i. Replace the element of entries whose value is e with an element whose value is empty.
        entries[i] = undefined;
        // ii. Return true.
        return Value.true;
      }
    }
    // 6. Return false.
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-weakset.prototype.has */
  WeakSetProto_delete.section = 'https://tc39.es/ecma262/#sec-weakset.prototype.delete';
  function WeakSetProto_has([value = Value.undefined], {
    thisValue
  }) {
    // 1. Let S be the this value.
    const S = thisValue;
    // 2. Perform ? RequireInternalSlot(S, [[WeakSetData]]).
    let _temp3 = RequireInternalSlot(S, 'WeakSetData');
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    // 3. Let entries be the List that is S.[[WeakSetData]].
    const entries = S.WeakSetData;
    // 4. If Type(value) is not Object, return false.
    if (!(value instanceof ObjectValue)) {
      return Value.false;
    }
    // 5. For each e that is an element of entries, do
    for (const e of entries) {
      // a. If e is not empty and SameValue(e, value) is true, return true.
      if (e !== undefined && SameValue(e, value) === Value.true) {
        return Value.true;
      }
    }
    // 6. Return false.
    return Value.false;
  }
  WeakSetProto_has.section = 'https://tc39.es/ecma262/#sec-weakset.prototype.has';
  function bootstrapWeakSetPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['add', WeakSetProto_add, 1], ['delete', WeakSetProto_delete, 1], ['has', WeakSetProto_has, 1]], realmRec.Intrinsics['%Object.prototype%'], 'WeakSet');
    realmRec.Intrinsics['%WeakSet.prototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-weakset-iterable */
  function WeakSetConstructor([iterable = Value.undefined], {
    NewTarget
  }) {
    // 1. If NewTarget is undefined, throw a TypeError exception.
    if (NewTarget === Value.undefined) {
      return exports.surroundingAgent.Throw('TypeError', 'ConstructorNonCallable', this);
    }
    // 2. Let set be ? OrdinaryCreateFromConstructor(NewTarget, "%WeakSet.prototype%", « [[WeakSetData]] »).
    let _temp = OrdinaryCreateFromConstructor(NewTarget, '%WeakSet.prototype%', ['WeakSetData']);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const set = _temp;
    // 3. Set set.[[WeakSetData]] to a new empty List.
    set.WeakSetData = [];
    // 4. If iterable is either undefined or null, return set.
    if (iterable === Value.undefined || iterable === Value.null) {
      return set;
    }
    // 5. Let adder be ? Get(set, "add").
    let _temp2 = Get(set, Value('add'));
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const adder = _temp2;
    // 6. If IsCallable(adder) is false, throw a TypeError exception.
    if (IsCallable(adder) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', adder);
    }
    // 7. Let iteratorRecord be ? GetIterator(iterable).
    let _temp3 = GetIterator(iterable);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    const iteratorRecord = _temp3;
    // 8. Repeat,
    while (true) {
      let _temp4 = IteratorStep(iteratorRecord);
      /* c8 ignore if */
      if (_temp4 instanceof AbruptCompletion) {
        return _temp4;
      }
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      // a. Let next be ? IteratorStep(iteratorRecord).
      const next = _temp4;
      // b. If next is false, return set.
      if (next === Value.false) {
        return set;
      }
      // c. Let nextValue be ? IteratorValue(next).
      let _temp5 = IteratorValue(next);
      /* c8 ignore if */
      if (_temp5 instanceof AbruptCompletion) {
        return _temp5;
      }
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      const nextValue = _temp5;
      // d. Let status be Call(adder, set, « nextValue »).
      let status = Call(adder, set, [nextValue]);
      // e. IfAbruptCloseIterator(status, iteratorRecord).
      /* c8 ignore if */
      if (status instanceof AbruptCompletion) {
        return IteratorClose(iteratorRecord, status);
      }
      /* c8 ignore if */
      if (status instanceof Completion) {
        status = status.Value;
      }
    }
  }
  WeakSetConstructor.section = 'https://tc39.es/ecma262/#sec-weakset-iterable';
  function bootstrapWeakSet(realmRec) {
    const c = bootstrapConstructor(realmRec, WeakSetConstructor, 'WeakSet', 0, realmRec.Intrinsics['%WeakSet.prototype%'], []);
    realmRec.Intrinsics['%WeakSet%'] = c;
  }

  /** https://tc39.es/ecma262/#sec-aggregate-error-constructor */
  function AggregateErrorConstructor([errors = Value.undefined, message = Value.undefined, options = Value.undefined], {
    NewTarget
  }) {
    // 1. If NewTarget is undefined, let newTarget be the active function object, else let newTarget be NewTarget.
    let newTarget;
    if (NewTarget === Value.undefined) {
      newTarget = exports.surroundingAgent.activeFunctionObject;
    } else {
      newTarget = NewTarget;
    }
    // 2. Let O be ? OrdinaryCreateFromConstructor(newTarget, "%AggregateError.prototype%", « [[ErrorData]] »).
    let _temp = OrdinaryCreateFromConstructor(newTarget, '%AggregateError.prototype%', ['ErrorData']);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const O = _temp;
    // 3. If message is not undefined, then
    if (message !== Value.undefined) {
      let _temp2 = ToString(message);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      // a. Let msg be ? ToString(message).
      const msg = _temp2;
      // b. Perform ! CreateMethodProperty(O, "message", msg).
      let _temp3 = CreateMethodProperty(O, Value('message'), msg);
      Assert(!(_temp3 instanceof AbruptCompletion), "CreateMethodProperty(O, Value('message'), msg)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
    }
    // 4. Let errorsList be ? IterableToList(errors).
    let _temp4 = IterableToList(errors);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const errorsList = _temp4;
    // 5. Perform ! DefinePropertyOrThrow(O, "errors", Property Descriptor { [[Configurable]]: true, [[Enumerable]]: false, [[Writable]]: true, [[Value]]: ! CreateArrayFromList(errorsList) }).
    let _temp8 = CreateArrayFromList(errorsList);
    Assert(!(_temp8 instanceof AbruptCompletion), "CreateArrayFromList(errorsList)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    let _temp5 = DefinePropertyOrThrow(O, Value('errors'), exports.Descriptor({
      Configurable: Value.true,
      Enumerable: Value.false,
      Writable: Value.true,
      Value: _temp8
    }));
    Assert(!(_temp5 instanceof AbruptCompletion), "DefinePropertyOrThrow(O, Value('errors'), Descriptor({\n    Configurable: Value.true,\n    Enumerable: Value.false,\n    Writable: Value.true,\n    Value: X(CreateArrayFromList(errorsList)),\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }

    // 6. Perform ? InstallErrorCause(O, options).
    let _temp6 = InstallErrorCause(O, options);
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }

    // NON-SPEC
    let _temp7 = captureStack(O);
    Assert(!(_temp7 instanceof AbruptCompletion), "captureStack(O)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }

    // 7. Return O.
    return O;
  }
  AggregateErrorConstructor.section = 'https://tc39.es/ecma262/#sec-aggregate-error-constructor';
  function bootstrapAggregateError(realmRec) {
    const c = bootstrapConstructor(realmRec, AggregateErrorConstructor, 'AggregateError', 2, realmRec.Intrinsics['%AggregateError.prototype%'], []);
    c.Prototype = realmRec.Intrinsics['%Error%'];
    realmRec.Intrinsics['%AggregateError%'] = c;
  }

  // @ts-nocheck
  function bootstrapAggregateErrorPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['name', Value('AggregateError')], ['message', Value('')]], realmRec.Intrinsics['%Error.prototype%'], 'AggregateError');
    realmRec.Intrinsics['%AggregateError.prototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-weak-ref.prototype.deref */
  function WeakRefProto_deref(args, {
    thisValue
  }) {
    // 1. Let weakRef be the this value.
    const weakRef = thisValue;
    // 2. Perform ? RequireInternalSlot(weakRef, [[WeakRefTarget]]).
    let _temp = RequireInternalSlot(weakRef, 'WeakRefTarget');
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 3. Return ! WeakRefDeref(weakRef).
    let _temp2 = WeakRefDeref(weakRef);
    Assert(!(_temp2 instanceof AbruptCompletion), "WeakRefDeref(weakRef)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    return _temp2;
  }
  WeakRefProto_deref.section = 'https://tc39.es/ecma262/#sec-weak-ref.prototype.deref';
  function bootstrapWeakRefPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [['deref', WeakRefProto_deref, 0]], realmRec.Intrinsics['%Object.prototype%'], 'WeakRef');
    realmRec.Intrinsics['%WeakRef.prototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-weak-ref-target */
  function WeakRefConstructor([target = Value.undefined], {
    NewTarget
  }) {
    // 1. If NewTarget is undefined, throw a TypeError exception.
    if (NewTarget === Value.undefined) {
      return exports.surroundingAgent.Throw('TypeError', 'ConstructorNonCallable', this);
    }
    // 2. If Type(target) is not Object, throw a TypeError exception.
    if (!(target instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', target);
    }
    // 3. Let weakRef be ? OrdinaryCreateFromConstructor(NewTarget, "%WeakRefPrototype%", « [[WeakRefTarget]] »).
    let _temp = OrdinaryCreateFromConstructor(NewTarget, '%WeakRef.prototype%', ['WeakRefTarget']);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const weakRef = _temp;
    // 4. Perfom ! AddToKeptObjects(target).
    let _temp2 = AddToKeptObjects(target);
    Assert(!(_temp2 instanceof AbruptCompletion), "AddToKeptObjects(target)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 5. Set weakRef.[[WeakRefTarget]] to target.
    weakRef.WeakRefTarget = target;
    // 6. Return weakRef
    return weakRef;
  }
  WeakRefConstructor.section = 'https://tc39.es/ecma262/#sec-weak-ref-target';
  function bootstrapWeakRef(realmRec) {
    const bigintConstructor = bootstrapConstructor(realmRec, WeakRefConstructor, 'WeakRef', 1, realmRec.Intrinsics['%WeakRef.prototype%'], []);
    realmRec.Intrinsics['%WeakRef%'] = bigintConstructor;
  }

  /** https://tc39.es/ecma262/#sec-finalization-registry.prototype.cleanupSome */
  function FinalizationRegistryProto_cleanupSome([callback = Value.undefined], {
    thisValue
  }) {
    // 1. Let finalizationRegistry be the this value.
    const finalizationRegistry = thisValue;
    // 2. Perform ? RequireInternalSlot(finalizationRegistry, [[Cells]]).
    let _temp = RequireInternalSlot(finalizationRegistry, 'Cells');
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 3. If callback is present and IsCallable(callback) is false, throw a TypeError exception.
    if (callback !== Value.undefined && IsCallable(callback) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', callback);
    }
    // 4. Perform ? CleanupFinalizationRegistry(finalizationRegistry, callback).
    let _temp2 = CleanupFinalizationRegistry(finalizationRegistry, callback);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 5. Return *undefined*.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-finalization-registry.prototype.register */
  FinalizationRegistryProto_cleanupSome.section = 'https://tc39.es/ecma262/#sec-finalization-registry.prototype.cleanupSome';
  function FinalizationRegistryProto_register([target = Value.undefined, heldValue = Value.undefined, unregisterToken = Value.undefined], {
    thisValue
  }) {
    // 1. Let finalizationRegistry be the this value.
    const finalizationRegistry = thisValue;
    // 2. Perform ? RequireInternalSlot(finalizationRegistry, [[Cells]]).
    let _temp3 = RequireInternalSlot(finalizationRegistry, 'Cells');
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    // 3. If Type(target) is not Object, throw a TypeError exception.
    if (!(target instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', target);
    }
    // 4. If SameValue(target, heldValue), throw a TypeError exception.
    if (SameValue(target, heldValue) === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'TargetMatchesHeldValue', heldValue);
    }
    // 5. If Type(unregisterToken) is not Object,
    if (!(unregisterToken instanceof ObjectValue)) {
      // a. If unregisterToken is not undefined, throw a TypeError exception.
      if (unregisterToken !== Value.undefined) {
        return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', unregisterToken);
      }
      // b. Set unregisterToken to empty.
      unregisterToken = undefined;
    }
    // 6. Let cell be the Record { [[WeakRefTarget]] : target, [[HeldValue]]: heldValue, [[UnregisterToken]]: unregisterToken }.
    const cell = {
      WeakRefTarget: target,
      HeldValue: heldValue,
      UnregisterToken: unregisterToken
    };
    // 7. Append cell to finalizationRegistry.[[Cells]].
    finalizationRegistry.Cells.push(cell);
    // 8. Return undefined.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-finalization-registry.prototype.unregister */
  FinalizationRegistryProto_register.section = 'https://tc39.es/ecma262/#sec-finalization-registry.prototype.register';
  function FinalizationRegistryProto_unregister([unregisterToken = Value.undefined], {
    thisValue
  }) {
    // 1. Let finalizationRegistry be the this value.
    const finalizationRegistry = thisValue;
    // 2. Perform ? RequireInternalSlot(finalizationRegistry, [[Cells]]).
    let _temp4 = RequireInternalSlot(finalizationRegistry, 'Cells');
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 3. If Type(unregisterToken) is not Object, throw a TypeError exception.
    if (!(unregisterToken instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', unregisterToken);
    }
    // 4. Let removed be false.
    let removed = Value.false;
    // 5. For each Record { [[WeakRefTarget]], [[HeldValue]], [[UnregisterToken]] } cell that is an element of finalizationRegistry.[[Cells]], do
    finalizationRegistry.Cells = finalizationRegistry.Cells.filter(cell => {
      let r = true;
      // a. If cell.[[UnregisterToken]] is not empty and SameValue(cell.[[UnregisterToken]], unregisterToken) is true, then
      if (cell.UnregisterToken !== undefined && SameValue(cell.UnregisterToken, unregisterToken) === Value.true) {
        // i. Remove cell from finalizationRegistry.Cells.
        r = false;
        // ii. Set removed to true.
        removed = Value.true;
      }
      return r;
    });
    // 6. Return removed.
    return removed;
  }
  FinalizationRegistryProto_unregister.section = 'https://tc39.es/ecma262/#sec-finalization-registry.prototype.unregister';
  function bootstrapFinalizationRegistryPrototype(realmRec) {
    const proto = bootstrapPrototype(realmRec, [exports.surroundingAgent.feature('cleanup-some') ? ['cleanupSome', FinalizationRegistryProto_cleanupSome, 0] : undefined, ['register', FinalizationRegistryProto_register, 2], ['unregister', FinalizationRegistryProto_unregister, 1]], realmRec.Intrinsics['%Object.prototype%'], 'FinalizationRegistry');
    realmRec.Intrinsics['%FinalizationRegistry.prototype%'] = proto;
  }

  /** https://tc39.es/ecma262/#sec-finalization-registry-cleanup-callback */
  function FinalizationRegistryConstructor([cleanupCallback = Value.undefined], {
    NewTarget
  }) {
    // 1. If NewTarget is undefined, throw a TypeError exception.
    if (NewTarget === Value.undefined) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', 'FinalizationRegistry');
    }
    // 2. If IsCallable(cleanupCallback) is false, throw a TypeError exception.
    if (IsCallable(cleanupCallback) === Value.false) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', cleanupCallback);
    }
    // 3. Let finalizationGroup be ? OrdinaryCreateFromConstructor(NewTarget, "%FinalizationRegistryPrototype%", « [[Realm]], [[CleanupCallback]], [[Cells]] »).
    let _temp = OrdinaryCreateFromConstructor(NewTarget, '%FinalizationRegistry.prototype%', ['Realm', 'CleanupCallback', 'Cells']);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const finalizationGroup = _temp;
    // 4. Let fn be the active function object.
    const fn = exports.surroundingAgent.activeFunctionObject;
    // 5. Set finalizationGroup.[[Realm]] to fn.[[Realm]].
    finalizationGroup.Realm = fn.Realm;
    // 6. Set finalizationGroup.[[CleanupCallback]] to HostMakeJobCallback(cleanupCallback).
    finalizationGroup.CleanupCallback = HostMakeJobCallback(cleanupCallback);
    // 7. Set finalizationGroup.[[Cells]] to be an empty List.
    finalizationGroup.Cells = [];
    // 8. Return finalizationGroup.
    return finalizationGroup;
  }
  FinalizationRegistryConstructor.section = 'https://tc39.es/ecma262/#sec-finalization-registry-cleanup-callback';
  function bootstrapFinalizationRegistry(realmRec) {
    const cons = bootstrapConstructor(realmRec, FinalizationRegistryConstructor, 'FinalizationRegistry', 1, realmRec.Intrinsics['%FinalizationRegistry.prototype%'], []);
    realmRec.Intrinsics['%FinalizationRegistry%'] = cons;
  }

  /** https://tc39.es/ecma262/#sec-code-realms */
  class Realm {
    Intrinsics;
    GlobalObject;
    GlobalEnv;
    TemplateMap;
    LoadedModules;
    HostDefined;
    randomState;
    mark(m) {
      m(this.GlobalObject);
      m(this.GlobalEnv);
      for (const v of Object.values(this.Intrinsics)) {
        m(v);
      }
      for (const v of Object.values(this.TemplateMap)) {
        m(v);
      }
      for (const v of this.LoadedModules) {
        m(v.Module);
      }
    }
  }

  /** https://tc39.es/ecma262/#sec-createrealm */
  function CreateRealm() {
    const realmRec = new Realm();
    CreateIntrinsics(realmRec);
    realmRec.GlobalObject = Value.undefined;
    realmRec.GlobalEnv = Value.undefined;
    realmRec.TemplateMap = [];
    realmRec.LoadedModules = [];
    return realmRec;
  }
  function AddRestrictedFunctionProperties(F, realm) {
    Assert(realm.Intrinsics['%ThrowTypeError%'], "realm.Intrinsics['%ThrowTypeError%']");
    const thrower = realm.Intrinsics['%ThrowTypeError%'];
    let _temp = DefinePropertyOrThrow(F, Value('caller'), exports.Descriptor({
      Get: thrower,
      Set: thrower,
      Enumerable: Value.false,
      Configurable: Value.true
    }));
    Assert(!(_temp instanceof AbruptCompletion), "DefinePropertyOrThrow(F, Value('caller'), Descriptor({\n    Get: thrower,\n    Set: thrower,\n    Enumerable: Value.false,\n    Configurable: Value.true,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    let _temp2 = DefinePropertyOrThrow(F, Value('arguments'), exports.Descriptor({
      Get: thrower,
      Set: thrower,
      Enumerable: Value.false,
      Configurable: Value.true
    }));
    Assert(!(_temp2 instanceof AbruptCompletion), "DefinePropertyOrThrow(F, Value('arguments'), Descriptor({\n    Get: thrower,\n    Set: thrower,\n    Enumerable: Value.false,\n    Configurable: Value.true,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
  }

  /** https://tc39.es/ecma262/#sec-createintrinsics */
  function CreateIntrinsics(realmRec) {
    const intrinsics = Object.create(null);
    realmRec.Intrinsics = intrinsics;
    intrinsics['%Object.prototype%'] = OrdinaryObjectCreate(Value.null);
    bootstrapFunctionPrototype(realmRec);
    bootstrapObjectPrototype(realmRec);
    bootstrapThrowTypeError(realmRec);
    bootstrapEval(realmRec);
    bootstrapIsFinite(realmRec);
    bootstrapIsNaN(realmRec);
    bootstrapParseFloat(realmRec);
    bootstrapParseInt(realmRec);
    bootstrapURIHandling(realmRec);
    bootstrapObject(realmRec);
    bootstrapErrorPrototype(realmRec);
    bootstrapError(realmRec);
    bootstrapNativeError(realmRec);
    bootstrapAggregateErrorPrototype(realmRec);
    bootstrapAggregateError(realmRec);
    bootstrapFunction(realmRec);
    bootstrapIteratorPrototype(realmRec);
    bootstrapAsyncIteratorPrototype(realmRec);
    bootstrapArrayIteratorPrototype(realmRec);
    bootstrapMapIteratorPrototype(realmRec);
    bootstrapSetIteratorPrototype(realmRec);
    bootstrapStringIteratorPrototype(realmRec);
    bootstrapRegExpStringIteratorPrototype(realmRec);
    bootstrapForInIteratorPrototype(realmRec);
    bootstrapStringPrototype(realmRec);
    bootstrapString(realmRec);
    bootstrapArrayPrototype(realmRec);
    bootstrapArray(realmRec);
    bootstrapBooleanPrototype(realmRec);
    bootstrapBoolean(realmRec);
    bootstrapNumberPrototype(realmRec);
    bootstrapNumber(realmRec);
    bootstrapBigIntPrototype(realmRec);
    bootstrapBigInt(realmRec);
    bootstrapSymbolPrototype(realmRec);
    bootstrapSymbol(realmRec);
    bootstrapPromisePrototype(realmRec);
    bootstrapPromise(realmRec);
    bootstrapProxy(realmRec);
    bootstrapReflect(realmRec);
    bootstrapMath(realmRec);
    bootstrapDatePrototype(realmRec);
    bootstrapDate(realmRec);
    bootstrapRegExpPrototype(realmRec);
    bootstrapRegExp(realmRec);
    bootstrapSetPrototype(realmRec);
    bootstrapSet(realmRec);
    bootstrapMapPrototype(realmRec);
    bootstrapMap(realmRec);
    bootstrapGeneratorFunctionPrototypePrototype(realmRec);
    bootstrapGeneratorFunctionPrototype(realmRec);
    bootstrapGeneratorFunction(realmRec);
    bootstrapAsyncFunctionPrototype(realmRec);
    bootstrapAsyncFunction(realmRec);
    bootstrapAsyncGeneratorFunctionPrototypePrototype(realmRec);
    bootstrapAsyncGeneratorFunctionPrototype(realmRec);
    bootstrapAsyncGeneratorFunction(realmRec);
    bootstrapAsyncFromSyncIteratorPrototype(realmRec);
    bootstrapArrayBufferPrototype(realmRec);
    bootstrapArrayBuffer(realmRec);
    bootstrapTypedArrayPrototype(realmRec);
    bootstrapTypedArray(realmRec);
    bootstrapTypedArrayPrototypes(realmRec);
    bootstrapTypedArrayConstructors(realmRec);
    bootstrapDataViewPrototype(realmRec);
    bootstrapDataView(realmRec);
    bootstrapJSON(realmRec);
    bootstrapWeakMapPrototype(realmRec);
    bootstrapWeakMap(realmRec);
    bootstrapWeakSetPrototype(realmRec);
    bootstrapWeakSet(realmRec);
    bootstrapWeakRefPrototype(realmRec);
    bootstrapWeakRef(realmRec);
    bootstrapFinalizationRegistryPrototype(realmRec);
    bootstrapFinalizationRegistry(realmRec);
    AddRestrictedFunctionProperties(intrinsics['%Function.prototype%'], realmRec);
    return intrinsics;
  }

  /** https://tc39.es/ecma262/#sec-setrealmglobalobject */
  function SetRealmGlobalObject(realmRec, globalObj, thisValue) {
    const intrinsics = realmRec.Intrinsics;
    if (globalObj === Value.undefined) {
      globalObj = OrdinaryObjectCreate(intrinsics['%Object.prototype%']);
    }
    if (thisValue === Value.undefined) {
      thisValue = globalObj;
    }
    realmRec.GlobalObject = globalObj;
    const newGlobalEnv = new GlobalEnvironmentRecord(globalObj, thisValue);
    realmRec.GlobalEnv = newGlobalEnv;
    return realmRec;
  }

  /** https://tc39.es/ecma262/#sec-setdefaultglobalbindings */
  function SetDefaultGlobalBindings(realmRec) {
    const global = realmRec.GlobalObject;

    // Value Properties of the Global Object
    [['Infinity', F(Infinity)], ['NaN', F(NaN)], ['undefined', Value.undefined]].forEach(([name, value]) => {
      let _temp3 = DefinePropertyOrThrow(global, Value(name), exports.Descriptor({
        Value: value,
        Writable: Value.false,
        Enumerable: Value.false,
        Configurable: Value.false
      }));
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
    });
    let _temp4 = DefinePropertyOrThrow(global, Value('globalThis'), exports.Descriptor({
      Value: realmRec.GlobalEnv.GlobalThisValue,
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.true
    }));
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    [
    // Function Properties of the Global Object
    'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent',
    // Constructor Properties of the Global Object
    'AggregateError', 'Array', 'ArrayBuffer', 'Boolean', 'BigInt', 'BigInt64Array', 'BigUint64Array', 'DataView', 'Date', 'Error', 'EvalError', 'FinalizationRegistry', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Number', 'Object', 'Promise', 'Proxy', 'RangeError', 'ReferenceError', 'RegExp', 'Set',
    // 'SharedArrayBuffer',
    'String', 'Symbol', 'SyntaxError', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'URIError', 'WeakMap', 'WeakRef', 'WeakSet',
    // Other Properties of the Global Object
    // 'Atomics',
    'JSON', 'Math', 'Reflect'].forEach(name => {
      let _temp5 = DefinePropertyOrThrow(global, Value(name), exports.Descriptor({
        Value: realmRec.Intrinsics[`%${name}%`],
        Writable: Value.true,
        Enumerable: Value.false,
        Configurable: Value.true
      }));
      /* c8 ignore if */
      if (_temp5 instanceof AbruptCompletion) {
        return _temp5;
      }
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
    });
    return global;
  }

  /** https://tc39.es/ecma262/#sec-ispropertyreference */
  function IsPropertyReference(V) {
    // 1. If V.[[Base]] is unresolvable, return false.
    if (V.Base === 'unresolvable') {
      return Value.false;
    }
    // 2. If V.[[Base]] is an Environment Record, return false; otherwise return true.
    return V.Base instanceof EnvironmentRecord ? Value.false : Value.true;
  }

  /** https://tc39.es/ecma262/#sec-isunresolvablereference */
  function IsUnresolvableReference(V) {
    // 1. Assert: V is a Reference Record.
    Assert(V instanceof ReferenceRecord, "V instanceof ReferenceRecord");
    // 2. If V.[[Base]] is unresolvable, return true; otherwise return false.
    return V.Base === 'unresolvable' ? Value.true : Value.false;
  }

  /** https://tc39.es/ecma262/#sec-issuperreference */
  function IsSuperReference(V) {
    // 1. Assert: V is a Reference Record.
    Assert(V instanceof ReferenceRecord, "V instanceof ReferenceRecord");
    // 2. If V.[[ThisValue]] is not empty, return true; otherwise return false.
    return V.ThisValue !== undefined ? Value.true : Value.false;
  }

  /** https://tc39.es/ecma262/#sec-isprivatereference */
  function IsPrivateReference(V) {
    // 1. Assert: V is a Reference Record.
    Assert(V instanceof ReferenceRecord, "V instanceof ReferenceRecord");
    // 2. If V.[[ReferencedName]] is a Private Name, return true; otherwise return false.
    return V.ReferencedName instanceof PrivateName ? Value.true : Value.false;
  }

  /** https://tc39.es/ecma262/#sec-getvalue */
  function GetValue(V) {
    /* c8 ignore if */
    if (V instanceof AbruptCompletion) {
      return V;
    }
    /* c8 ignore if */
    if (V instanceof Completion) {
      V = V.Value;
    }
    // 2. If V is not a Reference Record, return V.
    if (!(V instanceof ReferenceRecord)) {
      return V;
    }
    // 3. If IsUnresolvableReference(V) is true, throw a ReferenceError exception.
    if (IsUnresolvableReference(V) === Value.true) {
      return exports.surroundingAgent.Throw('ReferenceError', 'NotDefined', V.ReferencedName);
    }
    // 4. If IsPropertyReference(V) is true, then
    if (IsPropertyReference(V) === Value.true) {
      let _temp = ToObject(V.Base);
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      // a. Let baseObj be ? ToObject(V.[[Base]]).
      const baseObj = _temp;
      // b. If IsPrivateReference(V) is true, then
      if (IsPrivateReference(V) === Value.true) {
        // i. Return ? PrivateGet(V.[[ReferencedName]], baseObj).
        return PrivateGet(V.ReferencedName, baseObj);
      }
      // c. Return ? baseObj.[[Get]](V.[[ReferencedName]], GetThisValue(V)).
      return baseObj.Get(V.ReferencedName, GetThisValue(V));
    } else {
      // 5. Else,
      // a. Let base be V.[[Base]].
      const base = V.Base;
      // b. Assert: base is an Environment Record.
      Assert(base instanceof EnvironmentRecord, "base instanceof EnvironmentRecord");
      // c. Return ? base.GetBindingValue(V.[[ReferencedName]], V.[[Strict]]).
      return base.GetBindingValue(V.ReferencedName, V.Strict);
    }
  }

  /** https://tc39.es/ecma262/#sec-putvalue */
  function PutValue(V, W) {
    /* c8 ignore if */
    if (V instanceof AbruptCompletion) {
      return V;
    }
    /* c8 ignore if */
    if (V instanceof Completion) {
      V = V.Value;
    }
    // 2. ReturnIfAbrupt(W).
    /* c8 ignore if */
    if (W instanceof AbruptCompletion) {
      return W;
    }
    /* c8 ignore if */
    if (W instanceof Completion) {
      W = W.Value;
    }
    // 3. If V is not a Reference Record, throw a ReferenceError exception.
    if (!(V instanceof ReferenceRecord)) {
      return exports.surroundingAgent.Throw('ReferenceError', 'InvalidAssignmentTarget');
    }
    // 4. If IsUnresolvableReference(V) is true, then
    if (IsUnresolvableReference(V) === Value.true) {
      // a. If V.[[Strict]] is true, throw a ReferenceError exception.
      if (V.Strict === Value.true) {
        return exports.surroundingAgent.Throw('ReferenceError', 'NotDefined', V.ReferencedName);
      }
      // b. Let globalObj be GetGlobalObject().
      const globalObj = GetGlobalObject();
      // c. Return ? Set(globalObj, V.[[ReferencedName]], W, false).
      return Set$1(globalObj, V.ReferencedName, W, Value.false);
    }
    // 5. If IsPropertyReference(V) is true, then
    if (IsPropertyReference(V) === Value.true) {
      let _temp2 = ToObject(V.Base);
      Assert(!(_temp2 instanceof AbruptCompletion), "ToObject(V.Base)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      // a. Let baseObj be ! ToObject(V.[[Base]]).
      const baseObj = _temp2;
      // b. If IsPrivateReference(V) is true, then
      if (IsPrivateReference(V) === Value.true) {
        // i. Return ? PrivateSet(V.[[ReferencedName]], baseObj, W).
        return PrivateSet(V.ReferencedName, baseObj, W);
      }
      // c. Let succeeded be ? baseObj.[[Set]](V.[[ReferencedName]], W, GetThisValue(V)).
      let _temp3 = baseObj.Set(V.ReferencedName, W, GetThisValue(V));
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      const succeeded = _temp3;
      // d. If succeeded is false and V.[[Strict]] is true, throw a TypeError exception.
      if (succeeded === Value.false && V.Strict === Value.true) {
        return exports.surroundingAgent.Throw('TypeError', 'CannotSetProperty', V.ReferencedName, V.Base);
      }
      // e. Return.
      return NormalCompletion(Value.undefined);
    } else {
      // 6. Else,
      // a. Let base be V.[[Base]].
      const base = V.Base;
      // b. Assert: base is an Environment Record.
      Assert(base instanceof EnvironmentRecord, "base instanceof EnvironmentRecord");
      // c. Return ? base.SetMutableBinding(V.[[ReferencedName]], W, V.[[Strict]]) (see 9.1).
      return base.SetMutableBinding(V.ReferencedName, W, V.Strict);
    }
  }

  /** https://tc39.es/ecma262/#sec-getthisvalue */
  function GetThisValue(V) {
    // 1. Assert: IsPropertyReference(V) is true.
    Assert(IsPropertyReference(V) === Value.true, "IsPropertyReference(V) === Value.true");
    // 2. If IsSuperReference(V) is true, return V.[[ThisValue]]; otherwise return V.[[Base]].
    if (IsSuperReference(V) === Value.true) {
      return V.ThisValue;
    } else {
      return V.Base;
    }
  }

  /** https://tc39.es/ecma262/#sec-initializereferencedbinding */
  function InitializeReferencedBinding(V, W) {
    /* c8 ignore if */
    if (V instanceof AbruptCompletion) {
      return V;
    }
    /* c8 ignore if */
    if (V instanceof Completion) {
      V = V.Value;
    }
    // 2. ReturnIfAbrupt(W).
    /* c8 ignore if */
    if (W instanceof AbruptCompletion) {
      return W;
    }
    /* c8 ignore if */
    if (W instanceof Completion) {
      W = W.Value;
    }
    // 3. Assert: V is a Reference Record.
    Assert(V instanceof ReferenceRecord, "V instanceof ReferenceRecord");
    // 4. Assert: IsUnresolvableReference(V) is false.
    Assert(IsUnresolvableReference(V) === Value.false, "IsUnresolvableReference(V) === Value.false");
    // 5. Let base be V.[[Base]].
    const base = V.Base;
    // 6. Assert: base is an Environment Record.
    Assert(base instanceof EnvironmentRecord, "base instanceof EnvironmentRecord");
    // 7. Return base.InitializeBinding(V.[[ReferencedName]], W).
    return base.InitializeBinding(V.ReferencedName, W);
  }

  /** https://tc39.es/ecma262/#sec-makeprivatereference */
  function MakePrivateReference(baseValue, privateIdentifier) {
    // 1. Let privEnv be the running execution context's PrivateEnvironment.
    const privEnv = exports.surroundingAgent.runningExecutionContext.PrivateEnvironment;
    // 2. Assert: privEnv is not null.
    Assert(privEnv !== Value.null, "privEnv !== Value.null");
    // 3. Let privateName be ! ResolvePrivateIdentifier(privEnv, privateIdentifier).
    let _temp4 = ResolvePrivateIdentifier(privEnv, privateIdentifier);
    Assert(!(_temp4 instanceof AbruptCompletion), "ResolvePrivateIdentifier(privEnv, privateIdentifier)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    const privateName = _temp4;
    // 4. Return the Reference Record { [[Base]]: baseValue, [[ReferencedName]]: privateName, [[Strict]]: true, [[ThisValue]]: empty }.
    return new ReferenceRecord({
      Base: baseValue,
      ReferencedName: privateName,
      Strict: Value.true,
      ThisValue: undefined
    });
  }

  /** https://tc39.es/ecma262/#sec-resolve-private-identifier */
  function ResolvePrivateIdentifier(privEnv, identifier) {
    // 1. Let names be privEnv.[[Names]].
    const names = privEnv.Names;
    // 2. If names contains a Private Name whose [[Description]] is identifier, then
    const name = names.find(n => n.Description.stringValue() === identifier.stringValue());
    if (name) {
      // a. Let name be that Private Name.
      // b. Return name.
      return name;
    } else {
      // 3. Else,
      // a. Let outerPrivEnv be privEnv.[[OuterPrivateEnvironment]].
      const outerPrivEnv = privEnv.OuterPrivateEnvironment;
      // b. Assert: outerPrivEnv is not null.
      Assert(outerPrivEnv !== Value.null, "outerPrivEnv !== Value.null");
      // c. Return ResolvePrivateIdentifier(outerPrivEnv, identifier).
      return ResolvePrivateIdentifier(outerPrivEnv, identifier);
    }
  }

  /** https://tc39.es/ecma262/#sec-regexpalloc */
  function RegExpAlloc(newTarget) {
    let _temp = OrdinaryCreateFromConstructor(newTarget, '%RegExp.prototype%', ['RegExpMatcher', 'OriginalSource', 'OriginalFlags']);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const obj = _temp;
    let _temp2 = DefinePropertyOrThrow(obj, Value('lastIndex'), exports.Descriptor({
      Writable: Value.true,
      Enumerable: Value.false,
      Configurable: Value.false
    }));
    Assert(!(_temp2 instanceof AbruptCompletion), "DefinePropertyOrThrow(obj, Value('lastIndex'), Descriptor({\n    Writable: Value.true,\n    Enumerable: Value.false,\n    Configurable: Value.false,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    return obj;
  }

  /** https://tc39.es/ecma262/#sec-regexpinitialize */
  function RegExpInitialize(obj, pattern, flags) {
    let P;
    // 1. If pattern is undefined, let P be the empty String.
    if (pattern === Value.undefined) {
      P = Value('');
    } else {
      let _temp3 = ToString(pattern);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      // 2. Else, let P be ? ToString(pattern).
      P = _temp3;
    }
    let F$1;
    // 3. If flags is undefined, let F be the empty String.
    if (flags === Value.undefined) {
      F$1 = Value('');
    } else {
      let _temp4 = ToString(flags);
      /* c8 ignore if */
      if (_temp4 instanceof AbruptCompletion) {
        return _temp4;
      }
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      // 4. Else, let F be ? ToString(flags).
      F$1 = _temp4;
    }
    const f = F$1.stringValue();
    // 5. If F contains any code unit other than "d", "g", "i", "m", "s", "u", or "y" or if it contains the same code unit more than once, throw a SyntaxError exception.
    if (/^[dgimsuy]*$/.test(f) === false || new globalThis.Set(f).size !== f.length) {
      return exports.surroundingAgent.Throw('SyntaxError', 'InvalidRegExpFlags', f);
    }
    // 6. If F contains "u", let u be true; else let u be false.
    const u = f.includes('u');
    // 7. If u is true, then
    //   a. Let patternText be ! UTF16DecodeString(P).
    //   b. Let patternCharacters be a List whose elements are the code points of patternText.
    // 8. Else,
    //   a. Let patternText be the result of interpreting each of P's 16-bit elements as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.
    //   b. Let patternCharacters be a List whose elements are the code unit elements of P.
    // 9. Let parseResult be ParsePattern(patternText, u).
    const patternText = P.stringValue();
    const parseResult = ParsePattern(patternText, u);
    // 10. If parseResult is a non-empty List of SyntaxError objects, throw a SyntaxError exception.
    if (Array.isArray(parseResult)) {
      return exports.surroundingAgent.Throw(parseResult[0]);
    }
    obj.parsedPattern = parseResult;
    // 11. Assert: parseResult is a Parse Node for Pattern.
    Assert(parseResult.type === 'Pattern', "parseResult.type === 'Pattern'");
    // 12. Set obj.[[OriginalSource]] to P.
    obj.OriginalSource = P;
    // 13. Set obj.[[OriginalFlags]] to F.
    obj.OriginalFlags = F$1;
    // 14. Set obj.[[RegExpMatcher]] to the Abstract Closure that evaluates parseResult by
    //     applying the semantics provided in 21.2.2 using patternCharacters as the pattern's
    //     List of SourceCharacter values and F as the flag parameters.
    const evaluatePattern = exports.surroundingAgent.hostDefinedOptions.boost?.evaluatePattern || Evaluate_Pattern;
    obj.RegExpMatcher = evaluatePattern(parseResult, F$1.stringValue());
    // 15. Perform ? Set(obj, "lastIndex", +0𝔽, true).
    let _temp5 = Set$1(obj, Value('lastIndex'), F(+0), Value.true);
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    // 16. Return obj.
    return obj;
  }

  /** https://tc39.es/ecma262/#sec-regexpcreate */
  function RegExpCreate(P, F) {
    let _temp6 = RegExpAlloc(exports.surroundingAgent.intrinsic('%RegExp%'));
    /* c8 ignore if */
    if (_temp6 instanceof AbruptCompletion) {
      return _temp6;
    }
    /* c8 ignore if */
    if (_temp6 instanceof Completion) {
      _temp6 = _temp6.Value;
    }
    const obj = _temp6;
    return RegExpInitialize(obj, P, F);
  }

  /** https://tc39.es/ecma262/#sec-escaperegexppattern */
  function EscapeRegExpPattern(P, _F) {
    const source = P.stringValue();
    if (source === '') {
      return Value('(:?)');
    }
    let index = 0;
    let escaped = '';
    let inClass = false;
    while (index < source.length) {
      const c = source[index];
      switch (c) {
        case '\\':
          index += 1;
          if (isLineTerminator(source[index])) ; else {
            escaped += '\\';
          }
          break;
        case '/':
          index += 1;
          if (inClass) {
            escaped += '/';
          } else {
            escaped += '\\/';
          }
          break;
        case '[':
          inClass = true;
          index += 1;
          escaped += '[';
          break;
        case ']':
          inClass = false;
          index += 1;
          escaped += ']';
          break;
        case '\n':
          index += 1;
          escaped += '\\n';
          break;
        case '\r':
          index += 1;
          escaped += '\\r';
          break;
        case '\u2028':
          index += 1;
          escaped += '\\u2028';
          break;
        case '\u2029':
          index += 1;
          escaped += '\\u2029';
          break;
        default:
          index += 1;
          escaped += c;
          break;
      }
    }
    return Value(escaped);
  }

  /** https://tc39.es/ecma262/#sec-getstringindex */
  function GetStringIndex(S, Input, e) {
    // 1. Assert: Type(S) is String.
    Assert(S instanceof JSStringValue, "S instanceof JSStringValue");
    // 2. Assert: Input is a List of the code points of S interpreted as a UTF-16 encoded string.
    Assert(Array.isArray(Input), "Array.isArray(Input)");
    // 3. Assert: e is an integer value ≥ 0.
    Assert(e >= 0, "e >= 0");
    // 4. If S is the empty String, return 0.
    if (S.stringValue() === '') {
      return 0;
    }
    // 5. Let eUTF be the smallest index into S that corresponds to the character at element e of Input.
    //    If e is greater than or equal to the number of elements in Input, then eUTF is the number of code units in S.
    let eUTF = 0;
    if (e >= Input.length) {
      eUTF = S.stringValue().length;
    } else {
      for (let i = 0; i < e; i += 1) {
        eUTF += Input[i].length;
      }
    }
    // 6. Return eUTF.
    return eUTF;
  }

  /** https://tc39.es/ecma262/#sec-getmatchstring */
  function GetMatchString(S, match) {
    // 1. Assert: Type(S) is String.
    Assert(S instanceof JSStringValue, "S instanceof JSStringValue");
    // 2. Assert: match is a Match Record.
    Assert('StartIndex' in match && 'EndIndex' in match, "'StartIndex' in match && 'EndIndex' in match");
    // 3. Assert: match.[[StartIndex]] is an integer value ≥ 0 and ≤ the length of S.
    Assert(match.StartIndex >= 0 && match.StartIndex <= S.stringValue().length, "match.StartIndex >= 0 && match.StartIndex <= S.stringValue().length");
    // 4. Assert: match.[[EndIndex]] is an integer value ≥ match.[[StartIndex]] and ≤ the length of S.
    Assert(match.EndIndex >= match.StartIndex && match.EndIndex <= S.stringValue().length, "match.EndIndex >= match.StartIndex && match.EndIndex <= S.stringValue().length");
    // 5. Return the portion of S between offset match.[[StartIndex]] inclusive and offset match.[[EndIndex]] exclusive.
    return Value(S.stringValue().slice(match.StartIndex, match.EndIndex));
  }

  /** https://tc39.es/ecma262/#sec-getmatchindexpair */
  function GetMatchIndexPair(S, match) {
    // 1. Assert: Type(S) is String.
    Assert(S instanceof JSStringValue, "S instanceof JSStringValue");
    // 2. Assert: match is a Match Record.
    Assert('StartIndex' in match && 'EndIndex' in match, "'StartIndex' in match && 'EndIndex' in match");
    // 3. Assert: match.[[StartIndex]] is an integer value ≥ 0 and ≤ the length of S.
    Assert(match.StartIndex >= 0 && match.StartIndex <= S.stringValue().length, "match.StartIndex >= 0 && match.StartIndex <= S.stringValue().length");
    // 4. Assert: match.[[EndIndex]] is an integer value ≥ match.[[StartIndex]] and ≤ the length of S.
    Assert(match.EndIndex >= match.StartIndex && match.EndIndex <= S.stringValue().length, "match.EndIndex >= match.StartIndex && match.EndIndex <= S.stringValue().length");
    // 1. Return CreateArrayFromList(« 𝔽(match.[[StartIndex]]), 𝔽(match.[[EndIndex]]) »).
    return CreateArrayFromList([F(match.StartIndex), F(match.EndIndex)]);
  }

  /** https://tc39.es/ecma262/#sec-makematchindicesindexpairarray */
  function MakeMatchIndicesIndexPairArray(S, indices, groupNames, hasGroups) {
    // 1. Assert: Type(S) is String.
    Assert(S instanceof JSStringValue, "S instanceof JSStringValue");
    // 2. Assert: indices is a List.
    Assert(Array.isArray(indices), "Array.isArray(indices)");
    // 3. Let n be the number of elements in indices.
    const n = indices.length;
    // 4. Assert: n < 2**32-1.
    Assert(n < 2 ** 32 - 1, "n < (2 ** 32) - 1");
    // 5. Assert: groupNames is a List with _n_ - 1 elements.
    Assert(Array.isArray(groupNames) && groupNames.length === n - 1, "Array.isArray(groupNames) && groupNames.length === n - 1");
    // 6. NOTE: The groupNames List contains elements aligned with the indices List starting at indices[1].
    // 7. Assert: Type(hasGroups) is Boolean.
    Assert(hasGroups instanceof BooleanValue, "hasGroups instanceof BooleanValue");
    // 8. Set A to ! ArrayCreate(n).
    // 9. Assert: The value of A's "length" property is n.
    let _temp7 = ArrayCreate(n);
    Assert(!(_temp7 instanceof AbruptCompletion), "ArrayCreate(n)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    const A = _temp7;
    // 10. If hasGroups is true, then
    let groups;
    if (hasGroups === Value.true) {
      let _temp8 = OrdinaryObjectCreate(Value.null);
      Assert(!(_temp8 instanceof AbruptCompletion), "OrdinaryObjectCreate(Value.null)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp8 instanceof Completion) {
        _temp8 = _temp8.Value;
      }
      // a. Let groups be ! ObjectCreate(null).
      groups = _temp8;
    } else {
      // 9. Else,
      // b. Let groups be undefined.
      groups = Value.undefined;
    }
    // 11. Perform ! CreateDataProperty(A, "groups", groups).
    let _temp9 = CreateDataPropertyOrThrow(A, Value('groups'), groups);
    Assert(!(_temp9 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(A, Value('groups'), groups)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    // 12. For each integer i such that i ≥ 0 and i < n, do
    for (let i = 0; i < n; i += 1) {
      // a. Let matchIndices be indices[i].
      const matchIndices = indices[i];
      // b. If matchIndices is not undefined, then
      let matchIndicesArray;
      if (matchIndices !== Value.undefined) {
        let _temp10 = GetMatchIndexPair(S, matchIndices);
        Assert(!(_temp10 instanceof AbruptCompletion), "GetMatchIndexPair(S, matchIndices)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp10 instanceof Completion) {
          _temp10 = _temp10.Value;
        }
        // i. Let matchIndicesArray be ! GetMatchIndexPair(S, matchIndices).
        matchIndicesArray = _temp10;
      } else {
        // c. Else,
        // i. Let matchIndicesArray be undefined.
        matchIndicesArray = Value.undefined;
      }
      // d. Perform ! CreateDataProperty(A, ! ToString(𝔽(i)), matchIndicesArray).
      let _temp13 = ToString(F(i));
      Assert(!(_temp13 instanceof AbruptCompletion), "ToString(toNumberValue(i))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp13 instanceof Completion) {
        _temp13 = _temp13.Value;
      }
      let _temp11 = CreateDataPropertyOrThrow(A, _temp13, matchIndicesArray);
      Assert(!(_temp11 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(A, X(ToString(toNumberValue(i))), matchIndicesArray)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp11 instanceof Completion) {
        _temp11 = _temp11.Value;
      }
      // e. If i > 0 and groupNames[i - 1] is not undefined, then
      if (i > 0 && groupNames[i - 1] !== Value.undefined) {
        let _temp12 = CreateDataPropertyOrThrow(groups, groupNames[i - 1], matchIndicesArray);
        Assert(!(_temp12 instanceof AbruptCompletion), "CreateDataPropertyOrThrow(groups, groupNames[i - 1], matchIndicesArray)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp12 instanceof Completion) {
          _temp12 = _temp12.Value;
        }
      }
    }
    // 13. Return A.
    return A;
  }

  /** https://tc39.es/ecma262/#sec-regexphasflag */
  function RegExpHasFlag(R, codeUnit) {
    // 1. If Type(R) is not Object, throw a TypeError exception.
    if (!(R instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'RegExp', R);
    }
    // 2. If R does not have an [[OriginalFlags]] internal slot, then
    if (!('OriginalFlags' in R)) {
      // a. If SameValue(R, %RegExp.prototype%) is true, return undefined.
      if (SameValue(R, exports.surroundingAgent.intrinsic('%RegExp.prototype%')) === Value.true) {
        return Value.undefined;
      }
      // b. Otherwise, throw a TypeError exception.
      return exports.surroundingAgent.Throw('TypeError', 'NotATypeObject', 'RegExp', R);
    }
    // 3. Let flags be R.[[OriginalFlags]].
    const flags = R.OriginalFlags.stringValue();
    // 4. If flags contains codeUnit, return true.
    if (flags.includes(codeUnit)) {
      return Value.true;
    }
    // 5. Return false.
    return Value.false;
  }

  // #𝔽
  function F(x) {
    Assert(typeof x === 'number', "typeof x === 'number'");
    return new NumberValue(x);
  }

  // #ℤ
  function Z(x) {
    Assert(typeof x === 'bigint', "typeof x === 'bigint'");
    return new BigIntValue(x);
  }

  // #ℝ

  function R(x) {
    if (x instanceof BigIntValue) {
      return x.bigintValue(); // eslint-disable-line @engine262/mathematical-value
    }
    Assert(x instanceof NumberValue, "x instanceof NumberValue");
    return x.numberValue(); // eslint-disable-line @engine262/mathematical-value
  }

  // 6.2.5.1 IsAccessorDescriptor
  function IsAccessorDescriptor(Desc) {
    if (Desc instanceof UndefinedValue) {
      return false;
    }
    if (Desc.Get === undefined && Desc.Set === undefined) {
      return false;
    }
    return true;
  }

  // 6.2.5.2 IsDataDescriptor
  function IsDataDescriptor(Desc) {
    if (Desc instanceof UndefinedValue) {
      return false;
    }
    if (Desc.Value === undefined && Desc.Writable === undefined) {
      return false;
    }
    return true;
  }

  // 6.2.5.3 IsGenericDescriptor
  function IsGenericDescriptor(Desc) {
    if (Desc instanceof UndefinedValue) {
      return false;
    }
    if (!IsAccessorDescriptor(Desc) && !IsDataDescriptor(Desc)) {
      return true;
    }
    return false;
  }

  /** https://tc39.es/ecma262/#sec-frompropertydescriptor */
  function FromPropertyDescriptor(Desc) {
    if (Desc instanceof UndefinedValue) {
      return Value.undefined;
    }
    const obj = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%Object.prototype%'));
    if (Desc.Value !== undefined) {
      let _temp = CreateDataProperty(obj, Value('value'), Desc.Value);
      Assert(!(_temp instanceof AbruptCompletion), "CreateDataProperty(obj, Value('value'), Desc.Value)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
    }
    if (Desc.Writable !== undefined) {
      let _temp2 = CreateDataProperty(obj, Value('writable'), Desc.Writable);
      Assert(!(_temp2 instanceof AbruptCompletion), "CreateDataProperty(obj, Value('writable'), Desc.Writable)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
    }
    if (Desc.Get !== undefined) {
      let _temp3 = CreateDataProperty(obj, Value('get'), Desc.Get);
      Assert(!(_temp3 instanceof AbruptCompletion), "CreateDataProperty(obj, Value('get'), Desc.Get)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
    }
    if (Desc.Set !== undefined) {
      let _temp4 = CreateDataProperty(obj, Value('set'), Desc.Set);
      Assert(!(_temp4 instanceof AbruptCompletion), "CreateDataProperty(obj, Value('set'), Desc.Set)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
    }
    if (Desc.Enumerable !== undefined) {
      let _temp5 = CreateDataProperty(obj, Value('enumerable'), Desc.Enumerable);
      Assert(!(_temp5 instanceof AbruptCompletion), "CreateDataProperty(obj, Value('enumerable'), Desc.Enumerable)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
    }
    if (Desc.Configurable !== undefined) {
      let _temp6 = CreateDataProperty(obj, Value('configurable'), Desc.Configurable);
      Assert(!(_temp6 instanceof AbruptCompletion), "CreateDataProperty(obj, Value('configurable'), Desc.Configurable)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
    }
    // Assert: All of the above CreateDataProperty operations return true.
    return obj;
  }

  /** https://tc39.es/ecma262/#sec-topropertydescriptor */
  function ToPropertyDescriptor(Obj) {
    if (!(Obj instanceof ObjectValue)) {
      return exports.surroundingAgent.Throw('TypeError', 'NotAnObject', Obj);
    }
    const desc = exports.Descriptor({});
    let _temp7 = HasProperty(Obj, Value('enumerable'));
    /* c8 ignore if */
    if (_temp7 instanceof AbruptCompletion) {
      return _temp7;
    }
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    const hasEnumerable = _temp7;
    if (hasEnumerable === Value.true) {
      let _temp8 = Get(Obj, Value('enumerable'));
      /* c8 ignore if */
      if (_temp8 instanceof AbruptCompletion) {
        return _temp8;
      }
      /* c8 ignore if */
      if (_temp8 instanceof Completion) {
        _temp8 = _temp8.Value;
      }
      const enumerable = ToBoolean(_temp8);
      desc.Enumerable = enumerable;
    }
    let _temp9 = HasProperty(Obj, Value('configurable'));
    /* c8 ignore if */
    if (_temp9 instanceof AbruptCompletion) {
      return _temp9;
    }
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    const hasConfigurable = _temp9;
    if (hasConfigurable === Value.true) {
      let _temp10 = Get(Obj, Value('configurable'));
      /* c8 ignore if */
      if (_temp10 instanceof AbruptCompletion) {
        return _temp10;
      }
      /* c8 ignore if */
      if (_temp10 instanceof Completion) {
        _temp10 = _temp10.Value;
      }
      const conf = ToBoolean(_temp10);
      desc.Configurable = conf;
    }
    let _temp11 = HasProperty(Obj, Value('value'));
    /* c8 ignore if */
    if (_temp11 instanceof AbruptCompletion) {
      return _temp11;
    }
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    const hasValue = _temp11;
    if (hasValue === Value.true) {
      let _temp12 = Get(Obj, Value('value'));
      /* c8 ignore if */
      if (_temp12 instanceof AbruptCompletion) {
        return _temp12;
      }
      /* c8 ignore if */
      if (_temp12 instanceof Completion) {
        _temp12 = _temp12.Value;
      }
      const value = _temp12;
      desc.Value = value;
    }
    let _temp13 = HasProperty(Obj, Value('writable'));
    /* c8 ignore if */
    if (_temp13 instanceof AbruptCompletion) {
      return _temp13;
    }
    /* c8 ignore if */
    if (_temp13 instanceof Completion) {
      _temp13 = _temp13.Value;
    }
    const hasWritable = _temp13;
    if (hasWritable === Value.true) {
      let _temp14 = Get(Obj, Value('writable'));
      /* c8 ignore if */
      if (_temp14 instanceof AbruptCompletion) {
        return _temp14;
      }
      /* c8 ignore if */
      if (_temp14 instanceof Completion) {
        _temp14 = _temp14.Value;
      }
      const writable = ToBoolean(_temp14);
      desc.Writable = writable;
    }
    let _temp15 = HasProperty(Obj, Value('get'));
    /* c8 ignore if */
    if (_temp15 instanceof AbruptCompletion) {
      return _temp15;
    }
    /* c8 ignore if */
    if (_temp15 instanceof Completion) {
      _temp15 = _temp15.Value;
    }
    const hasGet = _temp15;
    if (hasGet === Value.true) {
      let _temp16 = Get(Obj, Value('get'));
      /* c8 ignore if */
      if (_temp16 instanceof AbruptCompletion) {
        return _temp16;
      }
      /* c8 ignore if */
      if (_temp16 instanceof Completion) {
        _temp16 = _temp16.Value;
      }
      const getter = _temp16;
      if (IsCallable(getter) === Value.false && !(getter instanceof UndefinedValue)) {
        return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', getter);
      }
      desc.Get = getter;
    }
    let _temp17 = HasProperty(Obj, Value('set'));
    /* c8 ignore if */
    if (_temp17 instanceof AbruptCompletion) {
      return _temp17;
    }
    /* c8 ignore if */
    if (_temp17 instanceof Completion) {
      _temp17 = _temp17.Value;
    }
    const hasSet = _temp17;
    if (hasSet === Value.true) {
      let _temp18 = Get(Obj, Value('set'));
      /* c8 ignore if */
      if (_temp18 instanceof AbruptCompletion) {
        return _temp18;
      }
      /* c8 ignore if */
      if (_temp18 instanceof Completion) {
        _temp18 = _temp18.Value;
      }
      const setter = _temp18;
      if (IsCallable(setter) === Value.false && !(setter instanceof UndefinedValue)) {
        return exports.surroundingAgent.Throw('TypeError', 'NotAFunction', setter);
      }
      desc.Set = setter;
    }
    if (desc.Get !== undefined || desc.Set !== undefined) {
      if (desc.Value !== undefined || desc.Writable !== undefined) {
        return exports.surroundingAgent.Throw('TypeError', 'InvalidPropertyDescriptor');
      }
    }
    return desc;
  }

  /** https://tc39.es/ecma262/#sec-completepropertydescriptor */
  function CompletePropertyDescriptor(Desc) {
    Assert(Desc instanceof exports.Descriptor, "Desc instanceof Descriptor");
    const like = exports.Descriptor({
      Value: Value.undefined,
      Writable: Value.false,
      Get: Value.undefined,
      Set: Value.undefined,
      Enumerable: Value.false,
      Configurable: Value.false
    });
    if (IsGenericDescriptor(Desc) || IsDataDescriptor(Desc)) {
      if (Desc.Value === undefined) {
        Desc.Value = like.Value;
      }
      if (Desc.Writable === undefined) {
        Desc.Writable = like.Writable;
      }
    } else {
      if (Desc.Get === undefined) {
        Desc.Get = like.Get;
      }
      if (Desc.Set === undefined) {
        Desc.Set = like.Set;
      }
    }
    if (Desc.Enumerable === undefined) {
      Desc.Enumerable = like.Enumerable;
    }
    if (Desc.Configurable === undefined) {
      Desc.Configurable = like.Configurable;
    }
    return Desc;
  }

  /** https://tc39.es/ecma262/#sec-createbytedatablock */
  function CreateByteDataBlock(size) {
    Assert(isNonNegativeInteger(size), "isNonNegativeInteger(size)");
    let db;
    try {
      db = new DataBlock(size);
    } catch (err) {
      return exports.surroundingAgent.Throw('RangeError', 'CannotAllocateDataBlock');
    }
    return db;
  }

  /** https://tc39.es/ecma262/#sec-copydatablockbytes */
  function CopyDataBlockBytes(toBlock, toIndex, fromBlock, fromIndex, count) {
    Assert(fromBlock !== toBlock, "fromBlock !== toBlock");
    Assert(fromBlock instanceof DataBlock || Type(fromBlock) === 'Shared Data Block', "fromBlock instanceof DataBlock || Type(fromBlock) === 'Shared Data Block'");
    Assert(toBlock instanceof DataBlock || Type(toBlock) === 'Shared Data Block', "toBlock instanceof DataBlock || Type(toBlock) === 'Shared Data Block'");
    Assert(Number.isSafeInteger(fromIndex) && fromIndex >= 0, "Number.isSafeInteger(fromIndex) && fromIndex >= 0");
    Assert(Number.isSafeInteger(toIndex) && toIndex >= 0, "Number.isSafeInteger(toIndex) && toIndex >= 0");
    Assert(Number.isSafeInteger(count) && count >= 0, "Number.isSafeInteger(count) && count >= 0");
    const fromSize = fromBlock.byteLength;
    Assert(fromIndex + count <= fromSize, "fromIndex + count <= fromSize");
    const toSize = toBlock.byteLength;
    Assert(toIndex + count <= toSize, "toIndex + count <= toSize");
    while (count > 0) {
      if (Type(fromBlock) === 'Shared Data Block') {
        Assert(false, "false");
      } else {
        Assert(Type(toBlock) !== 'Shared Data Block', "Type(toBlock) !== 'Shared Data Block'");
        toBlock[toIndex] = fromBlock[fromIndex];
      }
      toIndex += 1;
      fromIndex += 1;
      count -= 1;
    }
    return NormalCompletion(undefined);
  }

  function StringExoticGetOwnProperty(P) {
    const S = this;
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    const desc = OrdinaryGetOwnProperty(S, P);
    if (!(desc instanceof UndefinedValue)) {
      return desc;
    }
    let _temp = StringGetOwnProperty(S, P);
    Assert(!(_temp instanceof AbruptCompletion), "StringGetOwnProperty(S, P)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    return _temp;
  }
  function StringExoticDefineOwnProperty(P, Desc) {
    const S = this;
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    let _temp2 = StringGetOwnProperty(S, P);
    Assert(!(_temp2 instanceof AbruptCompletion), "StringGetOwnProperty(S, P)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    const stringDesc = _temp2;
    if (!(stringDesc instanceof UndefinedValue)) {
      const extensible = S.Extensible;
      let _temp3 = IsCompatiblePropertyDescriptor(extensible, Desc, stringDesc);
      Assert(!(_temp3 instanceof AbruptCompletion), "IsCompatiblePropertyDescriptor(extensible, Desc, stringDesc)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      return _temp3;
    }
    let _temp4 = OrdinaryDefineOwnProperty(S, P, Desc);
    Assert(!(_temp4 instanceof AbruptCompletion), "OrdinaryDefineOwnProperty(S, P, Desc)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    return _temp4;
  }
  function StringExoticOwnPropertyKeys() {
    const O = this;
    const keys = [];
    const str = O.StringData;
    Assert(str instanceof JSStringValue, "str instanceof JSStringValue");
    const len = str.stringValue().length;

    // 5. For each non-negative integer i starting with 0 such that i < len, in ascending order, do
    for (let i = 0; i < len; i += 1) {
      let _temp5 = ToString(F(i));
      Assert(!(_temp5 instanceof AbruptCompletion), "ToString(F(i))" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      // a. Add ! ToString(𝔽(i)) as the last element of keys.
      keys.push(_temp5);
    }

    // For each own property key P of O such that P is an array index and
    // ToIntegerOrInfinity(P) ≥ len, in ascending numeric index order, do
    //   Add P as the last element of keys.
    for (const P of O.properties.keys()) {
      // This is written with two nested ifs to work around https://github.com/devsnek/engine262/issues/24
      if (isArrayIndex(P)) {
        let _temp6 = ToIntegerOrInfinity(P);
        Assert(!(_temp6 instanceof AbruptCompletion), "ToIntegerOrInfinity(P)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp6 instanceof Completion) {
          _temp6 = _temp6.Value;
        }
        if (_temp6 >= len) {
          keys.push(P);
        }
      }
    }

    // For each own property key P of O such that Type(P) is String and
    // P is not an array index, in ascending chronological order of property creation, do
    //   Add P as the last element of keys.
    for (const P of O.properties.keys()) {
      if (P instanceof JSStringValue && isArrayIndex(P) === false) {
        keys.push(P);
      }
    }

    // For each own property key P of O such that Type(P) is Symbol,
    // in ascending chronological order of property creation, do
    //   Add P as the last element of keys.
    for (const P of O.properties.keys()) {
      if (P instanceof SymbolValue) {
        keys.push(P);
      }
    }
    return keys;
  }

  /** https://tc39.es/ecma262/#sec-stringcreate */
  function StringCreate(value, prototype) {
    // 1. Assert: Type(value) is String.
    Assert(value instanceof JSStringValue, "value instanceof JSStringValue");
    // 2. Let S be ! MakeBasicObject(« [[Prototype]], [[Extensible]], [[StringData]] »).
    let _temp7 = MakeBasicObject(['Prototype', 'Extensible', 'StringData']);
    Assert(!(_temp7 instanceof AbruptCompletion), "MakeBasicObject(['Prototype', 'Extensible', 'StringData'])" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    const S = _temp7;
    // 3. Set S.[[Prototype]] to prototype.
    S.Prototype = prototype;
    // 4. Set S.[[StringData]] to value.
    S.StringData = value;
    // 5. Set S.[[GetOwnProperty]] as specified in 9.4.3.1.
    S.GetOwnProperty = StringExoticGetOwnProperty;
    // 6. Set S.[[DefineOwnProperty]] as specified in 9.4.3.2.
    S.DefineOwnProperty = StringExoticDefineOwnProperty;
    // 7. Set S.[[OwnPropertyKeys]] as specified in 9.4.3.3.
    S.OwnPropertyKeys = StringExoticOwnPropertyKeys;
    // 8. Let length be the number of code unit elements in value.
    const length = value.stringValue().length;
    // 9. Perform ! DefinePropertyOrThrow(S, "length", PropertyDescriptor { [[Value]]: length, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }).
    let _temp8 = DefinePropertyOrThrow(S, Value('length'), exports.Descriptor({
      Value: F(length),
      Writable: Value.false,
      Enumerable: Value.false,
      Configurable: Value.false
    }));
    Assert(!(_temp8 instanceof AbruptCompletion), "DefinePropertyOrThrow(S, Value('length'), Descriptor({\n    Value: F(length),\n    Writable: Value.false,\n    Enumerable: Value.false,\n    Configurable: Value.false,\n  }))" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    // 10. Return S.
    return S;
  }

  /** https://tc39.es/ecma262/#sec-stringgetownproperty */
  function StringGetOwnProperty(S, P) {
    Assert(S instanceof ObjectValue && 'StringData' in S, "S instanceof ObjectValue && 'StringData' in S");
    Assert(IsPropertyKey(P), "IsPropertyKey(P)");
    if (!(P instanceof JSStringValue)) {
      return Value.undefined;
    }
    let _temp9 = CanonicalNumericIndexString(P);
    Assert(!(_temp9 instanceof AbruptCompletion), "CanonicalNumericIndexString(P)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    const index = _temp9;
    if (index instanceof UndefinedValue) {
      return Value.undefined;
    }
    if (IsIntegralNumber(index) === Value.false) {
      return Value.undefined;
    }
    if (Object.is(R(index), -0)) {
      return Value.undefined;
    }
    const str = S.StringData;
    Assert(str instanceof JSStringValue, "str instanceof JSStringValue");
    const len = str.stringValue().length;
    if (R(index) < 0 || len <= R(index)) {
      return Value.undefined;
    }
    const resultStr = str.stringValue()[R(index)];
    return exports.Descriptor({
      Value: Value(resultStr),
      Writable: Value.false,
      Enumerable: Value.true,
      Configurable: Value.false
    });
  }

  // @ts-nocheck

  /** https://tc39.es/ecma262/#sec-symboldescriptivestring */
  function SymbolDescriptiveString(sym) {
    Assert(sym instanceof SymbolValue, "sym instanceof SymbolValue");
    let desc = sym.Description;
    if (desc instanceof UndefinedValue) {
      desc = Value('');
    }
    return Value(`Symbol(${desc.stringValue()})`);
  }

  // This file covers abstract operations defined in
  /** https://tc39.es/ecma262/#sec-testing-and-comparison-operations */

  /** https://tc39.es/ecma262/#sec-requireobjectcoercible */
  function RequireObjectCoercible(argument) {
    const type = Type(argument);
    switch (type) {
      case 'Undefined':
        return exports.surroundingAgent.Throw('TypeError', 'CannotConvertToObject', 'undefined');
      case 'Null':
        return exports.surroundingAgent.Throw('TypeError', 'CannotConvertToObject', 'null');
      case 'Boolean':
      case 'Number':
      case 'String':
      case 'Symbol':
      case 'BigInt':
      case 'Object':
        return argument;
      /*c8 ignore next*/default:
        throw new OutOfRange$1('RequireObjectCoercible', {
          type,
          argument
        });
    }
  }

  /** https://tc39.es/ecma262/#sec-isarray */
  function IsArray(argument) {
    if (!(argument instanceof ObjectValue)) {
      return Value.false;
    }
    if (isArrayExoticObject(argument)) {
      return Value.true;
    }
    if (isProxyExoticObject(argument)) {
      if (argument.ProxyHandler === Value.null) {
        return exports.surroundingAgent.Throw('TypeError', 'ProxyRevoked', 'IsArray');
      }
      const target = argument.ProxyTarget;
      return IsArray(target);
    }
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-iscallable */
  function IsCallable(argument) {
    if (!(argument instanceof ObjectValue)) {
      return Value.false;
    }
    if ('Call' in argument) {
      return Value.true;
    }
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-isconstructor */
  function IsConstructor(argument) {
    if (!(argument instanceof ObjectValue)) {
      return Value.false;
    }
    if ('Construct' in argument) {
      return Value.true;
    }
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-isextensible-o */
  function IsExtensible(O) {
    Assert(O instanceof ObjectValue, "O instanceof ObjectValue");
    return O.IsExtensible();
  }

  /** https://tc39.es/ecma262/#sec-isinteger */
  function IsIntegralNumber(argument) {
    if (!(argument instanceof NumberValue)) {
      return Value.false;
    }
    if (argument.isNaN() || argument.isInfinity()) {
      return Value.false;
    }
    if (Math.floor(Math.abs(R(argument))) !== Math.abs(R(argument))) {
      return Value.false;
    }
    return Value.true;
  }

  /** https://tc39.es/ecma262/#sec-ispropertykey */
  function IsPropertyKey(argument) {
    if (argument instanceof JSStringValue) {
      return true;
    }
    if (argument instanceof SymbolValue) {
      return true;
    }
    return false;
  }

  /** https://tc39.es/ecma262/#sec-isregexp */
  function IsRegExp(argument) {
    if (!(argument instanceof ObjectValue)) {
      return Value.false;
    }
    let _temp = Get(argument, wellKnownSymbols.match);
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    const matcher = _temp;
    if (matcher !== Value.undefined) {
      return ToBoolean(matcher);
    }
    if ('RegExpMatcher' in argument) {
      return Value.true;
    }
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-isstringprefix */
  function IsStringPrefix(p, q) {
    Assert(p instanceof JSStringValue, "p instanceof JSStringValue");
    Assert(q instanceof JSStringValue, "q instanceof JSStringValue");
    return q.stringValue().startsWith(p.stringValue());
  }

  /** https://tc39.es/ecma262/#sec-samevalue */
  function SameValue(x, y) {
    // 1. If Type(x) is different from Type(y), return false.
    if (Type(x) !== Type(y)) {
      return Value.false;
    }
    // 2. If Type(x) is Number or BigInt, then
    if (x instanceof NumberValue || x instanceof BigIntValue) {
      // a. Return ! Type(x)::sameValue(x, y).
      return TypeForMethod(x).sameValue(x, y);
    }
    // 3. Return ! SameValueNonNumeric(x, y).
    let _temp2 = SameValueNonNumber(x, y);
    Assert(!(_temp2 instanceof AbruptCompletion), "SameValueNonNumber(x, y)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    return _temp2;
  }

  /** https://tc39.es/ecma262/#sec-samevaluezero */
  function SameValueZero(x, y) {
    // 1. If Type(x) is different from Type(y), return false.
    if (Type(x) !== Type(y)) {
      return Value.false;
    }
    // 2. If Type(x) is Number or BigInt, then
    if (x instanceof NumberValue || x instanceof BigIntValue) {
      // a. Return ! Type(x)::sameValueZero(x, y).
      return TypeForMethod(x).sameValueZero(x, y);
    }
    // 3. Return ! SameValueNonNumeric(x, y).
    let _temp3 = SameValueNonNumber(x, y);
    Assert(!(_temp3 instanceof AbruptCompletion), "SameValueNonNumber(x, y)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    return _temp3;
  }

  /** https://tc39.es/ecma262/#sec-samevaluenonnumber */
  function SameValueNonNumber(x, y) {
    Assert(!(x instanceof NumberValue), "!(x instanceof NumberValue)");
    Assert(Type(x) === Type(y), "Type(x) === Type(y)");
    if (x instanceof UndefinedValue) {
      return Value.true;
    }
    if (x instanceof NullValue) {
      return Value.true;
    }
    if (x instanceof JSStringValue) {
      if (x.stringValue() === y.stringValue()) {
        return Value.true;
      }
      return Value.false;
    }
    if (x instanceof BooleanValue) {
      if (x === y) {
        return Value.true;
      }
      return Value.false;
    }
    if (x instanceof SymbolValue) {
      return x === y ? Value.true : Value.false;
    }
    return x === y ? Value.true : Value.false;
  }

  /** https://tc39.es/ecma262/#sec-abstract-relational-comparison */
  function AbstractRelationalComparison(x, y, LeftFirst = true) {
    let px;
    let py;
    // 1. If the LeftFirst flag is true, then
    if (LeftFirst === true) {
      let _temp4 = ToPrimitive(x, 'number');
      /* c8 ignore if */
      if (_temp4 instanceof AbruptCompletion) {
        return _temp4;
      }
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      // a. Let px be ? ToPrimitive(x, number).
      px = _temp4;
      // b. Let py be ? ToPrimitive(y, number).
      let _temp5 = ToPrimitive(y, 'number');
      /* c8 ignore if */
      if (_temp5 instanceof AbruptCompletion) {
        return _temp5;
      }
      /* c8 ignore if */
      if (_temp5 instanceof Completion) {
        _temp5 = _temp5.Value;
      }
      py = _temp5;
    } else {
      let _temp6 = ToPrimitive(y, 'number');
      /* c8 ignore if */
      if (_temp6 instanceof AbruptCompletion) {
        return _temp6;
      }
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
      // a. NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.
      // b. Let py be ? ToPrimitive(y, number).
      py = _temp6;
      // c. Let px be ? ToPrimitive(x, number).
      let _temp7 = ToPrimitive(x, 'number');
      /* c8 ignore if */
      if (_temp7 instanceof AbruptCompletion) {
        return _temp7;
      }
      /* c8 ignore if */
      if (_temp7 instanceof Completion) {
        _temp7 = _temp7.Value;
      }
      px = _temp7;
    }
    // 3. If Type(px) is String and Type(py) is String, then
    if (px instanceof JSStringValue && py instanceof JSStringValue) {
      // a. If IsStringPrefix(py, px) is true, return false.
      if (IsStringPrefix(py, px)) {
        return Value.false;
      }
      // b. If IsStringPrefix(px, py) is true, return true.
      if (IsStringPrefix(px, py)) {
        return Value.true;
      }
      // c. Let k be the smallest nonnegative integer such that the code unit at index k within px
      //    is different from the code unit at index k within py. (There must be such a k, for
      //    neither String is a prefix of the other.)
      let k = 0;
      while (true) {
        if (px.stringValue()[k] !== py.stringValue()[k]) {
          break;
        }
        k += 1;
      }
      // d. Let m be the integer that is the numeric value of the code unit at index k within px.
      const m = px.stringValue().charCodeAt(k);
      // e. Let n be the integer that is the numeric value of the code unit at index k within py.
      const n = py.stringValue().charCodeAt(k);
      // f. If m < n, return true. Otherwise, return false.
      if (m < n) {
        return Value.true;
      } else {
        return Value.false;
      }
    } else {
      // a. If Type(px) is BigInt and Type(py) is String, then
      if (px instanceof BigIntValue && py instanceof JSStringValue) {
        let _temp8 = StringToBigInt(py);
        Assert(!(_temp8 instanceof AbruptCompletion), "StringToBigInt(py)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp8 instanceof Completion) {
          _temp8 = _temp8.Value;
        }
        // i. Let ny be ! StringToBigInt(py).
        const ny = _temp8;
        // ii. If ny is NaN, return undefined.
        if (Number.isNaN(ny)) {
          return Value.undefined;
        }
        // iii. Return BigInt::lessThan(px, ny).
        return BigIntValue.lessThan(px, ny);
      }
      // b. If Type(px) is String and Type(py) is BigInt, then
      if (px instanceof JSStringValue && py instanceof BigIntValue) {
        let _temp9 = StringToBigInt(px);
        Assert(!(_temp9 instanceof AbruptCompletion), "StringToBigInt(px)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp9 instanceof Completion) {
          _temp9 = _temp9.Value;
        }
        // i. Let ny be ! StringToBigInt(py).
        const nx = _temp9;
        // ii. If ny is NaN, return undefined.
        if (Number.isNaN(nx)) {
          return Value.undefined;
        }
        // iii. Return BigInt::lessThan(px, ny).
        return BigIntValue.lessThan(nx, py);
      }
      // c. Let nx be ? ToNumeric(px). NOTE: Because px and py are primitive values evaluation order is not important.
      let _temp10 = ToNumeric(px);
      /* c8 ignore if */
      if (_temp10 instanceof AbruptCompletion) {
        return _temp10;
      }
      /* c8 ignore if */
      if (_temp10 instanceof Completion) {
        _temp10 = _temp10.Value;
      }
      const nx = _temp10;
      // d. Let ny be ? ToNumeric(py).
      let _temp11 = ToNumeric(py);
      /* c8 ignore if */
      if (_temp11 instanceof AbruptCompletion) {
        return _temp11;
      }
      /* c8 ignore if */
      if (_temp11 instanceof Completion) {
        _temp11 = _temp11.Value;
      }
      const ny = _temp11;
      // e. If Type(nx) is the same as Type(ny), return Type(nx)::lessThan(nx, ny).
      if (Type(nx) === Type(ny)) {
        return TypeForMethod(nx).lessThan(nx, ny);
      }
      // f. Assert: Type(nx) is BigInt and Type(ny) is Number, or Type(nx) is Number and Type(ny) is BigInt.
      Assert(nx instanceof BigIntValue && ny instanceof NumberValue || nx instanceof NumberValue && ny instanceof BigIntValue, "(nx instanceof BigIntValue && ny instanceof NumberValue) || (nx instanceof NumberValue && ny instanceof BigIntValue)");
      // g. If nx or ny is NaN, return undefined.
      if (nx.isNaN && nx.isNaN() || ny.isNaN && ny.isNaN()) {
        return Value.undefined;
      }
      // h. If nx is -∞ or ny is +∞, return true.
      if (nx.numberValue && R(nx) === -Infinity || ny.numberValue && R(ny) === +Infinity) {
        return Value.true;
      }
      // i. If nx is +∞ or ny is -∞, return false.
      if (nx.numberValue && R(nx) === +Infinity || ny.numberValue && R(ny) === -Infinity) {
        return Value.false;
      }
      // j. If the mathematical value of nx is less than the mathematical value of ny, return true; otherwise return false.
      const a = nx.numberValue ? R(nx) : R(nx);
      const b = ny.numberValue ? R(ny) : R(ny);
      return a < b ? Value.true : Value.false;
    }
  }

  /** https://tc39.es/ecma262/#sec-abstract-equality-comparison */
  function AbstractEqualityComparison(x, y) {
    // 1. If Type(x) is the same as Type(y), then
    if (Type(x) === Type(y)) {
      // a. Return the result of performing Strict Equality Comparison x === y.
      return StrictEqualityComparison(x, y);
    }
    // 2. If x is null and y is undefined, return true.
    if (x === Value.null && y === Value.undefined) {
      return Value.true;
    }
    // 3. If x is undefined and y is null, return true.
    if (x === Value.undefined && y === Value.null) {
      return Value.true;
    }
    // 4. If Type(x) is Number and Type(y) is String, return the result of the comparison x == ! ToNumber(y).
    if (x instanceof NumberValue && y instanceof JSStringValue) {
      let _temp12 = ToNumber(y);
      Assert(!(_temp12 instanceof AbruptCompletion), "ToNumber(y)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp12 instanceof Completion) {
        _temp12 = _temp12.Value;
      }
      return AbstractEqualityComparison(x, _temp12);
    }
    // 5. If Type(x) is String and Type(y) is Number, return the result of the comparison ! ToNumber(x) == y.
    if (x instanceof JSStringValue && y instanceof NumberValue) {
      let _temp13 = ToNumber(x);
      Assert(!(_temp13 instanceof AbruptCompletion), "ToNumber(x)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp13 instanceof Completion) {
        _temp13 = _temp13.Value;
      }
      return AbstractEqualityComparison(_temp13, y);
    }
    // 6. If Type(x) is BigInt and Type(y) is String, then
    if (x instanceof BigIntValue && y instanceof JSStringValue) {
      let _temp14 = StringToBigInt(y);
      Assert(!(_temp14 instanceof AbruptCompletion), "StringToBigInt(y)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp14 instanceof Completion) {
        _temp14 = _temp14.Value;
      }
      // a. Let n be ! StringToBigInt(y).
      const n = _temp14;
      // b. If n is NaN, return false.
      if (Number.isNaN(n)) {
        return Value.false;
      }
      // c. Return the result of the comparison x == n.
      return AbstractEqualityComparison(x, n);
    }
    // 7. If Type(x) is String and Type(y) is BigInt, return the result of the comparison y == x.
    if (x instanceof JSStringValue && y instanceof BigIntValue) {
      return AbstractEqualityComparison(y, x);
    }
    // 8. If Type(x) is Boolean, return the result of the comparison ! ToNumber(x) == y.
    if (x instanceof BooleanValue) {
      let _temp15 = ToNumber(x);
      Assert(!(_temp15 instanceof AbruptCompletion), "ToNumber(x)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp15 instanceof Completion) {
        _temp15 = _temp15.Value;
      }
      return AbstractEqualityComparison(_temp15, y);
    }
    // 9. If Type(y) is Boolean, return the result of the comparison x == ! ToNumber(y).
    if (y instanceof BooleanValue) {
      let _temp16 = ToNumber(y);
      Assert(!(_temp16 instanceof AbruptCompletion), "ToNumber(y)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp16 instanceof Completion) {
        _temp16 = _temp16.Value;
      }
      return AbstractEqualityComparison(x, _temp16);
    }
    // 10. If Type(x) is either String, Number, BigInt, or Symbol and Type(y) is Object, return the result of the comparison x == ToPrimitive(y).
    if (['String', 'Number', 'BigInt', 'Symbol'].includes(Type(x)) && y instanceof ObjectValue) {
      let _temp17 = ToPrimitive(y);
      /* c8 ignore if */
      if (_temp17 instanceof AbruptCompletion) {
        return _temp17;
      }
      /* c8 ignore if */
      if (_temp17 instanceof Completion) {
        _temp17 = _temp17.Value;
      }
      return AbstractEqualityComparison(x, _temp17);
    }
    // 11. If Type(x) is Object and Type(y) is either String, Number, BigInt, or Symbol, return the result of the comparison ToPrimitive(x) == y.
    if (x instanceof ObjectValue && ['String', 'Number', 'BigInt', 'Symbol'].includes(Type(y))) {
      let _temp18 = ToPrimitive(x);
      /* c8 ignore if */
      if (_temp18 instanceof AbruptCompletion) {
        return _temp18;
      }
      /* c8 ignore if */
      if (_temp18 instanceof Completion) {
        _temp18 = _temp18.Value;
      }
      return AbstractEqualityComparison(_temp18, y);
    }
    // 12. If Type(x) is BigInt and Type(y) is Number, or if Type(x) is Number and Type(y) is BigInt, then
    if (x instanceof BigIntValue && y instanceof NumberValue || x instanceof NumberValue && y instanceof BigIntValue) {
      // a. If x or y are any of NaN, +∞, or -∞, return false.
      if (x.isNaN && (x.isNaN() || !x.isFinite()) || y.isNaN && (y.isNaN() || !y.isFinite())) {
        return Value.false;
      }
      // b. If the mathematical value of x is equal to the mathematical value of y, return true; otherwise return false.
      const a = x.numberValue ? R(x) : R(x);
      const b = y.numberValue ? R(y) : R(y);
      return a == b ? Value.true : Value.false; // eslint-disable-line eqeqeq
    }
    // 13. Return false.
    return Value.false;
  }

  /** https://tc39.es/ecma262/#sec-strict-equality-comparison */
  function StrictEqualityComparison(x, y) {
    // 1. If Type(x) is different from Type(y), return false.
    if (Type(x) !== Type(y)) {
      return Value.false;
    }
    // 2. If Type(x) is Number or BigInt, then
    if (x instanceof NumberValue || x instanceof BigIntValue) {
      let _temp19 = TypeForMethod(x).equal(x, y);
      Assert(!(_temp19 instanceof AbruptCompletion), "TypeForMethod(x).equal(x, y)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp19 instanceof Completion) {
        _temp19 = _temp19.Value;
      }
      // a. Return ! Type(x)::equal(x, y).
      return _temp19;
    }
    // 3. Return ! SameValueNonNumeric(x, y).
    return SameValueNonNumber(x, y);
  }

  /** https://tc39.es/ecma262/#sec-isvalidintegerindex */
  function IsValidIntegerIndex(O, index) {
    if (IsDetachedBuffer(O.ViewedArrayBuffer) === Value.true) {
      return Value.false;
    }
    Assert(index instanceof NumberValue, "index instanceof NumberValue");
    if (IsIntegralNumber(index) === Value.false) {
      return Value.false;
    }
    index = R(index);
    if (Object.is(index, -0)) {
      return Value.false;
    }
    if (index < 0 || index >= O.ArrayLength) {
      return Value.false;
    }
    return Value.true;
  }

  /** https://tc39.es/ecma262/#sec-toprimitive */
  function ToPrimitive(input, preferredType) {
    // 1. Assert: input is an ECMAScript language value.
    Assert(input instanceof Value, "input instanceof Value");
    // 2. If Type(input) is Object, then
    if (input instanceof ObjectValue) {
      let _temp = GetMethod(input, wellKnownSymbols.toPrimitive);
      /* c8 ignore if */
      if (_temp instanceof AbruptCompletion) {
        return _temp;
      }
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      // a. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).
      const exoticToPrim = _temp;
      // b. If exoticToPrim is not undefined, then
      if (exoticToPrim !== Value.undefined) {
        let hint;
        // i. If preferredType is not present, let hint be "default".
        if (preferredType === undefined) {
          hint = Value('default');
        } else if (preferredType === 'string') {
          // ii. Else if preferredType is string, let hint be "string".
          hint = Value('string');
        } else {
          // iii. Else,
          // 1. Assert: preferredType is number.
          Assert(preferredType === 'number', "preferredType === 'number'");
          // 2. Let hint be "number".
          hint = Value('number');
        }
        // iv. Let result be ? Call(exoticToPrim, input, « hint »).
        let _temp2 = Call(exoticToPrim, input, [hint]);
        /* c8 ignore if */
        if (_temp2 instanceof AbruptCompletion) {
          return _temp2;
        }
        /* c8 ignore if */
        if (_temp2 instanceof Completion) {
          _temp2 = _temp2.Value;
        }
        const result = _temp2;
        // v. If Type(result) is not Object, return result.
        if (!(result instanceof ObjectValue)) {
          return result;
        }
        // vi. Throw a TypeError exception.
        return exports.surroundingAgent.Throw('TypeError', 'ObjectToPrimitive');
      }
      // c. If preferredType is not present, let preferredType be number.
      if (preferredType === undefined) {
        preferredType = 'number';
      }
      // d. Return ? OrdinaryToPrimitive(input, preferredType).
      return OrdinaryToPrimitive(input, preferredType);
    }
    // 3. Return input.
    return input;
  }

  /** https://tc39.es/ecma262/#sec-ordinarytoprimitive */
  function OrdinaryToPrimitive(O, hint) {
    // 1. Assert: Type(O) is Object.
    Assert(O instanceof ObjectValue, "O instanceof ObjectValue");
    // 2. Assert: hint is either string or number.
    Assert(hint === 'string' || hint === 'number', "hint === 'string' || hint === 'number'");
    let methodNames;
    // 3. If hint is string, then
    if (hint === 'string') {
      // a. Let methodNames be « "toString", "valueOf" ».
      methodNames = [Value('toString'), Value('valueOf')];
    } else {
      // 4. Else,
      // a. Let methodNames be « "valueOf", "toString" ».
      methodNames = [Value('valueOf'), Value('toString')];
    }
    // 5. For each element name of methodNames, do
    for (const name of methodNames) {
      let _temp3 = Get(O, name);
      /* c8 ignore if */
      if (_temp3 instanceof AbruptCompletion) {
        return _temp3;
      }
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      // a. Let method be ? Get(O, name).
      const method = _temp3;
      // b. If IsCallable(method) is true, then
      if (IsCallable(method) === Value.true) {
        let _temp4 = Call(method, O);
        /* c8 ignore if */
        if (_temp4 instanceof AbruptCompletion) {
          return _temp4;
        }
        /* c8 ignore if */
        if (_temp4 instanceof Completion) {
          _temp4 = _temp4.Value;
        }
        // i. Let result be ? Call(method, O).
        const result = _temp4;
        // ii. If Type(result) is not Object, return result.
        if (!(result instanceof ObjectValue)) {
          return result;
        }
      }
    }
    // 6. Throw a TypeError exception.
    return exports.surroundingAgent.Throw('TypeError', 'ObjectToPrimitive');
  }

  /** https://tc39.es/ecma262/#sec-toboolean */
  function ToBoolean(argument) {
    if (argument instanceof UndefinedValue) {
      // Return false.
      return Value.false;
    } else if (argument instanceof NullValue) {
      // Return false.
      return Value.false;
    } else if (argument instanceof BooleanValue) {
      // Return argument.
      return argument;
    } else if (argument instanceof NumberValue) {
      // If argument is +0𝔽, -0𝔽, or NaN, return false; otherwise return true.
      if (R(argument) === 0 || argument.isNaN()) {
        return Value.false;
      }
      return Value.true;
    } else if (argument instanceof JSStringValue) {
      // If argument is the empty String, return false; otherwise return true.
      if (argument.stringValue().length === 0) {
        return Value.false;
      }
      return Value.true;
    } else if (argument instanceof SymbolValue) {
      // Return true.
      return Value.true;
    } else if (argument instanceof BigIntValue) {
      // If argument is 0ℤ, return false; otherwise return true.
      if (R(argument) === 0n) {
        return Value.false;
      }
      return Value.true;
    } else if (argument instanceof ObjectValue) {
      // Return true.
      return Value.true;
    }
    throw new OutOfRange$1('ToBoolean', {
      type: Type(argument),
      argument
    });
  }

  /** https://tc39.es/ecma262/#sec-tonumeric */
  function ToNumeric(value) {
    let _temp5 = ToPrimitive(value, 'number');
    /* c8 ignore if */
    if (_temp5 instanceof AbruptCompletion) {
      return _temp5;
    }
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    // 1. Let primValue be ? ToPrimitive(value, number).
    const primValue = _temp5;
    // 2. If Type(primValue) is BigInt, return primValue.
    if (primValue instanceof BigIntValue) {
      return primValue;
    }
    // 3. Return ? ToNumber(primValue).
    return ToNumber(primValue);
  }

  /** https://tc39.es/ecma262/#sec-tonumber */
  function ToNumber(argument) {
    if (argument instanceof UndefinedValue) {
      // Return NaN.
      return F(NaN);
    } else if (argument instanceof NullValue) {
      // Return +0𝔽.
      return F(+0);
    } else if (argument instanceof BooleanValue) {
      // If argument is true, return 1𝔽.
      if (argument === Value.true) {
        return F(1);
      }
      // If argument is false, return +0𝔽.
      return F(+0);
    } else if (argument instanceof NumberValue) {
      // Return argument (no conversion).
      return argument;
    } else if (argument instanceof JSStringValue) {
      return MV_StringNumericLiteral(argument.stringValue());
    } else if (argument instanceof BigIntValue) {
      // Throw a TypeError exception.
      return exports.surroundingAgent.Throw('TypeError', 'CannotMixBigInts');
    } else if (argument instanceof SymbolValue) {
      // Throw a TypeError exception.
      return exports.surroundingAgent.Throw('TypeError', 'CannotConvertSymbol', 'number');
    } else if (argument instanceof ObjectValue) {
      let _temp6 = ToPrimitive(argument, 'number');
      /* c8 ignore if */
      if (_temp6 instanceof AbruptCompletion) {
        return _temp6;
      }
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
      // 1. Let primValue be ? ToPrimitive(argument, number).
      const primValue = _temp6;
      // 2. Return ? ToNumber(primValue).
      return ToNumber(primValue);
    }
    throw new OutOfRange$1('ToNumber', {
      type: Type(argument),
      argument
    });
  }
  const mod = (n, m) => {
    const r = n % m;
    return Math.floor(r >= 0 ? r : r + m);
  };

  /** https://tc39.es/ecma262/#sec-tointegerorinfinity */
  function ToIntegerOrInfinity(argument) {
    let _temp7 = ToNumber(argument);
    /* c8 ignore if */
    if (_temp7 instanceof AbruptCompletion) {
      return _temp7;
    }
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    // 1. Let number be ? ToNumber(argument).
    const number = _temp7;
    // 2. If number is NaN, +0𝔽, or -0𝔽, return 0.
    if (number.isNaN() || R(number) === 0) {
      return +0;
    }
    // 3. If number is +∞𝔽, return +∞.
    // 4. If number is -∞𝔽, return -∞.
    if (!number.isFinite()) {
      return R(number);
    }
    // 4. Let integer be floor(abs(ℝ(number))).
    let integer = Math.floor(Math.abs(R(number)));
    // 5. If number < +0𝔽, set integer to -integer.
    if (R(number) < 0 && integer !== 0) {
      integer = -integer;
    }
    // 6. Return integer.
    return integer;
  }

  /** https://tc39.es/ecma262/#sec-toint32 */
  function ToInt32(argument) {
    let _temp8 = ToNumber(argument);
    /* c8 ignore if */
    if (_temp8 instanceof AbruptCompletion) {
      return _temp8;
    }
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    // 1. Let number be ? ToNumber(argument).
    const number = R(_temp8);
    // 2. If number is NaN, +0𝔽, -0𝔽, +∞𝔽, or -∞𝔽, return +0𝔽.
    if (Number.isNaN(number) || number === 0 || !Number.isFinite(number)) {
      return F(+0);
    }
    // 3. Let int be the mathematical value that is the same sign as number and whose magnitude is floor(abs(ℝ(number))).
    const int = Math.sign(number) * Math.floor(Math.abs(number));
    // 4. Let int32bit be int modulo 2^32.
    const int32bit = mod(int, 2 ** 32);
    // 5. If int32bit ≥ 2^31, return 𝔽(int32bit - 2^32); otherwise return 𝔽(int32bit).
    if (int32bit >= 2 ** 31) {
      return F(int32bit - 2 ** 32);
    }
    return F(int32bit);
  }

  /** https://tc39.es/ecma262/#sec-touint32 */
  function ToUint32(argument) {
    let _temp9 = ToNumber(argument);
    /* c8 ignore if */
    if (_temp9 instanceof AbruptCompletion) {
      return _temp9;
    }
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    // 1. Let number be ? ToNumber(argument).
    const number = R(_temp9);
    // 2. If number is NaN, +0𝔽, -0𝔽, +∞𝔽, or -∞𝔽, return +0𝔽.
    if (Number.isNaN(number) || number === 0 || !Number.isFinite(number)) {
      return F(+0);
    }
    // 3. Let int be the mathematical value that is the same sign as number and whose magnitude is floor(abs(ℝ(number))).
    const int = Math.sign(number) * Math.floor(Math.abs(number));
    // 4. Let int32bit be int modulo 2^32.
    const int32bit = mod(int, 2 ** 32);
    // 5. Return 𝔽(int32bit).
    return F(int32bit);
  }

  /** https://tc39.es/ecma262/#sec-toint16 */
  function ToInt16(argument) {
    let _temp10 = ToNumber(argument);
    /* c8 ignore if */
    if (_temp10 instanceof AbruptCompletion) {
      return _temp10;
    }
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    // 1. Let number be ? ToNumber(argument).
    const number = R(_temp10);
    // 2. If number is NaN, +0𝔽, -0𝔽, +∞𝔽, or -∞𝔽, return +0𝔽.
    if (Number.isNaN(number) || number === 0 || !Number.isFinite(number)) {
      return F(+0);
    }
    // 3. Let int be the mathematical value that is the same sign as number and whose magnitude is floor(abs(ℝ(number))).
    const int = Math.sign(number) * Math.floor(Math.abs(number));
    // 4. Let int16bit be int modulo 2^16.
    const int16bit = mod(int, 2 ** 16);
    // 5. If int16bit ≥ 2^31, return 𝔽(int16bit - 2^32); otherwise return 𝔽(int16bit).
    if (int16bit >= 2 ** 15) {
      return F(int16bit - 2 ** 16);
    }
    return F(int16bit);
  }

  /** https://tc39.es/ecma262/#sec-touint16 */
  function ToUint16(argument) {
    let _temp11 = ToNumber(argument);
    /* c8 ignore if */
    if (_temp11 instanceof AbruptCompletion) {
      return _temp11;
    }
    /* c8 ignore if */
    if (_temp11 instanceof Completion) {
      _temp11 = _temp11.Value;
    }
    // 1. Let number be ? ToNumber(argument).
    const number = R(_temp11);
    // 2. If number is NaN, +0𝔽, -0𝔽, +∞𝔽, or -∞𝔽, return +0𝔽.
    if (Number.isNaN(number) || number === 0 || !Number.isFinite(number)) {
      return F(+0);
    }
    // 3. Let int be the mathematical value that is the same sign as number and whose magnitude is floor(abs(ℝ(number))).
    const int = Math.sign(number) * Math.floor(Math.abs(number));
    // 4. Let int16bit be int modulo 2^16.
    const int16bit = mod(int, 2 ** 16);
    // 5. Return 𝔽(int16bit).
    return F(int16bit);
  }

  /** https://tc39.es/ecma262/#sec-toint8 */
  function ToInt8(argument) {
    let _temp12 = ToNumber(argument);
    /* c8 ignore if */
    if (_temp12 instanceof AbruptCompletion) {
      return _temp12;
    }
    /* c8 ignore if */
    if (_temp12 instanceof Completion) {
      _temp12 = _temp12.Value;
    }
    // 1. Let number be ? ToNumber(argument).
    const number = R(_temp12);
    // 2. If number is NaN, +0𝔽, -0𝔽, +∞𝔽, or -∞𝔽, return +0𝔽.
    if (Number.isNaN(number) || number === 0 || !Number.isFinite(number)) {
      return F(+0);
    }
    // 3. Let int be the mathematical value that is the same sign as number and whose magnitude is floor(abs(ℝ(number))).
    const int = Math.sign(number) * Math.floor(Math.abs(number));
    // 4. Let int8bit be int modulo 2^8.
    const int8bit = mod(int, 2 ** 8);
    // 5. If int8bit ≥ 2^7, return 𝔽(int8bit - 2^8); otherwise return 𝔽(int8bit).
    if (int8bit >= 2 ** 7) {
      return F(int8bit - 2 ** 8);
    }
    return F(int8bit);
  }

  /** https://tc39.es/ecma262/#sec-touint8 */
  function ToUint8(argument) {
    let _temp13 = ToNumber(argument);
    /* c8 ignore if */
    if (_temp13 instanceof AbruptCompletion) {
      return _temp13;
    }
    /* c8 ignore if */
    if (_temp13 instanceof Completion) {
      _temp13 = _temp13.Value;
    }
    // 1. Let number be ? ToNumber(argument).
    const number = R(_temp13);
    // 2. If number is NaN, +0𝔽, -0𝔽, +∞𝔽, or -∞𝔽, return +0𝔽.
    if (Number.isNaN(number) || number === 0 || !Number.isFinite(number)) {
      return F(+0);
    }
    // 3. Let int be the mathematical value that is the same sign as number and whose magnitude is floor(abs(ℝ(number))).
    const int = Math.sign(number) * Math.floor(Math.abs(number));
    // 4. Let int8bit be int modulo 2^8.
    const int8bit = mod(int, 2 ** 8);
    // 5. Return 𝔽(int8bit).
    return F(int8bit);
  }

  /** https://tc39.es/ecma262/#sec-touint8clamp */
  function ToUint8Clamp(argument) {
    let _temp14 = ToNumber(argument);
    /* c8 ignore if */
    if (_temp14 instanceof AbruptCompletion) {
      return _temp14;
    }
    /* c8 ignore if */
    if (_temp14 instanceof Completion) {
      _temp14 = _temp14.Value;
    }
    // 1. Let number be ? ToNumber(argument).
    const number = R(_temp14);
    // 2. If number is NaN, return +0𝔽.
    if (Number.isNaN(number)) {
      return F(+0);
    }
    // 3. If ℝ(number) ≤ 0, return +0𝔽.
    if (number <= 0) {
      return F(+0);
    }
    // 4. If ℝ(number) ≥ 255, return 255𝔽.
    if (number >= 255) {
      return F(255);
    }
    // 5. Let f be floor(ℝ(number)).
    const f = Math.floor(number);
    // 6. If f + 0.5 < ℝ(number), return 𝔽(f + 1).
    if (f + 0.5 < number) {
      return F(f + 1);
    }
    // 7. If ℝ(number) < f + 0.5, return 𝔽(f).
    if (number < f + 0.5) {
      return F(f);
    }
    // 8. If f is odd, return 𝔽(f + 1).
    if (f % 2 === 1) {
      return F(f + 1);
    }
    // 9. Return 𝔽(f).
    return F(f);
  }

  /** https://tc39.es/ecma262/#sec-tobigint */
  function ToBigInt(argument) {
    let _temp15 = ToPrimitive(argument, 'number');
    /* c8 ignore if */
    if (_temp15 instanceof AbruptCompletion) {
      return _temp15;
    }
    /* c8 ignore if */
    if (_temp15 instanceof Completion) {
      _temp15 = _temp15.Value;
    }
    // 1. Let prim be ? ToPrimitive(argument, number).
    const prim = _temp15;
    // 2. Return the value that prim corresponds to in Table 12 (#table-tobigint).
    if (prim instanceof UndefinedValue) {
      // Throw a TypeError exception.
      return exports.surroundingAgent.Throw('TypeError', 'CannotConvertToBigInt', prim);
    } else if (prim instanceof NullValue) {
      // Throw a TypeError exception.
      return exports.surroundingAgent.Throw('TypeError', 'CannotConvertToBigInt', prim);
    } else if (prim instanceof BooleanValue) {
      // Return 1ℤ if prim is true and 0ℤ if prim is false.
      if (prim === Value.true) {
        return Z(1n);
      }
      return Z(0n);
    } else if (prim instanceof BigIntValue) {
      // Return prim.
      return prim;
    } else if (prim instanceof NumberValue) {
      // Throw a TypeError exception.
      return exports.surroundingAgent.Throw('TypeError', 'CannotConvertToBigInt', prim);
    } else if (prim instanceof JSStringValue) {
      let _temp16 = StringToBigInt(prim);
      Assert(!(_temp16 instanceof AbruptCompletion), "StringToBigInt(prim)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp16 instanceof Completion) {
        _temp16 = _temp16.Value;
      }
      // 1. Let n be ! StringToBigInt(prim).
      const n = _temp16;
      // 2. If n is NaN, throw a SyntaxError exception.
      if (Number.isNaN(n)) {
        return exports.surroundingAgent.Throw('SyntaxError', 'CannotConvertToBigInt', prim);
      }
      // 3. Return n.
      return n;
    } else if (prim instanceof SymbolValue) {
      // Throw a TypeError exception.
      return exports.surroundingAgent.Throw('TypeError', 'CannotConvertSymbol', 'bigint');
    }
    throw new OutOfRange$1('ToBigInt', argument);
  }

  /** https://tc39.es/ecma262/#sec-stringtobigint */
  function StringToBigInt(argument) {
    // Apply the algorithm in 7.1.4.1 (#sec-tonumber-applied-to-the-string-type) with the following changes:
    // 1. Replace the StrUnsignedDecimalLiteral production with DecimalDigits to not allow Infinity, decimal points, or exponents.
    // 2. If the MV is NaN, return NaN, otherwise return the BigInt which exactly corresponds to the MV, rather than rounding to a Number.
    // TODO: Adapt nearley grammar for this.
    try {
      return Z(BigInt(argument.stringValue()));
    } catch {
      return NaN;
    }
  }

  /** https://tc39.es/ecma262/#sec-tobigint64 */
  function ToBigInt64(argument) {
    let _temp17 = ToBigInt(argument);
    /* c8 ignore if */
    if (_temp17 instanceof AbruptCompletion) {
      return _temp17;
    }
    /* c8 ignore if */
    if (_temp17 instanceof Completion) {
      _temp17 = _temp17.Value;
    }
    // 1. Let n be ? ToBigInt(argument).
    const n = _temp17;
    // 2. Let int64bit be ℝ(n) modulo 2^64.
    const int64bit = R(n) % 2n ** 64n;
    // 3. If int64bit ≥ 2^63, return ℤ(int64bit - 2^64); otherwise return ℤ(int64bit).
    if (int64bit >= 2n ** 63n) {
      return Z(int64bit - 2n ** 64n);
    }
    return Z(int64bit);
  }

  /** https://tc39.es/ecma262/#sec-tobiguint64 */
  function ToBigUint64(argument) {
    let _temp18 = ToBigInt(argument);
    /* c8 ignore if */
    if (_temp18 instanceof AbruptCompletion) {
      return _temp18;
    }
    /* c8 ignore if */
    if (_temp18 instanceof Completion) {
      _temp18 = _temp18.Value;
    }
    // 1. Let n be ? ToBigInt(argument).
    const n = _temp18;
    // 2. Let int64bit be ℝ(n) modulo 2^64.
    const int64bit = R(n) % 2n ** 64n;
    // 3. Return ℤ(int64bit).
    return Z(int64bit);
  }

  /** https://tc39.es/ecma262/#sec-tostring */
  function ToString(argument) {
    if (argument instanceof UndefinedValue) {
      // Return "undefined".
      return Value('undefined');
    } else if (argument instanceof NullValue) {
      // Return "null".
      return Value('null');
    } else if (argument instanceof BooleanValue) {
      // If argument is true, return "true".
      // If argument is false, return "false".
      return Value(argument === Value.true ? 'true' : 'false');
    } else if (argument instanceof NumberValue) {
      let _temp19 = NumberValue.toString(argument);
      Assert(!(_temp19 instanceof AbruptCompletion), "NumberValue.toString(argument)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp19 instanceof Completion) {
        _temp19 = _temp19.Value;
      }
      // Return ! Number::toString(argument).
      return _temp19;
    } else if (argument instanceof JSStringValue) {
      // Return argument.
      return argument;
    } else if (argument instanceof SymbolValue) {
      // Throw a TypeError exception.
      return exports.surroundingAgent.Throw('TypeError', 'CannotConvertSymbol', 'string');
    } else if (argument instanceof BigIntValue) {
      let _temp20 = BigIntValue.toString(argument);
      Assert(!(_temp20 instanceof AbruptCompletion), "BigIntValue.toString(argument)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp20 instanceof Completion) {
        _temp20 = _temp20.Value;
      }
      // Return ! BigInt::toString(argument).
      return _temp20;
    } else if (argument instanceof ObjectValue) {
      let _temp21 = ToPrimitive(argument, 'string');
      /* c8 ignore if */
      if (_temp21 instanceof AbruptCompletion) {
        return _temp21;
      }
      /* c8 ignore if */
      if (_temp21 instanceof Completion) {
        _temp21 = _temp21.Value;
      }
      // 1. Let primValue be ? ToPrimitive(argument, string).
      const primValue = _temp21;
      // 2. Return ? ToString(primValue).
      return ToString(primValue);
    }
    throw new OutOfRange$1('ToString', {
      type: Type(argument),
      argument
    });
  }

  /** https://tc39.es/ecma262/#sec-toobject */
  function ToObject(argument) {
    if (argument instanceof UndefinedValue) {
      // Throw a TypeError exception.
      return exports.surroundingAgent.Throw('TypeError', 'CannotConvertToObject', 'undefined');
    } else if (argument instanceof NullValue) {
      // Throw a TypeError exception.
      return exports.surroundingAgent.Throw('TypeError', 'CannotConvertToObject', 'null');
    } else if (argument instanceof BooleanValue) {
      // Return a new Boolean object whose [[BooleanData]] internal slot is set to argument.
      const obj = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%Boolean.prototype%'), ['BooleanData']);
      obj.BooleanData = argument;
      return obj;
    } else if (argument instanceof NumberValue) {
      // Return a new Number object whose [[NumberData]] internal slot is set to argument.
      const obj = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%Number.prototype%'), ['NumberData']);
      obj.NumberData = argument;
      return obj;
    } else if (argument instanceof JSStringValue) {
      // Return a new String object whose [[StringData]] internal slot is set to argument.
      return StringCreate(argument, exports.surroundingAgent.intrinsic('%String.prototype%'));
    } else if (argument instanceof SymbolValue) {
      // Return a new Symbol object whose [[SymbolData]] internal slot is set to argument.
      const obj = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%Symbol.prototype%'), ['SymbolData']);
      obj.SymbolData = argument;
      return obj;
    } else if (argument instanceof BigIntValue) {
      // Return a new BigInt object whose [[BigIntData]] internal slot is set to argument.
      const obj = OrdinaryObjectCreate(exports.surroundingAgent.intrinsic('%BigInt.prototype%'), ['BigIntData']);
      obj.BigIntData = argument;
      return obj;
    } else if (argument instanceof ObjectValue) {
      // Return argument.
      return argument;
    }
    throw new OutOfRange$1('ToObject', {
      type: Type(argument),
      argument
    });
  }

  /** https://tc39.es/ecma262/#sec-topropertykey */
  function ToPropertyKey(argument) {
    let _temp22 = ToPrimitive(argument, 'string');
    /* c8 ignore if */
    if (_temp22 instanceof AbruptCompletion) {
      return _temp22;
    }
    /* c8 ignore if */
    if (_temp22 instanceof Completion) {
      _temp22 = _temp22.Value;
    }
    // 1. Let key be ? ToPrimitive(argument, string).
    const key = _temp22;
    // 2. If Type(key) is Symbol, then
    if (key instanceof SymbolValue) {
      // a. Return key.
      return key;
    }
    // 3. Return ! ToString(key).
    let _temp23 = ToString(key);
    Assert(!(_temp23 instanceof AbruptCompletion), "ToString(key)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp23 instanceof Completion) {
      _temp23 = _temp23.Value;
    }
    return _temp23;
  }

  /** https://tc39.es/ecma262/#sec-tolength */
  function ToLength(argument) {
    let _temp24 = ToIntegerOrInfinity(argument);
    /* c8 ignore if */
    if (_temp24 instanceof AbruptCompletion) {
      return _temp24;
    }
    /* c8 ignore if */
    if (_temp24 instanceof Completion) {
      _temp24 = _temp24.Value;
    }
    // 1. Let len be ? ToIntegerOrInfinity(argument).
    const len = _temp24;
    // 2. If len ≤ 0, return +0𝔽.
    if (len <= 0) {
      return F(+0);
    }
    // 3. Return 𝔽(min(len, 253 - 1)).
    return F(Math.min(len, 2 ** 53 - 1));
  }

  /** https://tc39.es/ecma262/#sec-canonicalnumericindexstring */
  function CanonicalNumericIndexString(argument) {
    // 1. Assert: Type(argument) is String.
    Assert(argument instanceof JSStringValue, "argument instanceof JSStringValue");
    // 2. If argument is "-0", return -0𝔽.
    if (argument.stringValue() === '-0') {
      return F(-0);
    }
    // 3. Let n be ! ToNumber(argument).
    let _temp25 = ToNumber(argument);
    Assert(!(_temp25 instanceof AbruptCompletion), "ToNumber(argument)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp25 instanceof Completion) {
      _temp25 = _temp25.Value;
    }
    const n = _temp25;
    // 4. If SameValue(! ToString(n), argument) is false, return undefined.
    let _temp26 = ToString(n);
    Assert(!(_temp26 instanceof AbruptCompletion), "ToString(n)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp26 instanceof Completion) {
      _temp26 = _temp26.Value;
    }
    if (SameValue(_temp26, argument) === Value.false) {
      return Value.undefined;
    }
    // 4. Return n.
    return n;
  }

  /** https://tc39.es/ecma262/#sec-toindex */
  function ToIndex(value) {
    // 1. If value is undefined, then
    if (value instanceof UndefinedValue) {
      // a. Return 0.
      return 0;
    } else {
      let _temp27 = ToIntegerOrInfinity(value);
      /* c8 ignore if */
      if (_temp27 instanceof AbruptCompletion) {
        return _temp27;
      }
      /* c8 ignore if */
      if (_temp27 instanceof Completion) {
        _temp27 = _temp27.Value;
      }
      // a. Let integerIndex be 𝔽(? ToIntegerOrInfinity(value)).
      const integerIndex = F(_temp27);
      // b. If integerIndex < +0𝔽, throw a RangeError exception.
      if (R(integerIndex) < 0) {
        return exports.surroundingAgent.Throw('RangeError', 'NegativeIndex', 'Index');
      }
      // c. Let index be ! ToLength(integerIndex).
      let _temp28 = ToLength(integerIndex);
      Assert(!(_temp28 instanceof AbruptCompletion), "ToLength(integerIndex)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp28 instanceof Completion) {
        _temp28 = _temp28.Value;
      }
      const index = _temp28;
      // d. If ! SameValue(integerIndex, index) is false, throw a RangeError exception.
      let _temp29 = SameValue(integerIndex, index);
      Assert(!(_temp29 instanceof AbruptCompletion), "SameValue(integerIndex, index)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp29 instanceof Completion) {
        _temp29 = _temp29.Value;
      }
      if (_temp29 === Value.false) {
        return exports.surroundingAgent.Throw('RangeError', 'OutOfRange', 'Index');
      }
      // e. Return ℝ(index).
      return R(index);
    }
  }

  const typedArrayInfoByName = {
    Int8Array: {
      IntrinsicName: '%Int8Array%',
      ElementType: 'Int8',
      ElementSize: 1,
      ConversionOperation: ToInt8
    },
    Uint8Array: {
      IntrinsicName: '%Uint8Array%',
      ElementType: 'Uint8',
      ElementSize: 1,
      ConversionOperation: ToUint8
    },
    Uint8ClampedArray: {
      IntrinsicName: '%Uint8ClampedArray%',
      ElementType: 'Uint8C',
      ElementSize: 1,
      ConversionOperation: ToUint8Clamp
    },
    Int16Array: {
      IntrinsicName: '%Int16Array%',
      ElementType: 'Int16',
      ElementSize: 2,
      ConversionOperation: ToInt16
    },
    Uint16Array: {
      IntrinsicName: '%Uint16Array%',
      ElementType: 'Uint16',
      ElementSize: 2,
      ConversionOperation: ToUint16
    },
    Int32Array: {
      IntrinsicName: '%Int32Array%',
      ElementType: 'Int32',
      ElementSize: 4,
      ConversionOperation: ToInt32
    },
    Uint32Array: {
      IntrinsicName: '%Uint32Array%',
      ElementType: 'Uint32',
      ElementSize: 4,
      ConversionOperation: ToUint32
    },
    BigInt64Array: {
      IntrinsicName: '%BigInt64Array%',
      ElementType: 'BigInt64',
      ElementSize: 8,
      ConversionOperation: ToBigInt64
    },
    BigUint64Array: {
      IntrinsicName: '%BigUint64Array%',
      ElementType: 'BigUint64',
      ElementSize: 8,
      ConversionOperation: ToBigUint64
    },
    Float32Array: {
      IntrinsicName: '%Float32Array%',
      ElementType: 'Float32',
      ElementSize: 4,
      ConversionOperation: undefined
    },
    Float64Array: {
      IntrinsicName: '%Float64Array%',
      ElementType: 'Float64',
      ElementSize: 8,
      ConversionOperation: undefined
    }
  };
  const typedArrayInfoByType = {};
  Object.values(typedArrayInfoByName).forEach(v => {
    typedArrayInfoByType[v.ElementType] = v;
  });

  /** https://tc39.es/ecma262/#sec-validatetypedarray */
  function ValidateTypedArray(O) {
    let _temp = RequireInternalSlot(O, 'TypedArrayName');
    /* c8 ignore if */
    if (_temp instanceof AbruptCompletion) {
      return _temp;
    }
    /* c8 ignore if */
    if (_temp instanceof Completion) {
      _temp = _temp.Value;
    }
    // 2. Assert: O has a [[ViewedArrayBuffer]] internal slot.
    Assert('ViewedArrayBuffer' in O, "'ViewedArrayBuffer' in O");
    // 3. Let buffer be O.[[ViewedArrayBuffer]].
    const buffer = O.ViewedArrayBuffer;
    // 4. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.
    if (IsDetachedBuffer(buffer) === Value.true) {
      return exports.surroundingAgent.Throw('TypeError', 'ArrayBufferDetached');
    }
    // 5. Return buffer.
    return buffer;
  }

  // #typedarray-create
  function TypedArrayCreate(constructor, argumentList) {
    let _temp2 = Construct(constructor, argumentList);
    /* c8 ignore if */
    if (_temp2 instanceof AbruptCompletion) {
      return _temp2;
    }
    /* c8 ignore if */
    if (_temp2 instanceof Completion) {
      _temp2 = _temp2.Value;
    }
    // 1. Let newTypedArray be ? Construct(constructor, argumentList).
    const newTypedArray = _temp2;
    // 2. Perform ? ValidateTypedArray(newTypedArray).
    let _temp3 = ValidateTypedArray(newTypedArray);
    /* c8 ignore if */
    if (_temp3 instanceof AbruptCompletion) {
      return _temp3;
    }
    /* c8 ignore if */
    if (_temp3 instanceof Completion) {
      _temp3 = _temp3.Value;
    }
    // 3. If argumentList is a List of a single Number, then
    if (argumentList.length === 1 && argumentList[0] instanceof NumberValue) {
      // a. If newTypedArray.[[ArrayLength]] < argumentList[0], throw a TypeError exception.
      if (newTypedArray.ArrayLength < R(argumentList[0])) {
        return exports.surroundingAgent.Throw('TypeError', 'TypedArrayTooSmall');
      }
    }
    // 4. Return newTypedArray.
    return newTypedArray;
  }

  /** https://tc39.es/ecma262/#sec-allocatetypedarray */
  function AllocateTypedArray(constructorName, newTarget, defaultProto, length) {
    let _temp4 = GetPrototypeFromConstructor(newTarget, defaultProto);
    /* c8 ignore if */
    if (_temp4 instanceof AbruptCompletion) {
      return _temp4;
    }
    /* c8 ignore if */
    if (_temp4 instanceof Completion) {
      _temp4 = _temp4.Value;
    }
    // 1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).
    const proto = _temp4;
    // 2. Let obj be ! IntegerIndexedObjectCreate(proto).
    let _temp5 = IntegerIndexedObjectCreate(proto);
    Assert(!(_temp5 instanceof AbruptCompletion), "IntegerIndexedObjectCreate(proto)" + ' returned an abrupt completion');
    /* c8 ignore if */
    if (_temp5 instanceof Completion) {
      _temp5 = _temp5.Value;
    }
    const obj = _temp5;
    // 3. Assert: obj.[[ViewedArrayBuffer]] is undefined.
    Assert(obj.ViewedArrayBuffer === Value.undefined, "obj.ViewedArrayBuffer === Value.undefined");
    // 4. Set obj.[[TypedArrayName]] to constructorName.
    obj.TypedArrayName = constructorName;
    // 5. If constructorName is "BigInt64Array" or "BigUint64Array", set obj.[[ContentType]] to BigInt.
    // 6. Otherwise, set obj.[[ContentType]] to Number.
    if (constructorName.stringValue() === 'BigInt64Array' || constructorName.stringValue() === 'BigUint64Array') {
      obj.ContentType = 'BigInt';
    } else {
      obj.ContentType = 'Number';
    }
    // 7. If length is not present, then
    if (length === undefined) {
      // 1. Set obj.[[ByteLength]] to 0.
      obj.ByteLength = 0;
      // 1. Set obj.[[ByteOffset]] to 0.
      obj.ByteOffset = 0;
      // 1. Set obj.[[ArrayLength]] to 0.
      obj.ArrayLength = 0;
    } else {
      let _temp6 = AllocateTypedArrayBuffer(obj, length);
      /* c8 ignore if */
      if (_temp6 instanceof AbruptCompletion) {
        return _temp6;
      }
      /* c8 ignore if */
      if (_temp6 instanceof Completion) {
        _temp6 = _temp6.Value;
      }
    }
    // 9. Return obj.
    return obj;
  }

  /** https://tc39.es/ecma262/#sec-allocatetypedarraybuffer */
  function AllocateTypedArrayBuffer(O, length) {
    // 1. Assert: O is an Object that has a [[ViewedArrayBuffer]] internal slot.
    Assert(O instanceof ObjectValue && 'ViewedArrayBuffer' in O, "O instanceof ObjectValue && 'ViewedArrayBuffer' in O");
    // 2. Assert: O.[[ViewedArrayBuffer]] is undefined.
    Assert(O.ViewedArrayBuffer === Value.undefined, "O.ViewedArrayBuffer === Value.undefined");
    // 3. Assert: length is a non-negative integer.
    Assert(isNonNegativeInteger(length), "isNonNegativeInteger(length)");
    // 4. Let constructorName be the String value of O.[[TypedArrayName]].
    const constructorName = O.TypedArrayName.stringValue();
    // 5. Let elementSize be the Element Size value specified in Table 61 for constructorName.
    const elementSize = typedArrayInfoByName[constructorName].ElementSize;
    // 6. Let byteLength be elementSize × length.
    const byteLength = elementSize * length;
    // 7. Let data be ? AllocateArrayBuffer(%ArrayBuffer%, byteLength).
    let _temp7 = AllocateArrayBuffer(exports.surroundingAgent.intrinsic('%ArrayBuffer%'), byteLength);
    /* c8 ignore if */
    if (_temp7 instanceof AbruptCompletion) {
      return _temp7;
    }
    /* c8 ignore if */
    if (_temp7 instanceof Completion) {
      _temp7 = _temp7.Value;
    }
    const data = _temp7;
    // 8. Set O.[[ViewedArrayBuffer]] to data.
    O.ViewedArrayBuffer = data;
    // 9. Set O.[[ByteLength]] to byteLength.
    O.ByteLength = byteLength;
    // 10. Set O.[[ByteOffset]] to 0.
    O.ByteOffset = 0;
    // 11. Set O.[[ArrayLength]] to length.
    O.ArrayLength = length;
    // 12. Return O.
    return O;
  }

  // #typedarray-species-create
  function TypedArraySpeciesCreate(exemplar, argumentList) {
    // 1. Assert: exemplar is an Object that has [[TypedArrayName]] and [[ContentType]] internal slots.
    Assert(exemplar instanceof ObjectValue && 'TypedArrayName' in exemplar && 'ContentType' in exemplar, "exemplar instanceof ObjectValue\n         && 'TypedArrayName' in exemplar\n         && 'ContentType' in exemplar");
    // 2. Let defaultConstructor be the intrinsic object listed in column one of Table 61 for exemplar.[[TypedArrayName]].
    const defaultConstructor = exports.surroundingAgent.intrinsic(typedArrayInfoByName[exemplar.TypedArrayName.stringValue()].IntrinsicName);
    // 3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).
    let _temp8 = SpeciesConstructor(exemplar, defaultConstructor);
    /* c8 ignore if */
    if (_temp8 instanceof AbruptCompletion) {
      return _temp8;
    }
    /* c8 ignore if */
    if (_temp8 instanceof Completion) {
      _temp8 = _temp8.Value;
    }
    const constructor = _temp8;
    // 4. Let result be ? TypedArrayCreate(constructor, argumentList).
    let _temp9 = TypedArrayCreate(constructor, argumentList);
    /* c8 ignore if */
    if (_temp9 instanceof AbruptCompletion) {
      return _temp9;
    }
    /* c8 ignore if */
    if (_temp9 instanceof Completion) {
      _temp9 = _temp9.Value;
    }
    const result = _temp9;
    // 5. Assert: result has [[TypedArrayName]] and [[ContentType]] internal slots.
    Assert('TypedArrayName' in result && 'ContentType' in result, "'TypedArrayName' in result && 'ContentType' in result");
    // 6. If result.[[ContentType]] is not equal to exemplar.[[ContentType]], throw a TypeError exception.
    if (result.ContentType !== exemplar.ContentType) {
      return exports.surroundingAgent.Throw('TypeError', 'BufferContentTypeMismatch');
    }
    // 7. Return result.
    return result;
  }

  /** https://tc39.es/ecma262/#sec-iterabletolist */
  function IterableToList(items, method) {
    let _temp10 = GetIterator(items, 'sync', method);
    /* c8 ignore if */
    if (_temp10 instanceof AbruptCompletion) {
      return _temp10;
    }
    /* c8 ignore if */
    if (_temp10 instanceof Completion) {
      _temp10 = _temp10.Value;
    }
    // 1. Let iteratorRecord be ? GetIterator(items, sync, method).
    const iteratorRecord = _temp10;
    // 2. Let values be a new empty List.
    const values = [];
    // 3. Let next be true.
    let next = Value.true;
    // 4. Repeat, while next is not false
    while (next !== Value.false) {
      let _temp11 = IteratorStep(iteratorRecord);
      /* c8 ignore if */
      if (_temp11 instanceof AbruptCompletion) {
        return _temp11;
      }
      /* c8 ignore if */
      if (_temp11 instanceof Completion) {
        _temp11 = _temp11.Value;
      }
      // a. Set next to ? IteratorStep(iteratorRecord).
      next = _temp11;
      // b. If next is not false, then
      if (next !== Value.false) {
        let _temp12 = IteratorValue(next);
        /* c8 ignore if */
        if (_temp12 instanceof AbruptCompletion) {
          return _temp12;
        }
        /* c8 ignore if */
        if (_temp12 instanceof Completion) {
          _temp12 = _temp12.Value;
        }
        // i. Let nextValue be ? IteratorValue(next).
        const nextValue = _temp12;
        // ii. Append nextValue to the end of the List values.
        values.push(nextValue);
      }
    }
    // 5. Return values.
    return values;
  }

  /** https://tc39.es/ecma262/#sec-clear-kept-objects */
  function ClearKeptObjects() {
    // 1. Let agentRecord be the surrounding agent's Agent Record.
    const agentRecord = exports.surroundingAgent.AgentRecord;
    // 2. Set agentRecord.[[KeptAlive]] to a new empty List.
    agentRecord.KeptAlive = new Set();
  }

  /** https://tc39.es/ecma262/#sec-addtokeptobjects */
  function AddToKeptObjects(object) {
    // 1. Let agentRecord be the surrounding agent's Agent Record.
    const agentRecord = exports.surroundingAgent.AgentRecord;
    // 2. Append object to agentRecord.[[KeptAlive]].
    agentRecord.KeptAlive.add(object);
  }

  /** https://tc39.es/ecma262/#sec-weakrefderef */
  function WeakRefDeref(weakRef) {
    // 1. Let target be weakRef.[[WeakRefTarget]].
    const target = weakRef.WeakRefTarget;
    // 2. If target is not empty, then
    if (target !== undefined) {
      let _temp = AddToKeptObjects(target);
      Assert(!(_temp instanceof AbruptCompletion), "AddToKeptObjects(target)" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      // b. Return target.
      return target;
    }
    // 3. Return undefined.
    return Value.undefined;
  }

  /** https://tc39.es/ecma262/#sec-cleanup-finalization-registry */
  function CleanupFinalizationRegistry(finalizationRegistry, callback) {
    // 1. Assert: finalizationRegistry has [[Cells]] and [[CleanupCallback]] internal slots.
    Assert('Cells' in finalizationRegistry && 'CleanupCallback' in finalizationRegistry, "'Cells' in finalizationRegistry && 'CleanupCallback' in finalizationRegistry");
    // 2. Set callback to finalizationRegistry.[[CleanupCallback]].
    if (callback === undefined || callback === Value.undefined) {
      callback = finalizationRegistry.CleanupCallback;
    }
    // 3. While finalizationRegistry.[[Cells]] contains a Record cell such that cell.[[WeakRefTarget]] is empty, an implementation may perform the following steps:
    for (let i = 0; i < finalizationRegistry.Cells.length; i += 1) {
      // a. Choose any such _cell_.
      const cell = finalizationRegistry.Cells[i];
      if (cell.WeakRefTarget !== undefined) {
        continue;
      }
      // b. Remove cell from finalizationRegistry.[[Cells]].
      finalizationRegistry.Cells.splice(i, 1);
      i -= 1;
      // c. Perform ? HostCallJobCallback(callback, undefined, « cell.[[HeldValue]] »).
      let _temp2 = HostCallJobCallback(callback, Value.undefined, [cell.HeldValue]);
      /* c8 ignore if */
      if (_temp2 instanceof AbruptCompletion) {
        return _temp2;
      }
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
    }
    // 4. Return NormalCompletion(undefined).
    return NormalCompletion(Value.undefined);
  }

  const bareKeyRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/;
  function getObjectTag(value, wrap) {
    let s = '';
    try {
      let _temp = Get(value, wellKnownSymbols.toStringTag);
      Assert(!(_temp instanceof AbruptCompletion), "Get(value, wellKnownSymbols.toStringTag)" + ' returned an abrupt completion', "");
      /* c8 ignore if */
      if (_temp instanceof Completion) {
        _temp = _temp.Value;
      }
      s = _temp.stringValue();
    } catch {}
    try {
      let _temp2 = Get(value, Value('constructor'));
      Assert(!(_temp2 instanceof AbruptCompletion), "Get(value, Value('constructor'))" + ' returned an abrupt completion', "");
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      const c = _temp2;
      let _temp3 = Get(c, Value('name'));
      Assert(!(_temp3 instanceof AbruptCompletion), "Get(c, Value('name'))" + ' returned an abrupt completion', "");
      /* c8 ignore if */
      if (_temp3 instanceof Completion) {
        _temp3 = _temp3.Value;
      }
      s = _temp3.stringValue();
    } catch {}
    if (s) {
      if (wrap) {
        return `[${s}] `;
      }
      return s;
    }
    return '';
  }
  const compactObject = (realm, value) => {
    try {
      let _temp4 = Get(value, Value('toString'));
      Assert(!(_temp4 instanceof AbruptCompletion), "Get(value, Value('toString'))" + ' returned an abrupt completion', "");
      /* c8 ignore if */
      if (_temp4 instanceof Completion) {
        _temp4 = _temp4.Value;
      }
      const toString = _temp4;
      const objectToString = realm.Intrinsics['%Object.prototype.toString%'];
      if (toString.nativeFunction === objectToString.nativeFunction) {
        let _temp5 = Call(toString, value);
        Assert(!(_temp5 instanceof AbruptCompletion), "Call(toString, value)" + ' returned an abrupt completion', "");
        /* c8 ignore if */
        if (_temp5 instanceof Completion) {
          _temp5 = _temp5.Value;
        }
        return _temp5.stringValue();
      } else {
        const tag = getObjectTag(value, false) || 'Unknown';
        let _temp6 = Get(value, Value('constructor'));
        Assert(!(_temp6 instanceof AbruptCompletion), "Get(value, Value('constructor'))" + ' returned an abrupt completion', "");
        /* c8 ignore if */
        if (_temp6 instanceof Completion) {
          _temp6 = _temp6.Value;
        }
        const ctor = _temp6;
        if (ctor instanceof ObjectValue) {
          let _temp7 = Get(ctor, Value('name'));
          Assert(!(_temp7 instanceof AbruptCompletion), "Get(ctor, Value('name'))" + ' returned an abrupt completion', "");
          /* c8 ignore if */
          if (_temp7 instanceof Completion) {
            _temp7 = _temp7.Value;
          }
          const ctorName = _temp7.stringValue();
          if (ctorName !== '') {
            return `#<${ctorName}>`;
          }
          return `[object ${tag}]`;
        }
        return `[object ${tag}]`;
      }
    } catch (e) {
      return '[object Unknown]';
    }
  };
  const INSPECTORS = {
    Completion: (v, ctx, i) => i(v.Value),
    Null: () => 'null',
    Undefined: () => 'undefined',
    Boolean: v => v.booleanValue().toString(),
    Number: v => {
      const n = R(v);
      if (n === 0 && Object.is(n, -0)) {
        return '-0';
      }
      return n.toString();
    },
    BigInt: v => `${R(v)}n`,
    String: v => {
      const s = JSON.stringify(v.stringValue()).slice(1, -1);
      return `'${s}'`;
    },
    Symbol: v => `Symbol(${v.Description instanceof UndefinedValue ? '' : v.Description.stringValue()})`,
    PrivateName: v => v.Description.stringValue(),
    Object: (v, ctx, i) => {
      if (ctx.inspected.includes(v)) {
        return '[Circular]';
      }
      if ('PromiseState' in v) {
        ctx.indent += 1;
        const result = v.PromiseState === 'pending' ? 'undefined' : i(v.PromiseResult);
        ctx.indent -= 1;
        return `Promise {
  [[PromiseState]]: ${v.PromiseState}
  [[PromiseResult]]: ${result}
}`;
      }
      if ('Call' in v) {
        const name = v.properties.get(Value('name'));
        if (name !== undefined && name.Value.stringValue() !== '') {
          return `[Function: ${name.Value.stringValue()}]`;
        }
        return '[Function]';
      }
      if ('ErrorData' in v) {
        let _temp8 = Get(v, Value('stack'));
        /* c8 ignore if */
        if (_temp8 instanceof AbruptCompletion) {
          return _temp8;
        }
        /* c8 ignore if */
        if (_temp8 instanceof Completion) {
          _temp8 = _temp8.Value;
        }
        let e = _temp8;
        if (!e.stringValue) {
          let _temp9 = Get(v, Value('toString'));
          /* c8 ignore if */
          if (_temp9 instanceof AbruptCompletion) {
            return _temp9;
          }
          /* c8 ignore if */
          if (_temp9 instanceof Completion) {
            _temp9 = _temp9.Value;
          }
          const toString = _temp9;
          let _temp10 = Call(toString, v);
          Assert(!(_temp10 instanceof AbruptCompletion), "Call(toString, v)" + ' returned an abrupt completion');
          /* c8 ignore if */
          if (_temp10 instanceof Completion) {
            _temp10 = _temp10.Value;
          }
          e = _temp10;
        }
        return e.stringValue();
      }
      if ('RegExpMatcher' in v) {
        const P = EscapeRegExpPattern(v.OriginalSource, v.OriginalFlags).stringValue();
        const F = v.OriginalFlags.stringValue();
        return `/${P}/${F}`;
      }
      if ('DateValue' in v) {
        const d = new Date(R(v.DateValue));
        if (Number.isNaN(d.getTime())) {
          return '[Date Invalid]';
        }
        return `[Date ${d.toISOString()}]`;
      }
      if ('BooleanData' in v) {
        return `[Boolean ${i(v.BooleanData)}]`;
      }
      if ('NumberData' in v) {
        return `[Number ${i(v.NumberData)}]`;
      }
      if ('BigIntData' in v) {
        return `[BigInt ${i(v.BigIntData)}]`;
      }
      if ('StringData' in v) {
        return `[String ${i(v.StringData)}]`;
      }
      if ('SymbolData' in v) {
        return `[Symbol ${i(v.SymbolData)}]`;
      }
      ctx.indent += 1;
      ctx.inspected.push(v);
      try {
        const isArray = IsArray(v) === Value.true;
        const isTypedArray = ('TypedArrayName' in v);
        if (isArray || isTypedArray) {
          let _temp11 = LengthOfArrayLike(v);
          Assert(!(_temp11 instanceof AbruptCompletion), "LengthOfArrayLike(v)" + ' returned an abrupt completion', "");
          /* c8 ignore if */
          if (_temp11 instanceof Completion) {
            _temp11 = _temp11.Value;
          }
          const length = _temp11;
          let holes = 0;
          const flushHoles = () => {
            if (holes > 0) {
              out.push(`<${holes} empty items>`);
              holes = 0;
            }
          };
          const out = [];
          for (let j = 0; j < length; j += 1) {
            let _temp12 = v.GetOwnProperty(Value(j.toString()));
            Assert(!(_temp12 instanceof AbruptCompletion), "v.GetOwnProperty(Value(j.toString()))" + ' returned an abrupt completion', "");
            /* c8 ignore if */
            if (_temp12 instanceof Completion) {
              _temp12 = _temp12.Value;
            }
            const elem = _temp12;
            if (elem === Value.undefined) {
              holes += 1;
            } else {
              flushHoles();
              if (elem.Value) {
                out.push(i(elem.Value));
              } else {
                out.push('<accessor>');
              }
            }
          }
          flushHoles();
          return `${isTypedArray ? `${v.TypedArrayName.stringValue()} ` : ''}[${out.join(', ')}]`;
        }
        let _temp13 = v.OwnPropertyKeys();
        Assert(!(_temp13 instanceof AbruptCompletion), "v.OwnPropertyKeys()" + ' returned an abrupt completion', "");
        /* c8 ignore if */
        if (_temp13 instanceof Completion) {
          _temp13 = _temp13.Value;
        }
        const keys = _temp13;
        const cache = [];
        for (const key of keys) {
          let _temp14 = v.GetOwnProperty(key);
          Assert(!(_temp14 instanceof AbruptCompletion), "v.GetOwnProperty(key)" + ' returned an abrupt completion', "");
          /* c8 ignore if */
          if (_temp14 instanceof Completion) {
            _temp14 = _temp14.Value;
          }
          const C = _temp14;
          if (C.Enumerable === Value.true) {
            cache.push([key instanceof JSStringValue && bareKeyRe.test(key.stringValue()) ? key.stringValue() : i(key), C.Value ? i(C.Value) : '<accessor>']);
          }
        }
        const tag = getObjectTag(v);
        let out = tag && tag !== 'Object' ? `${tag} {` : '{';
        if (cache.length > 5) {
          cache.forEach(c => {
            out = `${out}\n${'  '.repeat(ctx.indent)}${c[0]}: ${c[1]},`;
          });
          return `${out}\n${'  '.repeat(ctx.indent - 1)}}`;
        } else {
          const oc = ctx.compact;
          ctx.compact = true;
          cache.forEach((c, index) => {
            out = `${out}${index === 0 ? '' : ','} ${c[0]}: ${c[1]}`;
          });
          ctx.compact = oc;
          return `${out} }`;
        }
      } catch {
        return compactObject(ctx, v);
      } finally {
        ctx.indent -= 1;
        ctx.inspected.pop();
      }
    }
  };
  function inspect(value) {
    const context = {
      realm: exports.surroundingAgent.currentRealmRecord,
      indent: 0,
      inspected: []
    };
    const inner = v => INSPECTORS[Type(v)](v, context, inner);
    return inner(value);
  }

  function Throw(type, template, ...templateArgs) {
    return exports.surroundingAgent.Throw(type, template, ...templateArgs);
  }

  /** https://tc39.es/ecma262/#sec-weakref-execution */
  function gc() {
    // At any time, if a set of objects S is not live, an ECMAScript implementation may perform the following steps atomically:
    // 1. For each obj of S, do
    //   a. For each WeakRef ref such that ref.[[WeakRefTarget]] is obj,
    //     i. Set ref.[[WeakRefTarget]] to empty.
    //   b. For each FinalizationRegistry fg such that fg.[[Cells]] contains cell, and cell.[[WeakRefTarget]] is obj,
    //     i. Set cell.[[WeakRefTarget]] to empty.
    //     ii. Optionally, perform ! HostEnqueueFinalizationRegistryCleanupJob(fg).
    //   c. For each WeakMap map such that map.WeakMapData contains a record r such that r.Key is obj,
    //     i. Set r.[[Key]] to empty.
    //     ii. Set r.[[Value]] to empty.
    //   d. For each WeakSet set such that set.[[WeakSetData]] contains obj,
    //     i. Replace the element of set whose value is obj with an element whose value is empty.

    const marked = new Set();
    const weakrefs = new Set();
    const fgs = new Set();
    const weakmaps = new Set();
    const weaksets = new Set();
    const ephemeronQueue = [];
    const markCb = O => {
      if (typeof O !== 'object' || O === null) {
        return;
      }
      if (marked.has(O)) {
        return;
      }
      marked.add(O);
      if ('WeakRefTarget' in O && !('HeldValue' in O)) {
        weakrefs.add(O);
        markCb(O.properties);
        markCb(O.Prototype);
      } else if ('Cells' in O) {
        fgs.add(O);
        markCb(O.properties);
        markCb(O.Prototype);
        O.Cells.forEach(cell => {
          markCb(cell.HeldValue);
        });
      } else if ('WeakMapData' in O) {
        weakmaps.add(O);
        markCb(O.properties);
        markCb(O.Prototype);
        O.WeakMapData.forEach(r => {
          ephemeronQueue.push(r);
        });
      } else if ('WeakSetData' in O) {
        weaksets.add(O);
        markCb(O.properties);
        markCb(O.Prototype);
      } else if (O.mark) {
        O.mark(markCb);
      }
    };
    markCb(exports.surroundingAgent);
    while (ephemeronQueue.length > 0) {
      const item = ephemeronQueue.shift();
      if (marked.has(item.Key)) {
        markCb(item.Value);
      }
    }
    weakrefs.forEach(ref => {
      if (!marked.has(ref.WeakRefTarget)) {
        ref.WeakRefTarget = undefined;
      }
    });
    fgs.forEach(fg => {
      let dirty = false;
      fg.Cells.forEach(cell => {
        if (!marked.has(cell.WeakRefTarget)) {
          cell.WeakRefTarget = undefined;
          dirty = true;
        }
      });
      if (dirty) {
        let _temp = HostEnqueueFinalizationRegistryCleanupJob(fg);
        Assert(!(_temp instanceof AbruptCompletion), "HostEnqueueFinalizationRegistryCleanupJob(fg)" + ' returned an abrupt completion');
        /* c8 ignore if */
        if (_temp instanceof Completion) {
          _temp = _temp.Value;
        }
      }
    });
    weakmaps.forEach(map => {
      map.WeakMapData.forEach(r => {
        if (!marked.has(r.Key)) {
          r.Key = undefined;
          r.Value = undefined;
        }
      });
    });
    weaksets.forEach(set => {
      set.WeakSetData.forEach((obj, i) => {
        if (!marked.has(obj)) {
          set.WeakSetData[i] = undefined;
        }
      });
    });
  }

  /** https://tc39.es/ecma262/#sec-jobs */
  function runJobQueue() {
    if (exports.surroundingAgent.executionContextStack.some(e => e.ScriptOrModule !== Value.null)) {
      return;
    }

    // At some future point in time, when there is no running execution context
    // and the execution context stack is empty, the implementation must:
    while (exports.surroundingAgent.jobQueue.length > 0) {
      // eslint-disable-line no-constant-condition
      const {
        job: abstractClosure,
        callerRealm,
        callerScriptOrModule
      } = exports.surroundingAgent.jobQueue.shift();

      // 1. Perform any implementation-defined preparation steps.
      const newContext = new ExecutionContext();
      exports.surroundingAgent.executionContextStack.push(newContext);
      newContext.Function = Value.null;
      newContext.Realm = callerRealm;
      newContext.ScriptOrModule = callerScriptOrModule;
      // 2. Call the abstract closure.
      let _temp2 = abstractClosure();
      Assert(!(_temp2 instanceof AbruptCompletion), "abstractClosure()" + ' returned an abrupt completion');
      /* c8 ignore if */
      if (_temp2 instanceof Completion) {
        _temp2 = _temp2.Value;
      }
      // 3. Perform any host-defined cleanup steps, after which the execution context stack must be empty.
      ClearKeptObjects();
      gc();
      exports.surroundingAgent.executionContextStack.pop(newContext);
    }
  }
  function evaluateScript(sourceText, realm, hostDefined) {
    const s = ParseScript(sourceText, realm, hostDefined);
    if (Array.isArray(s)) {
      return ThrowCompletion(s[0]);
    }
    return EnsureCompletion(ScriptEvaluation(s));
  }
  class ManagedRealm extends Realm {
    topContext;
    active = false;
    constructor(HostDefined = {}) {
      super();
      // CreateRealm()
      CreateIntrinsics(this);
      this.GlobalObject = Value.undefined;
      this.GlobalEnv = Value.undefined;
      this.TemplateMap = [];
      this.LoadedModules = [];

      // InitializeHostDefinedRealm()
      const newContext = new ExecutionContext();
      newContext.Function = Value.null;
      newContext.Realm = this;
      newContext.ScriptOrModule = Value.null;
      exports.surroundingAgent.executionContextStack.push(newContext);
      SetRealmGlobalObject(this, Value.undefined, Value.undefined);
      SetDefaultGlobalBindings(this);

      // misc
      exports.surroundingAgent.executionContextStack.pop(newContext);
      this.HostDefined = HostDefined;
      this.topContext = newContext;
    }
    scope(cb) {
      if (this.active) {
        return cb();
      }
      this.active = true;
      exports.surroundingAgent.executionContextStack.push(this.topContext);
      const r = cb();
      exports.surroundingAgent.executionContextStack.pop(this.topContext);
      this.active = false;
      return r;
    }
    evaluateScript(sourceText, {
      specifier
    } = {}) {
      if (typeof sourceText !== 'string') {
        throw new TypeError('sourceText must be a string');
      }
      const res = this.scope(() => {
        const realm = exports.surroundingAgent.currentRealmRecord;
        return evaluateScript(sourceText, realm, {
          specifier,
          public: {
            specifier
          }
        });
      });
      if (!(res instanceof AbruptCompletion)) {
        runJobQueue();
      }
      return res;
    }
    createSourceTextModule(specifier, sourceText) {
      if (typeof specifier !== 'string') {
        throw new TypeError('specifier must be a string');
      }
      if (typeof sourceText !== 'string') {
        throw new TypeError('sourceText must be a string');
      }
      const module = this.scope(() => ParseModule(sourceText, this, {
        specifier,
        SourceTextModuleRecord: ManagedSourceTextModuleRecord
      }));
      if (Array.isArray(module)) {
        return ThrowCompletion(module[0]);
      }
      return module;
    }
    createJSONModule(specifier, sourceText) {
      if (typeof specifier !== 'string') {
        throw new TypeError('specifier must be a string');
      }
      if (typeof sourceText !== 'string') {
        throw new TypeError('sourceText must be a string');
      }
      const module = this.scope(() => ParseJSONModule(Value(sourceText), this, {
        specifier
      }));
      return module;
    }
  }
  class ManagedSourceTextModuleRecord extends SourceTextModuleRecord {
    Evaluate() {
      const r = super.Evaluate();
      if (!(r instanceof AbruptCompletion)) {
        runJobQueue();
      }
      return r;
    }
  }

  exports.AbruptCompletion = AbruptCompletion;
  exports.AbstractEqualityComparison = AbstractEqualityComparison;
  exports.AbstractModuleRecord = AbstractModuleRecord;
  exports.AbstractRelationalComparison = AbstractRelationalComparison;
  exports.AddToKeptObjects = AddToKeptObjects;
  exports.Agent = Agent;
  exports.AgentSignifier = AgentSignifier;
  exports.AllocateArrayBuffer = AllocateArrayBuffer;
  exports.AllocateTypedArray = AllocateTypedArray;
  exports.AllocateTypedArrayBuffer = AllocateTypedArrayBuffer;
  exports.ApplyStringOrNumericBinaryOperator = ApplyStringOrNumericBinaryOperator;
  exports.ArgumentListEvaluation = ArgumentListEvaluation;
  exports.ArrayCreate = ArrayCreate;
  exports.ArraySetLength = ArraySetLength;
  exports.ArraySpeciesCreate = ArraySpeciesCreate;
  exports.Assert = Assert;
  exports.AsyncBlockStart = AsyncBlockStart;
  exports.AsyncFromSyncIteratorContinuation = AsyncFromSyncIteratorContinuation;
  exports.AsyncFunctionStart = AsyncFunctionStart;
  exports.AsyncGeneratorAwaitReturn = AsyncGeneratorAwaitReturn;
  exports.AsyncGeneratorEnqueue = AsyncGeneratorEnqueue;
  exports.AsyncGeneratorResume = AsyncGeneratorResume;
  exports.AsyncGeneratorStart = AsyncGeneratorStart;
  exports.AsyncGeneratorValidate = AsyncGeneratorValidate;
  exports.AsyncGeneratorYield = AsyncGeneratorYield;
  exports.AsyncIteratorClose = AsyncIteratorClose;
  exports.Await = Await;
  exports.BigIntValue = BigIntValue;
  exports.BinaryUnicodeProperties = BinaryUnicodeProperties;
  exports.BindingClassDeclarationEvaluation = BindingClassDeclarationEvaluation;
  exports.BindingInitialization = BindingInitialization;
  exports.BlockDeclarationInstantiation = BlockDeclarationInstantiation;
  exports.BodyText = BodyText;
  exports.BooleanValue = BooleanValue;
  exports.BoundNames = BoundNames;
  exports.BreakCompletion = BreakCompletion;
  exports.Call = Call;
  exports.CanonicalNumericIndexString = CanonicalNumericIndexString;
  exports.CharacterValue = CharacterValue;
  exports.ClassDefinitionEvaluation = ClassDefinitionEvaluation;
  exports.ClassFieldDefinitionEvaluation = ClassFieldDefinitionEvaluation;
  exports.ClassFieldDefinitionRecord = ClassFieldDefinitionRecord;
  exports.ClassStaticBlockDefinitionEvaluation = ClassStaticBlockDefinitionEvaluation;
  exports.ClassStaticBlockDefinitionRecord = ClassStaticBlockDefinitionRecord;
  exports.CleanupFinalizationRegistry = CleanupFinalizationRegistry;
  exports.ClearKeptObjects = ClearKeptObjects;
  exports.CloneArrayBuffer = CloneArrayBuffer;
  exports.CodePointAt = CodePointAt;
  exports.CodePointsToString = CodePointsToString;
  exports.CompletePropertyDescriptor = CompletePropertyDescriptor;
  exports.Completion = Completion;
  exports.Construct = Construct;
  exports.ConstructorMethod = ConstructorMethod;
  exports.ContainsArguments = ContainsArguments;
  exports.ContainsExpression = ContainsExpression;
  exports.ContinueCompletion = ContinueCompletion;
  exports.ContinueDynamicImport = ContinueDynamicImport;
  exports.ContinueModuleLoading = ContinueModuleLoading;
  exports.CopyDataBlockBytes = CopyDataBlockBytes;
  exports.CopyDataProperties = CopyDataProperties;
  exports.CreateArrayFromList = CreateArrayFromList;
  exports.CreateArrayIterator = CreateArrayIterator;
  exports.CreateAsyncFromSyncIterator = CreateAsyncFromSyncIterator;
  exports.CreateAsyncIteratorFromClosure = CreateAsyncIteratorFromClosure;
  exports.CreateBuiltinFunction = CreateBuiltinFunction;
  exports.CreateByteDataBlock = CreateByteDataBlock;
  exports.CreateDataProperty = CreateDataProperty;
  exports.CreateDataPropertyOrThrow = CreateDataPropertyOrThrow;
  exports.CreateDefaultExportSyntheticModule = CreateDefaultExportSyntheticModule;
  exports.CreateDynamicFunction = CreateDynamicFunction;
  exports.CreateIntrinsics = CreateIntrinsics;
  exports.CreateIterResultObject = CreateIterResultObject;
  exports.CreateIteratorFromClosure = CreateIteratorFromClosure;
  exports.CreateListFromArrayLike = CreateListFromArrayLike;
  exports.CreateListIteratorRecord = CreateListIteratorRecord;
  exports.CreateMappedArgumentsObject = CreateMappedArgumentsObject;
  exports.CreateMethodProperty = CreateMethodProperty;
  exports.CreateRealm = CreateRealm;
  exports.CreateResolvingFunctions = CreateResolvingFunctions;
  exports.CreateSyntheticModule = CreateSyntheticModule;
  exports.CreateUnmappedArgumentsObject = CreateUnmappedArgumentsObject;
  exports.CyclicModuleRecord = CyclicModuleRecord;
  exports.DataBlock = DataBlock;
  exports.DateFromTime = DateFromTime;
  exports.Day = Day;
  exports.DayFromYear = DayFromYear;
  exports.DayWithinYear = DayWithinYear;
  exports.DaysInYear = DaysInYear;
  exports.DeclarationPart = DeclarationPart;
  exports.DeclarativeEnvironmentRecord = DeclarativeEnvironmentRecord;
  exports.DefineField = DefineField;
  exports.DefineMethod = DefineMethod;
  exports.DefinePropertyOrThrow = DefinePropertyOrThrow;
  exports.DeletePropertyOrThrow = DeletePropertyOrThrow;
  exports.DestructuringAssignmentEvaluation = DestructuringAssignmentEvaluation;
  exports.DetachArrayBuffer = DetachArrayBuffer;
  exports.EnsureCompletion = EnsureCompletion;
  exports.EnumerableOwnPropertyNames = EnumerableOwnPropertyNames;
  exports.EnvironmentRecord = EnvironmentRecord;
  exports.EscapeRegExpPattern = EscapeRegExpPattern;
  exports.EvaluateBody = EvaluateBody;
  exports.EvaluateBody_AssignmentExpression = EvaluateBody_AssignmentExpression;
  exports.EvaluateBody_AsyncFunctionBody = EvaluateBody_AsyncFunctionBody;
  exports.EvaluateBody_AsyncGeneratorBody = EvaluateBody_AsyncGeneratorBody;
  exports.EvaluateBody_ConciseBody = EvaluateBody_ConciseBody;
  exports.EvaluateBody_FunctionBody = EvaluateBody_FunctionBody;
  exports.EvaluateBody_GeneratorBody = EvaluateBody_GeneratorBody;
  exports.EvaluateCall = EvaluateCall;
  exports.EvaluatePropertyAccessWithExpressionKey = EvaluatePropertyAccessWithExpressionKey;
  exports.EvaluatePropertyAccessWithIdentifierKey = EvaluatePropertyAccessWithIdentifierKey;
  exports.EvaluateStringOrNumericBinaryExpression = EvaluateStringOrNumericBinaryExpression;
  exports.Evaluate_AdditiveExpression = Evaluate_AdditiveExpression;
  exports.Evaluate_AnyFunctionBody = Evaluate_AnyFunctionBody;
  exports.Evaluate_ArrayLiteral = Evaluate_ArrayLiteral;
  exports.Evaluate_ArrowFunction = Evaluate_ArrowFunction;
  exports.Evaluate_AssignmentExpression = Evaluate_AssignmentExpression;
  exports.Evaluate_AsyncArrowFunction = Evaluate_AsyncArrowFunction;
  exports.Evaluate_AsyncFunctionExpression = Evaluate_AsyncFunctionExpression;
  exports.Evaluate_AsyncGeneratorExpression = Evaluate_AsyncGeneratorExpression;
  exports.Evaluate_AwaitExpression = Evaluate_AwaitExpression;
  exports.Evaluate_BinaryBitwiseExpression = Evaluate_BinaryBitwiseExpression;
  exports.Evaluate_BindingList = Evaluate_BindingList;
  exports.Evaluate_Block = Evaluate_Block;
  exports.Evaluate_BreakStatement = Evaluate_BreakStatement;
  exports.Evaluate_BreakableStatement = Evaluate_BreakableStatement;
  exports.Evaluate_CallExpression = Evaluate_CallExpression;
  exports.Evaluate_CaseClause = Evaluate_CaseClause;
  exports.Evaluate_ClassDeclaration = Evaluate_ClassDeclaration;
  exports.Evaluate_ClassExpression = Evaluate_ClassExpression;
  exports.Evaluate_CoalesceExpression = Evaluate_CoalesceExpression;
  exports.Evaluate_CommaOperator = Evaluate_CommaOperator;
  exports.Evaluate_ConditionalExpression = Evaluate_ConditionalExpression;
  exports.Evaluate_ContinueStatement = Evaluate_ContinueStatement;
  exports.Evaluate_DebuggerStatement = Evaluate_DebuggerStatement;
  exports.Evaluate_EmptyStatement = Evaluate_EmptyStatement;
  exports.Evaluate_EqualityExpression = Evaluate_EqualityExpression;
  exports.Evaluate_ExponentiationExpression = Evaluate_ExponentiationExpression;
  exports.Evaluate_ExportDeclaration = Evaluate_ExportDeclaration;
  exports.Evaluate_ExpressionBody = Evaluate_ExpressionBody;
  exports.Evaluate_ExpressionStatement = Evaluate_ExpressionStatement;
  exports.Evaluate_ForBinding = Evaluate_ForBinding;
  exports.Evaluate_FunctionDeclaration = Evaluate_FunctionDeclaration;
  exports.Evaluate_FunctionExpression = Evaluate_FunctionExpression;
  exports.Evaluate_FunctionStatementList = Evaluate_FunctionStatementList;
  exports.Evaluate_GeneratorExpression = Evaluate_GeneratorExpression;
  exports.Evaluate_HoistableDeclaration = Evaluate_HoistableDeclaration;
  exports.Evaluate_IdentifierReference = Evaluate_IdentifierReference;
  exports.Evaluate_IfStatement = Evaluate_IfStatement;
  exports.Evaluate_ImportCall = Evaluate_ImportCall;
  exports.Evaluate_ImportDeclaration = Evaluate_ImportDeclaration;
  exports.Evaluate_ImportMeta = Evaluate_ImportMeta;
  exports.Evaluate_LabelledStatement = Evaluate_LabelledStatement;
  exports.Evaluate_LexicalBinding = Evaluate_LexicalBinding;
  exports.Evaluate_LexicalDeclaration = Evaluate_LexicalDeclaration;
  exports.Evaluate_Literal = Evaluate_Literal;
  exports.Evaluate_LogicalANDExpression = Evaluate_LogicalANDExpression;
  exports.Evaluate_LogicalORExpression = Evaluate_LogicalORExpression;
  exports.Evaluate_MemberExpression = Evaluate_MemberExpression;
  exports.Evaluate_Module = Evaluate_Module;
  exports.Evaluate_ModuleBody = Evaluate_ModuleBody;
  exports.Evaluate_MultiplicativeExpression = Evaluate_MultiplicativeExpression;
  exports.Evaluate_NewExpression = Evaluate_NewExpression;
  exports.Evaluate_NewTarget = Evaluate_NewTarget;
  exports.Evaluate_ObjectLiteral = Evaluate_ObjectLiteral;
  exports.Evaluate_OptionalExpression = Evaluate_OptionalExpression;
  exports.Evaluate_ParenthesizedExpression = Evaluate_ParenthesizedExpression;
  exports.Evaluate_Pattern = Evaluate_Pattern;
  exports.Evaluate_PropertyName = Evaluate_PropertyName;
  exports.Evaluate_RegularExpressionLiteral = Evaluate_RegularExpressionLiteral;
  exports.Evaluate_RelationalExpression = Evaluate_RelationalExpression;
  exports.Evaluate_RelationalExpression_PrivateIdentifier = Evaluate_RelationalExpression_PrivateIdentifier;
  exports.Evaluate_ReturnStatement = Evaluate_ReturnStatement;
  exports.Evaluate_Script = Evaluate_Script;
  exports.Evaluate_ScriptBody = Evaluate_ScriptBody;
  exports.Evaluate_ShiftExpression = Evaluate_ShiftExpression;
  exports.Evaluate_StatementList = Evaluate_StatementList;
  exports.Evaluate_SuperCall = Evaluate_SuperCall;
  exports.Evaluate_SuperProperty = Evaluate_SuperProperty;
  exports.Evaluate_SwitchStatement = Evaluate_SwitchStatement;
  exports.Evaluate_TaggedTemplateExpression = Evaluate_TaggedTemplateExpression;
  exports.Evaluate_TemplateLiteral = Evaluate_TemplateLiteral;
  exports.Evaluate_This = Evaluate_This;
  exports.Evaluate_ThrowStatement = Evaluate_ThrowStatement;
  exports.Evaluate_TryStatement = Evaluate_TryStatement;
  exports.Evaluate_UnaryExpression = Evaluate_UnaryExpression;
  exports.Evaluate_UpdateExpression = Evaluate_UpdateExpression;
  exports.Evaluate_VariableDeclarationList = Evaluate_VariableDeclarationList;
  exports.Evaluate_VariableStatement = Evaluate_VariableStatement;
  exports.Evaluate_WithStatement = Evaluate_WithStatement;
  exports.Evaluate_YieldExpression = Evaluate_YieldExpression;
  exports.ExecutionContext = ExecutionContext;
  exports.ExpectedArgumentCount = ExpectedArgumentCount;
  exports.ExportEntries = ExportEntries;
  exports.ExportEntriesForModule = ExportEntriesForModule;
  exports.F = F;
  exports.FEATURES = FEATURES;
  exports.FinishLoadingImportedModule = FinishLoadingImportedModule;
  exports.FlagText = FlagText;
  exports.FromPropertyDescriptor = FromPropertyDescriptor;
  exports.FunctionDeclarationInstantiation = FunctionDeclarationInstantiation;
  exports.FunctionEnvironmentRecord = FunctionEnvironmentRecord;
  exports.GeneratorResume = GeneratorResume;
  exports.GeneratorResumeAbrupt = GeneratorResumeAbrupt;
  exports.GeneratorStart = GeneratorStart;
  exports.GeneratorValidate = GeneratorValidate;
  exports.GeneratorYield = GeneratorYield;
  exports.Get = Get;
  exports.GetActiveScriptOrModule = GetActiveScriptOrModule;
  exports.GetAsyncCycleRoot = GetAsyncCycleRoot;
  exports.GetFunctionRealm = GetFunctionRealm;
  exports.GetGeneratorKind = GetGeneratorKind;
  exports.GetGlobalObject = GetGlobalObject;
  exports.GetIdentifierReference = GetIdentifierReference;
  exports.GetImportedModule = GetImportedModule;
  exports.GetIterator = GetIterator;
  exports.GetMatchIndexPair = GetMatchIndexPair;
  exports.GetMatchString = GetMatchString;
  exports.GetMethod = GetMethod;
  exports.GetModuleNamespace = GetModuleNamespace;
  exports.GetNewTarget = GetNewTarget;
  exports.GetPrototypeFromConstructor = GetPrototypeFromConstructor;
  exports.GetStringIndex = GetStringIndex;
  exports.GetSubstitution = GetSubstitution;
  exports.GetThisEnvironment = GetThisEnvironment;
  exports.GetThisValue = GetThisValue;
  exports.GetV = GetV;
  exports.GetValue = GetValue;
  exports.GetValueFromBuffer = GetValueFromBuffer;
  exports.GetViewValue = GetViewValue;
  exports.GlobalDeclarationInstantiation = GlobalDeclarationInstantiation;
  exports.GlobalEnvironmentRecord = GlobalEnvironmentRecord;
  exports.GraphLoadingState = GraphLoadingState;
  exports.HasInitializer = HasInitializer;
  exports.HasName = HasName;
  exports.HasOwnProperty = HasOwnProperty;
  exports.HasProperty = HasProperty;
  exports.HostCallJobCallback = HostCallJobCallback;
  exports.HostEnqueueFinalizationRegistryCleanupJob = HostEnqueueFinalizationRegistryCleanupJob;
  exports.HostEnqueuePromiseJob = HostEnqueuePromiseJob;
  exports.HostEnsureCanCompileStrings = HostEnsureCanCompileStrings;
  exports.HostFinalizeImportMeta = HostFinalizeImportMeta;
  exports.HostGetImportMetaProperties = HostGetImportMetaProperties;
  exports.HostHasSourceTextAvailable = HostHasSourceTextAvailable;
  exports.HostLoadImportedModule = HostLoadImportedModule;
  exports.HostMakeJobCallback = HostMakeJobCallback;
  exports.HostPromiseRejectionTracker = HostPromiseRejectionTracker;
  exports.HourFromTime = HourFromTime;
  exports.HoursPerDay = HoursPerDay;
  exports.IfAbruptCloseIterator = IfAbruptCloseIterator;
  exports.IfAbruptRejectPromise = IfAbruptRejectPromise;
  exports.ImportEntries = ImportEntries;
  exports.ImportEntriesForModule = ImportEntriesForModule;
  exports.ImportedLocalNames = ImportedLocalNames;
  exports.InLeapYear = InLeapYear;
  exports.InitializeBoundName = InitializeBoundName;
  exports.InitializeInstanceElements = InitializeInstanceElements;
  exports.InitializeReferencedBinding = InitializeReferencedBinding;
  exports.InnerModuleEvaluation = InnerModuleEvaluation;
  exports.InnerModuleLinking = InnerModuleLinking;
  exports.InnerModuleLoading = InnerModuleLoading;
  exports.InstallErrorCause = InstallErrorCause;
  exports.InstanceofOperator = InstanceofOperator;
  exports.InstantiateArrowFunctionExpression = InstantiateArrowFunctionExpression;
  exports.InstantiateAsyncArrowFunctionExpression = InstantiateAsyncArrowFunctionExpression;
  exports.InstantiateAsyncFunctionExpression = InstantiateAsyncFunctionExpression;
  exports.InstantiateAsyncGeneratorFunctionExpression = InstantiateAsyncGeneratorFunctionExpression;
  exports.InstantiateFunctionObject = InstantiateFunctionObject;
  exports.InstantiateFunctionObject_AsyncFunctionDeclaration = InstantiateFunctionObject_AsyncFunctionDeclaration;
  exports.InstantiateFunctionObject_AsyncGeneratorDeclaration = InstantiateFunctionObject_AsyncGeneratorDeclaration;
  exports.InstantiateFunctionObject_FunctionDeclaration = InstantiateFunctionObject_FunctionDeclaration;
  exports.InstantiateFunctionObject_GeneratorDeclaration = InstantiateFunctionObject_GeneratorDeclaration;
  exports.InstantiateGeneratorFunctionExpression = InstantiateGeneratorFunctionExpression;
  exports.InstantiateOrdinaryFunctionExpression = InstantiateOrdinaryFunctionExpression;
  exports.IntegerIndexedDefineOwnProperty = IntegerIndexedDefineOwnProperty;
  exports.IntegerIndexedDelete = IntegerIndexedDelete;
  exports.IntegerIndexedElementGet = IntegerIndexedElementGet;
  exports.IntegerIndexedElementSet = IntegerIndexedElementSet;
  exports.IntegerIndexedGet = IntegerIndexedGet;
  exports.IntegerIndexedGetOwnProperty = IntegerIndexedGetOwnProperty;
  exports.IntegerIndexedHasProperty = IntegerIndexedHasProperty;
  exports.IntegerIndexedObjectCreate = IntegerIndexedObjectCreate;
  exports.IntegerIndexedOwnPropertyKeys = IntegerIndexedOwnPropertyKeys;
  exports.IntegerIndexedSet = IntegerIndexedSet;
  exports.Invoke = Invoke;
  exports.IsAccessorDescriptor = IsAccessorDescriptor;
  exports.IsAnonymousFunctionDefinition = IsAnonymousFunctionDefinition;
  exports.IsArray = IsArray;
  exports.IsBigIntElementType = IsBigIntElementType;
  exports.IsCallable = IsCallable;
  exports.IsCompatiblePropertyDescriptor = IsCompatiblePropertyDescriptor;
  exports.IsComputedPropertyKey = IsComputedPropertyKey;
  exports.IsConcatSpreadable = IsConcatSpreadable;
  exports.IsConstantDeclaration = IsConstantDeclaration;
  exports.IsConstructor = IsConstructor;
  exports.IsDataDescriptor = IsDataDescriptor;
  exports.IsDestructuring = IsDestructuring;
  exports.IsDetachedBuffer = IsDetachedBuffer;
  exports.IsExtensible = IsExtensible;
  exports.IsFunctionDefinition = IsFunctionDefinition;
  exports.IsGenericDescriptor = IsGenericDescriptor;
  exports.IsIdentifierRef = IsIdentifierRef;
  exports.IsInTailPosition = IsInTailPosition;
  exports.IsIntegralNumber = IsIntegralNumber;
  exports.IsPrivateReference = IsPrivateReference;
  exports.IsPromise = IsPromise;
  exports.IsPropertyKey = IsPropertyKey;
  exports.IsPropertyReference = IsPropertyReference;
  exports.IsRegExp = IsRegExp;
  exports.IsSharedArrayBuffer = IsSharedArrayBuffer;
  exports.IsSimpleParameterList = IsSimpleParameterList;
  exports.IsStatic = IsStatic;
  exports.IsStrict = IsStrict;
  exports.IsStringPrefix = IsStringPrefix;
  exports.IsStringWellFormedUnicode = IsStringWellFormedUnicode;
  exports.IsSuperReference = IsSuperReference;
  exports.IsUnresolvableReference = IsUnresolvableReference;
  exports.IsValidIntegerIndex = IsValidIntegerIndex;
  exports.IterableToList = IterableToList;
  exports.IteratorBindingInitialization_ArrayBindingPattern = IteratorBindingInitialization_ArrayBindingPattern;
  exports.IteratorBindingInitialization_FormalParameters = IteratorBindingInitialization_FormalParameters;
  exports.IteratorClose = IteratorClose;
  exports.IteratorComplete = IteratorComplete;
  exports.IteratorNext = IteratorNext;
  exports.IteratorStep = IteratorStep;
  exports.IteratorValue = IteratorValue;
  exports.JSStringValue = JSStringValue;
  exports.KeyedBindingInitialization = KeyedBindingInitialization;
  exports.LabelledEvaluation = LabelledEvaluation;
  exports.LengthOfArrayLike = LengthOfArrayLike;
  exports.LexicallyDeclaredNames = LexicallyDeclaredNames;
  exports.LexicallyScopedDeclarations = LexicallyScopedDeclarations;
  exports.LocalTZA = LocalTZA;
  exports.LocalTime = LocalTime;
  exports.MV_StringNumericLiteral = MV_StringNumericLiteral;
  exports.MakeBasicObject = MakeBasicObject;
  exports.MakeClassConstructor = MakeClassConstructor;
  exports.MakeConstructor = MakeConstructor;
  exports.MakeDate = MakeDate;
  exports.MakeDay = MakeDay;
  exports.MakeMatchIndicesIndexPairArray = MakeMatchIndicesIndexPairArray;
  exports.MakeMethod = MakeMethod;
  exports.MakePrivateReference = MakePrivateReference;
  exports.MakeTime = MakeTime;
  exports.ManagedRealm = ManagedRealm;
  exports.MethodDefinitionEvaluation = MethodDefinitionEvaluation;
  exports.MinFromTime = MinFromTime;
  exports.MinutesPerHour = MinutesPerHour;
  exports.ModuleEnvironmentRecord = ModuleEnvironmentRecord;
  exports.ModuleNamespaceCreate = ModuleNamespaceCreate;
  exports.ModuleRequests = ModuleRequests;
  exports.MonthFromTime = MonthFromTime;
  exports.NamedEvaluation = NamedEvaluation;
  exports.NewPromiseCapability = NewPromiseCapability;
  exports.NonConstructorElements = NonConstructorElements;
  exports.NonbinaryUnicodeProperties = NonbinaryUnicodeProperties;
  exports.NormalCompletion = NormalCompletion;
  exports.NullValue = NullValue;
  exports.NumberToBigInt = NumberToBigInt;
  exports.NumberValue = NumberValue;
  exports.NumericToRawBytes = NumericToRawBytes;
  exports.NumericValue = NumericValue;
  exports.ObjectEnvironmentRecord = ObjectEnvironmentRecord;
  exports.ObjectValue = ObjectValue;
  exports.OrdinaryCallBindThis = OrdinaryCallBindThis;
  exports.OrdinaryCallEvaluateBody = OrdinaryCallEvaluateBody;
  exports.OrdinaryCreateFromConstructor = OrdinaryCreateFromConstructor;
  exports.OrdinaryDefineOwnProperty = OrdinaryDefineOwnProperty;
  exports.OrdinaryDelete = OrdinaryDelete;
  exports.OrdinaryFunctionCreate = OrdinaryFunctionCreate;
  exports.OrdinaryGet = OrdinaryGet;
  exports.OrdinaryGetOwnProperty = OrdinaryGetOwnProperty;
  exports.OrdinaryGetPrototypeOf = OrdinaryGetPrototypeOf;
  exports.OrdinaryHasInstance = OrdinaryHasInstance;
  exports.OrdinaryHasProperty = OrdinaryHasProperty;
  exports.OrdinaryIsExtensible = OrdinaryIsExtensible;
  exports.OrdinaryObjectCreate = OrdinaryObjectCreate;
  exports.OrdinaryOwnPropertyKeys = OrdinaryOwnPropertyKeys;
  exports.OrdinaryPreventExtensions = OrdinaryPreventExtensions;
  exports.OrdinarySet = OrdinarySet;
  exports.OrdinarySetPrototypeOf = OrdinarySetPrototypeOf;
  exports.OrdinarySetWithOwnDescriptor = OrdinarySetWithOwnDescriptor;
  exports.OrdinaryToPrimitive = OrdinaryToPrimitive;
  exports.ParseJSONModule = ParseJSONModule;
  exports.ParseModule = ParseModule;
  exports.ParsePattern = ParsePattern;
  exports.ParseScript = ParseScript;
  exports.Parser = Parser;
  exports.PerformEval = PerformEval;
  exports.PerformPromiseThen = PerformPromiseThen;
  exports.PrepareForOrdinaryCall = PrepareForOrdinaryCall;
  exports.PrepareForTailCall = PrepareForTailCall;
  exports.PrimitiveValue = PrimitiveValue;
  exports.PrivateBoundIdentifiers = PrivateBoundIdentifiers;
  exports.PrivateElementFind = PrivateElementFind;
  exports.PrivateElementRecord = PrivateElementRecord;
  exports.PrivateEnvironmentRecord = PrivateEnvironmentRecord;
  exports.PrivateFieldAdd = PrivateFieldAdd;
  exports.PrivateGet = PrivateGet;
  exports.PrivateMethodOrAccessorAdd = PrivateMethodOrAccessorAdd;
  exports.PrivateName = PrivateName;
  exports.PrivateSet = PrivateSet;
  exports.PromiseCapabilityRecord = PromiseCapabilityRecord;
  exports.PromiseReactionRecord = PromiseReactionRecord;
  exports.PromiseResolve = PromiseResolve;
  exports.PropName = PropName;
  exports.PropertyBindingInitialization = PropertyBindingInitialization;
  exports.PropertyDefinitionEvaluation_PropertyDefinitionList = PropertyDefinitionEvaluation_PropertyDefinitionList;
  exports.ProxyCreate = ProxyCreate;
  exports.PutValue = PutValue;
  exports.Q = ReturnIfAbrupt;
  exports.R = R;
  exports.RawBytesToNumeric = RawBytesToNumeric;
  exports.Realm = Realm;
  exports.ReferenceRecord = ReferenceRecord;
  exports.RegExpAlloc = RegExpAlloc;
  exports.RegExpCreate = RegExpCreate;
  exports.RegExpHasFlag = RegExpHasFlag;
  exports.RegExpInitialize = RegExpInitialize;
  exports.RegExpParser = RegExpParser;
  exports.RegExpState = State;
  exports.RequireInternalSlot = RequireInternalSlot;
  exports.RequireObjectCoercible = RequireObjectCoercible;
  exports.ResolveBinding = ResolveBinding;
  exports.ResolvePrivateIdentifier = ResolvePrivateIdentifier;
  exports.ResolveThisBinding = ResolveThisBinding;
  exports.ResolvedBindingRecord = ResolvedBindingRecord;
  exports.RestBindingInitialization = RestBindingInitialization;
  exports.ReturnCompletion = ReturnCompletion;
  exports.ReturnIfAbrupt = ReturnIfAbrupt;
  exports.SameValue = SameValue;
  exports.SameValueNonNumber = SameValueNonNumber;
  exports.SameValueZero = SameValueZero;
  exports.ScriptEvaluation = ScriptEvaluation;
  exports.SecFromTime = SecFromTime;
  exports.SecondsPerMinute = SecondsPerMinute;
  exports.Set = Set$1;
  exports.SetDefaultGlobalBindings = SetDefaultGlobalBindings;
  exports.SetFunctionLength = SetFunctionLength;
  exports.SetFunctionName = SetFunctionName;
  exports.SetImmutablePrototype = SetImmutablePrototype;
  exports.SetIntegrityLevel = SetIntegrityLevel;
  exports.SetRealmGlobalObject = SetRealmGlobalObject;
  exports.SetValueInBuffer = SetValueInBuffer;
  exports.SetViewValue = SetViewValue;
  exports.SortCompare = SortCompare;
  exports.SourceTextModuleRecord = SourceTextModuleRecord;
  exports.SpeciesConstructor = SpeciesConstructor;
  exports.StrictEqualityComparison = StrictEqualityComparison;
  exports.StringCreate = StringCreate;
  exports.StringGetOwnProperty = StringGetOwnProperty;
  exports.StringIndexOf = StringIndexOf;
  exports.StringPad = StringPad;
  exports.StringToBigInt = StringToBigInt;
  exports.StringToCodePoints = StringToCodePoints;
  exports.StringValue = StringValue;
  exports.SymbolDescriptiveString = SymbolDescriptiveString;
  exports.SymbolValue = SymbolValue;
  exports.SyntheticModuleRecord = SyntheticModuleRecord;
  exports.TV = TV;
  exports.TemplateStrings = TemplateStrings;
  exports.TestIntegrityLevel = TestIntegrityLevel;
  exports.Throw = Throw;
  exports.ThrowCompletion = ThrowCompletion;
  exports.TimeClip = TimeClip;
  exports.TimeFromYear = TimeFromYear;
  exports.TimeWithinDay = TimeWithinDay;
  exports.ToBigInt = ToBigInt;
  exports.ToBigInt64 = ToBigInt64;
  exports.ToBigUint64 = ToBigUint64;
  exports.ToBoolean = ToBoolean;
  exports.ToIndex = ToIndex;
  exports.ToInt16 = ToInt16;
  exports.ToInt32 = ToInt32;
  exports.ToInt8 = ToInt8;
  exports.ToIntegerOrInfinity = ToIntegerOrInfinity;
  exports.ToLength = ToLength;
  exports.ToNumber = ToNumber;
  exports.ToNumeric = ToNumeric;
  exports.ToObject = ToObject;
  exports.ToPrimitive = ToPrimitive;
  exports.ToPropertyDescriptor = ToPropertyDescriptor;
  exports.ToPropertyKey = ToPropertyKey;
  exports.ToString = ToString;
  exports.ToUint16 = ToUint16;
  exports.ToUint32 = ToUint32;
  exports.ToUint8 = ToUint8;
  exports.ToUint8Clamp = ToUint8Clamp;
  exports.TopLevelLexicallyDeclaredNames = TopLevelLexicallyDeclaredNames;
  exports.TopLevelLexicallyScopedDeclarations = TopLevelLexicallyScopedDeclarations;
  exports.TopLevelVarDeclaredNames = TopLevelVarDeclaredNames;
  exports.TopLevelVarScopedDeclarations = TopLevelVarScopedDeclarations;
  exports.TrimString = TrimString;
  exports.Type = Type;
  exports.TypeForMethod = TypeForMethod;
  exports.TypedArrayCreate = TypedArrayCreate;
  exports.TypedArraySpeciesCreate = TypedArraySpeciesCreate;
  exports.UTC = UTC;
  exports.UTF16EncodeCodePoint = UTF16EncodeCodePoint;
  exports.UTF16SurrogatePairToCodePoint = UTF16SurrogatePairToCodePoint;
  exports.UndefinedValue = UndefinedValue;
  exports.UnicodeGeneralCategoryValues = UnicodeGeneralCategoryValues;
  exports.UnicodeMatchProperty = UnicodeMatchProperty;
  exports.UnicodeMatchPropertyValue = UnicodeMatchPropertyValue;
  exports.UnicodeScriptValues = UnicodeScriptValues;
  exports.UnicodeSets = UnicodeSets;
  exports.UpdateEmpty = UpdateEmpty;
  exports.ValidateAndApplyPropertyDescriptor = ValidateAndApplyPropertyDescriptor;
  exports.ValidateTypedArray = ValidateTypedArray;
  exports.Value = Value;
  exports.VarDeclaredNames = VarDeclaredNames;
  exports.VarScopedDeclarations = VarScopedDeclarations;
  exports.WeakRefDeref = WeakRefDeref;
  exports.WeekDay = WeekDay;
  exports.X = X;
  exports.YearFromTime = YearFromTime;
  exports.Yield = Yield;
  exports.Z = Z;
  exports.evaluateScript = evaluateScript;
  exports.gc = gc;
  exports.generatorBrandToErrorMessageType = generatorBrandToErrorMessageType;
  exports.getUnicodePropertyValueSet = getUnicodePropertyValueSet;
  exports.inspect = inspect;
  exports.isArrayExoticObject = isArrayExoticObject;
  exports.isArrayIndex = isArrayIndex;
  exports.isECMAScriptFunctionObject = isECMAScriptFunctionObject;
  exports.isFunctionObject = isFunctionObject;
  exports.isIntegerIndex = isIntegerIndex;
  exports.isIntegerIndexedExoticObject = isIntegerIndexedExoticObject;
  exports.isNonNegativeInteger = isNonNegativeInteger;
  exports.isProxyExoticObject = isProxyExoticObject;
  exports.isStrictModeCode = isStrictModeCode;
  exports.msFromTime = msFromTime;
  exports.msPerAverageYear = msPerAverageYear;
  exports.msPerDay = msPerDay;
  exports.msPerHour = msPerHour;
  exports.msPerMinute = msPerMinute;
  exports.msPerSecond = msPerSecond;
  exports.refineLeftHandSideExpression = refineLeftHandSideExpression;
  exports.runJobQueue = runJobQueue;
  exports.setSurroundingAgent = setSurroundingAgent;
  exports.sourceTextMatchedBy = sourceTextMatchedBy;
  exports.typedArrayInfoByName = typedArrayInfoByName;
  exports.typedArrayInfoByType = typedArrayInfoByType;
  exports.wellKnownSymbols = wellKnownSymbols;
  exports.wrappedParse = wrappedParse;

}));
//# sourceMappingURL=engine262.js.map
